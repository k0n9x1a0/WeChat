// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.15.3
// source: mm.proto

package mm

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SnsMediaType int32

const (
	SnsMediaType_MMSNS_DATA_TEXT  SnsMediaType = 1
	SnsMediaType_MMSNS_DATA_PHOTO SnsMediaType = 2
	SnsMediaType_MMSNS_DATA_VOICE SnsMediaType = 3
	SnsMediaType_MMSNS_DATA_VIDEO SnsMediaType = 4
	SnsMediaType_MMSNS_DATA_MUSIC SnsMediaType = 5
	SnsMediaType_MMSNS_DATA_SIGHT SnsMediaType = 6
)

// Enum value maps for SnsMediaType.
var (
	SnsMediaType_name = map[int32]string{
		1: "MMSNS_DATA_TEXT",
		2: "MMSNS_DATA_PHOTO",
		3: "MMSNS_DATA_VOICE",
		4: "MMSNS_DATA_VIDEO",
		5: "MMSNS_DATA_MUSIC",
		6: "MMSNS_DATA_SIGHT",
	}
	SnsMediaType_value = map[string]int32{
		"MMSNS_DATA_TEXT":  1,
		"MMSNS_DATA_PHOTO": 2,
		"MMSNS_DATA_VOICE": 3,
		"MMSNS_DATA_VIDEO": 4,
		"MMSNS_DATA_MUSIC": 5,
		"MMSNS_DATA_SIGHT": 6,
	}
)

func (x SnsMediaType) Enum() *SnsMediaType {
	p := new(SnsMediaType)
	*p = x
	return p
}

func (x SnsMediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SnsMediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_mm_proto_enumTypes[0].Descriptor()
}

func (SnsMediaType) Type() protoreflect.EnumType {
	return &file_mm_proto_enumTypes[0]
}

func (x SnsMediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SnsMediaType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SnsMediaType(num)
	return nil
}

// Deprecated: Use SnsMediaType.Descriptor instead.
func (SnsMediaType) EnumDescriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{0}
}

type SnsObjectOpType int32

const (
	SnsObjectOpType_MMSNS_OBJECTOP_CANCEL_LIKE    SnsObjectOpType = 5
	SnsObjectOpType_MMSNS_OBJECTOP_DEL            SnsObjectOpType = 1
	SnsObjectOpType_MMSNS_OBJECTOP_DELETE_COMMENT SnsObjectOpType = 4
	SnsObjectOpType_MMSNS_OBJECTOP_SET_OPEN       SnsObjectOpType = 3
	SnsObjectOpType_MMSNS_OBJECTOP_SET_PRIVACY    SnsObjectOpType = 2
)

// Enum value maps for SnsObjectOpType.
var (
	SnsObjectOpType_name = map[int32]string{
		5: "MMSNS_OBJECTOP_CANCEL_LIKE",
		1: "MMSNS_OBJECTOP_DEL",
		4: "MMSNS_OBJECTOP_DELETE_COMMENT",
		3: "MMSNS_OBJECTOP_SET_OPEN",
		2: "MMSNS_OBJECTOP_SET_PRIVACY",
	}
	SnsObjectOpType_value = map[string]int32{
		"MMSNS_OBJECTOP_CANCEL_LIKE":    5,
		"MMSNS_OBJECTOP_DEL":            1,
		"MMSNS_OBJECTOP_DELETE_COMMENT": 4,
		"MMSNS_OBJECTOP_SET_OPEN":       3,
		"MMSNS_OBJECTOP_SET_PRIVACY":    2,
	}
)

func (x SnsObjectOpType) Enum() *SnsObjectOpType {
	p := new(SnsObjectOpType)
	*p = x
	return p
}

func (x SnsObjectOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SnsObjectOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_mm_proto_enumTypes[1].Descriptor()
}

func (SnsObjectOpType) Type() protoreflect.EnumType {
	return &file_mm_proto_enumTypes[1]
}

func (x SnsObjectOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SnsObjectOpType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SnsObjectOpType(num)
	return nil
}

// Deprecated: Use SnsObjectOpType.Descriptor instead.
func (SnsObjectOpType) EnumDescriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{1}
}


var fileDescriptor_072c1ef9e72c0732 = []byte{
	// 571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x95, 0x1b, 0xda, 0x26, 0xe3, 0xa4, 0x48, 0x2b, 0x04, 0x26, 0x2d, 0x28, 0xb2, 0x38, 0xf4,
	0x14, 0xa4, 0x5c, 0x40, 0xaa, 0x40, 0x6a, 0x88, 0x20, 0x11, 0x2d, 0x87, 0x4d, 0x51, 0xa5, 0x5e,
	0x90, 0x6b, 0x4f, 0xf1, 0x0a, 0xc7, 0xbb, 0x78, 0xd7, 0x85, 0x7e, 0x05, 0xdf, 0xc6, 0x91, 0xbf,
	0xe0, 0x13, 0x90, 0x77, 0xed, 0x78, 0x37, 0x4a, 0x6f, 0xdc, 0xf2, 0x66, 0xde, 0xce, 0x9b, 0x79,
	0x7e, 0x81, 0x03, 0xfc, 0x89, 0x45, 0xcc, 0x24, 0x8e, 0x45, 0xc1, 0x15, 0x27, 0xfd, 0x1f, 0x18,
	0xa7, 0x91, 0xfa, 0xa2, 0xd1, 0xb0, 0x46, 0xa6, 0x17, 0xfe, 0xf2, 0x60, 0x70, 0xce, 0x93, 0x79,
	0x54, 0x24, 0x33, 0xbc, 0x65, 0x31, 0x92, 0xd7, 0x00, 0xe9, 0x1a, 0x05, 0xde, 0xc8, 0x3b, 0xf6,
	0x27, 0xc1, 0xd8, 0x1e, 0x31, 0x6e, 0xd9, 0xd4, 0xe2, 0x92, 0x19, 0x1c, 0xb4, 0xe8, 0x54, 0xa9,
	0x22, 0xd8, 0xd1, 0xaf, 0x8f, 0xee, 0x7b, 0x5d, 0x71, 0xe8, 0xc6, 0x9b, 0x70, 0x0e, 0x60, 0x6d,
	0xf3, 0x1c, 0x20, 0xd1, 0xbf, 0x2e, 0xee, 0x84, 0xd9, 0xa6, 0x47, 0xad, 0x0a, 0x19, 0x42, 0xd7,
	0xa0, 0x45, 0xa2, 0xd5, 0x7a, 0x74, 0x8d, 0xc3, 0x39, 0x1c, 0xb8, 0x5a, 0xe4, 0x08, 0x7a, 0xd7,
	0x45, 0x94, 0x27, 0x9f, 0xa2, 0x55, 0x33, 0xac, 0x2d, 0x90, 0x00, 0xf6, 0xa3, 0x52, 0xa5, 0x1f,
	0xf1, 0xae, 0x1e, 0xd5, 0xc0, 0x50, 0xc2, 0xf0, 0x03, 0xaa, 0x29, 0x2f, 0x73, 0xcb, 0x29, 0x49,
	0xf1, 0x7b, 0x89, 0x52, 0x91, 0x13, 0xf0, 0xa7, 0x91, 0xc4, 0x1a, 0x06, 0xde, 0x68, 0xe7, 0xd8,
	0x9f, 0x3c, 0x75, 0x8f, 0xb6, 0x08, 0xd4, 0x66, 0x57, 0xa2, 0xb7, 0x58, 0x48, 0xc6, 0x73, 0x2d,
	0x3a, 0xa0, 0x0d, 0x0c, 0xff, 0x7a, 0x70, 0xb8, 0x55, 0x55, 0x0a, 0x9e, 0x4b, 0x24, 0x6f, 0xa1,
	0x6f, 0x06, 0x19, 0x5c, 0xeb, 0x0e, 0xb7, 0xe9, 0x1a, 0x06, 0x75, 0xf8, 0xe4, 0x11, 0xec, 0xc6,
	0xbc, 0xcc, 0x55, 0xad, 0x6b, 0x00, 0x39, 0x69, 0x0c, 0x3f, 0x63, 0x52, 0x05, 0x9d, 0x51, 0xe7,
	0xd8, 0x9f, 0x1c, 0xba, 0x33, 0x9d, 0xbc, 0x50, 0x8b, 0x6e, 0x1f, 0xf3, 0xc0, 0x39, 0x86, 0xbc,
	0x80, 0x81, 0x9e, 0xcf, 0xf2, 0x12, 0xdf, 0x67, 0xd1, 0xd7, 0x60, 0x57, 0xf7, 0xdd, 0x62, 0xf8,
	0xa7, 0x03, 0x4f, 0x3e, 0x8b, 0x8c, 0x47, 0xf5, 0xf0, 0xa5, 0x42, 0xf1, 0x5f, 0x5c, 0x6e, 0x63,
	0x32, 0xdb, 0x88, 0xc9, 0x6c, 0x23, 0x62, 0x9d, 0x6d, 0x11, 0xbb, 0x29, 0xf8, 0xea, 0x82, 0xad,
	0xb0, 0xbe, 0x6a, 0x8d, 0xc9, 0x63, 0xd8, 0x53, 0x5c, 0x77, 0xcc, 0x3d, 0x35, 0xaa, 0x82, 0x26,
	0x15, 0x8a, 0x77, 0xda, 0xdf, 0x3d, 0xdd, 0x6a, 0x0b, 0xd5, 0x44, 0xc5, 0x56, 0x78, 0xc5, 0x73,
	0x0c, 0xf6, 0xcd, 0x36, 0x0d, 0xae, 0x7a, 0xd7, 0x65, 0x9e, 0x64, 0xc8, 0x92, 0xa0, 0x6b, 0x7a,
	0x0d, 0xd6, 0x01, 0x15, 0x22, 0xaf, 0xc2, 0xdb, 0xab, 0x03, 0x6a, 0x20, 0x19, 0x81, 0xbf, 0x7a,
	0xb5, 0x5c, 0x2b, 0x82, 0x56, 0xb4, 0x4b, 0xd5, 0x95, 0x22, 0xe5, 0x39, 0x9e, 0xf3, 0x04, 0xb3,
	0xc0, 0xd7, 0x04, 0xab, 0x42, 0xde, 0x34, 0x2e, 0x2c, 0xf2, 0x1b, 0x1e, 0xf4, 0xf5, 0x1f, 0xf7,
	0x99, 0xeb, 0xee, 0x52, 0xf0, 0x42, 0xcd, 0xd6, 0x24, 0x6a, 0x3d, 0xa8, 0x16, 0x48, 0xbf, 0xb5,
	0x0b, 0x0c, 0xcc, 0x02, 0x56, 0x29, 0xfc, 0xed, 0xc1, 0xc3, 0x8d, 0x09, 0xce, 0xb1, 0xde, 0xfd,
	0xc7, 0xee, 0xb8, 0xc7, 0x3a, 0xe6, 0x76, 0x36, 0xcd, 0x0d, 0xa1, 0xcf, 0xe4, 0xa9, 0x10, 0x19,
	0x5e, 0x46, 0x2a, 0x4e, 0xf5, 0x27, 0xeb, 0x52, 0xa7, 0x56, 0x6d, 0xcb, 0xe4, 0x65, 0xca, 0x94,
	0x49, 0xf9, 0xae, 0xa6, 0xd8, 0xa5, 0x2a, 0xaf, 0x4c, 0x9e, 0xf1, 0x38, 0xca, 0x16, 0xda, 0x24,
	0xfd, 0x11, 0xbb, 0xd4, 0x2d, 0x4e, 0xfd, 0xab, 0xde, 0x78, 0xfc, 0xd2, 0x98, 0xf4, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0x29, 0x93, 0xf1, 0x9c, 0x77, 0x05, 0x00, 0x00,
}

var fileDescriptor_e74b134486e7456c = []byte{
	// 14581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0xbd, 0x6b, 0x8c, 0x1c, 0x49,
	0x72, 0x18, 0xac, 0xee, 0x99, 0x9e, 0x9e, 0x8e, 0xe9, 0x9e, 0x47, 0x71, 0x48, 0x36, 0xb9, 0x24,
	0x97, 0x5b, 0xbb, 0xc7, 0xe3, 0xed, 0xf1, 0x78, 0xdc, 0xb9, 0xe3, 0x2e, 0x6f, 0x77, 0x6f, 0xf7,
	0xe6, 0x41, 0x2e, 0x67, 0xc9, 0x21, 0xe7, 0xaa, 0x39, 0xe4, 0xde, 0xe9, 0xd1, 0x5f, 0x4d, 0x57,
	0x4e, 0x4f, 0xed, 0x74, 0x57, 0x35, 0xab, 0xaa, 0xe7, 0xb1, 0xf8, 0x80, 0x4f, 0xfa, 0xf4, 0xc7,
	0x0f, 0x08, 0x96, 0x2c, 0xf8, 0xa4, 0x83, 0xad, 0x1f, 0x86, 0x64, 0x1b, 0xb2, 0xfd, 0xc3, 0x80,
	0x04, 0x5b, 0x96, 0x2c, 0x19, 0xb0, 0x60, 0x18, 0x30, 0x60, 0xd9, 0x80, 0xfc, 0xfa, 0x61, 0x43,
	0x86, 0x0c, 0xc3, 0x90, 0x05, 0xdb, 0x10, 0x6c, 0x58, 0x12, 0x0c, 0x01, 0x46, 0x44, 0x64, 0x56,
	0x65, 0x55, 0x57, 0xcf, 0xf4, 0x2c, 0x7b, 0xef, 0x6c, 0xff, 0xab, 0x8c, 0x8c, 0xcc, 0xca, 0x47,
	0x64, 0x66, 0xbc, 0x32, 0x12, 0xaa, 0x07, 0xa2, 0xb5, 0x6b, 0x47, 0x37, 0x7b, 0x81, 0x1f, 0xf9,
	0x86, 0x4c, 0x35, 0x29, 0x65, 0xfe, 0xdd, 0x22, 0x9c, 0x79, 0xe8, 0xb7, 0x5d, 0xef, 0x9b, 0xd6,
	0xaa, 0xef, 0x08, 0x4b, 0x84, 0x3d, 0xdf, 0x0b, 0x85, 0xf1, 0x1e, 0x54, 0xb7, 0xed, 0x30, 0x4e,
	0xd7, 0x0b, 0x57, 0x0b, 0xd7, 0x67, 0x96, 0x2e, 0xde, 0xd4, 0x0b, 0xdf, 0x5c, 0xd1, 0x30, 0xac,
	0x14, 0xbe, 0x71, 0x03, 0xa6, 0x9e, 0x07, 0x2d, 0xdf, 0x11, 0xf5, 0x22, 0x95, 0x5c, 0x4c, 0x97,
	0x94, 0x7f, 0x93, 0x38, 0x86, 0x01, 0x93, 0xfd, 0xbe, 0xeb, 0xd4, 0x27, 0xae, 0x16, 0xae, 0x57,
	0x2c, 0xfa, 0x36, 0x2e, 0x41, 0xa5, 0xb5, 0x2b, 0x5a, 0x7b, 0x4f, 0xdc, 0xae, 0xa8, 0x4f, 0x5e,
	0x2d, 0x5c, 0x9f, 0xb4, 0x12, 0x80, 0x71, 0x0d, 0x26, 0x6c, 0x11, 0xd6, 0x4b, 0x79, 0x95, 0x2f,
	0xdf, 0x6d, 0x3c, 0x10, 0x47, 0x16, 0x22, 0x18, 0x57, 0x61, 0x46, 0x1c, 0xf6, 0xdc, 0x40, 0x38,
	0x54, 0xcf, 0x14, 0xd5, 0xa3, 0x83, 0x8c, 0x3b, 0x70, 0x7e, 0xbb, 0xef, 0x76, 0x9c, 0x27, 0xbe,
	0x1f, 0xed, 0xae, 0x04, 0xbe, 0xed, 0xac, 0xda, 0x61, 0xb4, 0x85, 0xcd, 0x29, 0x53, 0x73, 0x86,
	0x65, 0x9b, 0xef, 0xc3, 0x42, 0xe3, 0xc1, 0x4a, 0xdf, 0xed, 0x44, 0xae, 0xb7, 0xd2, 0xdf, 0xd9,
	0x11, 0x41, 0x33, 0xc2, 0xae, 0xb8, 0x0f, 0x85, 0x47, 0x03, 0x56, 0xb3, 0xe8, 0xdb, 0x38, 0x07,
	0x53, 0xdb, 0x94, 0x4f, 0x83, 0x51, 0xb5, 0x64, 0xca, 0x7c, 0x17, 0xe6, 0xe3, 0x0a, 0x1a, 0x51,
	0xe0, 0x7a, 0xed, 0xa6, 0x31, 0x0f, 0x13, 0x9d, 0xb8, 0x38, 0x7e, 0x0e, 0x2d, 0xfd, 0x2a, 0xcc,
	0x65, 0x4a, 0x63, 0xe1, 0x30, 0x0a, 0xa8, 0x70, 0xc5, 0xc2, 0x4f, 0xf3, 0x4d, 0x98, 0xce, 0x69,
	0x5a, 0x51, 0x6f, 0xda, 0x4a, 0xaa, 0x72, 0x4e, 0x99, 0x26, 0x4c, 0xcb, 0x16, 0x45, 0x88, 0xc3,
	0xdf, 0xb2, 0x62, 0x99, 0x32, 0x6f, 0xc0, 0x14, 0xcf, 0x63, 0x4e, 0xa3, 0xb1, 0x25, 0x41, 0x4b,
	0x56, 0x8a, 0x9f, 0xe6, 0x33, 0xa8, 0xea, 0xf4, 0x82, 0x18, 0x81, 0x88, 0xa8, 0x4c, 0xc9, 0xc2,
	0x4f, 0xe3, 0x36, 0x4c, 0x89, 0x20, 0xd8, 0x08, 0xdb, 0x92, 0x66, 0x2e, 0xa7, 0xa7, 0x35, 0xd3,
	0x59, 0x4b, 0x22, 0x9b, 0xbf, 0x54, 0x80, 0x19, 0xae, 0xf9, 0x79, 0x5f, 0x84, 0x91, 0xf1, 0x32,
	0xcc, 0x84, 0x22, 0x0c, 0x5d, 0xdf, 0x6b, 0xee, 0x89, 0x23, 0xfa, 0x41, 0xd5, 0x02, 0x09, 0x7a,
	0x20, 0x8e, 0xf0, 0xcf, 0x7d, 0xd7, 0xa3, 0x9f, 0xd4, 0x2c, 0xfc, 0x34, 0x5e, 0x82, 0x8a, 0x23,
	0xf6, 0xdd, 0x96, 0x68, 0x4a, 0x22, 0xac, 0x5a, 0xd3, 0x0c, 0x58, 0x77, 0x8c, 0xcf, 0xc1, 0x6c,
	0xab, 0xe3, 0x0a, 0x2f, 0x6a, 0xee, 0x8b, 0x00, 0xeb, 0x20, 0x6a, 0xac, 0x59, 0x35, 0x86, 0x3e,
	0x65, 0xa0, 0x71, 0x1e, 0xca, 0x7e, 0xd8, 0x8c, 0x8e, 0x7a, 0x82, 0xa8, 0xb2, 0x62, 0x4d, 0xf9,
	0xe1, 0x93, 0xa3, 0x9e, 0x30, 0x16, 0xa1, 0x14, 0xb6, 0x84, 0xc7, 0xc4, 0x57, 0xb3, 0x38, 0x81,
	0x83, 0x67, 0x35, 0x96, 0x37, 0x45, 0x37, 0x7f, 0xf0, 0x7a, 0xa2, 0x4b, 0x0d, 0xac, 0x58, 0xf8,
	0x89, 0xd8, 0x4c, 0xd5, 0xf9, 0xd8, 0xd8, 0x4f, 0x39, 0xd4, 0x7b, 0xe2, 0xc8, 0xbc, 0x05, 0xd0,
	0x48, 0x75, 0xf7, 0xc4, 0x12, 0x6f, 0xc0, 0x4c, 0x23, 0x3a, 0xea, 0x88, 0x07, 0xe2, 0xe8, 0xa9,
	0xdd, 0x51, 0x08, 0xb2, 0xc8, 0x1e, 0x57, 0xb2, 0x6f, 0x77, 0x54, 0x93, 0xf6, 0xed, 0x0e, 0xce,
	0x67, 0x63, 0xd7, 0x3f, 0x50, 0xc5, 0x8c, 0x8b, 0x30, 0xbd, 0x27, 0x8e, 0x56, 0xfd, 0xbe, 0x17,
	0xc9, 0x82, 0x71, 0xda, 0xf8, 0xa2, 0xfa, 0xe1, 0xc4, 0xf5, 0x99, 0xa5, 0x0b, 0x99, 0x69, 0x4d,
	0xfe, 0xcb, 0x6d, 0xf1, 0x61, 0x51, 0xdb, 0x91, 0x1e, 0xf9, 0x91, 0xbb, 0x73, 0xb4, 0xb9, 0xd7,
	0x36, 0xde, 0x87, 0x19, 0x8f, 0x12, 0x4d, 0xc7, 0x8e, 0x6c, 0xb9, 0x23, 0x5d, 0x39, 0x96, 0x46,
	0x9a, 0x16, 0x70, 0x91, 0x35, 0x3b, 0xb2, 0x91, 0x8e, 0xfd, 0x5e, 0xbc, 0x27, 0xd5, 0x2c, 0x99,
	0x32, 0x7f, 0xaf, 0x08, 0x46, 0x6a, 0x0f, 0x64, 0x3a, 0x7a, 0x97, 0xb7, 0xc0, 0x66, 0xc0, 0x69,
	0xf9, 0xc3, 0x0b, 0x79, 0x5b, 0x20, 0x21, 0x58, 0x33, 0xdb, 0x1a, 0x15, 0xca, 0x0d, 0xaa, 0x78,
	0xd2, 0x06, 0x95, 0x34, 0x6a, 0x42, 0x6f, 0x14, 0x52, 0xb1, 0x24, 0x49, 0xcf, 0x96, 0x1b, 0x60,
	0xc5, 0x02, 0x06, 0x3d, 0xb2, 0xbb, 0x02, 0x69, 0xb6, 0x1f, 0x8a, 0x80, 0xb3, 0x99, 0xe2, 0xa6,
	0x11, 0x40, 0x99, 0x5f, 0x04, 0x43, 0x1c, 0x46, 0x4d, 0x47, 0xec, 0x37, 0x3b, 0xd8, 0x33, 0xa6,
	0x4b, 0x26, 0xc0, 0x39, 0x71, 0x18, 0xad, 0x89, 0x7d, 0xea, 0x31, 0x11, 0xe8, 0xe7, 0x60, 0x76,
	0xd7, 0x0e, 0x9c, 0x03, 0x3b, 0x10, 0x4d, 0x71, 0x18, 0x05, 0xb6, 0xdc, 0xf8, 0x6a, 0x0a, 0x7a,
	0x17, 0x81, 0xf8, 0xc3, 0xd0, 0xdf, 0x89, 0xb8, 0xaa, 0x69, 0xfe, 0x21, 0x02, 0xa8, 0x8e, 0x6b,
	0x30, 0x11, 0x84, 0x76, 0xbd, 0x92, 0xd7, 0x5d, 0xa6, 0x73, 0x0b, 0x11, 0xcc, 0x7f, 0x5c, 0x80,
	0xf3, 0xab, 0xb8, 0x8b, 0x7f, 0xdf, 0x06, 0x3c, 0xef, 0xac, 0xb9, 0x0c, 0x10, 0xb9, 0x5d, 0xd1,
	0x0c, 0x23, 0xbb, 0xdb, 0x93, 0xcb, 0xbb, 0x82, 0x90, 0x06, 0x02, 0xb4, 0x39, 0x2a, 0xa5, 0x08,
	0xe7, 0x6f, 0x17, 0xa0, 0x3e, 0xd8, 0x19, 0xb9, 0xbf, 0xbd, 0x0f, 0x35, 0xd9, 0x9b, 0x4f, 0x79,
	0x84, 0x7e, 0x0b, 0xce, 0xf3, 0xdc, 0xf1, 0x21, 0xd9, 0x94, 0xc4, 0xdf, 0xdb, 0x6b, 0x53, 0xdb,
	0x67, 0x96, 0xcc, 0x74, 0x55, 0x79, 0x8b, 0xc6, 0x5a, 0xa4, 0x2a, 0xbe, 0x49, 0x35, 0xc4, 0x50,
	0xf3, 0x37, 0x8b, 0xb0, 0x30, 0x80, 0x1e, 0x8f, 0x4c, 0x41, 0x1b, 0x19, 0xdc, 0xbc, 0x22, 0x3b,
	0x52, 0x4b, 0x86, 0x13, 0x88, 0x79, 0x70, 0x98, 0x8c, 0x21, 0x7e, 0xe3, 0x79, 0x7d, 0x70, 0xe8,
	0x89, 0x83, 0x9e, 0x1d, 0x86, 0x92, 0x5c, 0x13, 0x80, 0x71, 0x15, 0xaa, 0xbb, 0xc2, 0x76, 0x9a,
	0x6e, 0xb7, 0xdd, 0xec, 0x07, 0x1d, 0x49, 0xb0, 0x80, 0xb0, 0xf5, 0x6e, 0x7b, 0x2b, 0xe8, 0x18,
	0xef, 0xc2, 0x4b, 0xbd, 0x7e, 0xb8, 0x2b, 0xe9, 0xb5, 0x1f, 0x74, 0x9a, 0xf2, 0x94, 0x6e, 0x46,
	0xea, 0xe4, 0xae, 0x59, 0xe7, 0x11, 0x85, 0x5a, 0xbe, 0x15, 0x74, 0xee, 0x6a, 0xa7, 0xf8, 0x4b,
	0x50, 0xf1, 0xdc, 0xd6, 0x1e, 0xaf, 0x06, 0x26, 0xdf, 0x69, 0x04, 0xd0, 0x6a, 0xf8, 0x1c, 0xcc,
	0x8a, 0x9d, 0x1d, 0xd1, 0x8a, 0xdc, 0x7d, 0xc1, 0xb5, 0x4d, 0xf3, 0x0e, 0x1e, 0x43, 0xa9, 0x8e,
	0x73, 0x30, 0xd5, 0xf7, 0xf6, 0x3c, 0xff, 0xa0, 0x0e, 0x3c, 0xcd, 0x9c, 0x42, 0x38, 0xaf, 0xbb,
	0xfa, 0x0c, 0x6f, 0xec, 0x9c, 0x32, 0x37, 0xa0, 0x7c, 0x77, 0x75, 0xed, 0xbe, 0xdc, 0x63, 0x3d,
	0x39, 0x72, 0x35, 0x0b, 0x3f, 0x8d, 0x5b, 0xc9, 0x1e, 0x7b, 0xf2, 0x2e, 0x45, 0xfb, 0xde, 0x3f,
	0x29, 0x40, 0x7d, 0xc3, 0xf6, 0xfa, 0x76, 0x67, 0xb9, 0x1f, 0xed, 0x2e, 0xb7, 0x5a, 0xb8, 0x75,
	0x66, 0xa8, 0xbb, 0x70, 0x12, 0x75, 0x7f, 0x19, 0xca, 0xa2, 0xe5, 0xec, 0x3e, 0x88, 0x7f, 0x7d,
	0x36, 0x8d, 0x2b, 0x1b, 0x6c, 0x29, 0x2c, 0xdc, 0xb6, 0xd5, 0xae, 0x21, 0xa7, 0x33, 0xd9, 0x45,
	0x2e, 0x03, 0xe0, 0xe4, 0x1d, 0xf8, 0x81, 0xd3, 0x7c, 0x43, 0xcd, 0xa9, 0x82, 0xbc, 0x91, 0xca,
	0x5e, 0x92, 0x33, 0x1a, 0x67, 0x2f, 0x99, 0x3f, 0x5f, 0x80, 0x85, 0x67, 0x4f, 0x68, 0xb2, 0xd6,
	0xbb, 0x6d, 0x4b, 0x3c, 0x5f, 0xf7, 0x76, 0x7c, 0x3c, 0x26, 0x91, 0x06, 0xc2, 0x98, 0xce, 0xa6,
	0xdc, 0x6e, 0xbb, 0xe1, 0x3a, 0xc6, 0x05, 0x98, 0xc6, 0x8c, 0x78, 0x7f, 0xae, 0x58, 0x88, 0x48,
	0xec, 0xc5, 0x35, 0x98, 0xc3, 0x2c, 0xe1, 0xb5, 0x82, 0xa3, 0x5e, 0x44, 0xa7, 0x3a, 0x37, 0xb5,
	0xe6, 0x76, 0xdb, 0x77, 0x19, 0x8a, 0x7d, 0x59, 0x82, 0xc9, 0x3d, 0xac, 0x78, 0x72, 0xa4, 0x41,
	0x27, 0x5c, 0xb3, 0x0d, 0x67, 0x9e, 0x1d, 0x3e, 0x15, 0x81, 0xbb, 0x73, 0x24, 0xf7, 0x22, 0x6a,
	0xe6, 0x17, 0x60, 0x7e, 0x9f, 0x80, 0xcd, 0xd0, 0x6d, 0x7b, 0x76, 0xd4, 0x0f, 0x84, 0x6c, 0xef,
	0x1c, 0xc3, 0x1b, 0x0a, 0x8c, 0xd4, 0x25, 0x51, 0x5b, 0xbe, 0x17, 0x09, 0x2f, 0x92, 0xcd, 0xaf,
	0xed, 0xcb, 0x5a, 0x09, 0x68, 0xfe, 0xc7, 0x09, 0x98, 0xc3, 0xd5, 0x8e, 0x93, 0xab, 0xfe, 0xb2,
	0x0e, 0x0b, 0x07, 0x91, 0xa4, 0xf8, 0x40, 0x3c, 0x6f, 0x22, 0x67, 0x37, 0xe2, 0xc1, 0x36, 0x7b,
	0x10, 0xd1, 0xd0, 0x5a, 0xe2, 0x39, 0xb2, 0x6c, 0xc6, 0x37, 0xe1, 0x6c, 0x5c, 0x15, 0x0e, 0x16,
	0x56, 0xe7, 0x7a, 0x3b, 0xbe, 0x24, 0x83, 0x97, 0xd3, 0xd5, 0x0d, 0xcc, 0x8b, 0xb5, 0x20, 0xeb,
	0xd3, 0xa6, 0xea, 0x19, 0x9c, 0x3f, 0x38, 0x6c, 0xc6, 0x7d, 0x73, 0x44, 0x52, 0x29, 0x6f, 0x40,
	0xaf, 0x64, 0x2a, 0x1d, 0x1c, 0x47, 0xeb, 0xcc, 0x41, 0xce, 0xe0, 0x7e, 0x08, 0x0b, 0xad, 0x8e,
	0xeb, 0x6c, 0xa7, 0x66, 0x74, 0xb4, 0x49, 0x9b, 0xa3, 0x82, 0xda, 0x9c, 0x3f, 0x04, 0x23, 0x5d,
	0x17, 0xb5, 0xaf, 0x34, 0x52, 0x65, 0xf3, 0x7a, 0x65, 0xd4, 0x32, 0x13, 0x6a, 0x76, 0x3f, 0xda,
	0xa5, 0x8e, 0xee, 0x74, 0xec, 0xb6, 0xdc, 0x76, 0x66, 0x6c, 0x9e, 0xb4, 0x7b, 0x1d, 0xbb, 0x8d,
	0x27, 0x33, 0xe1, 0x44, 0x6e, 0x6b, 0x4f, 0x44, 0x72, 0xb3, 0x01, 0x04, 0x3d, 0x21, 0x88, 0xf9,
	0x9b, 0x53, 0x70, 0x3e, 0x59, 0xc8, 0x6b, 0xb4, 0x59, 0x8c, 0xe7, 0x8c, 0x5b, 0x8e, 0xcf, 0x94,
	0xd4, 0xe4, 0x5e, 0x1e, 0x2c, 0xae, 0x51, 0x59, 0x5c, 0x05, 0xf5, 0x10, 0x85, 0x80, 0xae, 0x70,
	0x25, 0x97, 0x4b, 0xdf, 0xd8, 0x6b, 0x3a, 0xd9, 0xb1, 0xca, 0xe6, 0x61, 0xb7, 0x23, 0x97, 0xfa,
	0x0c, 0x02, 0xb1, 0xd0, 0x47, 0xdd, 0x8e, 0xf1, 0x2a, 0xd4, 0xb6, 0x79, 0xf4, 0xdc, 0x5e, 0x33,
	0x14, 0xcf, 0xe5, 0x51, 0x58, 0x8d, 0x81, 0x0d, 0xf1, 0x1c, 0x2b, 0x92, 0xac, 0x72, 0x88, 0x2d,
	0x74, 0x68, 0xf8, 0x2a, 0xd6, 0x0c, 0x03, 0x1b, 0xe2, 0xf9, 0x3a, 0x9d, 0x13, 0xc9, 0x92, 0xe2,
	0xc1, 0x4b, 0x00, 0xc6, 0xeb, 0xb0, 0xc0, 0x34, 0xac, 0x33, 0x3f, 0xcc, 0x6c, 0xcc, 0x51, 0xc6,
	0x5a, 0xc2, 0x01, 0x5d, 0x83, 0x39, 0xc5, 0xb5, 0xab, 0x86, 0x57, 0x78, 0xe5, 0x49, 0xde, 0x5d,
	0x36, 0xfd, 0x22, 0x4c, 0x77, 0x6c, 0xaf, 0xdd, 0xb7, 0xdb, 0x82, 0x76, 0xf6, 0x8a, 0x15, 0xa7,
	0xf1, 0xdc, 0xa0, 0x93, 0xff, 0x13, 0xdf, 0x53, 0xdb, 0xfb, 0x34, 0x02, 0xbe, 0xed, 0x7b, 0xc2,
	0xa8, 0x43, 0xb9, 0xb5, 0x6b, 0x7b, 0x9e, 0xe8, 0xd4, 0x6b, 0xd4, 0x5b, 0x95, 0xcc, 0x30, 0x0c,
	0xb3, 0x59, 0x86, 0xe1, 0x15, 0xa8, 0xca, 0x96, 0x6d, 0x07, 0xb6, 0xe7, 0xd4, 0xe7, 0x78, 0x18,
	0x18, 0xb6, 0x82, 0x20, 0x0d, 0xa5, 0xeb, 0x3b, 0xa2, 0x53, 0x9f, 0xd7, 0x51, 0x36, 0x10, 0xa4,
	0x4b, 0x14, 0x0b, 0x29, 0x89, 0xe2, 0x15, 0xa8, 0x06, 0xc2, 0xee, 0x34, 0xe9, 0x84, 0x08, 0x8e,
	0xea, 0x06, 0x97, 0x45, 0xd8, 0x2a, 0x83, 0xb0, 0x5f, 0xdb, 0x7d, 0xcf, 0xe9, 0x90, 0x44, 0x73,
	0x86, 0xfb, 0xc5, 0x80, 0x75, 0x07, 0x33, 0x6d, 0xa7, 0x19, 0xfa, 0xfd, 0xa0, 0x25, 0xea, 0x8b,
	0x9c, 0x69, 0x3b, 0x0d, 0x4a, 0x63, 0xd7, 0xdc, 0xde, 0xae, 0xef, 0x09, 0x5c, 0xf9, 0xf5, 0xb3,
	0x3c, 0x41, 0x0c, 0x79, 0x2a, 0x02, 0xca, 0xf6, 0x7a, 0x7d, 0xc9, 0x06, 0x9e, 0xe3, 0x9e, 0x13,
	0x84, 0x9a, 0x76, 0x1f, 0xe6, 0x25, 0x05, 0x90, 0xac, 0x8e, 0xac, 0x7a, 0xfd, 0xfc, 0x68, 0x1b,
	0x1a, 0x97, 0x23, 0x7e, 0x6a, 0xcd, 0x8e, 0xcc, 0x1f, 0xaf, 0x40, 0x05, 0xa9, 0x78, 0xd3, 0x0e,
	0xec, 0xae, 0x92, 0xd9, 0x70, 0xb9, 0x4c, 0xb0, 0xcc, 0x76, 0xea, 0x93, 0xee, 0x6b, 0x69, 0xb9,
	0x90, 0xb7, 0xb0, 0x7a, 0xa6, 0x55, 0xb1, 0xd8, 0x94, 0x92, 0x18, 0x57, 0x68, 0x5b, 0xf0, 0x9b,
	0xb4, 0xee, 0x47, 0xdf, 0xac, 0x70, 0x9f, 0xf0, 0xb1, 0x0f, 0x7c, 0x38, 0x9d, 0x1b, 0xd8, 0xeb,
	0x79, 0x8f, 0xe1, 0x95, 0x64, 0xa4, 0x37, 0x74, 0xda, 0x6a, 0x72, 0xcf, 0x87, 0xa9, 0xf1, 0x9e,
	0x0f, 0xe5, 0xcf, 0xe2, 0x7c, 0x98, 0x1e, 0xff, 0xf9, 0x50, 0x19, 0xe7, 0xf9, 0x00, 0x9f, 0xf2,
	0x7c, 0xb8, 0x00, 0xd3, 0x31, 0x0d, 0xf0, 0x6e, 0x51, 0xb6, 0xe5, 0xfc, 0xde, 0x86, 0x29, 0x7b,
	0x89, 0x32, 0xaa, 0x23, 0x55, 0x5e, 0xb2, 0x97, 0xb0, 0xd8, 0x37, 0x60, 0x36, 0xdc, 0xf5, 0x0f,
	0x9a, 0x21, 0x8a, 0xc1, 0x54, 0x7c, 0x2e, 0x4f, 0x4e, 0xd0, 0x45, 0x6d, 0xab, 0x1a, 0xea, 0x82,
	0x77, 0xe6, 0x3c, 0x9a, 0xcf, 0x9e, 0x47, 0x88, 0xe0, 0x89, 0x83, 0x58, 0x7b, 0xb1, 0x40, 0xe4,
	0x06, 0x9e, 0x38, 0x50, 0xaa, 0x8b, 0x97, 0x61, 0xa6, 0xdf, 0x73, 0xec, 0x48, 0x30, 0x3d, 0x1a,
	0x8c, 0xc0, 0x20, 0xa2, 0xc3, 0xeb, 0x30, 0x2f, 0x8f, 0xc5, 0xb0, 0xdf, 0x89, 0x18, 0xeb, 0x0c,
	0x61, 0xcd, 0xf2, 0xc9, 0x88, 0x60, 0xc2, 0x5c, 0x84, 0xd2, 0x4e, 0x88, 0x0c, 0x3e, 0x6f, 0x2b,
	0x9c, 0x30, 0xbe, 0x02, 0xe7, 0xba, 0xdd, 0xa8, 0x13, 0x12, 0x87, 0x14, 0xf8, 0x9d, 0xe6, 0xb6,
	0x2b, 0x6b, 0x39, 0x4b, 0xb5, 0x9c, 0xa1, 0xdc, 0x55, 0xce, 0x5c, 0x71, 0x23, 0x75, 0xce, 0x86,
	0x22, 0xd8, 0x17, 0x01, 0xb3, 0xec, 0xbc, 0xd5, 0x00, 0x83, 0x88, 0x5f, 0xbf, 0x05, 0x13, 0x87,
	0xdb, 0x9f, 0x8c, 0xb8, 0xbd, 0x20, 0x2a, 0x97, 0x58, 0xae, 0xd7, 0x47, 0x2d, 0xb1, 0x6c, 0xfe,
	0xc1, 0x04, 0xcc, 0x48, 0x56, 0x5c, 0x1d, 0x9f, 0x24, 0xf9, 0x14, 0x34, 0xc9, 0x27, 0x25, 0x7b,
	0x14, 0x33, 0xb2, 0xc7, 0x05, 0x98, 0xde, 0x76, 0x3d, 0xa7, 0x89, 0xbb, 0x17, 0x4b, 0xf8, 0x65,
	0x4c, 0x6f, 0xb1, 0xd6, 0x89, 0xb2, 0xba, 0xb6, 0xab, 0x8e, 0x5c, 0xc2, 0xdd, 0xb0, 0xdd, 0x0e,
	0xf6, 0x9e, 0x33, 0xfd, 0x6d, 0xb7, 0xa3, 0x04, 0x7c, 0xa0, 0x6c, 0x82, 0xe0, 0x48, 0xdb, 0x1d,
	0xd7, 0x0e, 0xe5, 0x19, 0xcb, 0x09, 0x94, 0x55, 0x50, 0x44, 0xeb, 0x87, 0x52, 0xc4, 0x91, 0x29,
	0xac, 0xae, 0xd7, 0xe9, 0xe3, 0xe2, 0xa7, 0x61, 0xaf, 0xf0, 0x60, 0x32, 0x88, 0x46, 0xfb, 0x55,
	0xa8, 0x05, 0xa2, 0xed, 0x86, 0x11, 0x8e, 0x37, 0x6e, 0xed, 0x2c, 0x03, 0x55, 0x15, 0x50, 0x4a,
	0xf9, 0x03, 0x27, 0xee, 0x4c, 0xde, 0x89, 0x8b, 0x53, 0x67, 0xef, 0x08, 0x79, 0x88, 0xd3, 0x82,
	0xc0, 0xa9, 0xb3, 0x77, 0x04, 0x1f, 0xdf, 0xc6, 0x2d, 0x58, 0xf4, 0x77, 0x76, 0xdc, 0x96, 0x6b,
	0x77, 0x68, 0xd8, 0x9a, 0x3d, 0xd7, 0x3b, 0x72, 0x3d, 0x3a, 0x66, 0x2b, 0x96, 0xa1, 0xf2, 0x70,
	0x04, 0x37, 0x29, 0x07, 0x49, 0x30, 0x5d, 0xe2, 0x93, 0x5d, 0x3a, 0x77, 0x2b, 0xd6, 0xac, 0x8e,
	0xfd, 0xed, 0x5d, 0xc4, 0x24, 0x41, 0x12, 0x87, 0xb5, 0x29, 0x07, 0x63, 0x8e, 0x89, 0x15, 0xe1,
	0x38, 0xba, 0x0d, 0x1e, 0x94, 0xb3, 0x30, 0xb5, 0x13, 0x92, 0x38, 0x3a, 0xaf, 0xa8, 0x75, 0x2b,
	0xe8, 0x98, 0xdf, 0x86, 0xc9, 0xfb, 0x7e, 0x48, 0x7a, 0x4f, 0x3f, 0x70, 0xdb, 0xf2, 0xd8, 0xc1,
	0xe3, 0x97, 0x52, 0xc6, 0x15, 0x80, 0xb0, 0xbf, 0x1d, 0x46, 0x6e, 0xd4, 0x8f, 0xd4, 0x84, 0x6b,
	0x10, 0xe4, 0x37, 0x7a, 0x81, 0xeb, 0x07, 0x6e, 0x74, 0x24, 0xa7, 0x3c, 0x4e, 0x9b, 0xf7, 0x61,
	0x1a, 0xeb, 0x7e, 0xe8, 0x86, 0x11, 0xce, 0x60, 0x4b, 0x53, 0x97, 0x71, 0xc2, 0xb8, 0x06, 0x93,
	0x1d, 0x37, 0x8c, 0xa4, 0xb2, 0xcc, 0x48, 0x13, 0x29, 0x96, 0xb5, 0x28, 0xdf, 0xfc, 0x41, 0xa8,
	0x48, 0x82, 0x5d, 0xdf, 0x44, 0xb2, 0xa4, 0x49, 0x93, 0x5a, 0x67, 0xfc, 0x46, 0x58, 0xcf, 0x0f,
	0x22, 0x29, 0xb9, 0xd3, 0xb7, 0x31, 0x0b, 0x45, 0xb7, 0x27, 0x85, 0xa7, 0xa2, 0x4b, 0x9a, 0x0d,
	0xc7, 0xef, 0xda, 0xae, 0x27, 0xe9, 0x4f, 0xa6, 0xcc, 0x9f, 0x2e, 0x42, 0x2d, 0xae, 0x9d, 0x1a,
	0x7b, 0x13, 0x8c, 0x8e, 0xef, 0xb5, 0x57, 0x7d, 0xcf, 0x13, 0xad, 0x68, 0xbd, 0xa7, 0xb7, 0x3c,
	0x27, 0xc7, 0xb8, 0x05, 0x67, 0xc2, 0x5d, 0x3f, 0x88, 0x32, 0x05, 0xb8, 0x31, 0x79, 0x59, 0xc6,
	0x5d, 0x64, 0xfd, 0xb4, 0x7a, 0x68, 0x14, 0x26, 0x68, 0x14, 0xce, 0x67, 0x18, 0x5c, 0xd5, 0x32,
	0x6b, 0xb0, 0x84, 0xf1, 0x01, 0x18, 0xe9, 0xda, 0xa9, 0x9e, 0xc9, 0xe3, 0xeb, 0xc9, 0x29, 0x42,
	0x2a, 0xec, 0x98, 0xcf, 0xc5, 0x4f, 0xf3, 0x7f, 0x14, 0x60, 0xf6, 0x91, 0x88, 0x0e, 0xfc, 0x60,
	0x4f, 0xee, 0x55, 0x34, 0xd7, 0x7e, 0x40, 0xf3, 0x29, 0xa9, 0x24, 0x4e, 0x1b, 0x57, 0x61, 0x06,
	0x77, 0x2e, 0xbf, 0xcf, 0xd9, 0x4c, 0x28, 0x3a, 0xc8, 0xb8, 0x0e, 0x73, 0x5d, 0xd7, 0x7b, 0xe4,
	0xfb, 0xbd, 0x75, 0x2f, 0x12, 0xc1, 0xbe, 0xdd, 0x91, 0x04, 0x93, 0x05, 0x13, 0xa6, 0x7d, 0x98,
	0xc2, 0x9c, 0x94, 0x98, 0x69, 0xb0, 0x71, 0x0d, 0x66, 0xa3, 0xa3, 0x9e, 0xeb, 0xb5, 0x63, 0xc4,
	0x12, 0xa9, 0xd8, 0x33, 0x50, 0xe3, 0x75, 0x98, 0xf7, 0xb4, 0x72, 0x64, 0x1e, 0x29, 0x13, 0xe6,
	0x00, 0xdc, 0xfc, 0xed, 0x02, 0x54, 0xb6, 0x48, 0x19, 0xb2, 0xba, 0xf5, 0x14, 0x77, 0xd1, 0xa3,
	0x8d, 0xa7, 0x23, 0xca, 0xa9, 0x88, 0xca, 0x25, 0x9e, 0x8d, 0xaa, 0x0c, 0x39, 0xda, 0x78, 0xc6,
	0x25, 0x3e, 0x92, 0x4c, 0xda, 0x08, 0x25, 0x3e, 0xe2, 0x12, 0xdf, 0x1a, 0x91, 0x33, 0x43, 0x54,
	0x73, 0x59, 0x75, 0x6a, 0xf9, 0xe9, 0x87, 0x38, 0xdb, 0x87, 0x5b, 0x3d, 0x65, 0x3a, 0x39, 0xdc,
	0xea, 0x31, 0xe4, 0xb9, 0x52, 0x79, 0x1f, 0x6e, 0x3d, 0x67, 0x48, 0x20, 0xa7, 0x08, 0x3f, 0xcd,
	0x46, 0x52, 0xc5, 0x03, 0x5c, 0x70, 0xa1, 0xfb, 0x49, 0xbc, 0x08, 0xf1, 0xdb, 0x58, 0x82, 0x69,
	0x7b, 0xff, 0xe3, 0xa6, 0xb6, 0xa2, 0x33, 0x34, 0x18, 0xb7, 0xc0, 0x2a, 0xdb, 0xfb, 0x1f, 0x23,
	0x55, 0x98, 0xff, 0xb4, 0x00, 0xd3, 0x0c, 0xfe, 0xe0, 0x01, 0xfd, 0xb3, 0xb5, 0xab, 0x34, 0x4b,
	0x87, 0xad, 0x5d, 0x3a, 0xc4, 0x5a, 0xee, 0xa8, 0x83, 0x79, 0xd8, 0x72, 0x8d, 0x2f, 0x60, 0x89,
	0x8f, 0xe5, 0x60, 0x0e, 0xf9, 0xff, 0x03, 0x44, 0xfd, 0x98, 0x7f, 0xb7, 0x27, 0x69, 0x0b, 0x3f,
	0xf9, 0x77, 0x9d, 0x11, 0x25, 0x6a, 0x44, 0xe5, 0x3a, 0xba, 0xf2, 0x5c, 0xc2, 0x4f, 0xf3, 0x71,
	0xdc, 0xa1, 0x87, 0xb9, 0xa3, 0xf4, 0x65, 0x28, 0xb7, 0xf7, 0xf4, 0x41, 0x3a, 0x97, 0xd7, 0xc8,
	0x0f, 0x1e, 0x58, 0x53, 0xed, 0x3d, 0x1a, 0xa2, 0x7f, 0x5e, 0x80, 0x39, 0xb9, 0x12, 0x1b, 0xa2,
	0x15, 0x59, 0x22, 0xec, 0x19, 0x77, 0x88, 0xcd, 0x51, 0xbb, 0xab, 0x24, 0xcf, 0x73, 0x83, 0xfb,
	0x27, 0xe6, 0x5a, 0x3a, 0xaa, 0xb1, 0x06, 0xb3, 0x5e, 0x6a, 0x59, 0xcb, 0xc1, 0xbd, 0x94, 0x2e,
	0x9c, 0x5e, 0xfa, 0x56, 0xa6, 0x0c, 0x09, 0xe7, 0x72, 0x43, 0x51, 0x7b, 0x17, 0x56, 0xf2, 0xd2,
	0x90, 0x3d, 0x87, 0x9a, 0x91, 0x2e, 0x61, 0xfe, 0x56, 0x11, 0x8c, 0x44, 0x73, 0x30, 0x3e, 0x55,
	0xf2, 0x65, 0x80, 0xbe, 0x87, 0x5c, 0x3a, 0x1d, 0xfe, 0xbc, 0x07, 0x57, 0x08, 0x42, 0x67, 0xff,
	0x9b, 0x40, 0xec, 0x62, 0xb3, 0x87, 0xa2, 0x56, 0x3e, 0x99, 0xc4, 0x92, 0x98, 0x55, 0xb1, 0x63,
	0xa1, 0xec, 0x5d, 0xa8, 0xda, 0xcc, 0x1b, 0x31, 0x57, 0x3d, 0x99, 0xa7, 0xcc, 0xd0, 0xb8, 0x27,
	0x6b, 0xc6, 0xd6, 0x58, 0xa9, 0x3b, 0x30, 0xed, 0x78, 0xa1, 0xae, 0xaf, 0xb9, 0x9c, 0x3b, 0xde,
	0x6a, 0x82, 0xad, 0xb2, 0xe3, 0x85, 0x54, 0xf2, 0x3a, 0x4c, 0x1c, 0xdd, 0xdb, 0x94, 0x82, 0x50,
	0x3e, 0xa9, 0x3c, 0xb4, 0x10, 0xc5, 0xbc, 0x08, 0x93, 0xd4, 0x43, 0x03, 0x26, 0xa9, 0xeb, 0x92,
	0xe8, 0xf0, 0xdb, 0xfc, 0x1a, 0x4c, 0x37, 0x8e, 0xbc, 0xd6, 0x03, 0x71, 0xd4, 0xcc, 0x3d, 0x3f,
	0x2f, 0xc0, 0x74, 0x78, 0xe4, 0xb5, 0x9a, 0x4a, 0x8d, 0x3b, 0x61, 0x95, 0x43, 0xc6, 0x37, 0xd7,
	0xa1, 0x2c, 0x8b, 0xe6, 0x92, 0xf3, 0xeb, 0xb2, 0xb6, 0x5c, 0x5a, 0x56, 0xff, 0xe4, 0xbf, 0x98,
	0x8f, 0x00, 0x10, 0xb2, 0x11, 0xb6, 0xf3, 0x6d, 0x75, 0x37, 0xa1, 0xdc, 0x0d, 0xdb, 0xcd, 0xbd,
	0x61, 0x62, 0xae, 0xac, 0xce, 0x9a, 0xea, 0x52, 0x0d, 0xe6, 0x0d, 0x98, 0x5c, 0x5b, 0x7e, 0xb2,
	0x9c, 0x53, 0x93, 0x01, 0x93, 0x64, 0x38, 0x63, 0xb3, 0x1f, 0x7d, 0x9b, 0x1b, 0x50, 0x5e, 0xed,
	0x3a, 0xeb, 0x91, 0xe8, 0x22, 0x33, 0xd4, 0xea, 0x3a, 0xcd, 0x58, 0x8b, 0x5d, 0x6a, 0x75, 0x9d,
	0x75, 0xc7, 0xf8, 0x22, 0x94, 0x11, 0xbc, 0xdd, 0xdf, 0x91, 0xff, 0xcf, 0x70, 0x24, 0xf8, 0x33,
	0x0b, 0x4b, 0xae, 0xf4, 0x77, 0xcc, 0x06, 0x55, 0x77, 0x0c, 0x73, 0xb3, 0x04, 0x15, 0x37, 0x12,
	0x5d, 0x7d, 0xa9, 0x67, 0xfa, 0x23, 0x9b, 0x63, 0x4d, 0x23, 0x1e, 0xad, 0xf5, 0xff, 0x4c, 0xa7,
	0xee, 0x01, 0x76, 0x54, 0xe9, 0xc1, 0xbe, 0x08, 0x25, 0xbf, 0xd7, 0xf1, 0xdb, 0x72, 0x21, 0x0c,
	0x56, 0x41, 0x8b, 0x8b, 0x71, 0xf0, 0x88, 0x0e, 0x45, 0x47, 0xb4, 0x22, 0x3f, 0x90, 0xa4, 0x1f,
	0xa7, 0x8d, 0x37, 0x61, 0x6a, 0x4f, 0x1c, 0xad, 0xf4, 0x77, 0x46, 0x3c, 0x69, 0x24, 0x76, 0x62,
	0xd3, 0x9d, 0xd4, 0x6c, 0xba, 0xc8, 0x18, 0x32, 0xc7, 0xfb, 0x24, 0xb1, 0x02, 0x6b, 0x10, 0xe3,
	0x35, 0xa8, 0x85, 0x3c, 0xd7, 0x6b, 0x6e, 0x5b, 0x84, 0x91, 0xd4, 0x2e, 0xa6, 0x81, 0xe6, 0x9f,
	0x2a, 0xe2, 0xde, 0x26, 0xfb, 0x3b, 0xd4, 0x58, 0xfe, 0x65, 0x9a, 0x97, 0x98, 0xb1, 0x18, 0x3a,
	0x08, 0x0a, 0xcb, 0x30, 0xa1, 0x8a, 0xd2, 0x97, 0xeb, 0xf5, 0x49, 0xa6, 0x93, 0xa7, 0x58, 0x0a,
	0xa6, 0x0d, 0xc7, 0xe4, 0xa9, 0x86, 0x23, 0x91, 0x3a, 0x4a, 0x29, 0xa9, 0xe3, 0x35, 0xa8, 0xf9,
	0x5e, 0xc7, 0x25, 0xcd, 0x11, 0xc9, 0x9e, 0xb2, 0xc3, 0x29, 0xa0, 0x51, 0x87, 0x72, 0xb8, 0x1f,
	0xc4, 0x0c, 0x48, 0xcd, 0x52, 0x49, 0xf3, 0xff, 0x2f, 0xc0, 0xb4, 0xe5, 0xfb, 0x5d, 0x5a, 0xf5,
	0x6f, 0xeb, 0x06, 0xcf, 0xc2, 0x28, 0x1e, 0x02, 0x89, 0x25, 0xe3, 0xed, 0xac, 0x88, 0x76, 0x72,
	0x59, 0x25, 0xc1, 0x99, 0xdf, 0x2d, 0xc0, 0xec, 0x6a, 0x3f, 0x8c, 0xfc, 0xae, 0xfb, 0x89, 0x70,
	0xa8, 0x29, 0x97, 0x01, 0x48, 0xb1, 0xd7, 0xd4, 0x36, 0x95, 0x0a, 0x41, 0x94, 0x2c, 0x25, 0x0e,
	0x23, 0x11, 0x78, 0x76, 0x27, 0x51, 0xd3, 0x56, 0xac, 0xaa, 0x02, 0xa6, 0xeb, 0x88, 0x15, 0xea,
	0x15, 0x59, 0x07, 0x65, 0xbf, 0x06, 0xb3, 0x32, 0xbb, 0xe5, 0x93, 0x39, 0x4c, 0x72, 0xe8, 0x55,
	0x46, 0x69, 0xf9, 0x1e, 0x8a, 0x2a, 0x3f, 0x5b, 0x80, 0x33, 0x0f, 0x5d, 0x6f, 0x4f, 0x38, 0xae,
	0x87, 0xe7, 0x90, 0xdd, 0x8a, 0x68, 0x31, 0xbf, 0x0a, 0xb5, 0x8e, 0x04, 0x27, 0xe3, 0x55, 0xb1,
	0xaa, 0x0a, 0x48, 0x83, 0x72, 0x03, 0x8c, 0x18, 0xa9, 0x2b, 0xba, 0xdb, 0x22, 0xc0, 0xd5, 0xcf,
	0x6d, 0x9d, 0x57, 0x39, 0x1b, 0x94, 0xb1, 0xee, 0x18, 0x37, 0xe1, 0x4c, 0x8c, 0xdd, 0xeb, 0x6f,
	0x77, 0xdc, 0x16, 0xb5, 0x8a, 0x1b, 0xbe, 0xa0, 0xb2, 0x36, 0x29, 0x07, 0x9b, 0xf6, 0x08, 0xce,
	0x2e, 0x3b, 0x8e, 0x1b, 0xb9, 0xbe, 0x67, 0x77, 0x64, 0xdb, 0x88, 0x10, 0x6f, 0xc3, 0x24, 0xae,
	0x6d, 0x39, 0x85, 0x19, 0x1d, 0x51, 0x4e, 0x67, 0x2c, 0x42, 0x37, 0x7f, 0xaa, 0x08, 0xc6, 0xea,
	0xae, 0x1d, 0x21, 0x3d, 0xc8, 0x46, 0xe1, 0x38, 0xbd, 0x94, 0xa5, 0x0a, 0xdd, 0x80, 0x75, 0xac,
	0x64, 0xfe, 0x0a, 0x54, 0x1d, 0x37, 0xec, 0x75, 0xec, 0x23, 0xce, 0x9f, 0x90, 0x1a, 0x58, 0x86,
	0x11, 0xca, 0xe7, 0x61, 0x7e, 0xdb, 0x6d, 0x37, 0x53, 0x96, 0x4b, 0x9e, 0x86, 0xda, 0xb6, 0xdb,
	0xbe, 0x9f, 0x18, 0x2f, 0xbf, 0x08, 0x46, 0xd8, 0xb5, 0x3b, 0x9d, 0x66, 0x8e, 0x91, 0x73, 0x8e,
	0x72, 0x34, 0xe4, 0x5b, 0xb0, 0x88, 0x3d, 0x0e, 0x7c, 0xbf, 0xab, 0xc6, 0x5d, 0xb3, 0x35, 0x18,
	0x2a, 0x8f, 0x3b, 0x49, 0x04, 0x95, 0x58, 0x26, 0x59, 0x61, 0x2e, 0x53, 0xe6, 0xef, 0x14, 0xb2,
	0x63, 0x42, 0x8e, 0x0e, 0xaf, 0x40, 0x55, 0xd6, 0xab, 0x6f, 0xc1, 0x33, 0x0c, 0x63, 0x8f, 0x0c,
	0x6b, 0xb0, 0x0d, 0xda, 0x9e, 0x7c, 0x35, 0xb3, 0x97, 0x0c, 0x0c, 0x7b, 0xb6, 0x95, 0x34, 0xb1,
	0x2f, 0x41, 0x85, 0xd4, 0x02, 0x5d, 0x3b, 0xdc, 0x53, 0x82, 0x2f, 0x02, 0x36, 0xec, 0x70, 0xcf,
	0xb8, 0x1d, 0x77, 0x61, 0x72, 0x24, 0xe7, 0x1e, 0xd9, 0xc3, 0x9f, 0x3d, 0x0b, 0xb0, 0xe1, 0x3b,
	0x92, 0x1c, 0x8c, 0xaf, 0x69, 0xd6, 0xca, 0x53, 0x6e, 0x01, 0x5f, 0x83, 0x78, 0xea, 0x4f, 0xb9,
	0x03, 0x18, 0xef, 0x40, 0xa5, 0x77, 0xe4, 0x7a, 0x6e, 0xe4, 0x4a, 0x01, 0xed, 0xc4, 0xb2, 0x09,
	0xbe, 0xf1, 0x16, 0x94, 0x9f, 0xf7, 0x6d, 0x6f, 0x53, 0xca, 0xd8, 0x27, 0x16, 0x55, 0xd8, 0x2c,
	0x7f, 0x1e, 0x4a, 0xe9, 0x0d, 0x3f, 0x71, 0x7b, 0x76, 0xbb, 0x6d, 0xdc, 0x9e, 0x47, 0xd3, 0x01,
	0x4b, 0x6c, 0xdc, 0x60, 0xb7, 0xdd, 0x08, 0xa7, 0x41, 0x6d, 0xb0, 0x32, 0x49, 0xbe, 0x65, 0x6e,
	0xf4, 0xd4, 0xee, 0x28, 0x75, 0x11, 0xa7, 0xb0, 0x84, 0xdb, 0x6d, 0xdf, 0x4b, 0x54, 0x45, 0x2a,
	0x89, 0xf3, 0x18, 0x88, 0xae, 0x1d, 0xec, 0x49, 0x1d, 0xea, 0x49, 0xf3, 0xc8, 0xc8, 0xc6, 0x07,
	0x30, 0xc7, 0x5f, 0x9b, 0xf1, 0x40, 0xce, 0x8c, 0x52, 0x3e, 0x5b, 0xca, 0x58, 0x85, 0x1a, 0x83,
	0xbe, 0x29, 0x07, 0xb5, 0x3a, 0x4a, 0x35, 0xe9, 0x32, 0x28, 0x99, 0xb7, 0x98, 0xa2, 0xe8, 0xa4,
	0x66, 0xe3, 0x8e, 0x0e, 0xc2, 0x93, 0x2b, 0x90, 0x07, 0x0f, 0xbb, 0x34, 0xb1, 0x8d, 0x27, 0x0d,
	0x34, 0xde, 0x86, 0xaa, 0x02, 0xd0, 0x49, 0x3c, 0x97, 0xc7, 0xf0, 0xa9, 0x03, 0xcc, 0x4a, 0xe1,
	0x1a, 0x5f, 0x07, 0x60, 0x65, 0x0b, 0x95, 0x9c, 0x1f, 0xa5, 0x17, 0x5a, 0x01, 0x14, 0xf3, 0x5b,
	0x72, 0x59, 0xb2, 0xfb, 0x86, 0xd4, 0xeb, 0x66, 0xa0, 0xc6, 0x75, 0x98, 0xb3, 0x1d, 0xb5, 0x7e,
	0x1a, 0xc4, 0xb3, 0xb0, 0x7e, 0x37, 0x0b, 0x66, 0xb5, 0x95, 0xbf, 0xef, 0x7a, 0x2d, 0xa1, 0x2c,
	0x46, 0x2a, 0x8d, 0xbc, 0x63, 0xcb, 0x8d, 0x8e, 0xa4, 0x56, 0x97, 0xbe, 0xd3, 0x86, 0xbc, 0xb3,
	0x59, 0x43, 0x9e, 0x09, 0xd5, 0x9e, 0x08, 0x42, 0xda, 0xfc, 0xed, 0xc0, 0x91, 0xea, 0xdb, 0x14,
	0xcc, 0xb8, 0x09, 0xc6, 0xae, 0x1d, 0x3e, 0x13, 0xee, 0x47, 0xae, 0x77, 0xdf, 0x91, 0x3b, 0x24,
	0xe9, 0x73, 0x6b, 0x56, 0x4e, 0x0e, 0xf2, 0x57, 0x6c, 0x6d, 0x20, 0xc2, 0xac, 0xb3, 0x56, 0x31,
	0x81, 0x24, 0xf9, 0x38, 0xc8, 0xf5, 0x0b, 0xcc, 0x7f, 0x25, 0x10, 0xe4, 0xda, 0x3a, 0x62, 0x5f,
	0x74, 0xea, 0x17, 0x69, 0x4d, 0x71, 0x82, 0x98, 0x17, 0x36, 0x85, 0xbd, 0x24, 0x99, 0x17, 0x36,
	0x84, 0x2d, 0x42, 0xe9, 0x40, 0xb8, 0xdb, 0x7e, 0xfd, 0x12, 0x2b, 0x07, 0x29, 0x81, 0x84, 0x91,
	0xb2, 0xeb, 0xd7, 0x2f, 0xe7, 0x18, 0xfb, 0x13, 0xe5, 0xec, 0x15, 0x5d, 0x39, 0xfb, 0x1a, 0xd4,
	0xd4, 0xec, 0x3c, 0x3e, 0xf0, 0x44, 0x50, 0x7f, 0x99, 0xcb, 0xa6, 0x80, 0x88, 0x45, 0xbf, 0x7a,
	0xe4, 0xb6, 0xf6, 0xe8, 0x60, 0xba, 0xca, 0x58, 0x29, 0x20, 0xb9, 0xdb, 0x20, 0x80, 0x86, 0xe2,
	0x15, 0xe6, 0x40, 0x62, 0x00, 0x8e, 0x84, 0xdd, 0xd9, 0xee, 0x77, 0xc9, 0x48, 0x50, 0x37, 0xa9,
	0xbb, 0x1a, 0x04, 0x4b, 0x53, 0x8a, 0x4a, 0xbf, 0x4a, 0xd9, 0x09, 0x00, 0xe7, 0x8e, 0x12, 0x2b,
	0x6d, 0xb7, 0xdb, 0x5e, 0x77, 0xea, 0xaf, 0x31, 0xf3, 0xa0, 0xc3, 0x8c, 0x77, 0x60, 0x26, 0xf4,
	0xc2, 0xad, 0x90, 0xcf, 0x83, 0xfa, 0xe7, 0xf2, 0x44, 0xbf, 0x46, 0x82, 0x60, 0xe9, 0xd8, 0x64,
	0x58, 0x95, 0xb6, 0xcb, 0x6b, 0x6c, 0x45, 0x91, 0x49, 0xec, 0x7c, 0xea, 0x64, 0xad, 0x7f, 0x3e,
	0xef, 0xb8, 0xbd, 0x0e, 0xd9, 0x43, 0xb5, 0x7e, 0x3d, 0xff, 0xac, 0xbd, 0x0a, 0x33, 0xdd, 0x23,
	0xb2, 0xb8, 0xd2, 0x32, 0xfb, 0x02, 0x9f, 0xf1, 0x1a, 0x08, 0x85, 0xff, 0x56, 0x8a, 0xbb, 0xab,
	0xbf, 0x9e, 0x27, 0xfc, 0xa7, 0x39, 0x40, 0x2b, 0x53, 0x86, 0xb8, 0x6b, 0x39, 0x8b, 0x78, 0x04,
	0xd7, 0xbf, 0xc8, 0x43, 0xa6, 0xc3, 0x70, 0x52, 0xa4, 0xbf, 0xd3, 0x86, 0x73, 0xbb, 0x7e, 0x23,
	0xe5, 0x01, 0xb5, 0xe1, 0xdc, 0xc6, 0x5e, 0x49, 0x23, 0xd5, 0x96, 0x3a, 0xe3, 0xbe, 0xc4, 0xbd,
	0xca, 0x80, 0x71, 0xfa, 0x5c, 0xa7, 0x65, 0x07, 0xce, 0xa3, 0x7e, 0xb7, 0x7e, 0x53, 0x9a, 0x68,
	0x15, 0x00, 0x17, 0x72, 0x20, 0x58, 0x1d, 0x5e, 0xff, 0x32, 0x2f, 0x64, 0x95, 0xc6, 0x36, 0xb0,
	0x45, 0xe1, 0xbe, 0x1d, 0xee, 0xd6, 0x6f, 0x71, 0x1b, 0x12, 0x08, 0x6e, 0x2b, 0x9c, 0xba, 0xd7,
	0xef, 0x74, 0x08, 0xe7, 0x0d, 0x56, 0xb2, 0xa7, 0xa1, 0xc6, 0xb7, 0xe0, 0xac, 0x9d, 0xc7, 0xdd,
	0xd5, 0x97, 0x68, 0xf0, 0x5e, 0xcd, 0xe8, 0x00, 0xf2, 0x50, 0xad, 0xfc, 0x1a, 0x70, 0x18, 0x14,
	0x73, 0xa1, 0xc4, 0x86, 0xdb, 0xbc, 0x63, 0x65, 0xc0, 0x48, 0x46, 0xe2, 0x90, 0x94, 0x09, 0xf5,
	0x37, 0x99, 0x8c, 0x64, 0xd2, 0x78, 0x1d, 0xe6, 0x63, 0x06, 0xc5, 0x3e, 0xe4, 0x1d, 0xfc, 0x2d,
	0xaa, 0x64, 0x00, 0x8e, 0xbb, 0x90, 0x82, 0x2d, 0xb7, 0x5a, 0x22, 0x24, 0x1b, 0x7b, 0xfd, 0x4e,
	0x9a, 0x19, 0x4b, 0x72, 0x8c, 0x0f, 0x61, 0xce, 0x13, 0x07, 0xab, 0x32, 0x83, 0x66, 0xfb, 0x6b,
	0xd4, 0xe9, 0x63, 0xb9, 0x26, 0xc4, 0xb3, 0xb2, 0x05, 0x59, 0x62, 0xec, 0x08, 0x36, 0xb3, 0xd5,
	0xdf, 0xe6, 0x75, 0x9a, 0x40, 0x90, 0x7c, 0x1d, 0x11, 0xb6, 0x02, 0xb7, 0x87, 0xe3, 0x54, 0x7f,
	0x47, 0x39, 0x09, 0xc4, 0x20, 0xac, 0x01, 0xe7, 0x5d, 0xae, 0x82, 0x77, 0x79, 0x42, 0x13, 0x08,
	0xd6, 0xd0, 0xb1, 0xb7, 0x45, 0x67, 0xdd, 0x21, 0xfe, 0xee, 0xeb, 0x5c, 0x83, 0x06, 0x32, 0x3e,
	0x84, 0x79, 0xb2, 0xee, 0x3f, 0xea, 0x93, 0xbc, 0x4d, 0xc3, 0xf9, 0x5e, 0x1e, 0x7f, 0xb1, 0x99,
	0xc1, 0xb2, 0x06, 0xca, 0xe1, 0xdf, 0x0e, 0x84, 0xbb, 0xe6, 0xda, 0x1e, 0x55, 0xf3, 0x3e, 0xff,
	0x4d, 0x03, 0x19, 0xb7, 0xe0, 0x8c, 0x1a, 0x53, 0x4c, 0xab, 0x19, 0xfe, 0x06, 0xdb, 0x05, 0x72,
	0xb2, 0x70, 0x7e, 0x78, 0x44, 0x52, 0x87, 0xd8, 0x32, 0xcf, 0xcf, 0x60, 0x8e, 0x3a, 0x19, 0xb1,
	0x1a, 0xb6, 0xf3, 0xd4, 0x57, 0x92, 0x93, 0x31, 0x81, 0x4a, 0xea, 0xa1, 0x81, 0x5f, 0x65, 0x1e,
	0x47, 0x26, 0x49, 0x4e, 0xa7, 0x33, 0xe0, 0xae, 0xa4, 0xae, 0x35, 0xde, 0x84, 0x52, 0x40, 0x73,
	0x17, 0xe6, 0xb3, 0x23, 0x32, 0x44, 0xeb, 0xf1, 0x1e, 0x54, 0xf5, 0x91, 0x92, 0x4c, 0xf6, 0xc5,
	0xfc, 0xd1, 0x25, 0x91, 0x27, 0x85, 0x6f, 0xbe, 0x0e, 0x55, 0x3d, 0x97, 0x4e, 0x6a, 0x99, 0x8e,
	0x8d, 0x0e, 0x32, 0x6d, 0xfe, 0xa7, 0x09, 0x98, 0x5a, 0x76, 0x9c, 0x8d, 0xb0, 0x6d, 0x9c, 0x85,
	0xa9, 0x6e, 0xd8, 0xd6, 0x34, 0x3a, 0xdd, 0x10, 0x77, 0xee, 0x55, 0x98, 0xdd, 0x09, 0xfc, 0x6e,
	0x33, 0x11, 0x9b, 0x46, 0x62, 0x87, 0xab, 0x58, 0x28, 0xde, 0x81, 0xde, 0x87, 0x6a, 0xe4, 0x6b,
	0x55, 0x8c, 0xc4, 0x15, 0x43, 0xe4, 0xc7, 0x15, 0x5c, 0x80, 0x69, 0x6c, 0x1c, 0xe9, 0xc9, 0x58,
	0x89, 0x52, 0xee, 0x86, 0x6d, 0x5a, 0x60, 0x6f, 0xe1, 0xe9, 0xc0, 0x87, 0x6b, 0x69, 0x24, 0x8e,
	0x59, 0x62, 0x6b, 0x6a, 0x88, 0xa9, 0x94, 0x1a, 0xe2, 0x32, 0x00, 0xf9, 0x1c, 0x72, 0x5e, 0x59,
	0xfa, 0xac, 0x74, 0xdb, 0x92, 0x10, 0xde, 0x62, 0x97, 0xc4, 0xed, 0xfe, 0x8e, 0xf4, 0x5b, 0x18,
	0x95, 0xaf, 0x7e, 0x19, 0x66, 0x5a, 0x81, 0xb0, 0x23, 0xe9, 0x54, 0x2a, 0x8d, 0xaa, 0x0c, 0x22,
	0x0b, 0xf5, 0x65, 0x00, 0xec, 0xa4, 0x64, 0x2f, 0xd8, 0xf7, 0xa8, 0xd2, 0x0d, 0xdb, 0xd2, 0xd5,
	0xe6, 0x15, 0xa8, 0x92, 0xa5, 0x52, 0xf5, 0x96, 0x6d, 0xa9, 0x33, 0x08, 0x53, 0x8c, 0xc4, 0x25,
	0x00, 0x4f, 0x1c, 0x34, 0xe5, 0x3c, 0x56, 0x49, 0x0d, 0x39, 0xed, 0x89, 0x83, 0x0d, 0x9c, 0x4a,
	0xf3, 0xa7, 0x0b, 0x60, 0x2c, 0x4b, 0x1f, 0x13, 0x2b, 0xb4, 0x2d, 0xf1, 0x9c, 0x76, 0x95, 0x7b,
	0x30, 0x67, 0x8b, 0x30, 0xe5, 0x3d, 0x31, 0x9a, 0xb5, 0xa0, 0x66, 0x8b, 0x50, 0xf3, 0x9d, 0xb8,
	0x0d, 0xd0, 0xeb, 0x6f, 0xdf, 0x95, 0x5e, 0x36, 0x13, 0xc7, 0x79, 0xd9, 0x68, 0x88, 0xe6, 0x77,
	0x4a, 0x49, 0xab, 0x96, 0x45, 0xa8, 0x5a, 0xf5, 0x7d, 0x77, 0x7d, 0x1b, 0xf0, 0xe2, 0x99, 0x38,
	0xbd, 0x17, 0x8f, 0x72, 0x9f, 0x63, 0x2d, 0x00, 0xbb, 0xcf, 0xa5, 0x1c, 0xe3, 0x4b, 0x19, 0xc7,
	0xf8, 0xd7, 0x60, 0x56, 0xea, 0xf8, 0x9b, 0xd2, 0x71, 0x6e, 0x2a, 0xe5, 0x38, 0xb7, 0x9e, 0xef,
	0x38, 0x57, 0x3e, 0xc1, 0x71, 0x6e, 0x3a, 0xcb, 0x6f, 0x67, 0xee, 0x0b, 0x54, 0x06, 0xee, 0x0b,
	0x0c, 0x38, 0xf9, 0xc1, 0xa0, 0x93, 0x9f, 0xee, 0x29, 0x37, 0x73, 0x9c, 0xa7, 0x5c, 0x75, 0x64,
	0x4f, 0xb9, 0xfb, 0x30, 0x97, 0x76, 0xec, 0xb2, 0x49, 0x94, 0x1a, 0xcd, 0x93, 0x47, 0x2f, 0x66,
	0x7c, 0x03, 0x66, 0xc4, 0x61, 0xd4, 0xe8, 0xd9, 0x74, 0x3a, 0x48, 0x37, 0x99, 0x13, 0x27, 0x4f,
	0x2b, 0x62, 0x7e, 0xb7, 0x00, 0x73, 0xf1, 0x72, 0x91, 0x74, 0xb5, 0x02, 0xd5, 0x20, 0xb4, 0x89,
	0xac, 0xb4, 0x6b, 0x25, 0x57, 0x07, 0xac, 0x1f, 0x99, 0x35, 0x66, 0x41, 0x90, 0xac, 0xb7, 0x15,
	0xa8, 0xe2, 0x7a, 0x8b, 0xeb, 0x28, 0x1e, 0x57, 0x47, 0xb2, 0x22, 0x2c, 0xb0, 0xe3, 0x6f, 0xf3,
	0x7f, 0x16, 0xc0, 0xd8, 0x70, 0x5b, 0x81, 0xbf, 0x11, 0xb6, 0x65, 0xdb, 0x1e, 0x89, 0x03, 0x94,
	0x12, 0x93, 0x4d, 0x73, 0x34, 0x95, 0x87, 0xbe, 0xcb, 0xd6, 0x93, 0xad, 0xb4, 0xa8, 0x18, 0x6d,
	0xde, 0x58, 0x94, 0xc5, 0x63, 0x42, 0xb3, 0x78, 0x20, 0x2f, 0x11, 0x6f, 0x5e, 0x72, 0x57, 0xd6,
	0xb7, 0x33, 0x14, 0x9b, 0x69, 0x52, 0x68, 0xf7, 0x91, 0xba, 0x5e, 0x1d, 0x84, 0x34, 0x1a, 0x6f,
	0x6f, 0xd2, 0x00, 0xa8, 0xed, 0x77, 0xd8, 0x9a, 0x28, 0xe8, 0xac, 0xb8, 0x91, 0xd2, 0x43, 0xc8,
	0xa4, 0x79, 0x08, 0x0b, 0x8f, 0xc4, 0x41, 0x43, 0x78, 0x4e, 0xd2, 0x7d, 0xa4, 0x38, 0xdc, 0xf7,
	0xf4, 0x03, 0x15, 0xcf, 0x0c, 0xe6, 0xda, 0xee, 0xf1, 0x29, 0xdf, 0x0c, 0x85, 0xe7, 0x1c, 0xa3,
	0xba, 0x1a, 0x1c, 0x52, 0x66, 0xca, 0xf1, 0x57, 0x74, 0xb6, 0xfe, 0xcd, 0x22, 0x9c, 0x49, 0x90,
	0x58, 0xdd, 0x8e, 0x03, 0xaf, 0x69, 0xdc, 0x6b, 0xac, 0x71, 0x4f, 0x4f, 0x45, 0xf1, 0xb4, 0x53,
	0xb1, 0x08, 0x7c, 0xfe, 0xca, 0x11, 0x97, 0x87, 0x71, 0x66, 0x48, 0x27, 0x07, 0x87, 0x34, 0x3d,
	0x29, 0xa5, 0x81, 0x49, 0xb9, 0x02, 0x9a, 0x4f, 0x94, 0xdc, 0x5c, 0x74, 0x2f, 0x29, 0x35, 0xd1,
	0x65, 0x6d, 0xa2, 0x2f, 0x42, 0x7c, 0x86, 0xd0, 0x4e, 0x32, 0x99, 0x9c, 0x29, 0xe9, 0x29, 0xac,
	0x64, 0xa6, 0xd0, 0xfc, 0xb5, 0x02, 0x18, 0xfa, 0x4c, 0x8d, 0xcb, 0x42, 0x19, 0x33, 0x4e, 0x45,
	0x9d, 0x71, 0x7a, 0xc4, 0xac, 0x39, 0x4f, 0x72, 0x20, 0xa2, 0xa6, 0xe6, 0x13, 0xf2, 0xca, 0xb0,
	0x89, 0x8e, 0xe7, 0x90, 0x05, 0x06, 0x6c, 0xaa, 0x25, 0x48, 0xb4, 0x30, 0xff, 0x7a, 0x01, 0xae,
	0x7c, 0x20, 0xa2, 0xd5, 0x94, 0xee, 0x72, 0x4d, 0x44, 0xb6, 0xdb, 0x19, 0x8f, 0x83, 0xf6, 0xab,
	0x2c, 0xe1, 0x93, 0x5a, 0x95, 0xfc, 0xc4, 0x8a, 0x89, 0x1c, 0x88, 0xc0, 0x67, 0x87, 0x6e, 0xde,
	0x85, 0xc2, 0x89, 0x9c, 0x0b, 0x85, 0xe6, 0x1f, 0x14, 0xe0, 0xe5, 0xa1, 0x8d, 0x1d, 0xd7, 0xb8,
	0x8f, 0xb1, 0xc1, 0xc6, 0x32, 0x48, 0x15, 0x33, 0xef, 0x82, 0x93, 0x23, 0x0a, 0x45, 0xd0, 0x8d,
	0xbf, 0xcd, 0x9f, 0x04, 0x38, 0xb3, 0xd5, 0xeb, 0xf8, 0x36, 0x52, 0x17, 0xbb, 0x9a, 0x8e, 0xc7,
	0x6d, 0x5e, 0xb6, 0x1f, 0xf9, 0x3c, 0xd9, 0xc9, 0x13, 0x17, 0xaf, 0x5c, 0x85, 0xeb, 0xa4, 0xee,
	0x78, 0x0f, 0x66, 0x90, 0x08, 0x45, 0xd0, 0x8c, 0x2f, 0x3e, 0x9d, 0xbc, 0xfa, 0xb9, 0x04, 0x0d,
	0xe1, 0xdb, 0x50, 0x09, 0x44, 0x6b, 0x9f, 0x4b, 0x8f, 0xa4, 0x07, 0x9e, 0x46, 0xfc, 0x67, 0xd2,
	0xbf, 0x30, 0xf2, 0x23, 0xbb, 0xd3, 0xec, 0x08, 0x4f, 0x6e, 0x00, 0xd3, 0x04, 0x78, 0x28, 0xc8,
	0x89, 0x30, 0x8c, 0xec, 0x20, 0x6a, 0xf6, 0x7c, 0xc5, 0xf6, 0x4e, 0x13, 0x60, 0xd3, 0x0f, 0x91,
	0xc9, 0xc6, 0xa9, 0xa0, 0x82, 0x72, 0xc7, 0xc5, 0x34, 0x96, 0x5b, 0x92, 0xd6, 0xe0, 0xd1, 0x38,
	0x5e, 0xc2, 0x4d, 0xf1, 0xec, 0x95, 0x34, 0xcf, 0x7e, 0x02, 0xa7, 0x8b, 0x64, 0xe6, 0x77, 0x7b,
	0x81, 0x08, 0xa5, 0x43, 0xfb, 0x8c, 0xb2, 0x3e, 0x32, 0xf0, 0x89, 0x34, 0xb8, 0x7b, 0x42, 0xb2,
	0x51, 0xec, 0x32, 0x58, 0xf6, 0x44, 0xa4, 0xaa, 0xef, 0xed, 0xfa, 0x91, 0xdf, 0x44, 0x21, 0x44,
	0xb2, 0x18, 0x15, 0x82, 0xdc, 0x0b, 0xfc, 0x2e, 0x32, 0x59, 0x7d, 0xb7, 0xa9, 0xf3, 0xe2, 0xac,
	0xae, 0xad, 0xf6, 0xdd, 0xd5, 0x64, 0xa7, 0xfc, 0x1c, 0xcc, 0xb5, 0x1c, 0xaf, 0xb9, 0xed, 0xb6,
	0x63, 0x0b, 0xcd, 0x9c, 0xa4, 0x76, 0xc7, 0x5b, 0x71, 0xdb, 0x52, 0x62, 0xfe, 0x02, 0x2c, 0x20,
	0x1a, 0xdb, 0x73, 0x14, 0x22, 0x3b, 0x08, 0xce, 0xb6, 0x1c, 0xaf, 0x81, 0x70, 0x89, 0x7a, 0x1e,
	0xca, 0x78, 0xf0, 0x23, 0x2f, 0x29, 0x3d, 0xf4, 0x6d, 0x11, 0x22, 0x9b, 0xf8, 0x12, 0x54, 0x88,
	0xfb, 0x26, 0x1f, 0x7a, 0xd6, 0xb7, 0x4e, 0x13, 0xe0, 0xa9, 0x08, 0x8c, 0xcf, 0xc3, 0xbc, 0xde,
	0x0e, 0x72, 0x1f, 0x38, 0x23, 0x17, 0x94, 0x6a, 0x48, 0xc3, 0xfd, 0x44, 0x28, 0xc4, 0xae, 0xeb,
	0x24, 0x88, 0x8b, 0x31, 0xe2, 0x86, 0xeb, 0x28, 0x44, 0xd9, 0xe4, 0x68, 0xb7, 0xdf, 0xdd, 0x8e,
	0x9b, 0x7c, 0x36, 0x6e, 0xf2, 0x13, 0x84, 0x27, 0x96, 0xaa, 0x34, 0x2a, 0xd5, 0x7a, 0x4e, 0x2a,
	0x58, 0x12, 0xdc, 0x06, 0xfb, 0xe5, 0x2c, 0xa6, 0x91, 0x77, 0x85, 0xdb, 0xde, 0x8d, 0xa4, 0x8a,
	0x76, 0x41, 0x43, 0xbf, 0x4f, 0x19, 0xc6, 0x97, 0xe0, 0x4c, 0xba, 0xc0, 0x81, 0xeb, 0x44, 0xbb,
	0x52, 0x55, 0x3b, 0xaf, 0xe1, 0x3f, 0x43, 0x78, 0xba, 0xdd, 0x6a, 0x24, 0x2f, 0xa4, 0xdb, 0xbd,
	0xcc, 0x23, 0x7a, 0x01, 0xa6, 0x91, 0xbf, 0xa2, 0xc9, 0xbd, 0xc8, 0xc4, 0x11, 0x88, 0xe7, 0x34,
	0xaf, 0x78, 0x76, 0x04, 0xad, 0xaf, 0x2c, 0x91, 0xa2, 0x16, 0xcf, 0x0e, 0x4c, 0x18, 0xd7, 0x61,
	0x1e, 0x29, 0x72, 0xc7, 0x0f, 0x0e, 0xec, 0xc0, 0x61, 0xaa, 0xba, 0xcc, 0x8a, 0x80, 0x6e, 0xd8,
	0xbe, 0xc7, 0x60, 0x22, 0xae, 0xf3, 0x50, 0xde, 0x75, 0xa3, 0x66, 0xd7, 0xb9, 0x4d, 0xea, 0xda,
	0x9a, 0x35, 0xb5, 0xeb, 0x46, 0x1b, 0xce, 0x6d, 0x14, 0xa0, 0xed, 0x5e, 0x0f, 0x37, 0x8c, 0x97,
	0xa5, 0x1a, 0xb7, 0xd7, 0xe3, 0x0b, 0xe1, 0x5d, 0x11, 0x86, 0x76, 0x5b, 0x34, 0xed, 0x16, 0xe9,
	0x65, 0xa4, 0x86, 0x56, 0x42, 0x97, 0x09, 0x88, 0x1c, 0xb9, 0x42, 0x13, 0x87, 0x11, 0xe9, 0x68,
	0x2b, 0xb8, 0xd9, 0x11, 0xe8, 0xee, 0x61, 0x84, 0x54, 0xdb, 0x15, 0x8e, 0x6b, 0x37, 0x23, 0xbb,
	0xcd, 0x5c, 0xbb, 0xc9, 0xe4, 0x48, 0xd0, 0x27, 0x76, 0x9b, 0xcc, 0xcf, 0x7f, 0xad, 0x00, 0x33,
	0x77, 0x83, 0x60, 0x7c, 0x5b, 0x3e, 0xd2, 0x66, 0x10, 0xf8, 0x01, 0xb5, 0x4a, 0x1a, 0x45, 0x09,
	0x80, 0x6d, 0x8a, 0x33, 0xbb, 0x61, 0x5b, 0xdd, 0x07, 0x24, 0xc0, 0x46, 0xd8, 0xc6, 0x55, 0xc8,
	0x99, 0x74, 0x49, 0x4f, 0x5e, 0x93, 0x25, 0xc8, 0xaa, 0xef, 0x08, 0xf3, 0x6f, 0x15, 0x60, 0x16,
	0x0f, 0x2c, 0x11, 0x44, 0xe3, 0xd9, 0xb7, 0xc7, 0x25, 0xc7, 0xd6, 0xa1, 0x9c, 0x3e, 0xb8, 0x54,
	0xd2, 0x7c, 0x1f, 0xca, 0x56, 0x63, 0x59, 0xe9, 0xa4, 0xbb, 0xbe, 0xd3, 0xef, 0xc8, 0x5b, 0x96,
	0x15, 0x4b, 0x25, 0x91, 0x5b, 0x12, 0x87, 0x3d, 0xdf, 0x4b, 0xb8, 0xe8, 0x38, 0x6d, 0xfe, 0x5c,
	0x01, 0xe6, 0xe2, 0x3e, 0x8f, 0x6b, 0x86, 0x6e, 0xc1, 0x34, 0xca, 0x24, 0x9a, 0x98, 0x7b, 0x76,
	0xe0, 0x46, 0x35, 0x89, 0xb7, 0xe5, 0x20, 0xb4, 0xd5, 0xad, 0x4a, 0x2c, 0x81, 0xbb, 0x8d, 0xbc,
	0x46, 0x1e, 0x84, 0xf6, 0x53, 0x11, 0x98, 0xbf, 0x50, 0x84, 0xc5, 0x86, 0xb0, 0x83, 0xd6, 0xae,
	0xd4, 0x91, 0x8d, 0x67, 0x66, 0x52, 0xbe, 0x18, 0xc5, 0xd3, 0x19, 0x62, 0xcf, 0x43, 0xd9, 0xef,
	0x35, 0xd3, 0x57, 0xde, 0xe9, 0x9a, 0xe7, 0x5b, 0x50, 0x96, 0x97, 0x5c, 0x46, 0x75, 0x3f, 0x09,
	0xe8, 0x72, 0x0b, 0xd2, 0x25, 0x69, 0xb4, 0xd8, 0x25, 0x87, 0x4f, 0xc8, 0x0a, 0x42, 0x58, 0x21,
	0xf8, 0x0a, 0x54, 0x43, 0x1a, 0x82, 0xa6, 0x1e, 0x87, 0x61, 0x86, 0x61, 0x84, 0x62, 0xfe, 0xfd,
	0x02, 0xcc, 0x68, 0xd6, 0x0a, 0xf2, 0xfd, 0xf2, 0x42, 0xdd, 0xbd, 0xa3, 0x1c, 0x7a, 0xa1, 0x54,
	0xc9, 0x56, 0x31, 0x6b, 0xbb, 0xad, 0xf1, 0x12, 0x15, 0x0b, 0x42, 0x2f, 0x54, 0xa6, 0x91, 0x6b,
	0x30, 0xc7, 0x18, 0xfe, 0xf6, 0xc7, 0xa2, 0x15, 0xa9, 0x98, 0x12, 0x93, 0x56, 0x8d, 0x90, 0x18,
	0xba, 0x4e, 0xb7, 0xce, 0xd5, 0x4f, 0xc4, 0xa1, 0x5a, 0x4e, 0xf2, 0x37, 0xe2, 0xd0, 0xb8, 0x01,
	0x06, 0x66, 0xf7, 0x02, 0x77, 0xdf, 0x6e, 0x1d, 0x35, 0x03, 0xd1, 0x52, 0x1a, 0xb1, 0x9a, 0x35,
	0x1f, 0x7a, 0xe1, 0x26, 0x67, 0x58, 0x04, 0x37, 0x7f, 0x07, 0xe0, 0x6c, 0x66, 0xa2, 0xc7, 0x45,
	0x8e, 0x2f, 0x32, 0xd9, 0x29, 0xc7, 0x9b, 0x89, 0x17, 0x30, 0xbb, 0x4f, 0x9e, 0xd2, 0xec, 0x7e,
	0x07, 0xa6, 0x9f, 0xf7, 0x6d, 0xaf, 0xd9, 0x73, 0xbd, 0x11, 0xb5, 0x88, 0x19, 0xbb, 0xfb, 0x94,
	0xf2, 0xfb, 0x3e, 0xd4, 0x15, 0x84, 0xe5, 0x53, 0x29, 0x08, 0x75, 0x93, 0xea, 0xf4, 0x10, 0x93,
	0x6a, 0x65, 0x98, 0x49, 0x15, 0xb2, 0x2a, 0x9e, 0x57, 0xa1, 0xa6, 0xcc, 0xa7, 0xcd, 0x96, 0x1d,
	0x38, 0x8a, 0x89, 0x4a, 0xd9, 0x54, 0x5f, 0x86, 0x19, 0x79, 0x23, 0x8b, 0x88, 0xb7, 0x3a, 0x60,
	0x24, 0x4d, 0x10, 0x68, 0x7f, 0xa9, 0x0d, 0x58, 0x49, 0xcf, 0xc2, 0xd4, 0x81, 0x70, 0x9b, 0xdb,
	0xbe, 0xbc, 0x5f, 0x51, 0x3a, 0x10, 0xee, 0x8a, 0x9f, 0x98, 0x34, 0xe7, 0x74, 0x93, 0xe6, 0xe7,
	0x61, 0x9e, 0x91, 0x9b, 0xc9, 0x34, 0xcf, 0xc7, 0xf6, 0xca, 0x15, 0xb2, 0x57, 0x4a, 0xc3, 0xd3,
	0x8c, 0x44, 0xa4, 0x76, 0x2d, 0xc4, 0x16, 0xcb, 0x15, 0x3f, 0xbe, 0x55, 0xdb, 0xd9, 0xee, 0x77,
	0xf9, 0x22, 0x94, 0xba, 0x83, 0xa4, 0x99, 0x2c, 0x2f, 0x4b, 0x93, 0xa6, 0x7e, 0xfb, 0x48, 0xb3,
	0x59, 0x7e, 0x1e, 0xe6, 0x39, 0x5b, 0xb1, 0x55, 0xae, 0x23, 0xad, 0xd5, 0x35, 0xb6, 0x5b, 0x12,
	0x5b, 0xb5, 0xee, 0x18, 0x5f, 0x07, 0x5c, 0x86, 0xac, 0xba, 0xa6, 0x11, 0x38, 0xfb, 0x69, 0x4d,
	0x97, 0xe7, 0xd2, 0xa6, 0x4b, 0x13, 0x6a, 0xdd, 0x23, 0xbe, 0xf0, 0xc9, 0x72, 0xea, 0xf9, 0x41,
	0x63, 0xe3, 0x5d, 0x98, 0x4b, 0x0c, 0x87, 0xfc, 0xfb, 0xfa, 0xa7, 0xb0, 0x36, 0x12, 0x3b, 0x4d,
	0xab, 0x5c, 0x6a, 0x47, 0x2e, 0x24, 0xce, 0x7c, 0x76, 0x2b, 0x62, 0x0d, 0x49, 0x9e, 0xf3, 0xd2,
	0x4b, 0xa3, 0x3b, 0x2f, 0x5d, 0xca, 0x37, 0xa8, 0xd2, 0x26, 0x1d, 0xd2, 0x5a, 0xb8, 0x3c, 0xea,
	0x26, 0x1d, 0xe2, 0x5a, 0xf8, 0x3c, 0xcc, 0xd9, 0x5e, 0xe4, 0x86, 0x3d, 0xbb, 0xab, 0xae, 0xaa,
	0xb1, 0x71, 0x7c, 0x56, 0x81, 0x93, 0xeb, 0x6a, 0x7b, 0x3b, 0x07, 0x7e, 0xb0, 0xc7, 0xfe, 0x68,
	0xcc, 0x7a, 0x81, 0x02, 0xf1, 0xbe, 0xd9, 0xb5, 0xa3, 0xd6, 0x2e, 0xf3, 0x74, 0x57, 0x99, 0x12,
	0x08, 0xa2, 0x34, 0xae, 0x3d, 0xbf, 0xd7, 0xef, 0xb1, 0xa6, 0x13, 0xf9, 0x18, 0x66, 0xbd, 0xaa,
	0x04, 0xc5, 0xf1, 0x43, 0x5e, 0xe6, 0x16, 0x2c, 0xfa, 0x3d, 0xe1, 0x35, 0xdd, 0x6e, 0x7a, 0x24,
	0x4d, 0xb6, 0x2b, 0x61, 0xde, 0x7a, 0x57, 0x1f, 0x4f, 0xf3, 0xd7, 0x27, 0x01, 0xf8, 0xae, 0x22,
	0x12, 0x03, 0xae, 0x87, 0x7d, 0xbb, 0xd3, 0x57, 0x4e, 0x67, 0x9c, 0xc0, 0x4d, 0x5b, 0xae, 0x2e,
	0x22, 0x30, 0xd9, 0x51, 0xe9, 0x53, 0xb7, 0x1f, 0x97, 0x96, 0x5d, 0xcd, 0x19, 0x93, 0x89, 0x61,
	0x63, 0xb2, 0x13, 0xb8, 0x42, 0x79, 0x1c, 0x4a, 0xd5, 0x1c, 0x83, 0x88, 0xfc, 0xbf, 0xc4, 0x66,
	0xb5, 0x26, 0x09, 0xf2, 0xd9, 0xb8, 0x30, 0xf3, 0xca, 0x0c, 0x1d, 0x2b, 0xa3, 0xae, 0xc3, 0x3c,
	0x8b, 0x6a, 0x1a, 0x2e, 0xab, 0xeb, 0x66, 0x19, 0x9e, 0x83, 0x99, 0x8d, 0xaf, 0x21, 0x31, 0xe3,
	0x15, 0xfe, 0x15, 0x38, 0x17, 0xb6, 0xec, 0x38, 0x5c, 0x89, 0x76, 0x22, 0x4f, 0xcb, 0x4b, 0x3f,
	0x2d, 0x5b, 0x46, 0x22, 0xb9, 0x17, 0x9f, 0xcd, 0x2f, 0xc3, 0x4c, 0x20, 0x7a, 0x7e, 0x20, 0x3d,
	0xc8, 0xa5, 0xda, 0x9a, 0x41, 0x44, 0xea, 0x6f, 0x41, 0x3d, 0xdc, 0xb5, 0x03, 0x41, 0x3b, 0x5e,
	0xcc, 0xcd, 0xb3, 0x1b, 0x07, 0x5f, 0x51, 0x3b, 0x4b, 0xf9, 0xb8, 0xf9, 0x49, 0xa6, 0xfe, 0x21,
	0xb9, 0x75, 0x6c, 0xc1, 0xf9, 0x9c, 0x82, 0xf4, 0x97, 0x99, 0x91, 0x08, 0x77, 0x31, 0x5b, 0xaf,
	0xf2, 0x37, 0xf4, 0xfb, 0x91, 0x08, 0x68, 0x8d, 0x48, 0x35, 0x38, 0x01, 0x70, 0x71, 0xa0, 0x30,
	0xde, 0xdf, 0x96, 0xbd, 0xae, 0x49, 0x61, 0xbc, 0xbf, 0xcd, 0x3c, 0xc6, 0x8f, 0x28, 0xf2, 0x51,
	0xee, 0x9f, 0x1f, 0x87, 0x76, 0xcf, 0xd5, 0x1d, 0x17, 0x2b, 0x04, 0x51, 0xda, 0xc2, 0x9c, 0xb8,
	0x2b, 0x2f, 0x41, 0x45, 0x52, 0x97, 0x1f, 0x7b, 0xd8, 0x31, 0xe0, 0xf1, 0x9e, 0xf9, 0x27, 0x93,
	0xb0, 0x90, 0xd0, 0xe7, 0x78, 0xf8, 0x3c, 0x8d, 0x57, 0x2b, 0xa6, 0x78, 0xb5, 0x37, 0xe0, 0xac,
	0x4e, 0xe7, 0xb8, 0xdf, 0xb1, 0x24, 0xc9, 0xad, 0x32, 0x12, 0x52, 0xc7, 0x7d, 0x8f, 0x84, 0xc9,
	0x95, 0x38, 0xa4, 0x46, 0x5c, 0x44, 0x5e, 0xcb, 0xca, 0x5c, 0xc2, 0xd6, 0x3a, 0x31, 0x9b, 0xae,
	0x27, 0x27, 0xd6, 0x46, 0x29, 0xcf, 0xfd, 0x06, 0x89, 0x16, 0xc7, 0x9c, 0xdb, 0xc5, 0x0b, 0x9b,
	0xcf, 0xf3, 0x59, 0x82, 0x63, 0x5d, 0xbc, 0x49, 0x22, 0x0f, 0x16, 0x63, 0x12, 0x61, 0x57, 0xad,
	0x4a, 0x8c, 0x83, 0x34, 0xad, 0x1d, 0x96, 0x7a, 0x75, 0x92, 0xa6, 0x93, 0x73, 0x33, 0xa9, 0x33,
	0xe9, 0x68, 0x5c, 0xa8, 0x5e, 0x19, 0xde, 0x51, 0xde, 0xe1, 0xd3, 0x15, 0xc9, 0x2b, 0xd0, 0xa9,
	0x7b, 0xf4, 0xf6, 0x88, 0xb7, 0x96, 0x07, 0x0c, 0x27, 0x2b, 0xe4, 0x8e, 0xdc, 0xa4, 0x5d, 0xe6,
	0x14, 0xf4, 0xaf, 0x9b, 0x4e, 0x90, 0x87, 0xf6, 0x84, 0x70, 0x70, 0xd8, 0x77, 0xdc, 0xa0, 0x2b,
	0xf9, 0x8a, 0x19, 0x84, 0xad, 0x32, 0xc8, 0x0c, 0xc0, 0xd0, 0xc9, 0x6f, 0x8c, 0xe2, 0x6a, 0x9a,
	0xfb, 0xd4, 0x1c, 0x7c, 0xcd, 0x7f, 0x51, 0x80, 0xd9, 0x87, 0xdb, 0xe1, 0x43, 0xbf, 0x65, 0xa3,
	0xcc, 0xfd, 0x48, 0x1c, 0x20, 0x0f, 0xd5, 0xf1, 0xbd, 0xb6, 0x1b, 0xf5, 0x1d, 0xfe, 0x59, 0xd1,
	0x4a, 0x00, 0x6c, 0xe1, 0x8a, 0x38, 0xb3, 0x48, 0x99, 0x71, 0x1a, 0x4b, 0xf6, 0x02, 0xd1, 0x72,
	0x35, 0x41, 0x31, 0x01, 0x90, 0xf2, 0xcb, 0x6e, 0x35, 0x6d, 0xc7, 0x09, 0xa4, 0xf5, 0xaf, 0xdc,
	0xb5, 0x5b, 0xcb, 0x8e, 0x13, 0xe0, 0x2a, 0x69, 0x89, 0x4e, 0x07, 0x4f, 0x2b, 0x19, 0xfa, 0x0d,
	0x93, 0x7c, 0x52, 0xb5, 0x7b, 0xa1, 0xd2, 0x8a, 0x31, 0x05, 0x56, 0xda, 0xbd, 0x30, 0xb1, 0x87,
	0x60, 0x75, 0x22, 0x0c, 0xe5, 0x96, 0xaa, 0x92, 0xe6, 0x8f, 0x15, 0xe1, 0x3c, 0x73, 0xf3, 0xac,
	0xf0, 0xdd, 0xb4, 0xdb, 0xf1, 0x9a, 0xfc, 0x1c, 0xcc, 0x6e, 0xf7, 0xc3, 0xd0, 0xf5, 0x62, 0x65,
	0x1a, 0x47, 0x45, 0xa8, 0xc5, 0x50, 0xa5, 0x4d, 0xdb, 0x13, 0x47, 0xcd, 0x03, 0x3f, 0x50, 0x32,
	0x4a, 0x79, 0x4f, 0x1c, 0x3d, 0xf3, 0x03, 0x87, 0x2e, 0xb6, 0xee, 0xec, 0x84, 0xf2, 0xb4, 0xc1,
	0x45, 0x4d, 0x29, 0xe4, 0x99, 0x3b, 0x72, 0x24, 0x25, 0xbf, 0x9d, 0x61, 0x4b, 0xd2, 0x43, 0x6d,
	0xc5, 0xd8, 0xbc, 0x8d, 0x53, 0xf3, 0x9a, 0x61, 0xd0, 0x52, 0x56, 0x0a, 0x09, 0x6a, 0x04, 0xad,
	0xe4, 0xc2, 0x44, 0x59, 0xbf, 0x30, 0x81, 0xfb, 0x25, 0x4b, 0x66, 0xae, 0x23, 0x57, 0xd4, 0x34,
	0x03, 0xd6, 0x1d, 0x33, 0x84, 0xfa, 0xe0, 0x10, 0x8c, 0x8b, 0xaa, 0x86, 0x0c, 0x81, 0xf9, 0x67,
	0x27, 0x61, 0x31, 0xad, 0x80, 0x1e, 0x53, 0x40, 0xcc, 0xd8, 0xfc, 0x53, 0xd4, 0xcd, 0x3f, 0xef,
	0x83, 0xae, 0x65, 0x1e, 0x4d, 0x40, 0x4a, 0xe9, 0xa5, 0x97, 0x21, 0xe5, 0x97, 0x31, 0x9a, 0x98,
	0x94, 0x76, 0xe5, 0x48, 0xdb, 0xb5, 0x4a, 0xa7, 0xb5, 0x6b, 0x5d, 0x84, 0x58, 0x19, 0xad, 0xf4,
	0xcf, 0xb1, 0x72, 0xfa, 0x22, 0xc4, 0xba, 0x68, 0x39, 0xf1, 0x89, 0x6e, 0xba, 0x0e, 0x4a, 0x17,
	0x2d, 0x67, 0x3e, 0x56, 0x4d, 0xa7, 0x2d, 0x5e, 0x83, 0x5e, 0x15, 0xba, 0xf5, 0x0a, 0xd2, 0x1e,
	0x11, 0x38, 0xaf, 0xb6, 0x08, 0x93, 0xf0, 0x0c, 0x32, 0x85, 0xf0, 0x1d, 0xb7, 0x23, 0xd6, 0x1d,
	0x79, 0x66, 0xcb, 0x54, 0xda, 0xda, 0x55, 0xcb, 0x5a, 0xbb, 0xbe, 0x0e, 0x33, 0x8f, 0x7b, 0x1d,
	0xbf, 0x7d, 0x97, 0x22, 0x4d, 0xea, 0xd6, 0xd4, 0x42, 0xda, 0x9a, 0xba, 0x08, 0xa5, 0xc8, 0x8d,
	0x3a, 0x6a, 0x83, 0xe2, 0x84, 0x29, 0x60, 0x9a, 0x8a, 0x5b, 0x62, 0xd8, 0x7d, 0x28, 0x69, 0x65,
	0x2c, 0x5e, 0x9d, 0x50, 0xf7, 0x7a, 0xde, 0x88, 0x83, 0x60, 0x4e, 0xe4, 0x45, 0x4b, 0xd4, 0x9a,
	0x13, 0x07, 0xc0, 0x7c, 0x0f, 0x66, 0x37, 0x7c, 0xa7, 0xe1, 0x7a, 0xed, 0x8e, 0xb8, 0xe7, 0x8a,
	0x0e, 0x2f, 0xf0, 0xde, 0x93, 0xe4, 0x42, 0x9b, 0x4c, 0x25, 0x3c, 0x6b, 0x51, 0xe3, 0x59, 0xcd,
	0x77, 0xa0, 0x2a, 0x9b, 0x79, 0xfa, 0xdb, 0x55, 0xe6, 0x16, 0xd4, 0x64, 0xe1, 0xc1, 0xab, 0x4a,
	0xd2, 0x70, 0xba, 0x04, 0xd3, 0xbe, 0x1c, 0x06, 0xa9, 0x3e, 0x38, 0x97, 0xd3, 0x29, 0x4b, 0x44,
	0x56, 0x8c, 0x67, 0xfe, 0xfb, 0x22, 0xcc, 0x5b, 0x62, 0xdf, 0xdf, 0x13, 0x9a, 0x41, 0xf8, 0x1d,
	0xd0, 0x99, 0x93, 0x53, 0xb2, 0x32, 0x19, 0x4b, 0x6b, 0x51, 0x77, 0xb0, 0x60, 0xda, 0xb9, 0x06,
	0xb3, 0x9e, 0x38, 0x58, 0xd5, 0x90, 0x78, 0x6f, 0xc8, 0x40, 0x4f, 0x34, 0x93, 0x23, 0xd5, 0xef,
	0x07, 0xba, 0x8d, 0x3c, 0x4e, 0x1b, 0x66, 0x66, 0xbd, 0x32, 0xd3, 0x9d, 0x5e, 0x90, 0x57, 0x52,
	0x0b, 0x52, 0xc6, 0x97, 0xd2, 0x56, 0xdc, 0x35, 0x98, 0x75, 0x3d, 0x47, 0x1c, 0x3e, 0xde, 0x51,
	0x23, 0xc1, 0x0b, 0x28, 0x03, 0xc5, 0x1e, 0x87, 0xfb, 0xc1, 0x23, 0xb5, 0x54, 0x2a, 0x1c, 0xfb,
	0x56, 0x03, 0x99, 0x3f, 0x53, 0x80, 0x05, 0x6d, 0x94, 0xc7, 0xb4, 0xd5, 0x99, 0x50, 0x75, 0xbd,
	0x28, 0xf0, 0x9d, 0x3e, 0x6b, 0xc7, 0xa5, 0x49, 0x51, 0x87, 0x91, 0xd5, 0xfa, 0x28, 0xc4, 0xd3,
	0xc8, 0xf5, 0x94, 0xa2, 0x59, 0x83, 0x98, 0xdb, 0x50, 0x7b, 0xe8, 0xb7, 0x1f, 0xf7, 0xa3, 0xb1,
	0xcc, 0x7d, 0x7c, 0xfa, 0x14, 0xf5, 0x10, 0xac, 0xff, 0x2f, 0xcc, 0xaa, 0x7f, 0x8c, 0xa9, 0xe7,
	0x74, 0xa7, 0x7e, 0xf3, 0xc0, 0xe1, 0xd8, 0x9a, 0x29, 0xd9, 0x2f, 0x0b, 0x37, 0x7f, 0x61, 0x12,
	0x16, 0x3e, 0x10, 0x51, 0x46, 0x2d, 0xfb, 0x42, 0xdd, 0xbc, 0xc4, 0xac, 0xd2, 0xaa, 0x66, 0x48,
	0x4f, 0x00, 0x78, 0x54, 0x28, 0xbe, 0xe9, 0x61, 0x62, 0x46, 0x3f, 0xe9, 0xa8, 0xd0, 0x8b, 0x18,
	0xb7, 0xe0, 0x4c, 0x5a, 0x30, 0xe5, 0x5f, 0xf1, 0x12, 0xc8, 0xcb, 0x32, 0xee, 0x42, 0x46, 0x94,
	0xad, 0x97, 0x46, 0xf9, 0x6d, 0x56, 0xfe, 0xbd, 0x01, 0x0b, 0xb8, 0x44, 0x94, 0xf5, 0x78, 0x55,
	0xe3, 0xe8, 0x07, 0x33, 0xd4, 0xa1, 0xa8, 0x80, 0xf5, 0xf2, 0x48, 0x3d, 0xd5, 0x8b, 0x18, 0xd7,
	0x61, 0xae, 0x1d, 0x4f, 0x4e, 0x43, 0x93, 0x62, 0xb3, 0x60, 0xe3, 0x87, 0xe1, 0xa2, 0x12, 0xaf,
	0xd9, 0x49, 0x98, 0x99, 0x60, 0xd9, 0xdb, 0xca, 0x28, 0xc7, 0xe9, 0x31, 0x15, 0x98, 0xbf, 0x58,
	0x04, 0x43, 0x27, 0x93, 0xf1, 0xad, 0x51, 0x5d, 0xb9, 0x21, 0xa9, 0x25, 0xad, 0x40, 0x7a, 0x3b,
	0xbe, 0x25, 0xa3, 0xd1, 0x4b, 0x46, 0x84, 0x49, 0xee, 0x66, 0x59, 0x3a, 0xb2, 0x3a, 0x05, 0x26,
	0x39, 0xc4, 0x30, 0x9e, 0x02, 0x36, 0x5c, 0x48, 0x84, 0xb9, 0xa7, 0x76, 0xc7, 0x75, 0xb8, 0x87,
	0x54, 0x37, 0x13, 0xc5, 0xab, 0xc3, 0xe4, 0x40, 0x0d, 0xdd, 0x1a, 0x5e, 0x8b, 0xf9, 0x83, 0x70,
	0x36, 0xb7, 0x8c, 0x0a, 0x72, 0x99, 0xbd, 0x23, 0xe8, 0xc9, 0xdd, 0x54, 0x11, 0x5b, 0x4a, 0x5b,
	0x93, 0x81, 0x9a, 0x7f, 0x7e, 0x12, 0xce, 0xb0, 0xc3, 0x28, 0xdf, 0xac, 0x19, 0xcb, 0x8a, 0x35,
	0x60, 0x52, 0x13, 0xae, 0xe9, 0x7b, 0xe0, 0x88, 0x98, 0x38, 0xf1, 0x88, 0x98, 0x1c, 0x38, 0x22,
	0x72, 0x3c, 0xb5, 0x32, 0x87, 0xdd, 0x2d, 0x38, 0xd3, 0xf7, 0x02, 0x61, 0x3b, 0x48, 0xf2, 0xb1,
	0xec, 0x2a, 0xd7, 0x54, 0x5e, 0x96, 0xf1, 0x10, 0x66, 0xd3, 0x60, 0xb9, 0xae, 0x5e, 0xcb, 0xc6,
	0x73, 0x4e, 0xc6, 0x68, 0x2b, 0xc6, 0xb7, 0x32, 0x65, 0x8d, 0xf7, 0x60, 0x7a, 0xa7, 0xef, 0xf1,
	0x01, 0x31, 0x9d, 0x17, 0xce, 0x56, 0xaf, 0xe7, 0x9e, 0xc4, 0xb4, 0xe2, 0x32, 0x49, 0xfb, 0x55,
	0x1e, 0xb7, 0xbf, 0xa2, 0xb7, 0x3f, 0x95, 0x65, 0x58, 0x60, 0xa4, 0xc1, 0xd4, 0x07, 0xa0, 0x3e,
	0x8c, 0xf2, 0xef, 0x9c, 0xd2, 0xe6, 0xbb, 0xb0, 0x98, 0x87, 0x8b, 0xf3, 0xaa, 0x11, 0x1b, 0x7d,
	0xe3, 0x92, 0xb0, 0x83, 0xb6, 0x8a, 0x27, 0x62, 0x07, 0x6d, 0xf3, 0x8f, 0x0b, 0xe9, 0xe2, 0x9f,
	0xb1, 0xb0, 0xa1, 0xf3, 0xcd, 0x13, 0x19, 0xaf, 0x2f, 0x79, 0x61, 0x62, 0x55, 0xdf, 0x13, 0x26,
	0x93, 0x0b, 0x13, 0x3a, 0xdc, 0x58, 0xe5, 0x0b, 0x1a, 0xfa, 0xad, 0x8f, 0x52, 0x1e, 0xaf, 0xba,
	0x9a, 0x20, 0x59, 0xd9, 0x12, 0xe6, 0x17, 0x60, 0x46, 0xcb, 0x4f, 0x85, 0xa1, 0xcd, 0xdc, 0xe2,
	0x35, 0x3f, 0x82, 0x73, 0xf9, 0x44, 0x75, 0x5c, 0x29, 0x5c, 0x46, 0x1d, 0x3b, 0x8c, 0x2c, 0x61,
	0x73, 0xe8, 0x7f, 0xb9, 0xc3, 0xe9, 0x30, 0xf3, 0x47, 0x0b, 0x70, 0x09, 0x77, 0xb0, 0xb4, 0x53,
	0x92, 0x76, 0x01, 0x58, 0xbb, 0xd6, 0xa3, 0xfd, 0x24, 0x05, 0x4b, 0x35, 0x22, 0xa3, 0x9f, 0xa0,
	0xfb, 0x1b, 0x49, 0x75, 0x39, 0x57, 0x8c, 0xcd, 0x7f, 0x55, 0x80, 0x2b, 0x0d, 0xf6, 0xf2, 0xa2,
	0x13, 0xc0, 0xf3, 0xfc, 0xbe, 0xd7, 0x12, 0x5d, 0xe1, 0x8d, 0x87, 0x27, 0xc8, 0xf6, 0xa0, 0x98,
	0xd3, 0x03, 0x13, 0xaa, 0xb6, 0xf6, 0x5f, 0xb5, 0xe3, 0xe8, 0x30, 0x8a, 0xe7, 0x24, 0x22, 0xbd,
	0x79, 0xf7, 0x12, 0x4d, 0x74, 0x5e, 0x96, 0x69, 0xc3, 0xcb, 0x43, 0x3b, 0x36, 0x1e, 0x3a, 0x37,
	0x7f, 0xa5, 0x08, 0x67, 0xd9, 0xc1, 0x47, 0xfd, 0x66, 0x2c, 0x63, 0xf6, 0x15, 0x28, 0x45, 0x7e,
	0xcf, 0x6d, 0x8d, 0x66, 0xec, 0x64, 0x5c, 0xba, 0x69, 0x96, 0x5c, 0xb0, 0x96, 0xa2, 0x43, 0xea,
	0xce, 0xf5, 0x5b, 0x20, 0x5d, 0xdd, 0x1e, 0x0e, 0x8d, 0x48, 0xc5, 0x14, 0x68, 0x89, 0xe7, 0x96,
	0x86, 0x9a, 0xb0, 0xaf, 0x25, 0x5d, 0x79, 0xf2, 0x2e, 0x54, 0xc4, 0x61, 0x24, 0x5f, 0x6f, 0x18,
	0xed, 0x42, 0x70, 0x52, 0xc0, 0xfc, 0xc5, 0x49, 0x38, 0x97, 0x1d, 0xba, 0x31, 0xed, 0x3e, 0x9f,
	0x6a, 0xf8, 0xbe, 0x3f, 0x77, 0xac, 0x33, 0x93, 0x56, 0x3a, 0x69, 0xd2, 0xa6, 0x46, 0x9f, 0xb4,
	0xe5, 0xcc, 0xc2, 0x2b, 0x8f, 0xa4, 0x99, 0x49, 0xad, 0xcb, 0xe4, 0xbe, 0xf7, 0xe9, 0xee, 0xa5,
	0x0c, 0x5c, 0xa2, 0xac, 0x8c, 0x78, 0x89, 0x12, 0x72, 0x6d, 0x7e, 0xe6, 0x87, 0x50, 0x89, 0xfb,
	0x68, 0x7c, 0x5d, 0x0d, 0xc8, 0x29, 0x3c, 0xd2, 0x93, 0x02, 0xe6, 0x7f, 0x2d, 0x40, 0x7d, 0x4d,
	0x74, 0xd2, 0x5b, 0xee, 0xb8, 0x04, 0x7c, 0x7d, 0x2e, 0x8b, 0x83, 0x73, 0xf9, 0x76, 0x6a, 0x2e,
	0x27, 0xf2, 0x6e, 0x61, 0xad, 0x89, 0x4e, 0xfe, 0x74, 0x66, 0xf7, 0xd1, 0xc9, 0x9c, 0x7d, 0x34,
	0x77, 0x9d, 0x9a, 0xbf, 0x5a, 0x80, 0x0b, 0x39, 0x3d, 0x1e, 0xd3, 0x62, 0x3b, 0xb9, 0xd7, 0xef,
	0xe4, 0xf4, 0xfa, 0xa5, 0xa1, 0xbd, 0x0e, 0x7b, 0x7a, 0xb7, 0xcd, 0x0d, 0xa8, 0xea, 0x43, 0xf2,
	0xa2, 0xb3, 0xff, 0x08, 0x6a, 0xa9, 0x7f, 0xbd, 0x68, 0x7d, 0xbf, 0x53, 0x84, 0xfa, 0xb2, 0xe3,
	0x7c, 0x5f, 0xa8, 0xe9, 0xad, 0x9c, 0x71, 0xfd, 0x54, 0x3b, 0xc3, 0xe4, 0xe9, 0x77, 0x86, 0x25,
	0x58, 0x24, 0x46, 0x06, 0xfb, 0x1c, 0xb6, 0x9f, 0xa8, 0xc0, 0xd3, 0x92, 0xf0, 0x72, 0xf3, 0x8c,
	0xaf, 0xc2, 0x59, 0x9b, 0xe4, 0xcb, 0xe5, 0x5e, 0xaf, 0xe3, 0xb2, 0xe2, 0x7e, 0x4d, 0x84, 0x3d,
	0xa9, 0x83, 0xca, 0xcf, 0x34, 0xff, 0x4e, 0x01, 0x2e, 0xe4, 0x8c, 0xf0, 0xf7, 0x8c, 0x7a, 0xef,
	0xe4, 0x8c, 0x72, 0x3d, 0x7f, 0x94, 0x33, 0xa4, 0xfb, 0x1f, 0x4a, 0x00, 0x63, 0xa3, 0x34, 0x5c,
	0xff, 0x9c, 0x92, 0x77, 0x4a, 0x25, 0x3b, 0xa9, 0xc3, 0x52, 0x21, 0x46, 0xbe, 0x97, 0xbe, 0x4e,
	0xda, 0xf1, 0xf7, 0xa9, 0x5d, 0x9d, 0x64, 0x88, 0x91, 0x24, 0xbc, 0x47, 0xf9, 0x05, 0xc3, 0x7b,
	0x4c, 0x8f, 0x27, 0xbc, 0x47, 0xe5, 0xc5, 0xc3, 0x7b, 0xc0, 0x60, 0x78, 0x0f, 0xdd, 0x31, 0x6b,
	0x66, 0x88, 0x63, 0x56, 0x75, 0x98, 0x63, 0x56, 0xed, 0xa4, 0x58, 0x17, 0xb3, 0x39, 0x7e, 0x59,
	0xe9, 0xd8, 0x15, 0x73, 0x27, 0xc4, 0xae, 0x98, 0x1f, 0xf0, 0xca, 0xd2, 0xfc, 0x8e, 0x16, 0x52,
	0x7e, 0x47, 0xe6, 0x1f, 0x17, 0x61, 0xfe, 0x03, 0x11, 0xa5, 0x2f, 0x4c, 0xbc, 0xa8, 0xba, 0x34,
	0x47, 0x7c, 0x5c, 0xce, 0xd1, 0x4b, 0xbc, 0x90, 0xa9, 0x69, 0xf2, 0x45, 0x4c, 0x4d, 0xa5, 0x63,
	0x4c, 0x4d, 0x53, 0xc3, 0x4d, 0x4d, 0x99, 0x5b, 0x10, 0xa4, 0x06, 0x4b, 0xae, 0x20, 0x48, 0x1d,
	0x5f, 0xfa, 0x5a, 0x82, 0x2e, 0x36, 0x57, 0xd2, 0x62, 0xb3, 0xf9, 0x13, 0x13, 0xa4, 0xc4, 0xfd,
	0x9e, 0xd8, 0x0a, 0xff, 0x6f, 0x1c, 0xff, 0x4f, 0x73, 0x0b, 0xe5, 0xb8, 0xf9, 0xd8, 0x04, 0x58,
	0x75, 0x3c, 0x15, 0x9b, 0xf1, 0xb8, 0x27, 0xc9, 0xae, 0xe9, 0x4f, 0x92, 0x65, 0x1e, 0xd4, 0xd1,
	0x5f, 0x23, 0xbb, 0x01, 0x53, 0xa3, 0x3c, 0x8a, 0x56, 0xe3, 0x47, 0xd1, 0x7e, 0xac, 0x40, 0x6b,
	0x71, 0x75, 0xed, 0xd1, 0x9a, 0x17, 0x8e, 0x65, 0x2d, 0x5e, 0x84, 0x69, 0x69, 0xef, 0xed, 0x29,
	0xed, 0x82, 0x4a, 0x27, 0xfc, 0xe6, 0x84, 0xce, 0x6f, 0xfe, 0x95, 0x12, 0x1b, 0x16, 0x64, 0x1b,
	0xc6, 0x44, 0x93, 0x4b, 0xa0, 0xc2, 0x6f, 0x4a, 0xb1, 0x2e, 0x73, 0x08, 0xf3, 0xef, 0xd8, 0x2b,
	0x5d, 0xc5, 0xe9, 0xbc, 0x43, 0x0e, 0xce, 0x12, 0x9c, 0xff, 0xe0, 0x82, 0x56, 0x4c, 0xc3, 0xc5,
	0x92, 0x76, 0xaf, 0xa7, 0x4a, 0x4e, 0x9e, 0x54, 0x32, 0xc1, 0x35, 0xd6, 0xa0, 0xd6, 0x72, 0x3c,
	0xc7, 0x0b, 0xad, 0x7e, 0x47, 0xa0, 0xe8, 0x34, 0x5a, 0xe0, 0xda, 0x74, 0x21, 0xe3, 0x21, 0x2c,
	0xec, 0xd8, 0x7b, 0x62, 0x35, 0x55, 0xd3, 0x68, 0x32, 0xf6, 0x60, 0x41, 0xe3, 0x6d, 0x98, 0x41,
	0xa0, 0xea, 0x4e, 0xf9, 0x84, 0xee, 0xe8, 0xc8, 0xc6, 0x2d, 0x38, 0xd3, 0x16, 0xd1, 0xaa, 0xe3,
	0x11, 0x80, 0x63, 0x32, 0x6f, 0x70, 0x74, 0xf7, 0x92, 0x95, 0x97, 0x85, 0x47, 0xa8, 0x23, 0x76,
	0xec, 0x7e, 0x27, 0x22, 0xcf, 0x9c, 0x76, 0xfe, 0x11, 0xba, 0xba, 0xf6, 0x88, 0x6d, 0x9a, 0x8c,
	0x64, 0xa5, 0xcb, 0x18, 0x77, 0x61, 0xd6, 0x71, 0x43, 0x3b, 0x8c, 0x90, 0x0f, 0xa3, 0x5a, 0x60,
	0x94, 0x5a, 0x32, 0x85, 0x78, 0xad, 0x1e, 0x46, 0xeb, 0xbd, 0xfd, 0x37, 0xe9, 0x9c, 0x2d, 0x59,
	0x71, 0xda, 0xfc, 0x77, 0x25, 0x80, 0xa4, 0xd7, 0xb4, 0x98, 0x44, 0xa0, 0x96, 0xd7, 0xbe, 0x08,
	0x72, 0xde, 0x69, 0xbc, 0x02, 0xc0, 0x8f, 0x82, 0x91, 0x46, 0x8f, 0xa9, 0x5e, 0x83, 0xe0, 0x46,
	0xb3, 0x13, 0xf8, 0x5e, 0x24, 0x6f, 0xd2, 0x96, 0x2c, 0x95, 0x94, 0x4a, 0x75, 0x2f, 0x8e, 0x43,
	0xce, 0x51, 0xd5, 0x52, 0x30, 0xe3, 0x7d, 0x98, 0x91, 0xe9, 0x4e, 0x22, 0xeb, 0x9f, 0xe4, 0x8c,
	0xa1, 0x95, 0xc0, 0xe6, 0x7d, 0xe2, 0x7b, 0x62, 0x8d, 0x23, 0xaa, 0x4b, 0xc3, 0x6d, 0x02, 0x31,
	0xee, 0x80, 0x7a, 0x2d, 0x62, 0xc4, 0x0d, 0x2f, 0x7e, 0x5c, 0xe2, 0x1c, 0x4c, 0x61, 0x3d, 0x72,
	0xc7, 0x2b, 0x59, 0x32, 0x85, 0x9c, 0x0e, 0x7d, 0xc9, 0x5e, 0x01, 0x65, 0xea, 0x20, 0xdc, 0xf2,
	0x39, 0x49, 0x7d, 0x9a, 0x19, 0xa5, 0x4f, 0x5a, 0x01, 0xe3, 0x1e, 0xcc, 0xc9, 0x1e, 0xc6, 0x61,
	0xce, 0xab, 0x54, 0xc7, 0xa5, 0x3c, 0xf2, 0xdd, 0x94, 0x5e, 0x9b, 0x56, 0xb6, 0x90, 0xb1, 0x06,
	0xb3, 0x5c, 0x6b, 0x5c, 0x4d, 0x6d, 0x84, 0x6a, 0x32, 0x65, 0x8c, 0xd7, 0x61, 0x5e, 0xab, 0x38,
	0x09, 0xcc, 0x56, 0xb2, 0x06, 0xe0, 0xc6, 0x75, 0x98, 0x4b, 0x4a, 0x33, 0xea, 0x1c, 0xa1, 0x66,
	0xc1, 0x44, 0x35, 0xf6, 0x9e, 0xd8, 0x72, 0x3d, 0xe2, 0xbb, 0x6a, 0x96, 0x4a, 0x1a, 0xef, 0x51,
	0xf4, 0x0d, 0x19, 0xfb, 0x81, 0xf8, 0xae, 0x51, 0x5e, 0x9c, 0x8c, 0x4b, 0x98, 0x7f, 0xa1, 0x08,
	0x73, 0x99, 0x25, 0x42, 0x01, 0x70, 0x96, 0x56, 0xc3, 0x5d, 0xff, 0xe0, 0x6e, 0x10, 0xf8, 0xc1,
	0x9a, 0xe8, 0xd8, 0x47, 0x1b, 0xa1, 0x0c, 0xed, 0x9a, 0x97, 0x45, 0xaa, 0x57, 0x2f, 0x1c, 0x28,
	0x51, 0xe4, 0x12, 0x39, 0x59, 0xa4, 0xcd, 0x5f, 0x5a, 0x0d, 0x44, 0x14, 0x1c, 0xa5, 0x02, 0xcb,
	0x97, 0xac, 0x01, 0x38, 0xe2, 0x86, 0x5e, 0x98, 0xc6, 0xe5, 0xc5, 0x33, 0x00, 0x27, 0x76, 0x69,
	0x69, 0x35, 0x38, 0x90, 0x31, 0xec, 0xd5, 0x2a, 0xd2, 0x61, 0x88, 0x83, 0xe5, 0x62, 0x1c, 0x16,
	0x2e, 0x52, 0x30, 0xf3, 0x43, 0x98, 0x4d, 0xcf, 0x34, 0xf9, 0xde, 0xc5, 0xf3, 0x24, 0x03, 0xaa,
	0x26, 0x33, 0xa4, 0x47, 0xd9, 0xc7, 0x13, 0xbb, 0x96, 0x44, 0xd9, 0x37, 0xff, 0x3f, 0xb8, 0xf4,
	0x41, 0xa2, 0x66, 0xc6, 0xca, 0xd2, 0x17, 0xba, 0x3f, 0x6b, 0xed, 0xb9, 0xf9, 0x8f, 0x8a, 0x70,
	0x79, 0x48, 0x0b, 0xc6, 0x67, 0xac, 0x4d, 0xe9, 0xe7, 0x8b, 0xf9, 0xfa, 0xf9, 0x96, 0xd6, 0x82,
	0xa7, 0xa9, 0xfb, 0x6e, 0x79, 0x59, 0xc6, 0x4d, 0x30, 0xf4, 0x1a, 0xee, 0x3a, 0x6e, 0xe4, 0x2b,
	0xd7, 0xc6, 0x9c, 0x1c, 0xe3, 0x0e, 0x9c, 0xd7, 0xa1, 0x14, 0xe9, 0x35, 0xdc, 0xd5, 0xa2, 0x12,
	0x0c, 0xcb, 0xd6, 0x63, 0x15, 0x36, 0xf4, 0xf8, 0x3c, 0x19, 0xa8, 0xf9, 0x8b, 0x25, 0xb8, 0xbc,
	0xba, 0xf6, 0x48, 0xf7, 0xbf, 0xdb, 0x0c, 0x44, 0xcf, 0x0e, 0x06, 0x9d, 0x78, 0xd8, 0x5f, 0xae,
	0xa0, 0xdb, 0x35, 0xd9, 0x21, 0x2e, 0x6b, 0x3d, 0x2d, 0x9e, 0x68, 0x3d, 0x9d, 0xc8, 0xb3, 0x9e,
	0xd2, 0x95, 0x54, 0xbe, 0xd4, 0x2a, 0x57, 0x83, 0x0e, 0xa2, 0x1a, 0x30, 0x49, 0xd7, 0x58, 0xe5,
	0x32, 0xd0, 0x20, 0x27, 0xc4, 0xc1, 0x78, 0x0f, 0x40, 0x06, 0x76, 0x89, 0xec, 0x68, 0xc4, 0x2b,
	0x45, 0x5a, 0x89, 0x84, 0xef, 0x63, 0x2e, 0x40, 0xda, 0x03, 0x52, 0x8e, 0xaf, 0x95, 0xe3, 0x1c,
	0x5f, 0x21, 0xe3, 0xf8, 0x7a, 0x1d, 0xe6, 0xec, 0x28, 0xb2, 0x5b, 0xbb, 0xe4, 0xcc, 0xab, 0x85,
	0x22, 0xca, 0x82, 0x35, 0xf7, 0xba, 0xf9, 0x94, 0x7b, 0xdd, 0x45, 0x88, 0xaf, 0x37, 0xd3, 0x36,
	0x59, 0xd2, 0xae, 0x3b, 0xc7, 0xd7, 0x73, 0x0d, 0xfd, 0x7a, 0xee, 0x35, 0xc8, 0x5c, 0xc3, 0x55,
	0x0f, 0x0a, 0x65, 0x2e, 0xe7, 0x26, 0xd1, 0x19, 0x17, 0xb3, 0xd1, 0x19, 0xed, 0x5e, 0xcf, 0x75,
	0xe4, 0x35, 0x67, 0x4e, 0x18, 0xaf, 0x41, 0xfa, 0x12, 0xae, 0xbc, 0xa3, 0x93, 0xb9, 0x99, 0x7b,
	0x05, 0xa0, 0x2b, 0x84, 0xbc, 0x86, 0x2b, 0xaf, 0xe9, 0x68, 0x10, 0xd6, 0xf5, 0x24, 0x57, 0x70,
	0xe9, 0x8a, 0x4e, 0xf6, 0x5a, 0xee, 0x3f, 0x2b, 0xc2, 0x95, 0x61, 0xb4, 0x3a, 0x3e, 0xe5, 0x58,
	0xd6, 0x39, 0xf4, 0x04, 0x62, 0x9f, 0x3c, 0x91, 0xd8, 0x4b, 0x03, 0xc4, 0x7e, 0x5a, 0x6f, 0xcb,
	0xc9, 0xcf, 0xcc, 0xdb, 0xf2, 0xbb, 0x45, 0x38, 0xc7, 0xe3, 0x79, 0x7f, 0x4d, 0x5a, 0x1f, 0xc6,
	0x25, 0x42, 0xc5, 0x62, 0x6b, 0xf1, 0x18, 0xb1, 0x75, 0x22, 0x23, 0xb6, 0x5e, 0x85, 0x19, 0x19,
	0x9d, 0xf1, 0x49, 0x12, 0xa5, 0x4c, 0x07, 0xc5, 0xe2, 0x6b, 0xe9, 0x14, 0xe2, 0x2b, 0x87, 0xd6,
	0xa5, 0xd0, 0x8a, 0x53, 0xf1, 0x33, 0xa7, 0x14, 0x53, 0x51, 0x37, 0x24, 0x97, 0x33, 0x36, 0xf0,
	0x3f, 0x5d, 0x84, 0xf3, 0x03, 0x63, 0x33, 0x26, 0x3a, 0xfb, 0xb4, 0xe3, 0x73, 0x0d, 0x66, 0x77,
	0x5c, 0xcf, 0xee, 0x70, 0xf8, 0xca, 0x46, 0xbf, 0x2b, 0xe9, 0x2f, 0x03, 0x1d, 0x34, 0x47, 0x95,
	0x46, 0x34, 0x47, 0x4d, 0xe5, 0x9b, 0xa3, 0x7e, 0xae, 0x08, 0x8b, 0x6b, 0xfe, 0x81, 0x87, 0xa3,
	0xf1, 0xd4, 0xd7, 0x1e, 0xd7, 0x8c, 0xf5, 0x26, 0xa9, 0x78, 0x77, 0x89, 0xab, 0x77, 0x31, 0xe5,
	0xed, 0x7e, 0x0e, 0xa6, 0x3a, 0xc2, 0x6b, 0x47, 0xbb, 0xca, 0x05, 0x9c, 0x53, 0x79, 0x21, 0x79,
	0x32, 0xbe, 0x33, 0x19, 0x6a, 0x2c, 0x9d, 0x96, 0x1a, 0xe3, 0xf5, 0x34, 0x95, 0x59, 0x4f, 0x66,
	0x8e, 0xcd, 0x30, 0x6b, 0x64, 0xba, 0x0a, 0x33, 0x5d, 0x12, 0xb1, 0x56, 0xfa, 0x3b, 0x71, 0xf8,
	0x1e, 0x1d, 0x64, 0xfe, 0x7e, 0x11, 0xce, 0x66, 0xc6, 0x27, 0xab, 0x58, 0x7a, 0xd1, 0x01, 0xda,
	0xc7, 0x6a, 0x1f, 0x72, 0xa6, 0x34, 0x9a, 0x6a, 0xa0, 0xec, 0x10, 0x4e, 0x0d, 0x0e, 0xa1, 0x5a,
	0x39, 0xe5, 0xd3, 0xad, 0x1c, 0x79, 0xdd, 0x4d, 0x79, 0x8c, 0xab, 0xdb, 0x6f, 0xd9, 0x15, 0x50,
	0x39, 0xe5, 0x0a, 0xa0, 0x20, 0x9a, 0x5e, 0x4b, 0x74, 0xa8, 0x72, 0x90, 0x7b, 0x60, 0x0c, 0x49,
	0xcd, 0xd9, 0x4c, 0x46, 0xe5, 0xf4, 0x97, 0x0a, 0x30, 0xbb, 0xee, 0xb9, 0x9a, 0x23, 0xe7, 0xb1,
	0xee, 0x66, 0xc8, 0xa7, 0xf5, 0x83, 0x40, 0x78, 0xd1, 0xb3, 0x43, 0xa9, 0x91, 0x6e, 0x88, 0xe7,
	0xea, 0x5d, 0xac, 0x9c, 0x2c, 0xe3, 0x5d, 0xb8, 0x20, 0xc1, 0x89, 0x97, 0x63, 0x5c, 0x8e, 0x67,
	0x66, 0x38, 0x82, 0xf9, 0x33, 0x45, 0x98, 0x4b, 0x35, 0x2f, 0xec, 0xbd, 0xf0, 0x86, 0xf1, 0x3d,
	0xee, 0xc3, 0xc0, 0xd3, 0x15, 0x93, 0x39, 0x4f, 0x57, 0x60, 0x9b, 0xb8, 0xc4, 0x96, 0x1c, 0xea,
	0xd8, 0x31, 0xa9, 0x62, 0xe5, 0x65, 0x99, 0x8f, 0xe1, 0xa5, 0x15, 0x3b, 0x6a, 0xed, 0x26, 0xde,
	0x95, 0x2b, 0x81, 0x2b, 0x76, 0x48, 0xf0, 0x14, 0xcf, 0x87, 0x55, 0x58, 0x18, 0x5e, 0xe1, 0xaf,
	0x17, 0xe0, 0xd2, 0xf0, 0x1a, 0xc7, 0x30, 0xee, 0x3f, 0x9c, 0x76, 0xc8, 0x64, 0xdd, 0xe5, 0x3b,
	0xd9, 0xe2, 0xc3, 0x1b, 0xd0, 0x1c, 0x00, 0xea, 0xf5, 0x99, 0x3f, 0x55, 0x80, 0x2f, 0x9d, 0xaa,
	0xf8, 0xb1, 0x84, 0x1e, 0x5f, 0x6d, 0x88, 0x9f, 0x2c, 0x59, 0xe2, 0xeb, 0x13, 0x76, 0x2b, 0xca,
	0xd7, 0x05, 0x6a, 0xbe, 0xa4, 0x0a, 0xd1, 0xfc, 0x8b, 0x05, 0x58, 0xd0, 0x5f, 0x44, 0x52, 0x41,
	0xfb, 0xb4, 0xf0, 0x7b, 0x72, 0x18, 0x33, 0x2e, 0x7c, 0x5a, 0xa1, 0x61, 0x41, 0xfb, 0xb4, 0xf0,
	0x7b, 0x52, 0xa7, 0x39, 0xb4, 0x8e, 0x21, 0x41, 0xfb, 0xfe, 0x6d, 0x01, 0x16, 0xf3, 0x7e, 0x64,
	0xdc, 0x83, 0xd9, 0xc0, 0xf6, 0x1c, 0xbf, 0x4b, 0x51, 0x48, 0x1e, 0x48, 0xb5, 0xf1, 0x08, 0xaf,
	0xb6, 0xa6, 0x4b, 0x19, 0xef, 0x50, 0xe4, 0xaa, 0x4d, 0x8e, 0xad, 0xb9, 0x77, 0xd2, 0x53, 0xb7,
	0x69, 0xdc, 0x63, 0x9f, 0x76, 0x9f, 0x87, 0x89, 0xde, 0x81, 0x3a, 0xdc, 0xf0, 0x93, 0x9e, 0x0b,
	0x3c, 0x70, 0xd4, 0x3b, 0xee, 0xf4, 0x6d, 0xfe, 0xcb, 0x29, 0xbd, 0x7f, 0x5a, 0x2c, 0xcf, 0x17,
	0xe2, 0xc7, 0xde, 0x07, 0x3d, 0x2c, 0xe7, 0x0b, 0xbe, 0x61, 0xad, 0x82, 0x70, 0x22, 0xa3, 0x22,
	0x63, 0x6e, 0xaa, 0xb7, 0x34, 0xe3, 0x18, 0x9c, 0x26, 0x24, 0xd1, 0x36, 0x07, 0x9f, 0xae, 0x26,
	0x58, 0x72, 0x64, 0x51, 0xb0, 0xcd, 0xd3, 0x3f, 0x5c, 0x1d, 0xbf, 0xfd, 0xf3, 0x28, 0x79, 0xb1,
	0x5a, 0x0f, 0xbf, 0x99, 0x7e, 0x1b, 0xa8, 0x32, 0xf0, 0x36, 0xd0, 0x71, 0x8f, 0x54, 0x23, 0x83,
	0x26, 0x23, 0x6d, 0x9e, 0xf4, 0x46, 0x75, 0x29, 0x89, 0xbc, 0x79, 0x09, 0x92, 0x17, 0xa9, 0x07,
	0x9f, 0xa8, 0xbe, 0x0a, 0xfa, 0x73, 0xd4, 0x79, 0x2f, 0x54, 0xc7, 0x18, 0x1b, 0xc3, 0x1e, 0xa8,
	0x46, 0xc6, 0x21, 0x4c, 0xbf, 0x4f, 0x4d, 0xe1, 0x05, 0xaf, 0x82, 0xfe, 0x16, 0x75, 0xde, 0xf3,
	0xd4, 0x17, 0x21, 0x7e, 0x8d, 0x7a, 0xe0, 0x75, 0xea, 0x8b, 0x10, 0x3f, 0x46, 0x3d, 0xf0, 0x38,
	0xf5, 0x25, 0x48, 0x9e, 0xa2, 0x1e, 0x7c, 0x9b, 0x1a, 0x73, 0xd5, 0x4b, 0xd4, 0x79, 0x4f, 0x53,
	0x0f, 0x44, 0x22, 0x3d, 0x3f, 0x96, 0x48, 0xa4, 0xf5, 0x4f, 0x11, 0x89, 0x74, 0x02, 0x16, 0xb6,
	0x3c, 0x77, 0xe7, 0x28, 0xf5, 0xce, 0xdb, 0x8b, 0x9e, 0x0f, 0x37, 0x60, 0xa1, 0xaf, 0x2a, 0x6d,
	0x88, 0x16, 0x7b, 0x68, 0xf2, 0xa9, 0x3c, 0x98, 0x81, 0x7f, 0xb3, 0x65, 0x1a, 0x6b, 0x90, 0x7b,
	0xf2, 0xc5, 0xc1, 0x77, 0xdf, 0xe2, 0x07, 0xd8, 0x52, 0xf8, 0x54, 0xbe, 0x85, 0x07, 0xb4, 0x2c,
	0x3f, 0x99, 0x5b, 0x5e, 0xc3, 0xb0, 0x52, 0xf8, 0xc6, 0x07, 0x30, 0xe7, 0xa5, 0x5f, 0x78, 0x1b,
	0xed, 0x19, 0xb8, 0x6c, 0x29, 0x63, 0x03, 0x16, 0xec, 0x43, 0xd9, 0x50, 0x04, 0x48, 0x4f, 0xbd,
	0x9c, 0x67, 0xad, 0x97, 0xb3, 0x68, 0xd6, 0x60, 0x49, 0xf3, 0x0f, 0x2b, 0x50, 0xd5, 0xbb, 0xad,
	0xbf, 0x3d, 0x2e, 0xed, 0x10, 0xef, 0x40, 0x2d, 0xdc, 0x0f, 0x46, 0xde, 0x96, 0x53, 0xb8, 0xc6,
	0x7b, 0xa0, 0x3d, 0x2d, 0x3e, 0x62, 0x0c, 0x62, 0xfd, 0x31, 0xf2, 0x6f, 0x80, 0x1e, 0x91, 0xf8,
	0xd3, 0x3c, 0x45, 0x7e, 0x13, 0x8c, 0x83, 0x88, 0x9e, 0x02, 0xb7, 0xc2, 0x9e, 0x7a, 0x6c, 0x3c,
	0x79, 0x86, 0x3c, 0x9b, 0x83, 0xa7, 0x59, 0x1a, 0x3a, 0xfa, 0x1b, 0xe4, 0x7a, 0x29, 0x63, 0x33,
	0xfe, 0xaf, 0x14, 0x5f, 0x35, 0x73, 0xd8, 0xd5, 0xe1, 0x0f, 0x90, 0x33, 0x9e, 0x95, 0x53, 0xd6,
	0x78, 0x0a, 0x8b, 0xe9, 0x07, 0xc4, 0x65, 0x9d, 0xb9, 0x37, 0x0a, 0x9e, 0xe5, 0x60, 0x5a, 0xb9,
	0xe5, 0xe5, 0x5e, 0xb1, 0xb6, 0x2d, 0xe2, 0x20, 0x62, 0xa7, 0x78, 0x7f, 0x5c, 0x2f, 0x66, 0x7c,
	0x48, 0x0f, 0xe2, 0xc7, 0xa0, 0xf5, 0xd3, 0xbd, 0x3e, 0x9e, 0x2a, 0x47, 0xf7, 0xc5, 0xe5, 0xac,
	0x67, 0x1e, 0x1f, 0xff, 0x2a, 0xf0, 0x73, 0xe2, 0xa7, 0x7b, 0x7b, 0xdc, 0x84, 0xaa, 0xdd, 0xeb,
	0x75, 0x8e, 0x56, 0x44, 0x64, 0xa3, 0xbc, 0x3d, 0x2b, 0xf5, 0xca, 0x1a, 0xcc, 0xb8, 0x03, 0x95,
	0xf8, 0xb5, 0xf1, 0x11, 0x9e, 0x26, 0x4f, 0x90, 0xe9, 0x0d, 0x92, 0xf8, 0x11, 0xf2, 0x9c, 0x67,
	0xc9, 0xaf, 0x80, 0xf6, 0x06, 0x79, 0xce, 0xab, 0xe4, 0x57, 0x40, 0x7b, 0x82, 0x3c, 0xe7, 0x51,
	0xf2, 0x6b, 0x90, 0x79, 0x7c, 0xfc, 0x54, 0x4f, 0x92, 0xdf, 0x82, 0xbc, 0x47, 0xc7, 0x8f, 0x7b,
	0x8f, 0x3c, 0x1d, 0x68, 0x77, 0xf0, 0x39, 0x72, 0x9e, 0x69, 0x62, 0x17, 0xe2, 0xd5, 0x7d, 0x7e,
	0xe4, 0x99, 0x4e, 0x95, 0xc3, 0xba, 0xb8, 0x66, 0xad, 0xae, 0xd1, 0x8e, 0x99, 0x81, 0x72, 0xf4,
	0xac, 0x48, 0xcb, 0xd9, 0x95, 0xbd, 0xa1, 0x5e, 0x72, 0xb8, 0xa0, 0x2c, 0xd8, 0xfc, 0x8d, 0x02,
	0x18, 0x83, 0x0b, 0xcf, 0x78, 0x0d, 0x6a, 0x6e, 0xb7, 0x9d, 0xc4, 0xd3, 0x93, 0xac, 0x7e, 0x1a,
	0x88, 0x12, 0xfd, 0x5e, 0x18, 0xc7, 0x56, 0x3d, 0x51, 0xa2, 0x47, 0x5c, 0x64, 0x20, 0xdc, 0x6e,
	0xbb, 0xe1, 0x2a, 0xe5, 0xa6, 0x4c, 0x69, 0x8e, 0xcf, 0x93, 0xa7, 0x71, 0x7c, 0x36, 0x7f, 0xb4,
	0x00, 0x8b, 0x79, 0xab, 0x1c, 0xc7, 0x80, 0x7d, 0xa9, 0x1a, 0x31, 0x07, 0xc7, 0x9d, 0xc8, 0x82,
	0x71, 0x77, 0x66, 0x10, 0xed, 0x73, 0xa3, 0x75, 0x46, 0x2b, 0x61, 0xfe, 0xee, 0x04, 0x54, 0xf5,
	0x43, 0xef, 0xd8, 0x3b, 0x2a, 0x17, 0x33, 0x6f, 0x92, 0xe9, 0xcf, 0xd3, 0xd1, 0xa3, 0x5d, 0xf4,
	0x50, 0x7c, 0xf6, 0xdd, 0xf8, 0x4b, 0xfc, 0x6e, 0xfc, 0x5d, 0xed, 0xdd, 0xf8, 0x04, 0x80, 0x64,
	0x9a, 0xbc, 0x12, 0xff, 0xc2, 0xef, 0xc6, 0x5f, 0x01, 0xed, 0x91, 0xf8, 0x9c, 0x67, 0xe3, 0xeb,
	0x50, 0x0e, 0x44, 0x5b, 0x73, 0xb3, 0x53, 0x49, 0xa4, 0x9a, 0xd4, 0xa3, 0xf0, 0xf9, 0x2f, 0xc5,
	0xe3, 0xa2, 0x8a, 0x9f, 0x85, 0xcf, 0x79, 0x28, 0xfe, 0xf5, 0xe4, 0xd9, 0xf7, 0x58, 0x87, 0xcd,
	0x8a, 0xe3, 0x01, 0xb8, 0x8e, 0xab, 0x82, 0x12, 0xc9, 0x2d, 0x6d, 0x00, 0x8e, 0x9b, 0x47, 0xfa,
	0x31, 0xf8, 0x21, 0x4f, 0xc4, 0xc7, 0x9b, 0xc7, 0xbc, 0xb6, 0x79, 0x98, 0x5f, 0x80, 0x85, 0x01,
	0x56, 0x22, 0xff, 0x86, 0xbf, 0xf9, 0xdf, 0x0a, 0x50, 0x79, 0xb6, 0x2a, 0xdf, 0x0c, 0xc1, 0x7d,
	0xfa, 0xa0, 0x15, 0x46, 0x3b, 0x23, 0x8a, 0x83, 0x8c, 0xac, 0x4a, 0x89, 0x11, 0xc9, 0x91, 0x91,
	0x71, 0x11, 0xb5, 0x5a, 0xc4, 0xe6, 0x8e, 0xf8, 0xb6, 0x29, 0x63, 0x1b, 0x2b, 0x7c, 0x4f, 0x78,
	0x39, 0x8a, 0x02, 0xcd, 0xfb, 0xe6, 0xa4, 0xd2, 0xa9, 0x32, 0xe6, 0x63, 0x58, 0xe0, 0x09, 0xb4,
	0xfa, 0x9e, 0x47, 0xaf, 0x8e, 0xb3, 0xd8, 0x16, 0x87, 0x2b, 0xa9, 0x26, 0x8f, 0xd4, 0x77, 0xb5,
	0x0b, 0x90, 0xf8, 0x1d, 0x3f, 0x54, 0x3b, 0xa1, 0x3d, 0x54, 0xfb, 0xfb, 0x05, 0x28, 0x37, 0x6c,
	0x31, 0xb4, 0x9e, 0x59, 0x28, 0xba, 0xfb, 0xf2, 0x69, 0xdb, 0xa2, 0xbb, 0xaf, 0x9e, 0xbf, 0x9d,
	0x48, 0x9e, 0xbf, 0x35, 0xa1, 0xca, 0x6f, 0x0a, 0x3e, 0xb5, 0x3b, 0x7d, 0xf1, 0x35, 0xa2, 0xe5,
	0xaa, 0x95, 0x82, 0x91, 0xa0, 0x65, 0x6f, 0xd3, 0x49, 0x46, 0xe4, 0x5c, 0xb5, 0xe2, 0x34, 0xd2,
	0xb3, 0x86, 0xfb, 0xc6, 0x1b, 0x44, 0xcf, 0x55, 0x2b, 0x0d, 0x24, 0x6b, 0x0b, 0x96, 0xa0, 0x34,
	0xd1, 0x73, 0xd5, 0xd2, 0x20, 0xd9, 0x5a, 0xee, 0xd0, 0xb9, 0x96, 0xa9, 0xe5, 0x8e, 0xf9, 0xdd,
	0x12, 0x18, 0xac, 0xed, 0x4f, 0xe9, 0xb7, 0xb3, 0xe6, 0x9e, 0xc2, 0x89, 0xe6, 0x9e, 0xe2, 0x80,
	0xb9, 0x67, 0x58, 0xec, 0x97, 0x44, 0xd9, 0x3b, 0x79, 0x9c, 0x36, 0x3c, 0xe7, 0x26, 0x69, 0xac,
	0x54, 0x9e, 0xca, 0x04, 0xb6, 0xd7, 0x95, 0xc4, 0xe5, 0x41, 0x25, 0xf1, 0xa7, 0xf1, 0xfd, 0xd3,
	0x54, 0xc0, 0x95, 0xb4, 0x0a, 0x38, 0xa3, 0x91, 0x80, 0x53, 0x69, 0x24, 0xd2, 0xfa, 0xdf, 0x99,
	0x01, 0xfd, 0x6f, 0xca, 0x6e, 0x55, 0xcd, 0x9a, 0x73, 0x55, 0x57, 0xef, 0xf9, 0x41, 0xd7, 0x8e,
	0xd4, 0x6b, 0x82, 0x1a, 0x88, 0x68, 0xcf, 0xd5, 0xac, 0x6c, 0x71, 0x74, 0xea, 0xf4, 0xe3, 0x0a,
	0x32, 0x48, 0x99, 0xe6, 0x21, 0xac, 0x83, 0x52, 0x5a, 0xe8, 0xf9, 0x8c, 0xe5, 0x80, 0xf6, 0x61,
	0x0a, 0x87, 0x2c, 0x39, 0xa9, 0x38, 0x3a, 0xf2, 0x1d, 0x28, 0x53, 0x53, 0xd6, 0x1d, 0xa2, 0xb5,
	0x11, 0x9c, 0x8e, 0x24, 0x3a, 0x4e, 0xec, 0xe3, 0x9d, 0x9d, 0x30, 0x92, 0x7c, 0x15, 0x27, 0x50,
	0x74, 0x3d, 0x93, 0xa2, 0xcd, 0xc4, 0x49, 0xe1, 0x7b, 0x4e, 0x9c, 0x27, 0xbd, 0x8d, 0x70, 0xb2,
	0x1d, 0x22, 0x26, 0xde, 0xf2, 0x31, 0xc4, 0x3b, 0x3d, 0x48, 0xbc, 0xc3, 0x09, 0x31, 0x2b, 0xc4,
	0xc3, 0x0b, 0xd9, 0x22, 0x66, 0x8e, 0xb5, 0x45, 0x54, 0x33, 0xb6, 0x88, 0x55, 0xa8, 0x3c, 0xb4,
	0xb7, 0x45, 0x67, 0xd3, 0x76, 0x49, 0x1b, 0x42, 0xcf, 0x7c, 0x69, 0xb3, 0x91, 0x00, 0xb0, 0x03,
	0xf2, 0x11, 0x30, 0xb9, 0xf7, 0xaa, 0xa4, 0xb9, 0x01, 0x35, 0x8a, 0xb7, 0x46, 0x49, 0x4d, 0xcb,
	0x9b, 0xcb, 0xc1, 0x64, 0x9e, 0x17, 0x2b, 0x0e, 0x3c, 0x2f, 0x66, 0xfe, 0xc3, 0x02, 0x5c, 0xde,
	0xf0, 0x1d, 0x19, 0x9d, 0xcd, 0x6e, 0x45, 0x54, 0x31, 0x09, 0xdf, 0x9f, 0x7d, 0xcc, 0x8b, 0x75,
	0x58, 0xe8, 0xeb, 0x7d, 0x19, 0x7e, 0x05, 0x2a, 0xd5, 0x65, 0x6b, 0xb0, 0x94, 0xf9, 0xff, 0xc0,
	0x95, 0x61, 0xdd, 0x18, 0xd3, 0x6d, 0xd6, 0x5f, 0x2e, 0xc0, 0xb9, 0xe5, 0xf8, 0x51, 0x4e, 0xaa,
	0x7f, 0x2c, 0x43, 0x74, 0x05, 0x80, 0x26, 0x44, 0x1f, 0x23, 0x0d, 0x62, 0x7c, 0x1d, 0x6a, 0x1d,
	0x45, 0x35, 0xc3, 0xef, 0x32, 0xc5, 0x84, 0x65, 0xa5, 0xb1, 0xcd, 0x5f, 0x29, 0xc0, 0xf9, 0x81,
	0x66, 0x8f, 0x49, 0xa3, 0xf5, 0x19, 0x37, 0xfd, 0x5b, 0x70, 0x31, 0xb1, 0x75, 0x8c, 0x95, 0x2e,
	0xcd, 0xbf, 0x57, 0x80, 0x97, 0x72, 0xeb, 0xfe, 0x3f, 0x63, 0x64, 0x0e, 0xe0, 0xdc, 0x9a, 0xe8,
	0x8c, 0x9d, 0x14, 0x4f, 0xde, 0x2e, 0xbe, 0x05, 0xe7, 0x07, 0x7e, 0x3c, 0xa6, 0xf5, 0xf5, 0xe7,
	0x0a, 0x70, 0x61, 0x8b, 0xf4, 0x07, 0x63, 0xef, 0xd7, 0x6d, 0xb9, 0xd7, 0xe2, 0xf8, 0x49, 0x2e,
	0x7d, 0xe8, 0x48, 0x27, 0x98, 0xe6, 0x0f, 0xc1, 0xc5, 0xbc, 0x06, 0x8d, 0xa9, 0xbf, 0xbf, 0x56,
	0x00, 0xb8, 0xef, 0x7b, 0xed, 0x15, 0x9b, 0x0c, 0x9a, 0x2f, 0xd4, 0xc1, 0x73, 0x30, 0xd5, 0x6a,
	0xbb, 0xab, 0x5d, 0x75, 0x5a, 0xc8, 0x14, 0x92, 0xa1, 0xdf, 0x8f, 0x36, 0xa5, 0xce, 0x5d, 0x7a,
	0x64, 0x27, 0x10, 0xe4, 0x3e, 0x90, 0x11, 0x11, 0x87, 0xd1, 0x88, 0x72, 0x84, 0x42, 0x37, 0x7f,
	0xb2, 0xa8, 0xb5, 0x3e, 0x7c, 0xe1, 0xf5, 0x42, 0x0d, 0x89, 0x9e, 0xa8, 0x37, 0x0f, 0x46, 0x6a,
	0x08, 0xa1, 0xe3, 0x49, 0xd9, 0xeb, 0xd8, 0x91, 0x25, 0xb9, 0x92, 0x92, 0xa5, 0x92, 0x2a, 0x67,
	0x23, 0x6c, 0xab, 0x88, 0x90, 0x32, 0x49, 0xb7, 0x36, 0x68, 0x80, 0x64, 0x48, 0xc8, 0x92, 0x15,
	0xa7, 0xf1, 0xc4, 0xa2, 0x37, 0x13, 0x68, 0xc4, 0xd8, 0x3b, 0x36, 0x01, 0x90, 0x27, 0x9d, 0x7c,
	0x6f, 0x41, 0x39, 0x01, 0xa9, 0xb4, 0xf9, 0xdd, 0x22, 0xcc, 0xdf, 0x17, 0x76, 0x10, 0xad, 0x08,
	0x7b, 0x6c, 0xa7, 0x67, 0x62, 0x23, 0x2a, 0x66, 0x6d, 0x44, 0x6f, 0xc2, 0xd4, 0x9e, 0x38, 0x5a,
	0xe9, 0xef, 0x8c, 0x2a, 0x41, 0x32, 0xb6, 0xf1, 0x43, 0x70, 0x61, 0xbb, 0xd3, 0x17, 0x4f, 0x7c,
	0x3f, 0xda, 0x5d, 0x09, 0x7c, 0xdb, 0x59, 0xb5, 0xc3, 0x48, 0x79, 0x16, 0x8e, 0x46, 0x06, 0xc3,
	0x2b, 0x18, 0x72, 0xcb, 0xfa, 0xf7, 0x0a, 0xb0, 0xa0, 0x8d, 0xcd, 0xf8, 0x5c, 0xa3, 0x3c, 0x71,
	0x18, 0x69, 0x01, 0x44, 0xe2, 0x34, 0x59, 0x1c, 0x45, 0x47, 0xb4, 0x22, 0x3f, 0x88, 0x5d, 0xa3,
	0x64, 0xfa, 0xb3, 0x1d, 0x01, 0xf3, 0xaf, 0x16, 0xa1, 0xf6, 0x44, 0x78, 0x9b, 0xf6, 0x78, 0x82,
	0x10, 0x7d, 0xcf, 0xd7, 0xb6, 0xf1, 0x2e, 0x54, 0xe4, 0xe7, 0xb3, 0xc3, 0x11, 0x9d, 0xe7, 0x92,
	0x02, 0x28, 0xff, 0x87, 0x6e, 0xdb, 0x93, 0xec, 0x3c, 0x7d, 0xb3, 0x93, 0x69, 0xf4, 0xc8, 0x97,
	0x6b, 0x86, 0x13, 0xe6, 0x2f, 0x14, 0x61, 0x56, 0x0d, 0xd4, 0x98, 0x28, 0xe2, 0x7f, 0x9f, 0x7d,
	0xe4, 0x35, 0xa8, 0x45, 0xc2, 0xeb, 0xd9, 0x47, 0x77, 0x03, 0x7d, 0x2f, 0x49, 0x03, 0x51, 0x2c,
	0x8b, 0x01, 0xc9, 0x9e, 0x92, 0x82, 0x21, 0x07, 0x37, 0xff, 0x81, 0x88, 0xbe, 0x69, 0xb1, 0xce,
	0x74, 0x0c, 0x24, 0xf5, 0xb5, 0x4c, 0x4c, 0x9c, 0x53, 0xbc, 0x18, 0x41, 0x91, 0xaf, 0x8f, 0x3a,
	0xc9, 0xa5, 0x36, 0x32, 0x26, 0x50, 0x44, 0x4b, 0xed, 0xd9, 0x19, 0x99, 0x32, 0xff, 0x72, 0x91,
	0x2e, 0xbb, 0xa9, 0xa6, 0x8f, 0x69, 0x92, 0xdf, 0x84, 0x29, 0x8e, 0x62, 0x3e, 0xe2, 0x1c, 0x4b,
	0xec, 0x21, 0x6d, 0x7f, 0x0d, 0x6a, 0x3b, 0xbe, 0x1f, 0x89, 0x40, 0x85, 0x3b, 0xe4, 0x49, 0x4e,
	0x03, 0x8d, 0x6b, 0x30, 0x1b, 0x50, 0x28, 0x46, 0x0e, 0x91, 0x1e, 0xeb, 0x5a, 0x32, 0x50, 0xe3,
	0x16, 0x9c, 0xd1, 0x21, 0xaa, 0x4e, 0x5e, 0x0c, 0x79, 0x59, 0xe6, 0x77, 0x26, 0xe0, 0xcc, 0x66,
	0x3f, 0xdc, 0x25, 0xc5, 0xfe, 0x96, 0xf5, 0x50, 0x9b, 0xe1, 0x95, 0xd4, 0x0c, 0x17, 0x4f, 0x98,
	0xe1, 0x95, 0xb4, 0x1b, 0x63, 0x46, 0x90, 0x9f, 0xd6, 0x03, 0x54, 0xaa, 0xd7, 0x2e, 0x9f, 0xa4,
	0xa2, 0xda, 0xa7, 0xa1, 0x58, 0x07, 0x5f, 0x8d, 0x59, 0x5f, 0x53, 0x3e, 0x1b, 0x2a, 0x6d, 0xac,
	0xc0, 0xbc, 0x25, 0x7d, 0x61, 0x56, 0x95, 0xdd, 0xa1, 0x44, 0x2d, 0xcc, 0x04, 0x0f, 0xe5, 0x78,
	0x36, 0xcd, 0xc8, 0x1a, 0xc0, 0x47, 0xa2, 0x79, 0xbc, 0x89, 0x84, 0x51, 0x9f, 0xba, 0x5a, 0x44,
	0xa2, 0xe1, 0x14, 0x6e, 0x6c, 0x6b, 0x89, 0xaf, 0x86, 0xbc, 0xa7, 0x95, 0x40, 0x8c, 0x3b, 0x30,
	0xb3, 0xac, 0x59, 0x58, 0xa7, 0xf3, 0x62, 0x96, 0xc6, 0xbf, 0xd5, 0x51, 0x8d, 0x1b, 0x30, 0x65,
	0x35, 0x96, 0x37, 0x45, 0x57, 0x9a, 0x0b, 0x17, 0x07, 0xde, 0xed, 0xd9, 0x14, 0x5d, 0x4b, 0xe2,
	0x98, 0xff, 0xa5, 0x08, 0x8b, 0xe9, 0x89, 0x49, 0xe8, 0x77, 0x25, 0x4d, 0xbf, 0xc5, 0x93, 0xe8,
	0x57, 0x4f, 0xe1, 0x0e, 0xb9, 0xb5, 0xb5, 0xbe, 0x26, 0x27, 0x86, 0xbe, 0x8d, 0xaf, 0x42, 0x85,
	0xe3, 0x67, 0xb1, 0xd5, 0xf9, 0xb8, 0x91, 0x4c, 0x10, 0x91, 0x41, 0x20, 0xbf, 0x07, 0x19, 0xea,
	0x14, 0x47, 0x31, 0x01, 0x20, 0x3b, 0x7f, 0x97, 0x6e, 0xdf, 0x39, 0x52, 0x01, 0x83, 0xf9, 0x3a,
	0xc8, 0x78, 0x13, 0xce, 0xad, 0x0c, 0x9c, 0x63, 0xd4, 0x36, 0x26, 0xd8, 0x21, 0xb9, 0xc6, 0x13,
	0xb8, 0xb0, 0x32, 0xf4, 0x00, 0x2d, 0x1f, 0x3b, 0x21, 0xc3, 0x0b, 0x9a, 0x3f, 0x56, 0x8d, 0xf5,
	0xaa, 0xae, 0x23, 0xfc, 0xb1, 0x2c, 0x84, 0xab, 0x30, 0xb3, 0x3a, 0x18, 0x57, 0x56, 0x8f, 0x17,
	0x6b, 0x42, 0xf5, 0x5e, 0x4e, 0x40, 0xbf, 0x7b, 0x19, 0xcd, 0xd8, 0x93, 0x81, 0x80, 0x7e, 0x09,
	0x04, 0xf7, 0x10, 0x7a, 0x0d, 0xed, 0x49, 0x72, 0xff, 0x1a, 0xc7, 0x3a, 0x0d, 0x8c, 0xb1, 0x1a,
	0xc9, 0x4d, 0xec, 0x04, 0x4b, 0x01, 0x91, 0x12, 0x08, 0xb0, 0xc6, 0x0e, 0xb8, 0xc7, 0x52, 0x42,
	0x8c, 0x88, 0x75, 0xd3, 0xa0, 0xc5, 0x2d, 0x98, 0xe6, 0xba, 0x53, 0xc0, 0x18, 0x2b, 0x6e, 0x41,
	0x45, 0xc3, 0xd2, 0x5b, 0x40, 0x80, 0x35, 0x8e, 0x6a, 0x7f, 0x6c, 0x0b, 0x62, 0x44, 0x1c, 0xa3,
	0xcd, 0x8e, 0x7d, 0x24, 0x95, 0x72, 0x33, 0x54, 0xb1, 0x06, 0xc1, 0x7c, 0xe9, 0x2b, 0x72, 0xd7,
	0xdb, 0x57, 0xb6, 0xa4, 0x04, 0x82, 0xf9, 0xab, 0x76, 0x57, 0x04, 0x36, 0x9d, 0x96, 0xac, 0xa6,
	0xd5, 0x20, 0xb8, 0x1d, 0xdd, 0xeb, 0x7b, 0x2d, 0xd2, 0xbb, 0xb1, 0x86, 0x36, 0x4e, 0xe3, 0x3a,
	0xd8, 0x88, 0x35, 0xc0, 0xec, 0x2c, 0x95, 0x00, 0x88, 0x06, 0xd6, 0x1e, 0x51, 0x4b, 0xb7, 0x62,
	0x5b, 0x91, 0x0e, 0xc2, 0xad, 0x68, 0xf9, 0x6e, 0xe3, 0x41, 0xf2, 0x50, 0x20, 0xa7, 0xf0, 0x9f,
	0x77, 0xd5, 0xc5, 0x19, 0x83, 0x0f, 0x78, 0x95, 0x96, 0xb5, 0xd2, 0x0c, 0x60, 0xad, 0x67, 0xe2,
	0x5a, 0x15, 0xc8, 0xb8, 0x4e, 0xd7, 0x0b, 0xf5, 0x27, 0xfb, 0xc8, 0xc8, 0x5d, 0xb2, 0xb2, 0x60,
	0xe3, 0x06, 0x2c, 0x68, 0x20, 0x79, 0xb1, 0xe9, 0x2c, 0xe1, 0x0e, 0x66, 0x18, 0xaf, 0xc3, 0xbc,
	0x06, 0xe4, 0x4b, 0x4e, 0xe7, 0xf8, 0x4e, 0x60, 0x16, 0x8e, 0x9b, 0xbd, 0x82, 0xc9, 0x1e, 0xf2,
	0x85, 0x9a, 0x0c, 0x14, 0x47, 0x90, 0x46, 0x03, 0xc9, 0x9e, 0x6c, 0xd9, 0x25, 0x2b, 0x01, 0x20,
	0x0b, 0x64, 0x49, 0xfd, 0x35, 0x1b, 0xa7, 0x55, 0x12, 0x47, 0x88, 0xd0, 0x36, 0x9c, 0xdb, 0xf4,
	0xf0, 0x5f, 0xc5, 0x8a, 0xd3, 0xf8, 0xef, 0x46, 0x14, 0x08, 0xbb, 0x1b, 0x0f, 0x3d, 0x3f, 0x70,
	0x93, 0x81, 0x1a, 0x4b, 0xb0, 0xa8, 0x41, 0x88, 0x58, 0xe9, 0x57, 0xfc, 0x60, 0x60, 0x6e, 0x1e,
	0x8e, 0x81, 0x0e, 0xa7, 0xe8, 0xde, 0x97, 0xd9, 0x9a, 0x98, 0x85, 0x1b, 0x37, 0xc1, 0xd0, 0x60,
	0xea, 0x48, 0xe6, 0xe7, 0x6d, 0x72, 0x72, 0x70, 0x36, 0x74, 0xa8, 0xa0, 0xf9, 0xe5, 0x87, 0x6e,
	0x06, 0x33, 0xf0, 0xc4, 0xd7, 0xff, 0xa8, 0xe8, 0x81, 0x1f, 0x1d, 0xcc, 0xcb, 0xca, 0xf4, 0x57,
	0x5e, 0xc5, 0x5b, 0x77, 0xe4, 0x43, 0x38, 0xb9, 0x79, 0x99, 0xbf, 0x2c, 0x3b, 0x5b, 0x87, 0x64,
	0xfd, 0x33, 0x07, 0xfe, 0xa2, 0xb2, 0x70, 0x3d, 0x35, 0x22, 0x3b, 0xba, 0x7b, 0x18, 0x35, 0xa2,
	0xa0, 0xfe, 0x2a, 0xef, 0x59, 0x09, 0x04, 0x69, 0xfe, 0x3e, 0x3d, 0xa4, 0x58, 0x7f, 0x8d, 0x79,
	0x36, 0x4e, 0x21, 0x5d, 0x53, 0x45, 0x8f, 0xc4, 0x01, 0x66, 0x7e, 0x8e, 0xe9, 0x5a, 0x03, 0x21,
	0x1f, 0xb5, 0x6a, 0xad, 0x7e, 0x65, 0xa9, 0x7e, 0x8d, 0x14, 0xdc, 0x9c, 0xc0, 0xd9, 0xde, 0x48,
	0x5f, 0x19, 0xfb, 0x3c, 0xdb, 0x6c, 0xd3, 0x50, 0xa4, 0xb4, 0x2d, 0x32, 0xa7, 0x79, 0x5f, 0xbd,
	0x55, 0xbf, 0xce, 0x42, 0x6d, 0x0c, 0x30, 0x7f, 0xa2, 0x18, 0xdb, 0x2f, 0xf8, 0x0c, 0x18, 0xd3,
	0x99, 0x7b, 0xf2, 0x39, 0xb0, 0x08, 0x25, 0x15, 0x7c, 0x13, 0xb7, 0x2e, 0x4e, 0x0c, 0xee, 0xd9,
	0x93, 0x79, 0x7b, 0xf6, 0xc0, 0xbe, 0x5a, 0xca, 0xdb, 0x57, 0x2f, 0xc2, 0xf4, 0xa3, 0xcc, 0xdd,
	0x92, 0x47, 0xda, 0x5d, 0x2d, 0xb9, 0x3e, 0xcb, 0xfa, 0x0e, 0x64, 0xfe, 0x6e, 0x11, 0x8c, 0xbb,
	0x5d, 0xff, 0x63, 0x97, 0x07, 0x45, 0xb9, 0xbf, 0xcf, 0xc3, 0xc4, 0xc6, 0xda, 0x6d, 0xa9, 0xef,
	0xc7, 0x4f, 0xac, 0x3c, 0xfe, 0x7b, 0xf1, 0x6a, 0x11, 0xb7, 0x2a, 0xfd, 0xc7, 0xf1, 0xb9, 0x30,
	0xc1, 0x79, 0xf1, 0x91, 0x70, 0x07, 0x66, 0xa8, 0x7e, 0x19, 0xa9, 0x70, 0xf2, 0xd8, 0xed, 0x5e,
	0x47, 0x45, 0x36, 0xe6, 0x09, 0xbf, 0xa9, 0x8f, 0x35, 0xd2, 0x77, 0xe6, 0xa0, 0x9c, 0x1a, 0x38,
	0x28, 0x2f, 0x41, 0xe5, 0xee, 0x61, 0x24, 0x02, 0xef, 0xa3, 0x8d, 0x87, 0xca, 0x4b, 0x37, 0x06,
	0xe0, 0x20, 0x58, 0xf4, 0xb6, 0x90, 0xf4, 0xd0, 0x95, 0xa9, 0xf4, 0xe4, 0xad, 0x49, 0xf7, 0x5c,
	0x1d, 0x94, 0x3e, 0x00, 0x20, 0x7b, 0x00, 0xd0, 0xd1, 0x73, 0xf0, 0x51, 0x37, 0x31, 0xda, 0x94,
	0x2c, 0x0d, 0x62, 0xfe, 0x76, 0x41, 0x31, 0x1e, 0xd4, 0xbf, 0xb1, 0x30, 0x1e, 0xd7, 0x60, 0x96,
	0x2a, 0x5b, 0x8f, 0x44, 0x57, 0x69, 0x81, 0x71, 0x9c, 0x32, 0x50, 0xe3, 0x3d, 0xa8, 0xc4, 0x10,
	0xa9, 0x05, 0xce, 0x38, 0xdb, 0x0d, 0x4e, 0xbf, 0x95, 0x14, 0xd1, 0xb7, 0xe6, 0xc9, 0xd4, 0xd6,
	0x6c, 0xfe, 0x7c, 0x01, 0xce, 0x0c, 0x94, 0x65, 0x87, 0x49, 0x4b, 0x70, 0x77, 0x4a, 0x16, 0x7e,
	0x7e, 0x6a, 0xda, 0x91, 0x54, 0x38, 0x99, 0x50, 0xa1, 0x5c, 0x44, 0x6b, 0x72, 0x01, 0x70, 0xe2,
	0x38, 0xc2, 0x37, 0x7f, 0xa3, 0xa0, 0x16, 0xbc, 0x1c, 0xfb, 0x31, 0x2d, 0xf8, 0x51, 0xc7, 0xff,
	0xfd, 0xc1, 0xf1, 0x7f, 0xe5, 0x84, 0xf1, 0x0f, 0x7b, 0xda, 0x04, 0x98, 0xdf, 0x29, 0xd3, 0x1b,
	0xa3, 0xcb, 0x77, 0x1e, 0x88, 0xb1, 0x29, 0x7c, 0x1e, 0xd3, 0x33, 0x4e, 0x4a, 0xe1, 0xc3, 0x29,
	0xe3, 0x36, 0x94, 0x96, 0x97, 0xf6, 0x62, 0xa7, 0xd4, 0x97, 0x87, 0x48, 0xbd, 0xf1, 0x62, 0x65,
	0x6c, 0xe3, 0x2b, 0x50, 0x5a, 0xee, 0xf5, 0xa4, 0x0c, 0x77, 0x72, 0xbc, 0x4f, 0xc2, 0xc5, 0x42,
	0x8d, 0x96, 0xdf, 0x1b, 0xf1, 0xc1, 0x11, 0xc6, 0xa5, 0x42, 0xf4, 0x2a, 0xd6, 0xd4, 0x68, 0x85,
	0xe8, 0xd1, 0xac, 0xdb, 0xb8, 0xe6, 0x9f, 0xe3, 0x89, 0x39, 0x5a, 0x48, 0x33, 0x46, 0xc6, 0xe9,
	0xbd, 0x47, 0xef, 0xab, 0xc5, 0x9b, 0x0d, 0x6f, 0x19, 0x19, 0x28, 0x71, 0x8d, 0x04, 0xf9, 0xe6,
	0x73, 0x69, 0x0a, 0x8e, 0xd3, 0x48, 0xac, 0x1c, 0x3b, 0x9e, 0x7d, 0xa3, 0x38, 0x91, 0x12, 0x9d,
	0x67, 0x32, 0xa2, 0xf3, 0x45, 0x98, 0x5e, 0x61, 0x47, 0xf8, 0x35, 0xf5, 0xba, 0x98, 0x4a, 0x63,
	0xde, 0xf2, 0xd2, 0x03, 0x71, 0xf4, 0x48, 0x1c, 0x10, 0xf7, 0x5a, 0xb5, 0xe2, 0x34, 0x6f, 0x6c,
	0x76, 0xe8, 0x7b, 0x92, 0x73, 0x95, 0x29, 0xdc, 0xb6, 0xee, 0xf9, 0x5e, 0xd4, 0x68, 0xd9, 0xd2,
	0x7d, 0xb3, 0x66, 0x25, 0x00, 0xdc, 0x60, 0x69, 0xc3, 0xe2, 0xb0, 0x17, 0x93, 0xca, 0xa3, 0xeb,
	0x11, 0xbf, 0xba, 0xad, 0x02, 0x8d, 0xc9, 0x24, 0x89, 0xeb, 0xbe, 0xc3, 0x17, 0x18, 0xe4, 0x9b,
	0xd6, 0x2a, 0x4d, 0x1b, 0xa8, 0xef, 0x08, 0xe5, 0xcd, 0xc9, 0x1e, 0x03, 0x3a, 0x08, 0x5b, 0x22,
	0xe9, 0x6f, 0x9d, 0x5f, 0x66, 0x9c, 0xb4, 0x12, 0x00, 0x6e, 0xa0, 0x2a, 0x78, 0xf6, 0xba, 0xba,
	0xd3, 0xad, 0x41, 0x50, 0x86, 0x7a, 0x66, 0x77, 0x3a, 0x22, 0xb2, 0x44, 0x5b, 0xdd, 0xeb, 0xae,
	0x59, 0x29, 0x98, 0xf1, 0x16, 0x4c, 0xad, 0xfa, 0xfe, 0x9e, 0x2b, 0xa4, 0xdb, 0xe5, 0x89, 0xf4,
	0x2b, 0xd1, 0xb1, 0x63, 0x8f, 0xe5, 0x13, 0x6e, 0xf2, 0xae, 0x77, 0x9c, 0xa6, 0x9d, 0x4b, 0xbe,
	0xe0, 0x26, 0x39, 0xd3, 0x38, 0x6d, 0x7e, 0x67, 0x1a, 0xaa, 0xc9, 0xc2, 0x64, 0x97, 0xf8, 0x95,
	0x53, 0xea, 0x9d, 0x52, 0x5b, 0x4a, 0x1d, 0xca, 0xf7, 0xfa, 0x9d, 0xce, 0x96, 0xf5, 0x50, 0x3d,
	0xd9, 0x24, 0x93, 0x48, 0x49, 0xcb, 0x77, 0xd4, 0xd2, 0xac, 0x58, 0x9c, 0xc0, 0x51, 0x5b, 0x96,
	0x11, 0xce, 0x9d, 0x58, 0x6a, 0x4c, 0x20, 0x58, 0x8a, 0x19, 0x57, 0x56, 0x25, 0x71, 0x02, 0xff,
	0xa2, 0x24, 0x69, 0x79, 0x03, 0x59, 0xa9, 0xd6, 0x37, 0x60, 0xee, 0xc3, 0xc6, 0xf2, 0xe6, 0xfa,
	0xa6, 0x08, 0xba, 0x2e, 0x39, 0x90, 0xca, 0x35, 0x93, 0x89, 0xcc, 0x9f, 0x41, 0x5a, 0x71, 0xa3,
	0x86, 0x88, 0xac, 0x6c, 0x59, 0xe3, 0x29, 0x2c, 0x7e, 0x20, 0x3c, 0x11, 0xd8, 0x9d, 0xc4, 0x95,
	0xb6, 0x21, 0xa2, 0x7c, 0xef, 0xec, 0x3c, 0x4c, 0x2b, 0xb7, 0x7c, 0x6a, 0x01, 0x55, 0x06, 0x17,
	0x50, 0x63, 0xd7, 0x0e, 0x04, 0x8e, 0x21, 0xcb, 0x69, 0x71, 0x9a, 0x18, 0x56, 0xdc, 0x47, 0x78,
	0xb7, 0x66, 0xa2, 0xd7, 0x20, 0xc6, 0x1d, 0xa8, 0x50, 0x8a, 0xec, 0xa5, 0x0b, 0x79, 0xe1, 0x61,
	0x57, 0xdc, 0x4f, 0x08, 0x83, 0xb6, 0xe9, 0x04, 0x99, 0x34, 0x5e, 0xe9, 0x67, 0x2e, 0x0c, 0xa9,
	0xf1, 0x4a, 0xbf, 0x63, 0x61, 0xc0, 0x64, 0x23, 0x8c, 0x5f, 0x26, 0xa5, 0x6f, 0x3a, 0xe3, 0xd6,
	0xd7, 0x24, 0xcd, 0xe3, 0xa7, 0xb1, 0x06, 0xb3, 0x6b, 0x42, 0xf4, 0x1e, 0xba, 0xde, 0x9e, 0x1c,
	0xb1, 0x73, 0x79, 0xaf, 0x71, 0xa5, 0x71, 0xac, 0x4c, 0x19, 0x63, 0x03, 0x16, 0x68, 0x42, 0xd4,
	0xd8, 0x1d, 0x45, 0x22, 0x1c, 0x75, 0x65, 0x0c, 0x96, 0x44, 0x59, 0xf3, 0x7e, 0x14, 0xf5, 0xee,
	0x0b, 0xdb, 0x51, 0xee, 0x16, 0xfc, 0xac, 0x7b, 0x16, 0x6c, 0x2c, 0x03, 0x24, 0xa0, 0xfa, 0x85,
	0xbc, 0x13, 0x4f, 0x5f, 0x35, 0x37, 0x77, 0x09, 0xd1, 0xd2, 0x0a, 0x21, 0x89, 0x2a, 0x29, 0x8a,
	0x65, 0x3e, 0x95, 0xc4, 0x1c, 0xc4, 0x71, 0xbb, 0x6d, 0x29, 0xeb, 0xa9, 0xa4, 0xb6, 0xfc, 0x2f,
	0x9d, 0x6e, 0xf9, 0x5f, 0x85, 0x99, 0x0d, 0xe1, 0xf5, 0xd5, 0x0f, 0x59, 0xc8, 0xd3, 0x41, 0x17,
	0x6f, 0xc2, 0x14, 0x37, 0x72, 0x58, 0x60, 0x7f, 0x75, 0x07, 0xa4, 0xc2, 0x41, 0xe3, 0x7e, 0xa2,
	0x00, 0x67, 0x73, 0xd7, 0x08, 0x5d, 0x7c, 0x72, 0xa3, 0xa7, 0xf1, 0xc3, 0xa1, 0x35, 0x2b, 0x4e,
	0xb3, 0x5f, 0x2f, 0x7f, 0x2f, 0x29, 0x63, 0x5c, 0x0c, 0xd0, 0x73, 0xbf, 0xa2, 0x5e, 0xa7, 0x8b,
	0x01, 0x7a, 0xee, 0x57, 0xd5, 0x53, 0xd2, 0x31, 0xc0, 0x5c, 0x82, 0xa1, 0x0b, 0x69, 0x58, 0x6b,
	0xcc, 0x5f, 0x2e, 0x40, 0x55, 0x27, 0x77, 0xb6, 0xbb, 0xf9, 0xbd, 0xf8, 0xc1, 0x53, 0x4a, 0xd0,
	0x23, 0x43, 0xf8, 0x91, 0x0a, 0x8b, 0xaa, 0x83, 0xe8, 0xde, 0x1c, 0x26, 0xd7, 0x44, 0xd8, 0x92,
	0xdb, 0x57, 0x02, 0xa0, 0xdb, 0x5e, 0x3d, 0x57, 0x7f, 0x70, 0x20, 0x4e, 0x1b, 0x4b, 0x50, 0xb6,
	0x7b, 0xae, 0xf6, 0xc0, 0x40, 0x7d, 0x60, 0x35, 0x2e, 0xf7, 0x5c, 0x8e, 0x39, 0x27, 0x11, 0xcd,
	0x6b, 0x00, 0x09, 0x98, 0x6e, 0x4c, 0xf0, 0x8b, 0x9a, 0xea, 0xc5, 0x2e, 0x99, 0x34, 0x6f, 0x64,
	0xd7, 0xd8, 0xc0, 0x60, 0x4c, 0x6a, 0x83, 0xf1, 0x6f, 0x26, 0x60, 0x6a, 0xb9, 0xd7, 0xdb, 0x08,
	0xdb, 0x03, 0xda, 0xbc, 0x42, 0x8e, 0x36, 0x6f, 0x91, 0x39, 0x22, 0x25, 0x05, 0x72, 0x82, 0xb6,
	0x1f, 0x67, 0x2f, 0x89, 0xcc, 0x43, 0xfa, 0xab, 0x04, 0x72, 0xa2, 0x0e, 0x50, 0x17, 0x87, 0x6a,
	0x52, 0x1c, 0x1a, 0xbe, 0x97, 0x5f, 0x01, 0x58, 0x4d, 0x7c, 0xe3, 0xca, 0xfc, 0xb7, 0xd5, 0x94,
	0x6f, 0x9c, 0x2e, 0xaf, 0x4e, 0x0f, 0xca, 0xab, 0x37, 0xa0, 0x44, 0x42, 0xa8, 0xd4, 0x65, 0x0f,
	0x13, 0xd9, 0x18, 0x09, 0x39, 0x10, 0x4d, 0x3a, 0x2a, 0x59, 0x32, 0x85, 0xc3, 0x6a, 0x89, 0xae,
	0xeb, 0x39, 0xf2, 0xee, 0x7c, 0xc9, 0x8a, 0xd3, 0x69, 0xa1, 0xaa, 0x9a, 0x15, 0xaa, 0x5e, 0x87,
	0x79, 0xde, 0xba, 0x83, 0xce, 0xe3, 0xc0, 0x6d, 0xbb, 0x9e, 0xdd, 0x51, 0xbe, 0xdf, 0x59, 0x38,
	0xce, 0x4a, 0x0c, 0xeb, 0x09, 0x4f, 0x5d, 0x65, 0xd1, 0x61, 0x38, 0x56, 0x1f, 0x86, 0x3c, 0x2f,
	0x7c, 0x32, 0xa8, 0xa4, 0xf9, 0xab, 0x13, 0xb0, 0xd0, 0x10, 0x9e, 0xc3, 0x53, 0x3c, 0x26, 0xe9,
	0x6c, 0x62, 0x23, 0x6c, 0x93, 0x48, 0x30, 0x60, 0x06, 0x90, 0xbf, 0x41, 0x04, 0x9a, 0x26, 0xbf,
	0xdb, 0x15, 0x5e, 0x84, 0xdc, 0x87, 0x8c, 0x45, 0x94, 0x40, 0x86, 0x4b, 0x5f, 0x74, 0x6e, 0x38,
	0xb7, 0xe5, 0xd1, 0x8e, 0x9f, 0xc4, 0x8a, 0xba, 0x1d, 0x11, 0x1b, 0x03, 0x91, 0x15, 0x95, 0x69,
	0x1c, 0xea, 0x46, 0xf6, 0xf6, 0x6a, 0x72, 0xeb, 0x01, 0xd9, 0xc4, 0xc0, 0xef, 0x36, 0x44, 0xf2,
	0x52, 0x79, 0x02, 0xd0, 0x14, 0x39, 0x95, 0x94, 0x22, 0x27, 0x56, 0xd3, 0x48, 0xf6, 0x76, 0x98,
	0x9a, 0x66, 0x26, 0x57, 0x4d, 0x43, 0x6f, 0x63, 0x04, 0xa2, 0x15, 0xd1, 0x24, 0xd1, 0xf4, 0x97,
	0x2c, 0x1d, 0x64, 0xbc, 0x06, 0xb5, 0x50, 0x78, 0x0e, 0x45, 0xb1, 0xa6, 0x43, 0x95, 0x67, 0x3f,
	0x0d, 0x34, 0x7f, 0xab, 0x08, 0x86, 0x3e, 0x79, 0x63, 0x12, 0xef, 0xf2, 0xd7, 0xf0, 0x38, 0x74,
	0xf9, 0xb1, 0x1e, 0xa8, 0xa4, 0xeb, 0x81, 0x32, 0xeb, 0x71, 0x6a, 0x70, 0x3d, 0x9e, 0xb4, 0xa2,
	0xd5, 0xfe, 0xc0, 0xee, 0xaa, 0x93, 0x8a, 0x67, 0xcf, 0x3c, 0x00, 0x97, 0xa7, 0x11, 0x82, 0x94,
	0x46, 0xe8, 0x1c, 0x4c, 0xc9, 0xbb, 0x22, 0x55, 0x28, 0xec, 0xcb, 0x0d, 0xae, 0xb0, 0x4f, 0x70,
	0xbe, 0x63, 0x92, 0x86, 0xff, 0xeb, 0x22, 0x9c, 0x95, 0x71, 0x90, 0x06, 0x5f, 0x33, 0xfb, 0x6c,
	0x2c, 0x8c, 0x24, 0xc1, 0x92, 0x81, 0x96, 0x35, 0x06, 0x32, 0x65, 0xc4, 0x4d, 0x97, 0xc3, 0xae,
	0x3a, 0x82, 0x34, 0x49, 0x5f, 0xea, 0x35, 0x62, 0xa9, 0x53, 0xca, 0x40, 0x8d, 0xaf, 0x02, 0x24,
	0x10, 0x19, 0x01, 0x72, 0x31, 0x1b, 0xa5, 0x00, 0xf3, 0x2d, 0x0d, 0x0f, 0xe9, 0x94, 0xc6, 0x25,
	0xae, 0xbc, 0x4c, 0x95, 0xa7, 0x81, 0xc6, 0x12, 0x54, 0x62, 0x40, 0x7d, 0x3a, 0xb7, 0x6a, 0xca,
	0xb7, 0x12, 0x34, 0xf3, 0x23, 0x15, 0x11, 0x69, 0x23, 0xe7, 0x01, 0xb0, 0x17, 0x21, 0x6f, 0xf3,
	0x8f, 0xd8, 0x70, 0xbe, 0xc1, 0xb2, 0xea, 0x58, 0x26, 0x8c, 0x26, 0x85, 0x28, 0x30, 0x56, 0x2b,
	0x10, 0x0d, 0x4a, 0x25, 0xce, 0x44, 0xa2, 0xc4, 0x59, 0x82, 0x45, 0xf6, 0x7b, 0xcb, 0x4c, 0x0a,
	0x47, 0x5a, 0xcb, 0xcd, 0x33, 0xbe, 0x01, 0xf3, 0x59, 0xb8, 0xe4, 0x0a, 0xf2, 0x27, 0x68, 0x00,
	0xdb, 0xb8, 0x05, 0x67, 0x18, 0x96, 0x9e, 0x2c, 0x76, 0x9b, 0xc8, 0xcb, 0x32, 0xde, 0x83, 0xb9,
	0x0c, 0x58, 0xbe, 0x79, 0x95, 0x3f, 0x71, 0x59, 0xe4, 0x44, 0xfe, 0x9f, 0xd6, 0xe4, 0x7f, 0xf3,
	0x1e, 0x4c, 0xdf, 0x5b, 0xe1, 0x71, 0x37, 0x66, 0xa1, 0xb8, 0xbe, 0x46, 0xe3, 0x3c, 0x69, 0x15,
	0xd7, 0xd7, 0x70, 0x0d, 0x6b, 0x04, 0x3f, 0xa9, 0x88, 0x7d, 0xbd, 0xdb, 0x56, 0x66, 0xdb, 0x9a,
	0x25, 0x53, 0xe6, 0x3f, 0x28, 0x41, 0x59, 0xce, 0x9f, 0x5a, 0x2c, 0x7a, 0x24, 0x0e, 0x95, 0xa6,
	0x3d, 0xc0, 0x6d, 0xed, 0xe9, 0x0f, 0x28, 0xab, 0x34, 0x9d, 0xc0, 0x34, 0x42, 0xc9, 0x0c, 0x25,
	0x00, 0x9c, 0xb9, 0x86, 0x38, 0x94, 0xd3, 0x82, 0x9f, 0x58, 0xd7, 0xa6, 0x0a, 0x9c, 0xce, 0x27,
	0x4f, 0x9c, 0xc6, 0xb6, 0xaf, 0xba, 0xd1, 0x91, 0xf2, 0xcb, 0x59, 0x95, 0x81, 0xd3, 0x8f, 0x39,
	0x76, 0x4c, 0xa8, 0x6e, 0xea, 0x81, 0xd3, 0x65, 0xf8, 0x6d, 0x1d, 0x46, 0xfb, 0x30, 0xdd, 0x57,
	0xab, 0xc8, 0x7d, 0x98, 0xee, 0xab, 0xdd, 0x84, 0xa9, 0x7b, 0x2b, 0xda, 0x65, 0xda, 0x0c, 0x73,
	0xa2, 0xc6, 0xd7, 0x92, 0x58, 0xd8, 0x8e, 0xe5, 0xce, 0x76, 0xbf, 0xab, 0x39, 0xd5, 0x27, 0x00,
	0x92, 0xa3, 0x31, 0xc1, 0xb7, 0x5c, 0xa5, 0xe5, 0x30, 0x81, 0x60, 0x3b, 0x29, 0xb5, 0xf2, 0xc1,
	0x7a, 0xb7, 0xbd, 0xbe, 0x26, 0xcf, 0xa1, 0x14, 0x0c, 0x97, 0x4e, 0xc3, 0x0b, 0x71, 0xd0, 0xa9,
	0x59, 0xb3, 0x79, 0x1a, 0x39, 0x0d, 0xc1, 0xd2, 0xb1, 0x99, 0x8d, 0xe3, 0x68, 0x09, 0x73, 0x8a,
	0x8d, 0xe3, 0x48, 0x09, 0x28, 0x9c, 0x1c, 0x51, 0x40, 0x06, 0x22, 0x3f, 0x69, 0x5a, 0xd4, 0x40,
	0x28, 0x2d, 0xae, 0xf6, 0xc3, 0xc8, 0xef, 0xba, 0x9f, 0x08, 0xd2, 0x1f, 0xca, 0x40, 0xa5, 0xd9,
	0xd0, 0xaa, 0x29, 0x1c, 0x2b, 0x53, 0x06, 0xf7, 0xb0, 0x95, 0x54, 0x90, 0x2e, 0x16, 0x51, 0xd3,
	0x40, 0x14, 0x02, 0x1b, 0x99, 0x20, 0x5d, 0x2c, 0xb7, 0x66, 0xc1, 0x39, 0x12, 0xf1, 0xb9, 0x3c,
	0x89, 0xd8, 0xfc, 0xa5, 0x02, 0xbd, 0x6f, 0x18, 0xef, 0x43, 0xe3, 0x3b, 0xbd, 0x75, 0x9d, 0x2c,
	0x27, 0x8c, 0xdb, 0x00, 0xfc, 0x1f, 0xcd, 0x23, 0x3a, 0x73, 0x69, 0x5f, 0x35, 0x44, 0x43, 0x1c,
	0xd4, 0x42, 0x9b, 0x3e, 0x0a, 0x54, 0xd1, 0x63, 0xaf, 0xe3, 0x7a, 0x42, 0xaa, 0xcc, 0xc7, 0x72,
	0xe0, 0x3d, 0x54, 0x21, 0x40, 0xe4, 0x3a, 0x55, 0x69, 0xf3, 0x0f, 0x0b, 0x00, 0xc9, 0xef, 0x12,
	0x0f, 0x16, 0xed, 0x91, 0x5f, 0x0d, 0x82, 0x55, 0x71, 0x4a, 0x3a, 0x81, 0x54, 0xad, 0x38, 0x8d,
	0x65, 0xa5, 0x5c, 0xfb, 0xd1, 0xc6, 0x43, 0xc5, 0x71, 0x26, 0x10, 0xe3, 0xeb, 0x50, 0x61, 0xae,
	0x23, 0x89, 0x2e, 0x70, 0xa2, 0x28, 0x9d, 0x94, 0xc0, 0xb5, 0xc2, 0x0d, 0x95, 0x12, 0xa1, 0x0c,
	0xb6, 0xa2, 0xc3, 0x90, 0xb3, 0xe7, 0xe6, 0xdc, 0x17, 0x9d, 0x9e, 0x08, 0x34, 0x86, 0x75, 0x00,
	0x6e, 0xfe, 0x78, 0x11, 0xce, 0x66, 0xc6, 0x7a, 0x7c, 0x16, 0x3b, 0xae, 0x35, 0xf5, 0xf8, 0x88,
	0x06, 0x32, 0xee, 0xa8, 0x41, 0x1f, 0xfe, 0xf8, 0x88, 0xd6, 0x2e, 0x0d, 0x97, 0x64, 0xbd, 0x7e,
	0xb7, 0x6b, 0x07, 0x47, 0x38, 0xc8, 0x92, 0x07, 0x4c, 0x20, 0xb1, 0xe6, 0xb5, 0xa4, 0x69, 0x5e,
	0x2f, 0xc2, 0xf4, 0xfa, 0xaa, 0xef, 0xe9, 0xec, 0xbb, 0x4a, 0x9b, 0x7f, 0x54, 0x80, 0x97, 0xd6,
	0xbd, 0x7d, 0x37, 0x79, 0xae, 0x6b, 0xe0, 0xad, 0x9b, 0x17, 0x72, 0x61, 0xd9, 0x48, 0xbd, 0xc2,
	0x42, 0x6e, 0x3c, 0x1b, 0xe9, 0xb7, 0x6e, 0x36, 0x46, 0x7f, 0xeb, 0x66, 0x23, 0xf5, 0xd6, 0xcd,
	0x6a, 0xfa, 0xad, 0x9b, 0xe2, 0x08, 0x8f, 0x16, 0xe8, 0x45, 0xcc, 0x1f, 0x81, 0x4b, 0xf9, 0x3d,
	0x1f, 0x13, 0x27, 0xf4, 0x37, 0x0a, 0x70, 0xe9, 0x49, 0x60, 0x7b, 0xe1, 0x8e, 0x08, 0xd4, 0x2f,
	0x1e, 0x1f, 0x78, 0x63, 0x1a, 0x5b, 0x33, 0x33, 0x00, 0x32, 0x1e, 0xad, 0x0e, 0xc3, 0xe5, 0xf0,
	0x48, 0x1c, 0xd0, 0x3f, 0x33, 0x82, 0xc5, 0x00, 0xdc, 0x6c, 0xc2, 0xe5, 0x21, 0x8d, 0x1d, 0xd3,
	0x70, 0xfc, 0xd2, 0x04, 0xcc, 0xf3, 0x0d, 0xfa, 0xcd, 0x83, 0x31, 0xf2, 0x85, 0xd2, 0xdc, 0x54,
	0xd4, 0xcc, 0x4d, 0x06, 0x4c, 0x6e, 0x1e, 0x38, 0x6f, 0xa8, 0x30, 0x4e, 0xf8, 0x2d, 0x61, 0x4b,
	0x72, 0xc5, 0xd0, 0x37, 0x9e, 0xf5, 0xeb, 0x1c, 0x25, 0xa0, 0x94, 0x77, 0xd6, 0x4b, 0x27, 0xcc,
	0xc8, 0x92, 0x58, 0xc6, 0x2d, 0x28, 0xaf, 0x77, 0xdb, 0xd2, 0xef, 0xef, 0xb8, 0x02, 0x0a, 0xcd,
	0x78, 0x17, 0x6a, 0xeb, 0xa9, 0x08, 0x07, 0xe5, 0x63, 0xcb, 0xa5, 0x91, 0x8d, 0xd7, 0x61, 0xf2,
	0x01, 0xb6, 0xee, 0x78, 0x3f, 0x41, 0xc2, 0x21, 0x2d, 0x49, 0x8b, 0xa4, 0x6c, 0x29, 0x4a, 0x73,
	0xca, 0x78, 0x0f, 0x66, 0x65, 0xe4, 0x05, 0x4b, 0x3c, 0xa7, 0xd0, 0x03, 0x70, 0x6c, 0x6d, 0x19,
	0x6c, 0xf3, 0xd7, 0x27, 0x60, 0x41, 0x9b, 0xb5, 0x31, 0xed, 0x90, 0xc9, 0xc8, 0x17, 0xf3, 0xac,
	0xf6, 0x03, 0x23, 0xcf, 0xf8, 0x7c, 0x61, 0xe0, 0x38, 0x2b, 0xbf, 0xc4, 0xc2, 0xd1, 0x90, 0xcc,
	0x81, 0x14, 0xd7, 0xa4, 0x9a, 0x7c, 0x60, 0x3e, 0x4a, 0xa7, 0x99, 0x8f, 0x1b, 0x50, 0x22, 0xbb,
	0x58, 0xfe, 0xec, 0xeb, 0xd6, 0x4b, 0x7d, 0xf6, 0xca, 0x23, 0xcc, 0x5e, 0x1d, 0xca, 0xba, 0x53,
	0x68, 0xc5, 0x52, 0x49, 0x7d, 0xfe, 0x64, 0x88, 0x9c, 0xca, 0x68, 0xf3, 0xc7, 0xd8, 0xe6, 0x21,
	0xcc, 0x59, 0x22, 0x14, 0xd1, 0x67, 0xbd, 0xe6, 0xe6, 0x61, 0x62, 0xf3, 0x40, 0x85, 0xdb, 0xc0,
	0x4f, 0xd3, 0x81, 0xf9, 0xe4, 0xcf, 0x63, 0xa2, 0x9b, 0x79, 0x98, 0x40, 0xd6, 0x50, 0x6a, 0xc4,
	0xb7, 0x82, 0x8e, 0xf9, 0xab, 0x05, 0xa8, 0x35, 0xc6, 0xd7, 0x3d, 0x14, 0x43, 0xec, 0x30, 0x3c,
	0xf0, 0x03, 0xa5, 0x9f, 0x89, 0xd3, 0x1a, 0x51, 0x4d, 0xa4, 0x88, 0x2a, 0xe3, 0xd5, 0x7b, 0x82,
	0x1f, 0x8a, 0x86, 0x6a, 0xfe, 0x99, 0x02, 0xcc, 0x36, 0xc6, 0x3b, 0x42, 0x99, 0xc6, 0x14, 0x47,
	0x76, 0x31, 0x36, 0xff, 0xa4, 0x00, 0xb3, 0x8f, 0xc4, 0xc1, 0xba, 0xe7, 0x7e, 0xf6, 0x6a, 0x96,
	0xf7, 0x50, 0xb4, 0xa0, 0xa8, 0x9c, 0x8d, 0x23, 0xaf, 0xb5, 0x77, 0xa2, 0xe3, 0x70, 0x06, 0xdb,
	0x78, 0x13, 0x60, 0xc3, 0x3e, 0x54, 0x65, 0x8f, 0x1f, 0x71, 0x0d, 0x33, 0xc5, 0x09, 0x97, 0x32,
	0x9c, 0xf0, 0x7f, 0x2f, 0xc2, 0x5c, 0xdc, 0xff, 0x31, 0xcd, 0x46, 0xba, 0x9f, 0x3c, 0x21, 0xa3,
	0xf6, 0xf3, 0x41, 0xaa, 0x9f, 0x27, 0x3b, 0x57, 0x6b, 0x98, 0xc4, 0x1c, 0xa4, 0x03, 0x9b, 0xe2,
	0x5a, 0x4d, 0xc1, 0x48, 0xb3, 0x4d, 0xd7, 0x8a, 0x56, 0xdc, 0xa8, 0x6b, 0xf7, 0xa4, 0xd2, 0x30,
	0x05, 0x23, 0xcb, 0x7c, 0xd7, 0x51, 0x2f, 0x78, 0x17, 0xc9, 0x32, 0x2f, 0xd3, 0xc6, 0x97, 0xa1,
	0xbc, 0xda, 0x75, 0x34, 0xdd, 0x45, 0x46, 0xe0, 0x59, 0xed, 0x3a, 0xeb, 0x91, 0xe8, 0x5a, 0x0a,
	0x0b, 0x45, 0x27, 0xcb, 0x8e, 0x5c, 0x5f, 0x3a, 0xf8, 0x72, 0xc2, 0xf4, 0x53, 0x04, 0x8b, 0x3d,
	0x4e, 0x05, 0x04, 0x3a, 0xb6, 0xc7, 0xda, 0xde, 0x7c, 0x1d, 0x26, 0x4e, 0x1e, 0x5e, 0x44, 0x79,
	0x7d, 0x1d, 0xe6, 0x9e, 0x7d, 0xb4, 0xdc, 0xa2, 0x28, 0x2a, 0x52, 0x6c, 0x98, 0x87, 0x6a, 0x0c,
	0x5a, 0x13, 0x3b, 0xf3, 0x3f, 0x60, 0xcc, 0x40, 0xf9, 0xf1, 0xce, 0x0e, 0x72, 0xdd, 0xf3, 0x05,
	0x4c, 0x3c, 0xb4, 0x3d, 0x14, 0x63, 0xe6, 0x8b, 0x06, 0xc0, 0x14, 0xb3, 0xe3, 0xf3, 0x13, 0xaf,
	0x3f, 0x85, 0x59, 0x69, 0xf7, 0xea, 0xb0, 0x50, 0x61, 0x9c, 0x85, 0x85, 0x67, 0xc4, 0x4f, 0x92,
	0x2f, 0x3b, 0xdf, 0x1e, 0x99, 0xff, 0x01, 0xe3, 0x02, 0x9c, 0xd5, 0xc0, 0x49, 0xe4, 0xcb, 0xf9,
	0x82, 0x61, 0xc0, 0x2c, 0x67, 0xe1, 0xdc, 0xad, 0xd9, 0x91, 0x3d, 0x5f, 0x5c, 0x99, 0xf9, 0x76,
	0xe5, 0xe6, 0xcd, 0x2f, 0x73, 0x1f, 0xfe, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x77, 0xb9,
	0x80, 0x66, 0xdb, 0x00, 0x00,
}

// 同步消息类型cmdid
type SyncCmdID int32

const (
	SyncCmdID_CmdInvalid                              SyncCmdID = 0
	SyncCmdID_CmdIdModUserInfo                        SyncCmdID = 1
	SyncCmdID_CmdIdModContact                         SyncCmdID = 2
	SyncCmdID_CmdIdDelContact                         SyncCmdID = 4
	SyncCmdID_CmdIdAddMsg                             SyncCmdID = 5
	SyncCmdID_CmdIdModMsgStatus                       SyncCmdID = 6
	SyncCmdID_CmdIdDelChatContact                     SyncCmdID = 7
	SyncCmdID_CmdIdDelContactMsg                      SyncCmdID = 8
	SyncCmdID_CmdIdReport                             SyncCmdID = 10
	SyncCmdID_CmdIdOpenQQMicroBlog                    SyncCmdID = 11
	SyncCmdID_CmdIdCloseMicroBlog                     SyncCmdID = 12
	SyncCmdID_CmdIdModMicroBlog                       SyncCmdID = 13
	SyncCmdID_CmdIdModNotifyStatus                    SyncCmdID = 14
	SyncCmdID_CmdIdModChatRoomMember                  SyncCmdID = 15
	SyncCmdID_CmdIdQuitChatRoom                       SyncCmdID = 16
	SyncCmdID_CmdIdModContactDomainEmail              SyncCmdID = 17
	SyncCmdID_CmdIdModUserDomainEmail                 SyncCmdID = 18
	SyncCmdID_CmdIdDelUserDomainEmail                 SyncCmdID = 19
	SyncCmdID_CmdIdModChatRoomNotify                  SyncCmdID = 20
	SyncCmdID_CmdIdPossibleFriend                     SyncCmdID = 21
	SyncCmdID_CmdIdInviteFriendOpen                   SyncCmdID = 22
	SyncCmdID_CmdIdFunctionSwitch                     SyncCmdID = 23
	SyncCmdID_CmdIdModQContact                        SyncCmdID = 24
	SyncCmdID_CmdIdPsmStat                            SyncCmdID = 26
	SyncCmdID_CmdIdModChatRoomTopic                   SyncCmdID = 27
	SyncCmdID_MM_SYNCCMD_UPDATESTAT                   SyncCmdID = 30
	SyncCmdID_MM_SYNCCMD_MODDISTURBSETTING            SyncCmdID = 31
	SyncCmdID_MM_SYNCCMD_DELETEBOTTLE                 SyncCmdID = 32
	SyncCmdID_MM_SYNCCMD_MODBOTTLECONTACT             SyncCmdID = 33
	SyncCmdID_MM_SYNCCMD_DELBOTTLECONTACT             SyncCmdID = 34
	SyncCmdID_MM_SYNCCMD_MODUSERIMG                   SyncCmdID = 35
	SyncCmdID_MM_SYNCCMD_KVSTAT                       SyncCmdID = 36
	SyncCmdID_NN_SYNCCMD_THEMESTAT                    SyncCmdID = 37
	SyncCmdID_MM_SYNCCMD_USERINFOEXT                  SyncCmdID = 44
	SyncCmdID_MM_SNS_SYNCCMD_OBJECT                   SyncCmdID = 45
	SyncCmdID_MM_SNS_SYNCCMD_ACTION                   SyncCmdID = 46
	SyncCmdID_MM_SYNCCMD_BRAND_SETTING                SyncCmdID = 47
	SyncCmdID_MM_SYNCCMD_MODCHATROOMMEMBERDISPLAYNAME SyncCmdID = 48
	SyncCmdID_MM_SYNCCMD_WEBWXFUNCTIONSWITCH          SyncCmdID = 50
	SyncCmdID_MM_SYNCCMD_MODSNSUSERINFO               SyncCmdID = 51
	SyncCmdID_MM_SYNCCMD_MODSNSBLACKLIST              SyncCmdID = 52
	SyncCmdID_MM_SYNCCMD_NEWDELMSG                    SyncCmdID = 53
	SyncCmdID_MM_SYNCCMD_MODDESCRIPTION               SyncCmdID = 54
	SyncCmdID_MM_SYNCCMD_KVCMD                        SyncCmdID = 55
	SyncCmdID_MM_SYNCCMD_DELETE_SNS_OLDGROUP          SyncCmdID = 56
	SyncCmdID_MM_FAV_SYNCCMD_ADDITEM                  SyncCmdID = 200
	SyncCmdID_CmdIdMax                                SyncCmdID = 201
	SyncCmdID_CmdIdDelMsg                             SyncCmdID = 10002
	SyncCmdID_CmdIdModTContact                        SyncCmdID = 10003
	SyncCmdID_MM_GAME_SYNCCMD_ADDMSG                  SyncCmdID = 10004
	SyncCmdID_MM_SYNCCMD_MODCHATROOMMEMBERFLAG        SyncCmdID = 10005
)

// Enum value maps for SyncCmdID.
var (
	SyncCmdID_name = map[int32]string{
		0:     "CmdInvalid",
		1:     "CmdIdModUserInfo",
		2:     "CmdIdModContact",
		4:     "CmdIdDelContact",
		5:     "CmdIdAddMsg",
		6:     "CmdIdModMsgStatus",
		7:     "CmdIdDelChatContact",
		8:     "CmdIdDelContactMsg",
		10:    "CmdIdReport",
		11:    "CmdIdOpenQQMicroBlog",
		12:    "CmdIdCloseMicroBlog",
		13:    "CmdIdModMicroBlog",
		14:    "CmdIdModNotifyStatus",
		15:    "CmdIdModChatRoomMember",
		16:    "CmdIdQuitChatRoom",
		17:    "CmdIdModContactDomainEmail",
		18:    "CmdIdModUserDomainEmail",
		19:    "CmdIdDelUserDomainEmail",
		20:    "CmdIdModChatRoomNotify",
		21:    "CmdIdPossibleFriend",
		22:    "CmdIdInviteFriendOpen",
		23:    "CmdIdFunctionSwitch",
		24:    "CmdIdModQContact",
		26:    "CmdIdPsmStat",
		27:    "CmdIdModChatRoomTopic",
		30:    "MM_SYNCCMD_UPDATESTAT",
		31:    "MM_SYNCCMD_MODDISTURBSETTING",
		32:    "MM_SYNCCMD_DELETEBOTTLE",
		33:    "MM_SYNCCMD_MODBOTTLECONTACT",
		34:    "MM_SYNCCMD_DELBOTTLECONTACT",
		35:    "MM_SYNCCMD_MODUSERIMG",
		36:    "MM_SYNCCMD_KVSTAT",
		37:    "NN_SYNCCMD_THEMESTAT",
		44:    "MM_SYNCCMD_USERINFOEXT",
		45:    "MM_SNS_SYNCCMD_OBJECT",
		46:    "MM_SNS_SYNCCMD_ACTION",
		47:    "MM_SYNCCMD_BRAND_SETTING",
		48:    "MM_SYNCCMD_MODCHATROOMMEMBERDISPLAYNAME",
		50:    "MM_SYNCCMD_WEBWXFUNCTIONSWITCH",
		51:    "MM_SYNCCMD_MODSNSUSERINFO",
		52:    "MM_SYNCCMD_MODSNSBLACKLIST",
		53:    "MM_SYNCCMD_NEWDELMSG",
		54:    "MM_SYNCCMD_MODDESCRIPTION",
		55:    "MM_SYNCCMD_KVCMD",
		56:    "MM_SYNCCMD_DELETE_SNS_OLDGROUP",
		200:   "MM_FAV_SYNCCMD_ADDITEM",
		201:   "CmdIdMax",
		10002: "CmdIdDelMsg",
		10003: "CmdIdModTContact",
		10004: "MM_GAME_SYNCCMD_ADDMSG",
		10005: "MM_SYNCCMD_MODCHATROOMMEMBERFLAG",
	}
	SyncCmdID_value = map[string]int32{
		"CmdInvalid":                              0,
		"CmdIdModUserInfo":                        1,
		"CmdIdModContact":                         2,
		"CmdIdDelContact":                         4,
		"CmdIdAddMsg":                             5,
		"CmdIdModMsgStatus":                       6,
		"CmdIdDelChatContact":                     7,
		"CmdIdDelContactMsg":                      8,
		"CmdIdReport":                             10,
		"CmdIdOpenQQMicroBlog":                    11,
		"CmdIdCloseMicroBlog":                     12,
		"CmdIdModMicroBlog":                       13,
		"CmdIdModNotifyStatus":                    14,
		"CmdIdModChatRoomMember":                  15,
		"CmdIdQuitChatRoom":                       16,
		"CmdIdModContactDomainEmail":              17,
		"CmdIdModUserDomainEmail":                 18,
		"CmdIdDelUserDomainEmail":                 19,
		"CmdIdModChatRoomNotify":                  20,
		"CmdIdPossibleFriend":                     21,
		"CmdIdInviteFriendOpen":                   22,
		"CmdIdFunctionSwitch":                     23,
		"CmdIdModQContact":                        24,
		"CmdIdPsmStat":                            26,
		"CmdIdModChatRoomTopic":                   27,
		"MM_SYNCCMD_UPDATESTAT":                   30,
		"MM_SYNCCMD_MODDISTURBSETTING":            31,
		"MM_SYNCCMD_DELETEBOTTLE":                 32,
		"MM_SYNCCMD_MODBOTTLECONTACT":             33,
		"MM_SYNCCMD_DELBOTTLECONTACT":             34,
		"MM_SYNCCMD_MODUSERIMG":                   35,
		"MM_SYNCCMD_KVSTAT":                       36,
		"NN_SYNCCMD_THEMESTAT":                    37,
		"MM_SYNCCMD_USERINFOEXT":                  44,
		"MM_SNS_SYNCCMD_OBJECT":                   45,
		"MM_SNS_SYNCCMD_ACTION":                   46,
		"MM_SYNCCMD_BRAND_SETTING":                47,
		"MM_SYNCCMD_MODCHATROOMMEMBERDISPLAYNAME": 48,
		"MM_SYNCCMD_WEBWXFUNCTIONSWITCH":          50,
		"MM_SYNCCMD_MODSNSUSERINFO":               51,
		"MM_SYNCCMD_MODSNSBLACKLIST":              52,
		"MM_SYNCCMD_NEWDELMSG":                    53,
		"MM_SYNCCMD_MODDESCRIPTION":               54,
		"MM_SYNCCMD_KVCMD":                        55,
		"MM_SYNCCMD_DELETE_SNS_OLDGROUP":          56,
		"MM_FAV_SYNCCMD_ADDITEM":                  200,
		"CmdIdMax":                                201,
		"CmdIdDelMsg":                             10002,
		"CmdIdModTContact":                        10003,
		"MM_GAME_SYNCCMD_ADDMSG":                  10004,
		"MM_SYNCCMD_MODCHATROOMMEMBERFLAG":        10005,
	}
)

func (x SyncCmdID) Enum() *SyncCmdID {
	p := new(SyncCmdID)
	*p = x
	return p
}

func (x SyncCmdID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncCmdID) Descriptor() protoreflect.EnumDescriptor {
	return file_mm_proto_enumTypes[2].Descriptor()
}

func (SyncCmdID) Type() protoreflect.EnumType {
	return &file_mm_proto_enumTypes[2]
}

func (x SyncCmdID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SyncCmdID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SyncCmdID(num)
	return nil
}

// Deprecated: Use SyncCmdID.Descriptor instead.
func (SyncCmdID) EnumDescriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{2}
}

// 错误信息
type RetConst int32

const (
	RetConst_ERR_SERVER_FILE_EXPIRED                RetConst = -5103059
	RetConst_MM_ERR_FORCE_QUIT                      RetConst = -999999
	RetConst_MM_ERR_CLIENT                          RetConst = -800000
	RetConst_MM_ERR_CHATROOM_PARTIAL_INVITE         RetConst = -2013
	RetConst_MM_ERR_CHATROOM_NEED_INVITE            RetConst = -2012
	RetConst_MM_ERR_CONNECT_INFO_URL_INVALID        RetConst = -2011
	RetConst_MM_ERR_CLIDB_ENCRYPT_KEYINFO_INVALID   RetConst = -2010
	RetConst_MM_ERR_LOGIN_URL_DEVICE_UNSAFE         RetConst = -2009
	RetConst_MM_ERR_COOKIE_KICK                     RetConst = -2008
	RetConst_MM_ERR_LOGIN_QRCODE_UUID_EXPIRED       RetConst = -2007
	RetConst_MM_ERR_KEYBUF_INVALID                  RetConst = -2006
	RetConst_MM_ERR_FORCE_REDIRECT                  RetConst = -2005
	RetConst_MM_ERR_QRCODEVERIFY_BANBYEXPOSE        RetConst = -2004
	RetConst_MM_ERR_SHAKEBANBYEXPOSE                RetConst = -2003
	RetConst_MM_ERR_BOTTLEBANBYEXPOSE               RetConst = -2002
	RetConst_MM_ERR_LBSBANBYEXPOSE                  RetConst = -2001
	RetConst_MM_ERR_LBSDATANOTFOUND                 RetConst = -2000
	RetConst_MM_ERR_IMG_READ                        RetConst = -1005
	RetConst_MM_ERR_FACING_CREATECHATROOM_RETRY     RetConst = -432
	RetConst_MM_ERR_RADAR_PASSWORD_SIMPLE           RetConst = -431
	RetConst_MM_ERR_REVOKEMSG_TIMEOUT               RetConst = -430
	RetConst_MM_ERR_FAV_ALREADY                     RetConst = -400
	RetConst_MM_ERR_FILE_EXPIRED                    RetConst = -352
	RetConst_MM_ERR_USER_NOT_VERIFYUSER             RetConst = -302
	RetConst_MM_ERR_IDC_REDIRECT                    RetConst = -301
	RetConst_MM_ERR_REG_BUT_LOGIN                   RetConst = -212
	RetConst_MM_ERR_UNBIND_MAIN_ACCT                RetConst = -206
	RetConst_MM_ERR_QQ_OK_NEED_MOBILE               RetConst = -205
	RetConst_MM_ERR_OTHER_MAIN_ACCT                 RetConst = -204
	RetConst_MM_ERR_NODATA                          RetConst = -203
	RetConst_MM_ERR_UNBIND_MOBILE_NEED_QQPWD        RetConst = -202
	RetConst_MM_ERR_QQ_BAN                          RetConst = -201
	RetConst_MM_ERR_ACCOUNT_BAN                     RetConst = -200
	RetConst_MM_ERR_QA_RELATION                     RetConst = -153
	RetConst_MM_ERR_NO_QUESTION                     RetConst = -152
	RetConst_MM_ERR_QUESTION_COUNT                  RetConst = -151
	RetConst_MM_ERR_ANSWER_COUNT                    RetConst = -150
	RetConst_MM_ERR_EMAIL_FORMAT                    RetConst = -111
	RetConst_MM_ERR_BLOCK_BY_SPAM                   RetConst = -106
	RetConst_MM_ERR_CERT_EXPIRED                    RetConst = -102
	RetConst_MM_ERR_NO_RETRY                        RetConst = -101
	RetConst_MM_ERR_AUTH_ANOTHERPLACE               RetConst = -100
	RetConst_MM_ERR_USER_NOT_SUPPORT                RetConst = -94
	RetConst_MM_ERR_SHAKE_TRAN_IMG_OTHER            RetConst = -93
	RetConst_MM_ERR_SHAKE_TRAN_IMG_CONTINUE         RetConst = -92
	RetConst_MM_ERR_SHAKE_TRAN_IMG_NOTFOUND         RetConst = -91
	RetConst_MM_ERR_SHAKE_TRAN_IMG_CANCEL           RetConst = -90
	RetConst_MM_ERR_BIZ_FANS_LIMITED                RetConst = -87
	RetConst_MM_ERR_BIND_EMAIL_SAME_AS_QMAIL        RetConst = -86
	RetConst_MM_ERR_BINDED_BY_OTHER                 RetConst = -85
	RetConst_MM_ERR_HAS_BINDED                      RetConst = -84
	RetConst_MM_ERR_HAS_UNBINDED                    RetConst = -83
	RetConst_MM_ERR_ONE_BINDTYPE_LEFT               RetConst = -82
	RetConst_MM_ERR_NOTBINDQQ                       RetConst = -81
	RetConst_MM_ERR_WEIBO_PUSH_TRANS                RetConst = -80
	RetConst_MM_ERR_NEW_USER                        RetConst = -79
	RetConst_MM_ERR_SVR_MOBILE_FORMAT               RetConst = -78
	RetConst_MM_ERR_WRONG_SESSION_KEY               RetConst = -77
	RetConst_MM_ERR_UUID_BINDED                     RetConst = -76
	RetConst_MM_ERR_ALPHA_FORBIDDEN                 RetConst = -75
	RetConst_MM_ERR_MOBILE_NEEDADJUST               RetConst = -74
	RetConst_MM_ERR_TRYQQPWD                        RetConst = -73
	RetConst_MM_ERR_NICEQQ_EXPIRED                  RetConst = -72
	RetConst_MM_ERR_TOLIST_LIMITED                  RetConst = -71
	RetConst_MM_ERR_GETMFRIEND_NOT_READY            RetConst = -70
	RetConst_MM_ERR_BIGBIZ_AUTH                     RetConst = -69
	RetConst_MM_FACEBOOK_ACCESSTOKEN_UNVALID        RetConst = -68
	RetConst_MM_ERR_HAVE_BIND_FACEBOOK              RetConst = -67
	RetConst_MM_ERR_IS_NOT_OWNER                    RetConst = -66
	RetConst_MM_ERR_UNBIND_REGBYMOBILE              RetConst = -65
	RetConst_MM_ERR_PARSE_MAIL                      RetConst = -64
	RetConst_MM_ERR_GMAIL_IMAP                      RetConst = -63
	RetConst_MM_ERR_GMAIL_WEBLOGIN                  RetConst = -62
	RetConst_MM_ERR_GMAIL_ONLINELIMITE              RetConst = -61
	RetConst_MM_ERR_GMAIL_PWD                       RetConst = -60
	RetConst_MM_ERR_UNSUPPORT_COUNTRY               RetConst = -59
	RetConst_MM_ERR_PICKBOTTLE_NOBOTTLE             RetConst = -58
	RetConst_MM_ERR_SEND_VERIFYCODE                 RetConst = -57
	RetConst_MM_ERR_NO_BOTTLECOUNT                  RetConst = -56
	RetConst_MM_ERR_NO_HDHEADIMG                    RetConst = -55
	RetConst_MM_ERR_INVALID_HDHEADIMG_REQ_TOTAL_LEN RetConst = -54
	RetConst_MM_ERR_HAS_NO_HEADIMG                  RetConst = -53
	RetConst_MM_ERR_INVALID_GROUPCARD_CONTACT       RetConst = -52
	RetConst_MM_ERR_VERIFYCODE_NOTEXIST             RetConst = -51
	RetConst_MM_ERR_BINDUIN_BINDED                  RetConst = -50
	RetConst_MM_ERR_NEED_QQPWD                      RetConst = -49
	RetConst_MM_ERR_TICKET_NOTFOUND                 RetConst = -48
	RetConst_MM_ERR_TICKET_UNMATCH                  RetConst = -47
	RetConst_MM_ERR_NOTQQCONTACT                    RetConst = -46
	RetConst_MM_ERR_BATCHGETCONTACTPROFILE_MODE     RetConst = -45
	RetConst_MM_ERR_NEED_VERIFY_USER                RetConst = -44
	RetConst_MM_ERR_USER_BIND_MOBILE                RetConst = -43
	RetConst_MM_ERR_USER_MOBILE_UNMATCH             RetConst = -42
	RetConst_MM_ERR_MOBILE_FORMAT                   RetConst = -41
	RetConst_MM_ERR_UNMATCH_MOBILE                  RetConst = -40
	RetConst_MM_ERR_MOBILE_NULL                     RetConst = -39
	RetConst_MM_ERR_INVALID_UPLOADMCONTACT_OPMODE   RetConst = -38
	RetConst_MM_ERR_INVALID_BIND_OPMODE             RetConst = -37
	RetConst_MM_ERR_MOBILE_UNBINDED                 RetConst = -36
	RetConst_MM_ERR_MOBILE_BINDED                   RetConst = -35
	RetConst_MM_ERR_FREQ_LIMITED                    RetConst = -34
	RetConst_MM_ERR_VERIFYCODE_TIMEOUT              RetConst = -33
	RetConst_MM_ERR_VERIFYCODE_UNMATCH              RetConst = -32
	RetConst_MM_ERR_NEEDSECONDPWD                   RetConst = -31
	RetConst_MM_ERR_NEEDREG                         RetConst = -30
	RetConst_MM_ERR_OIDBTIMEOUT                     RetConst = -29
	RetConst_MM_ERR_BADEMAIL                        RetConst = -28
	RetConst_MM_ERR_DOMAINDISABLE                   RetConst = -27
	RetConst_MM_ERR_DOMAINMAXLIMITED                RetConst = -26
	RetConst_MM_ERR_DOMAINVERIFIED                  RetConst = -25
	RetConst_MM_ERR_SPAM                            RetConst = -24
	RetConst_MM_ERR_MEMBER_TOOMUCH                  RetConst = -23
	RetConst_MM_ERR_BLACKLIST                       RetConst = -22
	RetConst_MM_ERR_NOTCHATROOMCONTACT              RetConst = -21
	RetConst_MM_ERR_NOTMICROBLOGCONTACT             RetConst = -20
	RetConst_MM_ERR_NOTOPENPRIVATEMSG               RetConst = -19
	RetConst_MM_ERR_NOUPDATEINFO                    RetConst = -18
	RetConst_MM_ERR_RECOMMENDEDUPDATE               RetConst = -17
	RetConst_MM_ERR_CRITICALUPDATE                  RetConst = -16
	RetConst_MM_ERR_NICKNAMEINVALID                 RetConst = -15
	RetConst_MM_ERR_USERNAMEINVALID                 RetConst = -14
	RetConst_MM_ERR_SESSIONTIMEOUT                  RetConst = -13
	RetConst_MM_ERR_UINEXIST                        RetConst = -12
	RetConst_MM_ERR_NICKRESERVED                    RetConst = -11
	RetConst_MM_ERR_USERRESERVED                    RetConst = -10
	RetConst_MM_ERR_EMAILNOTVERIFY                  RetConst = -9
	RetConst_MM_ERR_EMAILEXIST                      RetConst = -8
	RetConst_MM_ERR_USEREXIST                       RetConst = -7
	RetConst_MM_ERR_NEED_VERIFY                     RetConst = -6
	RetConst_MM_ERR_ACCESS_DENIED                   RetConst = -5
	RetConst_MM_ERR_NOUSER                          RetConst = -4
	RetConst_MM_ERR_PASSWORD                        RetConst = -3
	RetConst_MM_ERR_ARG                             RetConst = -2
	RetConst_MM_ERR_SYS                             RetConst = -1
	RetConst_MM_OK                                  RetConst = 0
	RetConst_MM_BOTTLE_ERR_UNKNOWNTYPE              RetConst = 15
	RetConst_MM_BOTTLE_COUNT_ERR                    RetConst = 16
	RetConst_MM_BOTTLE_NOTEXIT                      RetConst = 17
	RetConst_MM_BOTTLE_UINNOTMATCH                  RetConst = 18
	RetConst_MM_BOTTLE_PICKCOUNTINVALID             RetConst = 19
	RetConst_MMSNS_RET_SPAM                         RetConst = 201
	RetConst_MMSNS_RET_BAN                          RetConst = 202
	RetConst_MMSNS_RET_PRIVACY                      RetConst = 203
	RetConst_MMSNS_RET_COMMENT_HAVE_LIKE            RetConst = 204
	RetConst_MMSNS_RET_COMMENT_NOT_ALLOW            RetConst = 205
	RetConst_MMSNS_RET_CLIENTID_EXIST               RetConst = 206
	RetConst_MMSNS_RET_ISALL                        RetConst = 207
	RetConst_MMSNS_RET_COMMENT_PRIVACY              RetConst = 208
	RetConst_MM_ERR_SHORTVIDEO_CANCEL               RetConst = 1000000
)

// Enum value maps for RetConst.
var (
	RetConst_name = map[int32]string{
		-5103059: "ERR_SERVER_FILE_EXPIRED",
		-999999:  "MM_ERR_FORCE_QUIT",
		-800000:  "MM_ERR_CLIENT",
		-2013:    "MM_ERR_CHATROOM_PARTIAL_INVITE",
		-2012:    "MM_ERR_CHATROOM_NEED_INVITE",
		-2011:    "MM_ERR_CONNECT_INFO_URL_INVALID",
		-2010:    "MM_ERR_CLIDB_ENCRYPT_KEYINFO_INVALID",
		-2009:    "MM_ERR_LOGIN_URL_DEVICE_UNSAFE",
		-2008:    "MM_ERR_COOKIE_KICK",
		-2007:    "MM_ERR_LOGIN_QRCODE_UUID_EXPIRED",
		-2006:    "MM_ERR_KEYBUF_INVALID",
		-2005:    "MM_ERR_FORCE_REDIRECT",
		-2004:    "MM_ERR_QRCODEVERIFY_BANBYEXPOSE",
		-2003:    "MM_ERR_SHAKEBANBYEXPOSE",
		-2002:    "MM_ERR_BOTTLEBANBYEXPOSE",
		-2001:    "MM_ERR_LBSBANBYEXPOSE",
		-2000:    "MM_ERR_LBSDATANOTFOUND",
		-1005:    "MM_ERR_IMG_READ",
		-432:     "MM_ERR_FACING_CREATECHATROOM_RETRY",
		-431:     "MM_ERR_RADAR_PASSWORD_SIMPLE",
		-430:     "MM_ERR_REVOKEMSG_TIMEOUT",
		-400:     "MM_ERR_FAV_ALREADY",
		-352:     "MM_ERR_FILE_EXPIRED",
		-302:     "MM_ERR_USER_NOT_VERIFYUSER",
		-301:     "MM_ERR_IDC_REDIRECT",
		-212:     "MM_ERR_REG_BUT_LOGIN",
		-206:     "MM_ERR_UNBIND_MAIN_ACCT",
		-205:     "MM_ERR_QQ_OK_NEED_MOBILE",
		-204:     "MM_ERR_OTHER_MAIN_ACCT",
		-203:     "MM_ERR_NODATA",
		-202:     "MM_ERR_UNBIND_MOBILE_NEED_QQPWD",
		-201:     "MM_ERR_QQ_BAN",
		-200:     "MM_ERR_ACCOUNT_BAN",
		-153:     "MM_ERR_QA_RELATION",
		-152:     "MM_ERR_NO_QUESTION",
		-151:     "MM_ERR_QUESTION_COUNT",
		-150:     "MM_ERR_ANSWER_COUNT",
		-111:     "MM_ERR_EMAIL_FORMAT",
		-106:     "MM_ERR_BLOCK_BY_SPAM",
		-102:     "MM_ERR_CERT_EXPIRED",
		-101:     "MM_ERR_NO_RETRY",
		-100:     "MM_ERR_AUTH_ANOTHERPLACE",
		-94:      "MM_ERR_USER_NOT_SUPPORT",
		-93:      "MM_ERR_SHAKE_TRAN_IMG_OTHER",
		-92:      "MM_ERR_SHAKE_TRAN_IMG_CONTINUE",
		-91:      "MM_ERR_SHAKE_TRAN_IMG_NOTFOUND",
		-90:      "MM_ERR_SHAKE_TRAN_IMG_CANCEL",
		-87:      "MM_ERR_BIZ_FANS_LIMITED",
		-86:      "MM_ERR_BIND_EMAIL_SAME_AS_QMAIL",
		-85:      "MM_ERR_BINDED_BY_OTHER",
		-84:      "MM_ERR_HAS_BINDED",
		-83:      "MM_ERR_HAS_UNBINDED",
		-82:      "MM_ERR_ONE_BINDTYPE_LEFT",
		-81:      "MM_ERR_NOTBINDQQ",
		-80:      "MM_ERR_WEIBO_PUSH_TRANS",
		-79:      "MM_ERR_NEW_USER",
		-78:      "MM_ERR_SVR_MOBILE_FORMAT",
		-77:      "MM_ERR_WRONG_SESSION_KEY",
		-76:      "MM_ERR_UUID_BINDED",
		-75:      "MM_ERR_ALPHA_FORBIDDEN",
		-74:      "MM_ERR_MOBILE_NEEDADJUST",
		-73:      "MM_ERR_TRYQQPWD",
		-72:      "MM_ERR_NICEQQ_EXPIRED",
		-71:      "MM_ERR_TOLIST_LIMITED",
		-70:      "MM_ERR_GETMFRIEND_NOT_READY",
		-69:      "MM_ERR_BIGBIZ_AUTH",
		-68:      "MM_FACEBOOK_ACCESSTOKEN_UNVALID",
		-67:      "MM_ERR_HAVE_BIND_FACEBOOK",
		-66:      "MM_ERR_IS_NOT_OWNER",
		-65:      "MM_ERR_UNBIND_REGBYMOBILE",
		-64:      "MM_ERR_PARSE_MAIL",
		-63:      "MM_ERR_GMAIL_IMAP",
		-62:      "MM_ERR_GMAIL_WEBLOGIN",
		-61:      "MM_ERR_GMAIL_ONLINELIMITE",
		-60:      "MM_ERR_GMAIL_PWD",
		-59:      "MM_ERR_UNSUPPORT_COUNTRY",
		-58:      "MM_ERR_PICKBOTTLE_NOBOTTLE",
		-57:      "MM_ERR_SEND_VERIFYCODE",
		-56:      "MM_ERR_NO_BOTTLECOUNT",
		-55:      "MM_ERR_NO_HDHEADIMG",
		-54:      "MM_ERR_INVALID_HDHEADIMG_REQ_TOTAL_LEN",
		-53:      "MM_ERR_HAS_NO_HEADIMG",
		-52:      "MM_ERR_INVALID_GROUPCARD_CONTACT",
		-51:      "MM_ERR_VERIFYCODE_NOTEXIST",
		-50:      "MM_ERR_BINDUIN_BINDED",
		-49:      "MM_ERR_NEED_QQPWD",
		-48:      "MM_ERR_TICKET_NOTFOUND",
		-47:      "MM_ERR_TICKET_UNMATCH",
		-46:      "MM_ERR_NOTQQCONTACT",
		-45:      "MM_ERR_BATCHGETCONTACTPROFILE_MODE",
		-44:      "MM_ERR_NEED_VERIFY_USER",
		-43:      "MM_ERR_USER_BIND_MOBILE",
		-42:      "MM_ERR_USER_MOBILE_UNMATCH",
		-41:      "MM_ERR_MOBILE_FORMAT",
		-40:      "MM_ERR_UNMATCH_MOBILE",
		-39:      "MM_ERR_MOBILE_NULL",
		-38:      "MM_ERR_INVALID_UPLOADMCONTACT_OPMODE",
		-37:      "MM_ERR_INVALID_BIND_OPMODE",
		-36:      "MM_ERR_MOBILE_UNBINDED",
		-35:      "MM_ERR_MOBILE_BINDED",
		-34:      "MM_ERR_FREQ_LIMITED",
		-33:      "MM_ERR_VERIFYCODE_TIMEOUT",
		-32:      "MM_ERR_VERIFYCODE_UNMATCH",
		-31:      "MM_ERR_NEEDSECONDPWD",
		-30:      "MM_ERR_NEEDREG",
		-29:      "MM_ERR_OIDBTIMEOUT",
		-28:      "MM_ERR_BADEMAIL",
		-27:      "MM_ERR_DOMAINDISABLE",
		-26:      "MM_ERR_DOMAINMAXLIMITED",
		-25:      "MM_ERR_DOMAINVERIFIED",
		-24:      "MM_ERR_SPAM",
		-23:      "MM_ERR_MEMBER_TOOMUCH",
		-22:      "MM_ERR_BLACKLIST",
		-21:      "MM_ERR_NOTCHATROOMCONTACT",
		-20:      "MM_ERR_NOTMICROBLOGCONTACT",
		-19:      "MM_ERR_NOTOPENPRIVATEMSG",
		-18:      "MM_ERR_NOUPDATEINFO",
		-17:      "MM_ERR_RECOMMENDEDUPDATE",
		-16:      "MM_ERR_CRITICALUPDATE",
		-15:      "MM_ERR_NICKNAMEINVALID",
		-14:      "MM_ERR_USERNAMEINVALID",
		-13:      "MM_ERR_SESSIONTIMEOUT",
		-12:      "MM_ERR_UINEXIST",
		-11:      "MM_ERR_NICKRESERVED",
		-10:      "MM_ERR_USERRESERVED",
		-9:       "MM_ERR_EMAILNOTVERIFY",
		-8:       "MM_ERR_EMAILEXIST",
		-7:       "MM_ERR_USEREXIST",
		-6:       "MM_ERR_NEED_VERIFY",
		-5:       "MM_ERR_ACCESS_DENIED",
		-4:       "MM_ERR_NOUSER",
		-3:       "MM_ERR_PASSWORD",
		-2:       "MM_ERR_ARG",
		-1:       "MM_ERR_SYS",
		0:        "MM_OK",
		15:       "MM_BOTTLE_ERR_UNKNOWNTYPE",
		16:       "MM_BOTTLE_COUNT_ERR",
		17:       "MM_BOTTLE_NOTEXIT",
		18:       "MM_BOTTLE_UINNOTMATCH",
		19:       "MM_BOTTLE_PICKCOUNTINVALID",
		201:      "MMSNS_RET_SPAM",
		202:      "MMSNS_RET_BAN",
		203:      "MMSNS_RET_PRIVACY",
		204:      "MMSNS_RET_COMMENT_HAVE_LIKE",
		205:      "MMSNS_RET_COMMENT_NOT_ALLOW",
		206:      "MMSNS_RET_CLIENTID_EXIST",
		207:      "MMSNS_RET_ISALL",
		208:      "MMSNS_RET_COMMENT_PRIVACY",
		1000000:  "MM_ERR_SHORTVIDEO_CANCEL",
	}
	RetConst_value = map[string]int32{
		"ERR_SERVER_FILE_EXPIRED":                -5103059,
		"MM_ERR_FORCE_QUIT":                      -999999,
		"MM_ERR_CLIENT":                          -800000,
		"MM_ERR_CHATROOM_PARTIAL_INVITE":         -2013,
		"MM_ERR_CHATROOM_NEED_INVITE":            -2012,
		"MM_ERR_CONNECT_INFO_URL_INVALID":        -2011,
		"MM_ERR_CLIDB_ENCRYPT_KEYINFO_INVALID":   -2010,
		"MM_ERR_LOGIN_URL_DEVICE_UNSAFE":         -2009,
		"MM_ERR_COOKIE_KICK":                     -2008,
		"MM_ERR_LOGIN_QRCODE_UUID_EXPIRED":       -2007,
		"MM_ERR_KEYBUF_INVALID":                  -2006,
		"MM_ERR_FORCE_REDIRECT":                  -2005,
		"MM_ERR_QRCODEVERIFY_BANBYEXPOSE":        -2004,
		"MM_ERR_SHAKEBANBYEXPOSE":                -2003,
		"MM_ERR_BOTTLEBANBYEXPOSE":               -2002,
		"MM_ERR_LBSBANBYEXPOSE":                  -2001,
		"MM_ERR_LBSDATANOTFOUND":                 -2000,
		"MM_ERR_IMG_READ":                        -1005,
		"MM_ERR_FACING_CREATECHATROOM_RETRY":     -432,
		"MM_ERR_RADAR_PASSWORD_SIMPLE":           -431,
		"MM_ERR_REVOKEMSG_TIMEOUT":               -430,
		"MM_ERR_FAV_ALREADY":                     -400,
		"MM_ERR_FILE_EXPIRED":                    -352,
		"MM_ERR_USER_NOT_VERIFYUSER":             -302,
		"MM_ERR_IDC_REDIRECT":                    -301,
		"MM_ERR_REG_BUT_LOGIN":                   -212,
		"MM_ERR_UNBIND_MAIN_ACCT":                -206,
		"MM_ERR_QQ_OK_NEED_MOBILE":               -205,
		"MM_ERR_OTHER_MAIN_ACCT":                 -204,
		"MM_ERR_NODATA":                          -203,
		"MM_ERR_UNBIND_MOBILE_NEED_QQPWD":        -202,
		"MM_ERR_QQ_BAN":                          -201,
		"MM_ERR_ACCOUNT_BAN":                     -200,
		"MM_ERR_QA_RELATION":                     -153,
		"MM_ERR_NO_QUESTION":                     -152,
		"MM_ERR_QUESTION_COUNT":                  -151,
		"MM_ERR_ANSWER_COUNT":                    -150,
		"MM_ERR_EMAIL_FORMAT":                    -111,
		"MM_ERR_BLOCK_BY_SPAM":                   -106,
		"MM_ERR_CERT_EXPIRED":                    -102,
		"MM_ERR_NO_RETRY":                        -101,
		"MM_ERR_AUTH_ANOTHERPLACE":               -100,
		"MM_ERR_USER_NOT_SUPPORT":                -94,
		"MM_ERR_SHAKE_TRAN_IMG_OTHER":            -93,
		"MM_ERR_SHAKE_TRAN_IMG_CONTINUE":         -92,
		"MM_ERR_SHAKE_TRAN_IMG_NOTFOUND":         -91,
		"MM_ERR_SHAKE_TRAN_IMG_CANCEL":           -90,
		"MM_ERR_BIZ_FANS_LIMITED":                -87,
		"MM_ERR_BIND_EMAIL_SAME_AS_QMAIL":        -86,
		"MM_ERR_BINDED_BY_OTHER":                 -85,
		"MM_ERR_HAS_BINDED":                      -84,
		"MM_ERR_HAS_UNBINDED":                    -83,
		"MM_ERR_ONE_BINDTYPE_LEFT":               -82,
		"MM_ERR_NOTBINDQQ":                       -81,
		"MM_ERR_WEIBO_PUSH_TRANS":                -80,
		"MM_ERR_NEW_USER":                        -79,
		"MM_ERR_SVR_MOBILE_FORMAT":               -78,
		"MM_ERR_WRONG_SESSION_KEY":               -77,
		"MM_ERR_UUID_BINDED":                     -76,
		"MM_ERR_ALPHA_FORBIDDEN":                 -75,
		"MM_ERR_MOBILE_NEEDADJUST":               -74,
		"MM_ERR_TRYQQPWD":                        -73,
		"MM_ERR_NICEQQ_EXPIRED":                  -72,
		"MM_ERR_TOLIST_LIMITED":                  -71,
		"MM_ERR_GETMFRIEND_NOT_READY":            -70,
		"MM_ERR_BIGBIZ_AUTH":                     -69,
		"MM_FACEBOOK_ACCESSTOKEN_UNVALID":        -68,
		"MM_ERR_HAVE_BIND_FACEBOOK":              -67,
		"MM_ERR_IS_NOT_OWNER":                    -66,
		"MM_ERR_UNBIND_REGBYMOBILE":              -65,
		"MM_ERR_PARSE_MAIL":                      -64,
		"MM_ERR_GMAIL_IMAP":                      -63,
		"MM_ERR_GMAIL_WEBLOGIN":                  -62,
		"MM_ERR_GMAIL_ONLINELIMITE":              -61,
		"MM_ERR_GMAIL_PWD":                       -60,
		"MM_ERR_UNSUPPORT_COUNTRY":               -59,
		"MM_ERR_PICKBOTTLE_NOBOTTLE":             -58,
		"MM_ERR_SEND_VERIFYCODE":                 -57,
		"MM_ERR_NO_BOTTLECOUNT":                  -56,
		"MM_ERR_NO_HDHEADIMG":                    -55,
		"MM_ERR_INVALID_HDHEADIMG_REQ_TOTAL_LEN": -54,
		"MM_ERR_HAS_NO_HEADIMG":                  -53,
		"MM_ERR_INVALID_GROUPCARD_CONTACT":       -52,
		"MM_ERR_VERIFYCODE_NOTEXIST":             -51,
		"MM_ERR_BINDUIN_BINDED":                  -50,
		"MM_ERR_NEED_QQPWD":                      -49,
		"MM_ERR_TICKET_NOTFOUND":                 -48,
		"MM_ERR_TICKET_UNMATCH":                  -47,
		"MM_ERR_NOTQQCONTACT":                    -46,
		"MM_ERR_BATCHGETCONTACTPROFILE_MODE":     -45,
		"MM_ERR_NEED_VERIFY_USER":                -44,
		"MM_ERR_USER_BIND_MOBILE":                -43,
		"MM_ERR_USER_MOBILE_UNMATCH":             -42,
		"MM_ERR_MOBILE_FORMAT":                   -41,
		"MM_ERR_UNMATCH_MOBILE":                  -40,
		"MM_ERR_MOBILE_NULL":                     -39,
		"MM_ERR_INVALID_UPLOADMCONTACT_OPMODE":   -38,
		"MM_ERR_INVALID_BIND_OPMODE":             -37,
		"MM_ERR_MOBILE_UNBINDED":                 -36,
		"MM_ERR_MOBILE_BINDED":                   -35,
		"MM_ERR_FREQ_LIMITED":                    -34,
		"MM_ERR_VERIFYCODE_TIMEOUT":              -33,
		"MM_ERR_VERIFYCODE_UNMATCH":              -32,
		"MM_ERR_NEEDSECONDPWD":                   -31,
		"MM_ERR_NEEDREG":                         -30,
		"MM_ERR_OIDBTIMEOUT":                     -29,
		"MM_ERR_BADEMAIL":                        -28,
		"MM_ERR_DOMAINDISABLE":                   -27,
		"MM_ERR_DOMAINMAXLIMITED":                -26,
		"MM_ERR_DOMAINVERIFIED":                  -25,
		"MM_ERR_SPAM":                            -24,
		"MM_ERR_MEMBER_TOOMUCH":                  -23,
		"MM_ERR_BLACKLIST":                       -22,
		"MM_ERR_NOTCHATROOMCONTACT":              -21,
		"MM_ERR_NOTMICROBLOGCONTACT":             -20,
		"MM_ERR_NOTOPENPRIVATEMSG":               -19,
		"MM_ERR_NOUPDATEINFO":                    -18,
		"MM_ERR_RECOMMENDEDUPDATE":               -17,
		"MM_ERR_CRITICALUPDATE":                  -16,
		"MM_ERR_NICKNAMEINVALID":                 -15,
		"MM_ERR_USERNAMEINVALID":                 -14,
		"MM_ERR_SESSIONTIMEOUT":                  -13,
		"MM_ERR_UINEXIST":                        -12,
		"MM_ERR_NICKRESERVED":                    -11,
		"MM_ERR_USERRESERVED":                    -10,
		"MM_ERR_EMAILNOTVERIFY":                  -9,
		"MM_ERR_EMAILEXIST":                      -8,
		"MM_ERR_USEREXIST":                       -7,
		"MM_ERR_NEED_VERIFY":                     -6,
		"MM_ERR_ACCESS_DENIED":                   -5,
		"MM_ERR_NOUSER":                          -4,
		"MM_ERR_PASSWORD":                        -3,
		"MM_ERR_ARG":                             -2,
		"MM_ERR_SYS":                             -1,
		"MM_OK":                                  0,
		"MM_BOTTLE_ERR_UNKNOWNTYPE":              15,
		"MM_BOTTLE_COUNT_ERR":                    16,
		"MM_BOTTLE_NOTEXIT":                      17,
		"MM_BOTTLE_UINNOTMATCH":                  18,
		"MM_BOTTLE_PICKCOUNTINVALID":             19,
		"MMSNS_RET_SPAM":                         201,
		"MMSNS_RET_BAN":                          202,
		"MMSNS_RET_PRIVACY":                      203,
		"MMSNS_RET_COMMENT_HAVE_LIKE":            204,
		"MMSNS_RET_COMMENT_NOT_ALLOW":            205,
		"MMSNS_RET_CLIENTID_EXIST":               206,
		"MMSNS_RET_ISALL":                        207,
		"MMSNS_RET_COMMENT_PRIVACY":              208,
		"MM_ERR_SHORTVIDEO_CANCEL":               1000000,
	}
)

func (x RetConst) Enum() *RetConst {
	p := new(RetConst)
	*p = x
	return p
}

func (x RetConst) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RetConst) Descriptor() protoreflect.EnumDescriptor {
	return file_mm_proto_enumTypes[3].Descriptor()
}

func (RetConst) Type() protoreflect.EnumType {
	return &file_mm_proto_enumTypes[3]
}

func (x RetConst) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RetConst) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RetConst(num)
	return nil
}

// Deprecated: Use RetConst.Descriptor instead.
func (RetConst) EnumDescriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{3}
}

type VoiceFormat int32

const (
	VoiceFormat_MM_VOICE_FORMAT_UNKNOWN VoiceFormat = -1
	VoiceFormat_MM_VOICE_FORMAT_AMR     VoiceFormat = 0
	VoiceFormat_MM_VOICE_FORMAT_SPEEX   VoiceFormat = 1
	VoiceFormat_MM_VOICE_FORMAT_MP3     VoiceFormat = 2
	VoiceFormat_MM_VOICE_FORMAT_WAVE    VoiceFormat = 3
	VoiceFormat_MM_VOICE_FORMAT_SILK    VoiceFormat = 4
)

// Enum value maps for VoiceFormat.
var (
	VoiceFormat_name = map[int32]string{
		-1: "MM_VOICE_FORMAT_UNKNOWN",
		0:  "MM_VOICE_FORMAT_AMR",
		1:  "MM_VOICE_FORMAT_SPEEX",
		2:  "MM_VOICE_FORMAT_MP3",
		3:  "MM_VOICE_FORMAT_WAVE",
		4:  "MM_VOICE_FORMAT_SILK",
	}
	VoiceFormat_value = map[string]int32{
		"MM_VOICE_FORMAT_UNKNOWN": -1,
		"MM_VOICE_FORMAT_AMR":     0,
		"MM_VOICE_FORMAT_SPEEX":   1,
		"MM_VOICE_FORMAT_MP3":     2,
		"MM_VOICE_FORMAT_WAVE":    3,
		"MM_VOICE_FORMAT_SILK":    4,
	}
)

func (x VoiceFormat) Enum() *VoiceFormat {
	p := new(VoiceFormat)
	*p = x
	return p
}

func (x VoiceFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoiceFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_mm_proto_enumTypes[4].Descriptor()
}

func (VoiceFormat) Type() protoreflect.EnumType {
	return &file_mm_proto_enumTypes[4]
}

func (x VoiceFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VoiceFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VoiceFormat(num)
	return nil
}

// Deprecated: Use VoiceFormat.Descriptor instead.
func (VoiceFormat) EnumDescriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{4}
}

type EnMMTenPayCgiCmd int32

const (
	EnMMTenPayCgiCmd_MMTENPAY_BIZ_CGICMD_PLATFORM_NOTIFY_CHECK_RESULT EnMMTenPayCgiCmd = 27
	EnMMTenPayCgiCmd_MMTENPAY_BIZ_CGICMD_PLATFORM_QUERY_BZJ_INFO      EnMMTenPayCgiCmd = 34
	EnMMTenPayCgiCmd_MMTENPAY_BIZ_CGICMD_PLATFORM_QUERY_CHECK_RECORD  EnMMTenPayCgiCmd = 23
	EnMMTenPayCgiCmd_MMTENPAY_BIZ_CGICMD_PLATFORM_QUERY_CHECK_RESULT  EnMMTenPayCgiCmd = 25
	EnMMTenPayCgiCmd_MMTENPAY_BIZ_CGICMD_QUERY_BIZ_CHECK_RESULT       EnMMTenPayCgiCmd = 56
	EnMMTenPayCgiCmd_MMTENPAY_BIZ_CGICMD_QUERY_NEW_PARTNER_ID         EnMMTenPayCgiCmd = 55
	EnMMTenPayCgiCmd_MMTENPAY_BIZ_CGICMD_WEB_NOTIFY_CHECK_RESULT      EnMMTenPayCgiCmd = 26
	EnMMTenPayCgiCmd_MMTENPAY_BIZ_CGICMD_WEB_QUERY_CHECK_RECORD       EnMMTenPayCgiCmd = 22
	EnMMTenPayCgiCmd_MMTENPAY_BIZ_CGICMD_WEB_QUERY_CHECK_RESULT       EnMMTenPayCgiCmd = 24
	EnMMTenPayCgiCmd_MMTENPAY_BIZ_CGICMD_WX_QRY_AUTH_INFO             EnMMTenPayCgiCmd = 70
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_AUTHEN                           EnMMTenPayCgiCmd = 0
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_BANK_QUERY                       EnMMTenPayCgiCmd = 7
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_BANKCARDBIN_QUERY                EnMMTenPayCgiCmd = 15
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_BIND_AUTHEN                      EnMMTenPayCgiCmd = 12
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_BIND_QUERY_NEW                   EnMMTenPayCgiCmd = 72
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_BIND_VERIFY                      EnMMTenPayCgiCmd = 13
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_BIND_VERIFY_REG                  EnMMTenPayCgiCmd = 17
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_CHANGE_PWD                       EnMMTenPayCgiCmd = 9
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_CHECK_PWD                        EnMMTenPayCgiCmd = 18
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_CHKPAYACC                        EnMMTenPayCgiCmd = 79
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_ELEM_QUERY_NEW                   EnMMTenPayCgiCmd = 73
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_GEN_PRE_FETCH                    EnMMTenPayCgiCmd = 75
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_GEN_PRE_SAVE                     EnMMTenPayCgiCmd = 74
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_GEN_PRE_TRANSFER                 EnMMTenPayCgiCmd = 83
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_GET_FIXED_AMOUNT_QRCODE          EnMMTenPayCgiCmd = 94
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_IMPORT_BIND_QUERY                EnMMTenPayCgiCmd = 37
	// MMTENPAY_CGICMD_IMPORT_ENCRYPT_QUERY;
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_MCH_TRADE             EnMMTenPayCgiCmd = 28
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_NONPAY                EnMMTenPayCgiCmd = 92
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_OFFLINE_CHG_FEE       EnMMTenPayCgiCmd = 50
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_OFFLINE_CLOSE         EnMMTenPayCgiCmd = 47
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_OFFLINE_CREATE        EnMMTenPayCgiCmd = 46
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_OFFLINE_FPAY          EnMMTenPayCgiCmd = 48
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_OFFLINE_GET_TOKEN     EnMMTenPayCgiCmd = 52
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_OFFLINE_QUERY_USER    EnMMTenPayCgiCmd = 49
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_OFFLINE_UNFREEZE      EnMMTenPayCgiCmd = 51
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_PAYRELAY              EnMMTenPayCgiCmd = 87
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_PAYUNREG              EnMMTenPayCgiCmd = 71
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_PUBLIC_API            EnMMTenPayCgiCmd = 21
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_QRCODE_CREATE         EnMMTenPayCgiCmd = 5
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_QRCODE_TO_BARCODE     EnMMTenPayCgiCmd = 78
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_QRCODE_USE            EnMMTenPayCgiCmd = 6
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_QUERY_REFUND          EnMMTenPayCgiCmd = 80
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_QUERY_TRANSFER_STATUS EnMMTenPayCgiCmd = 84
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_QUERY_USER_TYPE       EnMMTenPayCgiCmd = 30
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_RESET_PWD             EnMMTenPayCgiCmd = 20
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_RESET_PWD_AUTHEN      EnMMTenPayCgiCmd = 10
	// MMTENPAY_CGICMD_RESET_PWD_VERIFY;
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_TIMESEED                  EnMMTenPayCgiCmd = 19
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_TRANSFEAR_SEND_CANCEL_MSG EnMMTenPayCgiCmd = 97
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_TRANSFER_CONFIRM          EnMMTenPayCgiCmd = 85
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_TRANSFER_GET_USERNAME     EnMMTenPayCgiCmd = 95
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_TRANSFER_RETRYSENDMESSAGE EnMMTenPayCgiCmd = 86
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_UNBIND                    EnMMTenPayCgiCmd = 14
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_USER_ROLL                 EnMMTenPayCgiCmd = 3
	// MMTENPAY_CGICMD_USER_ROLL_BATCH;
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_USER_ROLL_SAVE_AND_FETCH EnMMTenPayCgiCmd = 77
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_VERIFY                   EnMMTenPayCgiCmd = 1
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_VERIFY_BIND              EnMMTenPayCgiCmd = 76
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_VERIFY_REG               EnMMTenPayCgiCmd = 16
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_FUND_ACCOUNT_QUERY    EnMMTenPayCgiCmd = 43
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_FUND_BINDSP_QUERY     EnMMTenPayCgiCmd = 42
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_FUND_BUY              EnMMTenPayCgiCmd = 39
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_FUND_CHANGE           EnMMTenPayCgiCmd = 41
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_FUND_PROFIT_QUERY     EnMMTenPayCgiCmd = 44
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_FUND_REDEM            EnMMTenPayCgiCmd = 40
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_FUND_SUPPORT_BANK     EnMMTenPayCgiCmd = 45
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_GET_MERSIGN_ORDER     EnMMTenPayCgiCmd = 88
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_GET_MERSIGN_SIMPLE    EnMMTenPayCgiCmd = 90
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_HB_REDPACKETNOTIFY    EnMMTenPayCgiCmd = 53
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_HBAA_TRANSFER         EnMMTenPayCgiCmd = 81
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_OFFLINE_AUTHEN        EnMMTenPayCgiCmd = 35
	// MMTENPAY_CGICMD_WX_OFFLINE_PAY;
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_PAY_CONFIRM                EnMMTenPayCgiCmd = 82
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_QUERY_BANK_ROLL_LIST_BATCH EnMMTenPayCgiCmd = 93
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_QUERY_ORDER                EnMMTenPayCgiCmd = 96
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_QUERY_SP_BANK              EnMMTenPayCgiCmd = 91
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_SP_CLOSE_ORDER             EnMMTenPayCgiCmd = 54
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WX_VERIFY_MERSIGN             EnMMTenPayCgiCmd = 89
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WXCREDIT_AUTHEN               EnMMTenPayCgiCmd = 64
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WXCREDIT_COMMIT_QUESTION      EnMMTenPayCgiCmd = 60
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WXCREDIT_QUERY                EnMMTenPayCgiCmd = 57
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WXCREDIT_QUERY_BILL_DETAIL    EnMMTenPayCgiCmd = 67
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WXCREDIT_QUERY_CARD_DETAIL    EnMMTenPayCgiCmd = 58
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WXCREDIT_QUERY_PRIVILEGE      EnMMTenPayCgiCmd = 68
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WXCREDIT_QUERY_QUESTION       EnMMTenPayCgiCmd = 59
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WXCREDIT_RENEW_IDENTIFY       EnMMTenPayCgiCmd = 69
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WXCREDIT_REPAY                EnMMTenPayCgiCmd = 61
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WXCREDIT_SIMPLE_VERIFY        EnMMTenPayCgiCmd = 66
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WXCREDIT_UNBIND               EnMMTenPayCgiCmd = 62
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WXCREDIT_VERIFY               EnMMTenPayCgiCmd = 65
	EnMMTenPayCgiCmd_MMTENPAY_CGICMD_WXCREDIT_VERIFY_PASSWD        EnMMTenPayCgiCmd = 63
	EnMMTenPayCgiCmd_MMTENPAY_GW_CGICMD_NORMAL_ORDER_QUERY         EnMMTenPayCgiCmd = 29
	EnMMTenPayCgiCmd_MMTENPAY_GW_CGICMD_NORMAL_REFUND_QUERY        EnMMTenPayCgiCmd = 33
	EnMMTenPayCgiCmd_MMTENPAY_GW_CGICMD_VERIFY_NOTIFY_ID           EnMMTenPayCgiCmd = 31
)

// Enum value maps for EnMMTenPayCgiCmd.
var (
	EnMMTenPayCgiCmd_name = map[int32]string{
		27: "MMTENPAY_BIZ_CGICMD_PLATFORM_NOTIFY_CHECK_RESULT",
		34: "MMTENPAY_BIZ_CGICMD_PLATFORM_QUERY_BZJ_INFO",
		23: "MMTENPAY_BIZ_CGICMD_PLATFORM_QUERY_CHECK_RECORD",
		25: "MMTENPAY_BIZ_CGICMD_PLATFORM_QUERY_CHECK_RESULT",
		56: "MMTENPAY_BIZ_CGICMD_QUERY_BIZ_CHECK_RESULT",
		55: "MMTENPAY_BIZ_CGICMD_QUERY_NEW_PARTNER_ID",
		26: "MMTENPAY_BIZ_CGICMD_WEB_NOTIFY_CHECK_RESULT",
		22: "MMTENPAY_BIZ_CGICMD_WEB_QUERY_CHECK_RECORD",
		24: "MMTENPAY_BIZ_CGICMD_WEB_QUERY_CHECK_RESULT",
		70: "MMTENPAY_BIZ_CGICMD_WX_QRY_AUTH_INFO",
		0:  "MMTENPAY_CGICMD_AUTHEN",
		7:  "MMTENPAY_CGICMD_BANK_QUERY",
		15: "MMTENPAY_CGICMD_BANKCARDBIN_QUERY",
		12: "MMTENPAY_CGICMD_BIND_AUTHEN",
		72: "MMTENPAY_CGICMD_BIND_QUERY_NEW",
		13: "MMTENPAY_CGICMD_BIND_VERIFY",
		17: "MMTENPAY_CGICMD_BIND_VERIFY_REG",
		9:  "MMTENPAY_CGICMD_CHANGE_PWD",
		18: "MMTENPAY_CGICMD_CHECK_PWD",
		79: "MMTENPAY_CGICMD_CHKPAYACC",
		73: "MMTENPAY_CGICMD_ELEM_QUERY_NEW",
		75: "MMTENPAY_CGICMD_GEN_PRE_FETCH",
		74: "MMTENPAY_CGICMD_GEN_PRE_SAVE",
		83: "MMTENPAY_CGICMD_GEN_PRE_TRANSFER",
		94: "MMTENPAY_CGICMD_GET_FIXED_AMOUNT_QRCODE",
		37: "MMTENPAY_CGICMD_IMPORT_BIND_QUERY",
		28: "MMTENPAY_CGICMD_MCH_TRADE",
		92: "MMTENPAY_CGICMD_NONPAY",
		50: "MMTENPAY_CGICMD_OFFLINE_CHG_FEE",
		47: "MMTENPAY_CGICMD_OFFLINE_CLOSE",
		46: "MMTENPAY_CGICMD_OFFLINE_CREATE",
		48: "MMTENPAY_CGICMD_OFFLINE_FPAY",
		52: "MMTENPAY_CGICMD_OFFLINE_GET_TOKEN",
		49: "MMTENPAY_CGICMD_OFFLINE_QUERY_USER",
		51: "MMTENPAY_CGICMD_OFFLINE_UNFREEZE",
		87: "MMTENPAY_CGICMD_PAYRELAY",
		71: "MMTENPAY_CGICMD_PAYUNREG",
		21: "MMTENPAY_CGICMD_PUBLIC_API",
		5:  "MMTENPAY_CGICMD_QRCODE_CREATE",
		78: "MMTENPAY_CGICMD_QRCODE_TO_BARCODE",
		6:  "MMTENPAY_CGICMD_QRCODE_USE",
		80: "MMTENPAY_CGICMD_QUERY_REFUND",
		84: "MMTENPAY_CGICMD_QUERY_TRANSFER_STATUS",
		30: "MMTENPAY_CGICMD_QUERY_USER_TYPE",
		20: "MMTENPAY_CGICMD_RESET_PWD",
		10: "MMTENPAY_CGICMD_RESET_PWD_AUTHEN",
		19: "MMTENPAY_CGICMD_TIMESEED",
		97: "MMTENPAY_CGICMD_TRANSFEAR_SEND_CANCEL_MSG",
		85: "MMTENPAY_CGICMD_TRANSFER_CONFIRM",
		95: "MMTENPAY_CGICMD_TRANSFER_GET_USERNAME",
		86: "MMTENPAY_CGICMD_TRANSFER_RETRYSENDMESSAGE",
		14: "MMTENPAY_CGICMD_UNBIND",
		3:  "MMTENPAY_CGICMD_USER_ROLL",
		77: "MMTENPAY_CGICMD_USER_ROLL_SAVE_AND_FETCH",
		1:  "MMTENPAY_CGICMD_VERIFY",
		76: "MMTENPAY_CGICMD_VERIFY_BIND",
		16: "MMTENPAY_CGICMD_VERIFY_REG",
		43: "MMTENPAY_CGICMD_WX_FUND_ACCOUNT_QUERY",
		42: "MMTENPAY_CGICMD_WX_FUND_BINDSP_QUERY",
		39: "MMTENPAY_CGICMD_WX_FUND_BUY",
		41: "MMTENPAY_CGICMD_WX_FUND_CHANGE",
		44: "MMTENPAY_CGICMD_WX_FUND_PROFIT_QUERY",
		40: "MMTENPAY_CGICMD_WX_FUND_REDEM",
		45: "MMTENPAY_CGICMD_WX_FUND_SUPPORT_BANK",
		88: "MMTENPAY_CGICMD_WX_GET_MERSIGN_ORDER",
		90: "MMTENPAY_CGICMD_WX_GET_MERSIGN_SIMPLE",
		53: "MMTENPAY_CGICMD_WX_HB_REDPACKETNOTIFY",
		81: "MMTENPAY_CGICMD_WX_HBAA_TRANSFER",
		35: "MMTENPAY_CGICMD_WX_OFFLINE_AUTHEN",
		82: "MMTENPAY_CGICMD_WX_PAY_CONFIRM",
		93: "MMTENPAY_CGICMD_WX_QUERY_BANK_ROLL_LIST_BATCH",
		96: "MMTENPAY_CGICMD_WX_QUERY_ORDER",
		91: "MMTENPAY_CGICMD_WX_QUERY_SP_BANK",
		54: "MMTENPAY_CGICMD_WX_SP_CLOSE_ORDER",
		89: "MMTENPAY_CGICMD_WX_VERIFY_MERSIGN",
		64: "MMTENPAY_CGICMD_WXCREDIT_AUTHEN",
		60: "MMTENPAY_CGICMD_WXCREDIT_COMMIT_QUESTION",
		57: "MMTENPAY_CGICMD_WXCREDIT_QUERY",
		67: "MMTENPAY_CGICMD_WXCREDIT_QUERY_BILL_DETAIL",
		58: "MMTENPAY_CGICMD_WXCREDIT_QUERY_CARD_DETAIL",
		68: "MMTENPAY_CGICMD_WXCREDIT_QUERY_PRIVILEGE",
		59: "MMTENPAY_CGICMD_WXCREDIT_QUERY_QUESTION",
		69: "MMTENPAY_CGICMD_WXCREDIT_RENEW_IDENTIFY",
		61: "MMTENPAY_CGICMD_WXCREDIT_REPAY",
		66: "MMTENPAY_CGICMD_WXCREDIT_SIMPLE_VERIFY",
		62: "MMTENPAY_CGICMD_WXCREDIT_UNBIND",
		65: "MMTENPAY_CGICMD_WXCREDIT_VERIFY",
		63: "MMTENPAY_CGICMD_WXCREDIT_VERIFY_PASSWD",
		29: "MMTENPAY_GW_CGICMD_NORMAL_ORDER_QUERY",
		33: "MMTENPAY_GW_CGICMD_NORMAL_REFUND_QUERY",
		31: "MMTENPAY_GW_CGICMD_VERIFY_NOTIFY_ID",
	}
	EnMMTenPayCgiCmd_value = map[string]int32{
		"MMTENPAY_BIZ_CGICMD_PLATFORM_NOTIFY_CHECK_RESULT": 27,
		"MMTENPAY_BIZ_CGICMD_PLATFORM_QUERY_BZJ_INFO":      34,
		"MMTENPAY_BIZ_CGICMD_PLATFORM_QUERY_CHECK_RECORD":  23,
		"MMTENPAY_BIZ_CGICMD_PLATFORM_QUERY_CHECK_RESULT":  25,
		"MMTENPAY_BIZ_CGICMD_QUERY_BIZ_CHECK_RESULT":       56,
		"MMTENPAY_BIZ_CGICMD_QUERY_NEW_PARTNER_ID":         55,
		"MMTENPAY_BIZ_CGICMD_WEB_NOTIFY_CHECK_RESULT":      26,
		"MMTENPAY_BIZ_CGICMD_WEB_QUERY_CHECK_RECORD":       22,
		"MMTENPAY_BIZ_CGICMD_WEB_QUERY_CHECK_RESULT":       24,
		"MMTENPAY_BIZ_CGICMD_WX_QRY_AUTH_INFO":             70,
		"MMTENPAY_CGICMD_AUTHEN":                           0,
		"MMTENPAY_CGICMD_BANK_QUERY":                       7,
		"MMTENPAY_CGICMD_BANKCARDBIN_QUERY":                15,
		"MMTENPAY_CGICMD_BIND_AUTHEN":                      12,
		"MMTENPAY_CGICMD_BIND_QUERY_NEW":                   72,
		"MMTENPAY_CGICMD_BIND_VERIFY":                      13,
		"MMTENPAY_CGICMD_BIND_VERIFY_REG":                  17,
		"MMTENPAY_CGICMD_CHANGE_PWD":                       9,
		"MMTENPAY_CGICMD_CHECK_PWD":                        18,
		"MMTENPAY_CGICMD_CHKPAYACC":                        79,
		"MMTENPAY_CGICMD_ELEM_QUERY_NEW":                   73,
		"MMTENPAY_CGICMD_GEN_PRE_FETCH":                    75,
		"MMTENPAY_CGICMD_GEN_PRE_SAVE":                     74,
		"MMTENPAY_CGICMD_GEN_PRE_TRANSFER":                 83,
		"MMTENPAY_CGICMD_GET_FIXED_AMOUNT_QRCODE":          94,
		"MMTENPAY_CGICMD_IMPORT_BIND_QUERY":                37,
		"MMTENPAY_CGICMD_MCH_TRADE":                        28,
		"MMTENPAY_CGICMD_NONPAY":                           92,
		"MMTENPAY_CGICMD_OFFLINE_CHG_FEE":                  50,
		"MMTENPAY_CGICMD_OFFLINE_CLOSE":                    47,
		"MMTENPAY_CGICMD_OFFLINE_CREATE":                   46,
		"MMTENPAY_CGICMD_OFFLINE_FPAY":                     48,
		"MMTENPAY_CGICMD_OFFLINE_GET_TOKEN":                52,
		"MMTENPAY_CGICMD_OFFLINE_QUERY_USER":               49,
		"MMTENPAY_CGICMD_OFFLINE_UNFREEZE":                 51,
		"MMTENPAY_CGICMD_PAYRELAY":                         87,
		"MMTENPAY_CGICMD_PAYUNREG":                         71,
		"MMTENPAY_CGICMD_PUBLIC_API":                       21,
		"MMTENPAY_CGICMD_QRCODE_CREATE":                    5,
		"MMTENPAY_CGICMD_QRCODE_TO_BARCODE":                78,
		"MMTENPAY_CGICMD_QRCODE_USE":                       6,
		"MMTENPAY_CGICMD_QUERY_REFUND":                     80,
		"MMTENPAY_CGICMD_QUERY_TRANSFER_STATUS":            84,
		"MMTENPAY_CGICMD_QUERY_USER_TYPE":                  30,
		"MMTENPAY_CGICMD_RESET_PWD":                        20,
		"MMTENPAY_CGICMD_RESET_PWD_AUTHEN":                 10,
		"MMTENPAY_CGICMD_TIMESEED":                         19,
		"MMTENPAY_CGICMD_TRANSFEAR_SEND_CANCEL_MSG":        97,
		"MMTENPAY_CGICMD_TRANSFER_CONFIRM":                 85,
		"MMTENPAY_CGICMD_TRANSFER_GET_USERNAME":            95,
		"MMTENPAY_CGICMD_TRANSFER_RETRYSENDMESSAGE":        86,
		"MMTENPAY_CGICMD_UNBIND":                           14,
		"MMTENPAY_CGICMD_USER_ROLL":                        3,
		"MMTENPAY_CGICMD_USER_ROLL_SAVE_AND_FETCH":         77,
		"MMTENPAY_CGICMD_VERIFY":                           1,
		"MMTENPAY_CGICMD_VERIFY_BIND":                      76,
		"MMTENPAY_CGICMD_VERIFY_REG":                       16,
		"MMTENPAY_CGICMD_WX_FUND_ACCOUNT_QUERY":            43,
		"MMTENPAY_CGICMD_WX_FUND_BINDSP_QUERY":             42,
		"MMTENPAY_CGICMD_WX_FUND_BUY":                      39,
		"MMTENPAY_CGICMD_WX_FUND_CHANGE":                   41,
		"MMTENPAY_CGICMD_WX_FUND_PROFIT_QUERY":             44,
		"MMTENPAY_CGICMD_WX_FUND_REDEM":                    40,
		"MMTENPAY_CGICMD_WX_FUND_SUPPORT_BANK":             45,
		"MMTENPAY_CGICMD_WX_GET_MERSIGN_ORDER":             88,
		"MMTENPAY_CGICMD_WX_GET_MERSIGN_SIMPLE":            90,
		"MMTENPAY_CGICMD_WX_HB_REDPACKETNOTIFY":            53,
		"MMTENPAY_CGICMD_WX_HBAA_TRANSFER":                 81,
		"MMTENPAY_CGICMD_WX_OFFLINE_AUTHEN":                35,
		"MMTENPAY_CGICMD_WX_PAY_CONFIRM":                   82,
		"MMTENPAY_CGICMD_WX_QUERY_BANK_ROLL_LIST_BATCH":    93,
		"MMTENPAY_CGICMD_WX_QUERY_ORDER":                   96,
		"MMTENPAY_CGICMD_WX_QUERY_SP_BANK":                 91,
		"MMTENPAY_CGICMD_WX_SP_CLOSE_ORDER":                54,
		"MMTENPAY_CGICMD_WX_VERIFY_MERSIGN":                89,
		"MMTENPAY_CGICMD_WXCREDIT_AUTHEN":                  64,
		"MMTENPAY_CGICMD_WXCREDIT_COMMIT_QUESTION":         60,
		"MMTENPAY_CGICMD_WXCREDIT_QUERY":                   57,
		"MMTENPAY_CGICMD_WXCREDIT_QUERY_BILL_DETAIL":       67,
		"MMTENPAY_CGICMD_WXCREDIT_QUERY_CARD_DETAIL":       58,
		"MMTENPAY_CGICMD_WXCREDIT_QUERY_PRIVILEGE":         68,
		"MMTENPAY_CGICMD_WXCREDIT_QUERY_QUESTION":          59,
		"MMTENPAY_CGICMD_WXCREDIT_RENEW_IDENTIFY":          69,
		"MMTENPAY_CGICMD_WXCREDIT_REPAY":                   61,
		"MMTENPAY_CGICMD_WXCREDIT_SIMPLE_VERIFY":           66,
		"MMTENPAY_CGICMD_WXCREDIT_UNBIND":                  62,
		"MMTENPAY_CGICMD_WXCREDIT_VERIFY":                  65,
		"MMTENPAY_CGICMD_WXCREDIT_VERIFY_PASSWD":           63,
		"MMTENPAY_GW_CGICMD_NORMAL_ORDER_QUERY":            29,
		"MMTENPAY_GW_CGICMD_NORMAL_REFUND_QUERY":           33,
		"MMTENPAY_GW_CGICMD_VERIFY_NOTIFY_ID":              31,
	}
)

func (x EnMMTenPayCgiCmd) Enum() *EnMMTenPayCgiCmd {
	p := new(EnMMTenPayCgiCmd)
	*p = x
	return p
}

func (x EnMMTenPayCgiCmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnMMTenPayCgiCmd) Descriptor() protoreflect.EnumDescriptor {
	return file_mm_proto_enumTypes[5].Descriptor()
}

func (EnMMTenPayCgiCmd) Type() protoreflect.EnumType {
	return &file_mm_proto_enumTypes[5]
}

func (x EnMMTenPayCgiCmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnMMTenPayCgiCmd) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnMMTenPayCgiCmd(num)
	return nil
}

// Deprecated: Use EnMMTenPayCgiCmd.Descriptor instead.
func (EnMMTenPayCgiCmd) EnumDescriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{5}
}

type BaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32            `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	ErrMsg *SKBuiltinStringT `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (x *BaseResponse) Reset() {
	*x = BaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResponse) ProtoMessage() {}

func (x *BaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResponse.ProtoReflect.Descriptor instead.
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{0}
}

func (x *BaseResponse) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *BaseResponse) GetErrMsg() *SKBuiltinStringT {
	if x != nil {
		return x.ErrMsg
	}
	return nil
}

type SKBuiltinStringT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ *string `protobuf:"bytes,1,opt,name=string" json:"string,omitempty"`
}

func (x *SKBuiltinStringT) Reset() {
	*x = SKBuiltinStringT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SKBuiltinStringT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SKBuiltinStringT) ProtoMessage() {}

func (x *SKBuiltinStringT) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SKBuiltinStringT.ProtoReflect.Descriptor instead.
func (*SKBuiltinStringT) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{1}
}

func (x *SKBuiltinStringT) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

type SnsBufferUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  *string `protobuf:"bytes,1,opt,name=Url" json:"Url,omitempty"`
	Type *uint32 `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty"`
}

func (x *SnsBufferUrl) Reset() {
	*x = SnsBufferUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsBufferUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsBufferUrl) ProtoMessage() {}

func (x *SnsBufferUrl) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsBufferUrl.ProtoReflect.Descriptor instead.
func (*SnsBufferUrl) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{2}
}

func (x *SnsBufferUrl) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *SnsBufferUrl) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type RealHostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     *string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`         //host
	Redirect *string `protobuf:"bytes,2,opt,name=redirect" json:"redirect,omitempty"` //redirect_host
}

func (x *RealHostInfo) Reset() {
	*x = RealHostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealHostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealHostInfo) ProtoMessage() {}

func (x *RealHostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealHostInfo.ProtoReflect.Descriptor instead.
func (*RealHostInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{3}
}

func (x *RealHostInfo) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *RealHostInfo) GetRedirect() string {
	if x != nil && x.Redirect != nil {
		return *x.Redirect
	}
	return ""
}

type HostList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *uint32         `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	List  []*RealHostInfo `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (x *HostList) Reset() {
	*x = HostList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostList) ProtoMessage() {}

func (x *HostList) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostList.ProtoReflect.Descriptor instead.
func (*HostList) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{4}
}

func (x *HostList) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *HostList) GetList() []*RealHostInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type NetworkControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortList         *string `protobuf:"bytes,1,opt,name=portList" json:"portList,omitempty"`
	TimeoutList      *string `protobuf:"bytes,2,opt,name=timeoutList" json:"timeoutList,omitempty"`
	MinNoopInterval  *uint32 `protobuf:"varint,3,opt,name=minNoopInterval" json:"minNoopInterval,omitempty"`
	MaxNoopInterval  *uint32 `protobuf:"varint,4,opt,name=maxNoopInterval" json:"maxNoopInterval,omitempty"`
	TypingInterval   *int32  `protobuf:"varint,5,opt,name=typingInterval" json:"typingInterval,omitempty"`
	NoopIntervalTime *int32  `protobuf:"varint,7,opt,name=noopIntervalTime" json:"noopIntervalTime,omitempty"`
}

func (x *NetworkControl) Reset() {
	*x = NetworkControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkControl) ProtoMessage() {}

func (x *NetworkControl) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkControl.ProtoReflect.Descriptor instead.
func (*NetworkControl) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{5}
}

func (x *NetworkControl) GetPortList() string {
	if x != nil && x.PortList != nil {
		return *x.PortList
	}
	return ""
}

func (x *NetworkControl) GetTimeoutList() string {
	if x != nil && x.TimeoutList != nil {
		return *x.TimeoutList
	}
	return ""
}

func (x *NetworkControl) GetMinNoopInterval() uint32 {
	if x != nil && x.MinNoopInterval != nil {
		return *x.MinNoopInterval
	}
	return 0
}

func (x *NetworkControl) GetMaxNoopInterval() uint32 {
	if x != nil && x.MaxNoopInterval != nil {
		return *x.MaxNoopInterval
	}
	return 0
}

func (x *NetworkControl) GetTypingInterval() int32 {
	if x != nil && x.TypingInterval != nil {
		return *x.TypingInterval
	}
	return 0
}

func (x *NetworkControl) GetNoopIntervalTime() int32 {
	if x != nil && x.NoopIntervalTime != nil {
		return *x.NoopIntervalTime
	}
	return 0
}

type IPInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   *string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`     //ip
	Host *string `protobuf:"bytes,4,opt,name=host" json:"host,omitempty"` //host
}

func (x *IPInfo) Reset() {
	*x = IPInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPInfo) ProtoMessage() {}

func (x *IPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPInfo.ProtoReflect.Descriptor instead.
func (*IPInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{6}
}

func (x *IPInfo) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *IPInfo) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

type BuiltinIPList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LongConnectIpcount  *uint32   `protobuf:"varint,1,opt,name=longConnectIpcount" json:"longConnectIpcount,omitempty"`
	ShortConnectIpcount *uint32   `protobuf:"varint,2,opt,name=shortConnectIpcount" json:"shortConnectIpcount,omitempty"`
	LongConnectIplist   []*IPInfo `protobuf:"bytes,3,rep,name=longConnectIplist" json:"longConnectIplist,omitempty"`
	ShortConnectIplist  []*IPInfo `protobuf:"bytes,4,rep,name=shortConnectIplist" json:"shortConnectIplist,omitempty"`
	Seq                 *uint32   `protobuf:"varint,5,opt,name=seq" json:"seq,omitempty"`
}

func (x *BuiltinIPList) Reset() {
	*x = BuiltinIPList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuiltinIPList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuiltinIPList) ProtoMessage() {}

func (x *BuiltinIPList) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuiltinIPList.ProtoReflect.Descriptor instead.
func (*BuiltinIPList) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{7}
}

func (x *BuiltinIPList) GetLongConnectIpcount() uint32 {
	if x != nil && x.LongConnectIpcount != nil {
		return *x.LongConnectIpcount
	}
	return 0
}

func (x *BuiltinIPList) GetShortConnectIpcount() uint32 {
	if x != nil && x.ShortConnectIpcount != nil {
		return *x.ShortConnectIpcount
	}
	return 0
}

func (x *BuiltinIPList) GetLongConnectIplist() []*IPInfo {
	if x != nil {
		return x.LongConnectIplist
	}
	return nil
}

func (x *BuiltinIPList) GetShortConnectIplist() []*IPInfo {
	if x != nil {
		return x.ShortConnectIplist
	}
	return nil
}

func (x *BuiltinIPList) GetSeq() uint32 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

type NetworkSectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewHostList    *HostList       `protobuf:"bytes,1,opt,name=newHostList" json:"newHostList,omitempty"`
	NetworkControl *NetworkControl `protobuf:"bytes,2,opt,name=networkControl" json:"networkControl,omitempty"`
	BuiltinIplist  *BuiltinIPList  `protobuf:"bytes,3,opt,name=builtinIplist" json:"builtinIplist,omitempty"`
}

func (x *NetworkSectResp) Reset() {
	*x = NetworkSectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkSectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSectResp) ProtoMessage() {}

func (x *NetworkSectResp) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSectResp.ProtoReflect.Descriptor instead.
func (*NetworkSectResp) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{8}
}

func (x *NetworkSectResp) GetNewHostList() *HostList {
	if x != nil {
		return x.NewHostList
	}
	return nil
}

func (x *NetworkSectResp) GetNetworkControl() *NetworkControl {
	if x != nil {
		return x.NetworkControl
	}
	return nil
}

func (x *NetworkSectResp) GetBuiltinIplist() *BuiltinIPList {
	if x != nil {
		return x.BuiltinIplist
	}
	return nil
}

type AxAuthSecRespList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *uint32  `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	List  [][]byte `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (x *AxAuthSecRespList) Reset() {
	*x = AxAuthSecRespList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AxAuthSecRespList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AxAuthSecRespList) ProtoMessage() {}

func (x *AxAuthSecRespList) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AxAuthSecRespList.ProtoReflect.Descriptor instead.
func (*AxAuthSecRespList) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{9}
}

func (x *AxAuthSecRespList) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *AxAuthSecRespList) GetList() [][]byte {
	if x != nil {
		return x.List
	}
	return nil
}

type UnifyAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse      *BaseResponse      `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	UnifyAuthSectFlag *uint32            `protobuf:"varint,2,opt,name=unifyAuthSectFlag" json:"unifyAuthSectFlag,omitempty"`
	AuthSectResp      *AuthSectResp      `protobuf:"bytes,3,opt,name=authSectResp" json:"authSectResp,omitempty"`
	AcctSectResp      *AcctSectResp      `protobuf:"bytes,4,opt,name=acctSectResp" json:"acctSectResp,omitempty"`
	NetworkSectResp   *NetworkSectResp   `protobuf:"bytes,5,opt,name=networkSectResp" json:"networkSectResp,omitempty"`
	AxAuthSecRespList *AxAuthSecRespList `protobuf:"bytes,6,opt,name=axAuthSecRespList" json:"axAuthSecRespList,omitempty"`
}

func (x *UnifyAuthResponse) Reset() {
	*x = UnifyAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifyAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifyAuthResponse) ProtoMessage() {}

func (x *UnifyAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifyAuthResponse.ProtoReflect.Descriptor instead.
func (*UnifyAuthResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{10}
}

func (x *UnifyAuthResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *UnifyAuthResponse) GetUnifyAuthSectFlag() uint32 {
	if x != nil && x.UnifyAuthSectFlag != nil {
		return *x.UnifyAuthSectFlag
	}
	return 0
}

func (x *UnifyAuthResponse) GetAuthSectResp() *AuthSectResp {
	if x != nil {
		return x.AuthSectResp
	}
	return nil
}

func (x *UnifyAuthResponse) GetAcctSectResp() *AcctSectResp {
	if x != nil {
		return x.AcctSectResp
	}
	return nil
}

func (x *UnifyAuthResponse) GetNetworkSectResp() *NetworkSectResp {
	if x != nil {
		return x.NetworkSectResp
	}
	return nil
}

func (x *UnifyAuthResponse) GetAxAuthSecRespList() *AxAuthSecRespList {
	if x != nil {
		return x.AxAuthSecRespList
	}
	return nil
}

type SKBuiltinBufferT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ILen   *uint32 `protobuf:"varint,1,opt,name=iLen" json:"iLen,omitempty"`
	Buffer []byte  `protobuf:"bytes,2,opt,name=buffer" json:"buffer,omitempty"`
}

func (x *SKBuiltinBufferT) Reset() {
	*x = SKBuiltinBufferT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SKBuiltinBufferT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SKBuiltinBufferT) ProtoMessage() {}

func (x *SKBuiltinBufferT) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SKBuiltinBufferT.ProtoReflect.Descriptor instead.
func (*SKBuiltinBufferT) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{11}
}

func (x *SKBuiltinBufferT) GetILen() uint32 {
	if x != nil && x.ILen != nil {
		return *x.ILen
	}
	return 0
}

func (x *SKBuiltinBufferT) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type SKBuiltinString_S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ILen   *uint32 `protobuf:"varint,1,opt,name=iLen" json:"iLen,omitempty"`
	Buffer *string `protobuf:"bytes,2,opt,name=buffer" json:"buffer,omitempty"`
}

func (x *SKBuiltinString_S) Reset() {
	*x = SKBuiltinString_S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SKBuiltinString_S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SKBuiltinString_S) ProtoMessage() {}

func (x *SKBuiltinString_S) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SKBuiltinString_S.ProtoReflect.Descriptor instead.
func (*SKBuiltinString_S) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{12}
}

func (x *SKBuiltinString_S) GetILen() uint32 {
	if x != nil && x.ILen != nil {
		return *x.ILen
	}
	return 0
}

func (x *SKBuiltinString_S) GetBuffer() string {
	if x != nil && x.Buffer != nil {
		return *x.Buffer
	}
	return ""
}

type SKBuiltinBuffer_K struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ILen   *uint32 `protobuf:"varint,1,opt,name=iLen" json:"iLen,omitempty"`
	Buffer *string `protobuf:"bytes,2,opt,name=buffer" json:"buffer,omitempty"`
}

func (x *SKBuiltinBuffer_K) Reset() {
	*x = SKBuiltinBuffer_K{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SKBuiltinBuffer_K) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SKBuiltinBuffer_K) ProtoMessage() {}

func (x *SKBuiltinBuffer_K) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SKBuiltinBuffer_K.ProtoReflect.Descriptor instead.
func (*SKBuiltinBuffer_K) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{13}
}

func (x *SKBuiltinBuffer_K) GetILen() uint32 {
	if x != nil && x.ILen != nil {
		return *x.ILen
	}
	return 0
}

func (x *SKBuiltinBuffer_K) GetBuffer() string {
	if x != nil && x.Buffer != nil {
		return *x.Buffer
	}
	return ""
}

type ECDHKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid *int32            `protobuf:"varint,1,opt,name=nid" json:"nid,omitempty"`
	Key *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (x *ECDHKey) Reset() {
	*x = ECDHKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECDHKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECDHKey) ProtoMessage() {}

func (x *ECDHKey) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECDHKey.ProtoReflect.Descriptor instead.
func (*ECDHKey) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{14}
}

func (x *ECDHKey) GetNid() int32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *ECDHKey) GetKey() *SKBuiltinBufferT {
	if x != nil {
		return x.Key
	}
	return nil
}

type WTLoginImgRespInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImgEncryptKey *string           `protobuf:"bytes,1,opt,name=imgEncryptKey" json:"imgEncryptKey,omitempty"`
	Ksid          *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=ksid" json:"ksid,omitempty"`
	ImgSid        *string           `protobuf:"bytes,3,opt,name=imgSid" json:"imgSid,omitempty"`
	ImgBuf        *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=imgBuf" json:"imgBuf,omitempty"`
}

func (x *WTLoginImgRespInfo) Reset() {
	*x = WTLoginImgRespInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WTLoginImgRespInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WTLoginImgRespInfo) ProtoMessage() {}

func (x *WTLoginImgRespInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WTLoginImgRespInfo.ProtoReflect.Descriptor instead.
func (*WTLoginImgRespInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{15}
}

func (x *WTLoginImgRespInfo) GetImgEncryptKey() string {
	if x != nil && x.ImgEncryptKey != nil {
		return *x.ImgEncryptKey
	}
	return ""
}

func (x *WTLoginImgRespInfo) GetKsid() *SKBuiltinBufferT {
	if x != nil {
		return x.Ksid
	}
	return nil
}

func (x *WTLoginImgRespInfo) GetImgSid() string {
	if x != nil && x.ImgSid != nil {
		return *x.ImgSid
	}
	return ""
}

func (x *WTLoginImgRespInfo) GetImgBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.ImgBuf
	}
	return nil
}

type WxVerifyCodeRespInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifySignature *string           `protobuf:"bytes,1,opt,name=verifySignature" json:"verifySignature,omitempty"`
	VerifyBuff      *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=verifyBuff" json:"verifyBuff,omitempty"`
}

func (x *WxVerifyCodeRespInfo) Reset() {
	*x = WxVerifyCodeRespInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxVerifyCodeRespInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxVerifyCodeRespInfo) ProtoMessage() {}

func (x *WxVerifyCodeRespInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxVerifyCodeRespInfo.ProtoReflect.Descriptor instead.
func (*WxVerifyCodeRespInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{16}
}

func (x *WxVerifyCodeRespInfo) GetVerifySignature() string {
	if x != nil && x.VerifySignature != nil {
		return *x.VerifySignature
	}
	return ""
}

func (x *WxVerifyCodeRespInfo) GetVerifyBuff() *SKBuiltinBufferT {
	if x != nil {
		return x.VerifyBuff
	}
	return nil
}

type ShowStyleKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyCount *uint32  `protobuf:"varint,1,opt,name=keyCount" json:"keyCount,omitempty"`
	Key      [][]byte `protobuf:"bytes,2,rep,name=key" json:"key,omitempty"`
}

func (x *ShowStyleKey) Reset() {
	*x = ShowStyleKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowStyleKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowStyleKey) ProtoMessage() {}

func (x *ShowStyleKey) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowStyleKey.ProtoReflect.Descriptor instead.
func (*ShowStyleKey) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{17}
}

func (x *ShowStyleKey) GetKeyCount() uint32 {
	if x != nil && x.KeyCount != nil {
		return *x.KeyCount
	}
	return 0
}

func (x *ShowStyleKey) GetKey() [][]byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type AuthSectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin                  *uint32               `protobuf:"varint,1,opt,name=uin" json:"uin,omitempty"`
	SvrPubEcdhkey        *ECDHKey              `protobuf:"bytes,2,opt,name=svrPubEcdhkey" json:"svrPubEcdhkey,omitempty"`
	SessionKey           *SKBuiltinBufferT     `protobuf:"bytes,3,opt,name=sessionKey" json:"sessionKey,omitempty"`
	AutoAuthKey          *SKBuiltinBufferT     `protobuf:"bytes,4,opt,name=autoAuthKey" json:"autoAuthKey,omitempty"`
	WtloginRspBuffFlag   *uint32               `protobuf:"varint,5,opt,name=wtloginRspBuffFlag" json:"wtloginRspBuffFlag,omitempty"`
	WtloginRspBuff       *SKBuiltinBufferT     `protobuf:"bytes,6,opt,name=wtloginRspBuff" json:"wtloginRspBuff,omitempty"`
	WtloginImgRespInfo   *WTLoginImgRespInfo   `protobuf:"bytes,7,opt,name=wtloginImgRespInfo" json:"wtloginImgRespInfo,omitempty"`
	WxVerifyCodeRespInfo *WxVerifyCodeRespInfo `protobuf:"bytes,8,opt,name=wxVerifyCodeRespInfo" json:"wxVerifyCodeRespInfo,omitempty"`
	CliDbencryptKey      *SKBuiltinBufferT     `protobuf:"bytes,9,opt,name=cliDbencryptKey" json:"cliDbencryptKey,omitempty"`
	CliDbencryptInfo     *SKBuiltinBufferT     `protobuf:"bytes,10,opt,name=cliDbencryptInfo" json:"cliDbencryptInfo,omitempty"`
	AuthKey              *string               `protobuf:"bytes,11,opt,name=authKey" json:"authKey,omitempty"`
	A2Key                *SKBuiltinBufferT     `protobuf:"bytes,12,opt,name=a2Key" json:"a2Key,omitempty"`
	ApplyBetaUrl         *string               `protobuf:"bytes,14,opt,name=applyBetaUrl" json:"applyBetaUrl,omitempty"`
	ShowStyle            *ShowStyleKey         `protobuf:"bytes,15,opt,name=showStyle" json:"showStyle,omitempty"`
	AuthTicket           *string               `protobuf:"bytes,16,opt,name=authTicket" json:"authTicket,omitempty"`
	NewVersion           *uint32               `protobuf:"varint,17,opt,name=newVersion" json:"newVersion,omitempty"`
	UpdateFlag           *uint32               `protobuf:"varint,18,opt,name=updateFlag" json:"updateFlag,omitempty"`
	AuthResultFlag       *uint32               `protobuf:"varint,19,opt,name=authResultFlag" json:"authResultFlag,omitempty"`
	Fsurl                *string               `protobuf:"bytes,20,opt,name=fsurl" json:"fsurl,omitempty"`
	MmtlsControlBitFlag  *uint32               `protobuf:"varint,21,opt,name=mmtlsControlBitFlag" json:"mmtlsControlBitFlag,omitempty"`
	ServerTime           *uint32               `protobuf:"varint,22,opt,name=serverTime" json:"serverTime,omitempty"`
	ClientSessionKey     *SKBuiltinBufferT     `protobuf:"bytes,23,opt,name=clientSessionKey" json:"clientSessionKey,omitempty"`
	ServerSessionKey     *SKBuiltinBufferT     `protobuf:"bytes,24,opt,name=serverSessionKey" json:"serverSessionKey,omitempty"`
	EcdhControlFlag      *uint32               `protobuf:"varint,25,opt,name=ecdhControlFlag" json:"ecdhControlFlag,omitempty"`
}

func (x *AuthSectResp) Reset() {
	*x = AuthSectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSectResp) ProtoMessage() {}

func (x *AuthSectResp) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSectResp.ProtoReflect.Descriptor instead.
func (*AuthSectResp) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{18}
}

func (x *AuthSectResp) GetUin() uint32 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *AuthSectResp) GetSvrPubEcdhkey() *ECDHKey {
	if x != nil {
		return x.SvrPubEcdhkey
	}
	return nil
}

func (x *AuthSectResp) GetSessionKey() *SKBuiltinBufferT {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

func (x *AuthSectResp) GetAutoAuthKey() *SKBuiltinBufferT {
	if x != nil {
		return x.AutoAuthKey
	}
	return nil
}

func (x *AuthSectResp) GetWtloginRspBuffFlag() uint32 {
	if x != nil && x.WtloginRspBuffFlag != nil {
		return *x.WtloginRspBuffFlag
	}
	return 0
}

func (x *AuthSectResp) GetWtloginRspBuff() *SKBuiltinBufferT {
	if x != nil {
		return x.WtloginRspBuff
	}
	return nil
}

func (x *AuthSectResp) GetWtloginImgRespInfo() *WTLoginImgRespInfo {
	if x != nil {
		return x.WtloginImgRespInfo
	}
	return nil
}

func (x *AuthSectResp) GetWxVerifyCodeRespInfo() *WxVerifyCodeRespInfo {
	if x != nil {
		return x.WxVerifyCodeRespInfo
	}
	return nil
}

func (x *AuthSectResp) GetCliDbencryptKey() *SKBuiltinBufferT {
	if x != nil {
		return x.CliDbencryptKey
	}
	return nil
}

func (x *AuthSectResp) GetCliDbencryptInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.CliDbencryptInfo
	}
	return nil
}

func (x *AuthSectResp) GetAuthKey() string {
	if x != nil && x.AuthKey != nil {
		return *x.AuthKey
	}
	return ""
}

func (x *AuthSectResp) GetA2Key() *SKBuiltinBufferT {
	if x != nil {
		return x.A2Key
	}
	return nil
}

func (x *AuthSectResp) GetApplyBetaUrl() string {
	if x != nil && x.ApplyBetaUrl != nil {
		return *x.ApplyBetaUrl
	}
	return ""
}

func (x *AuthSectResp) GetShowStyle() *ShowStyleKey {
	if x != nil {
		return x.ShowStyle
	}
	return nil
}

func (x *AuthSectResp) GetAuthTicket() string {
	if x != nil && x.AuthTicket != nil {
		return *x.AuthTicket
	}
	return ""
}

func (x *AuthSectResp) GetNewVersion() uint32 {
	if x != nil && x.NewVersion != nil {
		return *x.NewVersion
	}
	return 0
}

func (x *AuthSectResp) GetUpdateFlag() uint32 {
	if x != nil && x.UpdateFlag != nil {
		return *x.UpdateFlag
	}
	return 0
}

func (x *AuthSectResp) GetAuthResultFlag() uint32 {
	if x != nil && x.AuthResultFlag != nil {
		return *x.AuthResultFlag
	}
	return 0
}

func (x *AuthSectResp) GetFsurl() string {
	if x != nil && x.Fsurl != nil {
		return *x.Fsurl
	}
	return ""
}

func (x *AuthSectResp) GetMmtlsControlBitFlag() uint32 {
	if x != nil && x.MmtlsControlBitFlag != nil {
		return *x.MmtlsControlBitFlag
	}
	return 0
}

func (x *AuthSectResp) GetServerTime() uint32 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *AuthSectResp) GetClientSessionKey() *SKBuiltinBufferT {
	if x != nil {
		return x.ClientSessionKey
	}
	return nil
}

func (x *AuthSectResp) GetServerSessionKey() *SKBuiltinBufferT {
	if x != nil {
		return x.ServerSessionKey
	}
	return nil
}

func (x *AuthSectResp) GetEcdhControlFlag() uint32 {
	if x != nil && x.EcdhControlFlag != nil {
		return *x.EcdhControlFlag
	}
	return 0
}

type AcctSectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName         *string `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
	NickName         *string `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	BindUin          *uint32 `protobuf:"varint,3,opt,name=bindUin" json:"bindUin,omitempty"`
	BindEmail        *string `protobuf:"bytes,4,opt,name=bindEmail" json:"bindEmail,omitempty"`
	BindMobile       *string `protobuf:"bytes,5,opt,name=bindMobile" json:"bindMobile,omitempty"`
	Alias            *string `protobuf:"bytes,6,opt,name=alias" json:"alias,omitempty"`
	Status           *uint32 `protobuf:"varint,8,opt,name=status" json:"status,omitempty"`
	PluginFlag       *uint32 `protobuf:"varint,9,opt,name=pluginFlag" json:"pluginFlag,omitempty"`
	RegType          *uint32 `protobuf:"varint,10,opt,name=regType" json:"regType,omitempty"`
	DeviceInfoXml    *string `protobuf:"bytes,11,opt,name=deviceInfoXml" json:"deviceInfoXml,omitempty"`
	SafeDevice       *uint32 `protobuf:"varint,12,opt,name=safeDevice" json:"safeDevice,omitempty"`
	OfficialUserName *string `protobuf:"bytes,13,opt,name=officialUserName" json:"officialUserName,omitempty"`
	OfficialNickName *string `protobuf:"bytes,14,opt,name=officialNickName" json:"officialNickName,omitempty"`
	PushMailStatus   *uint32 `protobuf:"varint,15,opt,name=pushMailStatus" json:"pushMailStatus,omitempty"`
	Fsurl            *string `protobuf:"bytes,16,opt,name=fsurl" json:"fsurl,omitempty"`
}

func (x *AcctSectResp) Reset() {
	*x = AcctSectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctSectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctSectResp) ProtoMessage() {}

func (x *AcctSectResp) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctSectResp.ProtoReflect.Descriptor instead.
func (*AcctSectResp) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{19}
}

func (x *AcctSectResp) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *AcctSectResp) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *AcctSectResp) GetBindUin() uint32 {
	if x != nil && x.BindUin != nil {
		return *x.BindUin
	}
	return 0
}

func (x *AcctSectResp) GetBindEmail() string {
	if x != nil && x.BindEmail != nil {
		return *x.BindEmail
	}
	return ""
}

func (x *AcctSectResp) GetBindMobile() string {
	if x != nil && x.BindMobile != nil {
		return *x.BindMobile
	}
	return ""
}

func (x *AcctSectResp) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *AcctSectResp) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *AcctSectResp) GetPluginFlag() uint32 {
	if x != nil && x.PluginFlag != nil {
		return *x.PluginFlag
	}
	return 0
}

func (x *AcctSectResp) GetRegType() uint32 {
	if x != nil && x.RegType != nil {
		return *x.RegType
	}
	return 0
}

func (x *AcctSectResp) GetDeviceInfoXml() string {
	if x != nil && x.DeviceInfoXml != nil {
		return *x.DeviceInfoXml
	}
	return ""
}

func (x *AcctSectResp) GetSafeDevice() uint32 {
	if x != nil && x.SafeDevice != nil {
		return *x.SafeDevice
	}
	return 0
}

func (x *AcctSectResp) GetOfficialUserName() string {
	if x != nil && x.OfficialUserName != nil {
		return *x.OfficialUserName
	}
	return ""
}

func (x *AcctSectResp) GetOfficialNickName() string {
	if x != nil && x.OfficialNickName != nil {
		return *x.OfficialNickName
	}
	return ""
}

func (x *AcctSectResp) GetPushMailStatus() uint32 {
	if x != nil && x.PushMailStatus != nil {
		return *x.PushMailStatus
	}
	return 0
}

func (x *AcctSectResp) GetFsurl() string {
	if x != nil && x.Fsurl != nil {
		return *x.Fsurl
	}
	return ""
}

type BaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionKey    []byte  `protobuf:"bytes,1,opt,name=sessionKey" json:"sessionKey,omitempty"`
	Uin           *uint32 `protobuf:"varint,2,opt,name=uin" json:"uin,omitempty"`
	DeviceId      []byte  `protobuf:"bytes,3,opt,name=deviceId" json:"deviceId,omitempty"`
	ClientVersion *int32  `protobuf:"varint,4,opt,name=clientVersion" json:"clientVersion,omitempty"`
	DeviceType    []byte  `protobuf:"bytes,5,opt,name=deviceType" json:"deviceType,omitempty"`
	Scene         *uint32 `protobuf:"varint,6,opt,name=scene" json:"scene,omitempty"`
}

func (x *BaseRequest) Reset() {
	*x = BaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseRequest) ProtoMessage() {}

func (x *BaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseRequest.ProtoReflect.Descriptor instead.
func (*BaseRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{20}
}

func (x *BaseRequest) GetSessionKey() []byte {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

func (x *BaseRequest) GetUin() uint32 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *BaseRequest) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *BaseRequest) GetClientVersion() int32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *BaseRequest) GetDeviceType() []byte {
	if x != nil {
		return x.DeviceType
	}
	return nil
}

func (x *BaseRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

type ReceiveWxaHBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Appid       *string      `protobuf:"bytes,2,opt,name=appid" json:"appid,omitempty"`
	Sendid      *string      `protobuf:"bytes,3,opt,name=sendid" json:"sendid,omitempty"`
}

func (x *ReceiveWxaHBRequest) Reset() {
	*x = ReceiveWxaHBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveWxaHBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveWxaHBRequest) ProtoMessage() {}

func (x *ReceiveWxaHBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveWxaHBRequest.ProtoReflect.Descriptor instead.
func (*ReceiveWxaHBRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{21}
}

func (x *ReceiveWxaHBRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *ReceiveWxaHBRequest) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *ReceiveWxaHBRequest) GetSendid() string {
	if x != nil && x.Sendid != nil {
		return *x.Sendid
	}
	return ""
}

type ReceiveWxaHBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse  *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	WxahbStatus   *uint32       `protobuf:"varint,2,opt,name=wxahbStatus" json:"wxahbStatus,omitempty"`
	Wishing       *string       `protobuf:"bytes,3,opt,name=wishing" json:"wishing,omitempty"`
	SendNickname  *string       `protobuf:"bytes,4,opt,name=sendNickname" json:"sendNickname,omitempty"`
	SendHeadimg   *string       `protobuf:"bytes,5,opt,name=sendHeadimg" json:"sendHeadimg,omitempty"`
	Signature     []byte        `protobuf:"bytes,6,opt,name=signature" json:"signature,omitempty"`
	HbStatus      *int32        `protobuf:"varint,7,opt,name=hbStatus" json:"hbStatus,omitempty"`
	ReceiveStatus *int32        `protobuf:"varint,8,opt,name=receiveStatus" json:"receiveStatus,omitempty"`
	IsSender      *int32        `protobuf:"varint,9,opt,name=isSender" json:"isSender,omitempty"`
	HbType        *int32        `protobuf:"varint,10,opt,name=hbType" json:"hbType,omitempty"`
	Tips          *string       `protobuf:"bytes,11,opt,name=tips" json:"tips,omitempty"`
	Errorwording  *string       `protobuf:"bytes,12,opt,name=errorwording" json:"errorwording,omitempty"`
	SendUsername  *string       `protobuf:"bytes,13,opt,name=sendUsername" json:"sendUsername,omitempty"`
}

func (x *ReceiveWxaHBResponse) Reset() {
	*x = ReceiveWxaHBResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveWxaHBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveWxaHBResponse) ProtoMessage() {}

func (x *ReceiveWxaHBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveWxaHBResponse.ProtoReflect.Descriptor instead.
func (*ReceiveWxaHBResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{22}
}

func (x *ReceiveWxaHBResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *ReceiveWxaHBResponse) GetWxahbStatus() uint32 {
	if x != nil && x.WxahbStatus != nil {
		return *x.WxahbStatus
	}
	return 0
}

func (x *ReceiveWxaHBResponse) GetWishing() string {
	if x != nil && x.Wishing != nil {
		return *x.Wishing
	}
	return ""
}

func (x *ReceiveWxaHBResponse) GetSendNickname() string {
	if x != nil && x.SendNickname != nil {
		return *x.SendNickname
	}
	return ""
}

func (x *ReceiveWxaHBResponse) GetSendHeadimg() string {
	if x != nil && x.SendHeadimg != nil {
		return *x.SendHeadimg
	}
	return ""
}

func (x *ReceiveWxaHBResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ReceiveWxaHBResponse) GetHbStatus() int32 {
	if x != nil && x.HbStatus != nil {
		return *x.HbStatus
	}
	return 0
}

func (x *ReceiveWxaHBResponse) GetReceiveStatus() int32 {
	if x != nil && x.ReceiveStatus != nil {
		return *x.ReceiveStatus
	}
	return 0
}

func (x *ReceiveWxaHBResponse) GetIsSender() int32 {
	if x != nil && x.IsSender != nil {
		return *x.IsSender
	}
	return 0
}

func (x *ReceiveWxaHBResponse) GetHbType() int32 {
	if x != nil && x.HbType != nil {
		return *x.HbType
	}
	return 0
}

func (x *ReceiveWxaHBResponse) GetTips() string {
	if x != nil && x.Tips != nil {
		return *x.Tips
	}
	return ""
}

func (x *ReceiveWxaHBResponse) GetErrorwording() string {
	if x != nil && x.Errorwording != nil {
		return *x.Errorwording
	}
	return ""
}

func (x *ReceiveWxaHBResponse) GetSendUsername() string {
	if x != nil && x.SendUsername != nil {
		return *x.SendUsername
	}
	return ""
}

type GetLoginQRCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest      *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	RandomEncryKey   *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=randomEncryKey" json:"randomEncryKey,omitempty"`
	Opcode           *uint32           `protobuf:"varint,3,opt,name=opcode" json:"opcode,omitempty"`
	DeviceName       *string           `protobuf:"bytes,4,opt,name=deviceName" json:"deviceName,omitempty"`
	UserName         *string           `protobuf:"bytes,5,opt,name=userName" json:"userName,omitempty"`
	ExtDevLoginType  *uint32           `protobuf:"varint,6,opt,name=extDevLoginType" json:"extDevLoginType,omitempty"`
	HardwareExtra    *string           `protobuf:"bytes,7,opt,name=hardwareExtra" json:"hardwareExtra,omitempty"`
	SoftType         *string           `protobuf:"bytes,8,opt,name=softType" json:"softType,omitempty"`
	MsgContextPubKey *SKBuiltinBufferT `protobuf:"bytes,9,opt,name=msgContextPubKey" json:"msgContextPubKey,omitempty"`
}

func (x *GetLoginQRCodeRequest) Reset() {
	*x = GetLoginQRCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoginQRCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoginQRCodeRequest) ProtoMessage() {}

func (x *GetLoginQRCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoginQRCodeRequest.ProtoReflect.Descriptor instead.
func (*GetLoginQRCodeRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{23}
}

func (x *GetLoginQRCodeRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GetLoginQRCodeRequest) GetRandomEncryKey() *SKBuiltinBufferT {
	if x != nil {
		return x.RandomEncryKey
	}
	return nil
}

func (x *GetLoginQRCodeRequest) GetOpcode() uint32 {
	if x != nil && x.Opcode != nil {
		return *x.Opcode
	}
	return 0
}

func (x *GetLoginQRCodeRequest) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *GetLoginQRCodeRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *GetLoginQRCodeRequest) GetExtDevLoginType() uint32 {
	if x != nil && x.ExtDevLoginType != nil {
		return *x.ExtDevLoginType
	}
	return 0
}

func (x *GetLoginQRCodeRequest) GetHardwareExtra() string {
	if x != nil && x.HardwareExtra != nil {
		return *x.HardwareExtra
	}
	return ""
}

func (x *GetLoginQRCodeRequest) GetSoftType() string {
	if x != nil && x.SoftType != nil {
		return *x.SoftType
	}
	return ""
}

func (x *GetLoginQRCodeRequest) GetMsgContextPubKey() *SKBuiltinBufferT {
	if x != nil {
		return x.MsgContextPubKey
	}
	return nil
}

type GetLoginQRCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse              *BaseResponse     `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Qrcode                    *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=qrcode" json:"qrcode,omitempty"`
	Uuid                      *string           `protobuf:"bytes,3,opt,name=uuid" json:"uuid,omitempty"`
	CheckTime                 *uint32           `protobuf:"varint,4,opt,name=checkTime" json:"checkTime,omitempty"`
	NotifyKey                 *SKBuiltinBufferT `protobuf:"bytes,5,opt,name=notifyKey" json:"notifyKey,omitempty"`
	ExpiredTime               *uint32           `protobuf:"varint,6,opt,name=expiredTime" json:"expiredTime,omitempty"`
	BlueToothBroadCastUuid    *string           `protobuf:"bytes,7,opt,name=blueToothBroadCastUuid" json:"blueToothBroadCastUuid,omitempty"`
	BlueToothBroadCastContent *SKBuiltinBufferT `protobuf:"bytes,8,opt,name=blueToothBroadCastContent" json:"blueToothBroadCastContent,omitempty"`
}

func (x *GetLoginQRCodeResponse) Reset() {
	*x = GetLoginQRCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoginQRCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoginQRCodeResponse) ProtoMessage() {}

func (x *GetLoginQRCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoginQRCodeResponse.ProtoReflect.Descriptor instead.
func (*GetLoginQRCodeResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{24}
}

func (x *GetLoginQRCodeResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetLoginQRCodeResponse) GetQrcode() *SKBuiltinBufferT {
	if x != nil {
		return x.Qrcode
	}
	return nil
}

func (x *GetLoginQRCodeResponse) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *GetLoginQRCodeResponse) GetCheckTime() uint32 {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return 0
}

func (x *GetLoginQRCodeResponse) GetNotifyKey() *SKBuiltinBufferT {
	if x != nil {
		return x.NotifyKey
	}
	return nil
}

func (x *GetLoginQRCodeResponse) GetExpiredTime() uint32 {
	if x != nil && x.ExpiredTime != nil {
		return *x.ExpiredTime
	}
	return 0
}

func (x *GetLoginQRCodeResponse) GetBlueToothBroadCastUuid() string {
	if x != nil && x.BlueToothBroadCastUuid != nil {
		return *x.BlueToothBroadCastUuid
	}
	return ""
}

func (x *GetLoginQRCodeResponse) GetBlueToothBroadCastContent() *SKBuiltinBufferT {
	if x != nil {
		return x.BlueToothBroadCastContent
	}
	return nil
}

type HybridEcdhRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                *int32            `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	SecECDHKey          *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=SecECDHKey" json:"SecECDHKey,omitempty"`
	Randomkeydata       []byte            `protobuf:"bytes,3,opt,name=randomkeydata" json:"randomkeydata,omitempty"`
	Randomkeyextenddata []byte            `protobuf:"bytes,4,opt,name=randomkeyextenddata" json:"randomkeyextenddata,omitempty"`
	Encyptdata          []byte            `protobuf:"bytes,5,opt,name=encyptdata" json:"encyptdata,omitempty"`
}

func (x *HybridEcdhRequest) Reset() {
	*x = HybridEcdhRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridEcdhRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridEcdhRequest) ProtoMessage() {}

func (x *HybridEcdhRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridEcdhRequest.ProtoReflect.Descriptor instead.
func (*HybridEcdhRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{25}
}

func (x *HybridEcdhRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *HybridEcdhRequest) GetSecECDHKey() *SKBuiltinBufferT {
	if x != nil {
		return x.SecECDHKey
	}
	return nil
}

func (x *HybridEcdhRequest) GetRandomkeydata() []byte {
	if x != nil {
		return x.Randomkeydata
	}
	return nil
}

func (x *HybridEcdhRequest) GetRandomkeyextenddata() []byte {
	if x != nil {
		return x.Randomkeyextenddata
	}
	return nil
}

func (x *HybridEcdhRequest) GetEncyptdata() []byte {
	if x != nil {
		return x.Encyptdata
	}
	return nil
}

type HybridEcdhResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecECDHKey          *SKBuiltinBufferT `protobuf:"bytes,1,opt,name=SecECDHKey" json:"SecECDHKey,omitempty"`
	Type                *int32            `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Decryptdata         []byte            `protobuf:"bytes,3,opt,name=decryptdata" json:"decryptdata,omitempty"`
	Randomkeyextenddata []byte            `protobuf:"bytes,4,opt,name=randomkeyextenddata" json:"randomkeyextenddata,omitempty"`
}

func (x *HybridEcdhResponse) Reset() {
	*x = HybridEcdhResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridEcdhResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridEcdhResponse) ProtoMessage() {}

func (x *HybridEcdhResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridEcdhResponse.ProtoReflect.Descriptor instead.
func (*HybridEcdhResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{26}
}

func (x *HybridEcdhResponse) GetSecECDHKey() *SKBuiltinBufferT {
	if x != nil {
		return x.SecECDHKey
	}
	return nil
}

func (x *HybridEcdhResponse) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *HybridEcdhResponse) GetDecryptdata() []byte {
	if x != nil {
		return x.Decryptdata
	}
	return nil
}

func (x *HybridEcdhResponse) GetRandomkeyextenddata() []byte {
	if x != nil {
		return x.Randomkeyextenddata
	}
	return nil
}

type SecKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid *int32 `protobuf:"varint,1,opt,name=Nid" json:"Nid,omitempty"`
	Key []byte `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
}

func (x *SecKey) Reset() {
	*x = SecKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecKey) ProtoMessage() {}

func (x *SecKey) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecKey.ProtoReflect.Descriptor instead.
func (*SecKey) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{27}
}

func (x *SecKey) GetNid() int32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *SecKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type HybridEcdhReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *int32  `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	SecKey  *SecKey `protobuf:"bytes,2,opt,name=SecKey" json:"SecKey,omitempty"`
	Gcm1    []byte  `protobuf:"bytes,3,opt,name=Gcm1" json:"Gcm1,omitempty"`
	Autokey []byte  `protobuf:"bytes,4,opt,name=Autokey" json:"Autokey,omitempty"`
	Gcm2    []byte  `protobuf:"bytes,5,opt,name=Gcm2" json:"Gcm2,omitempty"`
}

func (x *HybridEcdhReq) Reset() {
	*x = HybridEcdhReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridEcdhReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridEcdhReq) ProtoMessage() {}

func (x *HybridEcdhReq) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridEcdhReq.ProtoReflect.Descriptor instead.
func (*HybridEcdhReq) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{28}
}

func (x *HybridEcdhReq) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *HybridEcdhReq) GetSecKey() *SecKey {
	if x != nil {
		return x.SecKey
	}
	return nil
}

func (x *HybridEcdhReq) GetGcm1() []byte {
	if x != nil {
		return x.Gcm1
	}
	return nil
}

func (x *HybridEcdhReq) GetAutokey() []byte {
	if x != nil {
		return x.Autokey
	}
	return nil
}

func (x *HybridEcdhReq) GetGcm2() []byte {
	if x != nil {
		return x.Gcm2
	}
	return nil
}

type HybridEcdhResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecKey  *SecKey `protobuf:"bytes,1,opt,name=SecKey" json:"SecKey,omitempty"`
	Version *int32  `protobuf:"varint,2,opt,name=Version" json:"Version,omitempty"`
	Gcm1    []byte  `protobuf:"bytes,3,opt,name=Gcm1" json:"Gcm1,omitempty"`
	Gcm2    []byte  `protobuf:"bytes,4,opt,name=Gcm2" json:"Gcm2,omitempty"`
}

func (x *HybridEcdhResp) Reset() {
	*x = HybridEcdhResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridEcdhResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridEcdhResp) ProtoMessage() {}

func (x *HybridEcdhResp) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridEcdhResp.ProtoReflect.Descriptor instead.
func (*HybridEcdhResp) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{29}
}

func (x *HybridEcdhResp) GetSecKey() *SecKey {
	if x != nil {
		return x.SecKey
	}
	return nil
}

func (x *HybridEcdhResp) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *HybridEcdhResp) GetGcm1() []byte {
	if x != nil {
		return x.Gcm1
	}
	return nil
}

func (x *HybridEcdhResp) GetGcm2() []byte {
	if x != nil {
		return x.Gcm2
	}
	return nil
}

type ManualAuthRsaReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandomEncryKey *SKBuiltinBufferT `protobuf:"bytes,1,opt,name=randomEncryKey" json:"randomEncryKey,omitempty"`
	CliPubEcdhkey  *ECDHKey          `protobuf:"bytes,2,opt,name=cliPubEcdhkey" json:"cliPubEcdhkey,omitempty"`
	UserName       *string           `protobuf:"bytes,3,opt,name=userName" json:"userName,omitempty"`
	Pwd            *string           `protobuf:"bytes,4,opt,name=pwd" json:"pwd,omitempty"`
	Pwd2           *string           `protobuf:"bytes,5,opt,name=pwd2" json:"pwd2,omitempty"`
}

func (x *ManualAuthRsaReqData) Reset() {
	*x = ManualAuthRsaReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualAuthRsaReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualAuthRsaReqData) ProtoMessage() {}

func (x *ManualAuthRsaReqData) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualAuthRsaReqData.ProtoReflect.Descriptor instead.
func (*ManualAuthRsaReqData) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{30}
}

func (x *ManualAuthRsaReqData) GetRandomEncryKey() *SKBuiltinBufferT {
	if x != nil {
		return x.RandomEncryKey
	}
	return nil
}

func (x *ManualAuthRsaReqData) GetCliPubEcdhkey() *ECDHKey {
	if x != nil {
		return x.CliPubEcdhkey
	}
	return nil
}

func (x *ManualAuthRsaReqData) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *ManualAuthRsaReqData) GetPwd() string {
	if x != nil && x.Pwd != nil {
		return *x.Pwd
	}
	return ""
}

func (x *ManualAuthRsaReqData) GetPwd2() string {
	if x != nil && x.Pwd2 != nil {
		return *x.Pwd2
	}
	return ""
}

type WTLoginImgReqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImgSid        *string           `protobuf:"bytes,1,opt,name=imgSid" json:"imgSid,omitempty"`
	ImgCode       *string           `protobuf:"bytes,2,opt,name=imgCode" json:"imgCode,omitempty"`
	ImgEncryptKey *string           `protobuf:"bytes,3,opt,name=imgEncryptKey" json:"imgEncryptKey,omitempty"`
	Ksid          *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=ksid" json:"ksid,omitempty"`
}

func (x *WTLoginImgReqInfo) Reset() {
	*x = WTLoginImgReqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WTLoginImgReqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WTLoginImgReqInfo) ProtoMessage() {}

func (x *WTLoginImgReqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WTLoginImgReqInfo.ProtoReflect.Descriptor instead.
func (*WTLoginImgReqInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{31}
}

func (x *WTLoginImgReqInfo) GetImgSid() string {
	if x != nil && x.ImgSid != nil {
		return *x.ImgSid
	}
	return ""
}

func (x *WTLoginImgReqInfo) GetImgCode() string {
	if x != nil && x.ImgCode != nil {
		return *x.ImgCode
	}
	return ""
}

func (x *WTLoginImgReqInfo) GetImgEncryptKey() string {
	if x != nil && x.ImgEncryptKey != nil {
		return *x.ImgEncryptKey
	}
	return ""
}

func (x *WTLoginImgReqInfo) GetKsid() *SKBuiltinBufferT {
	if x != nil {
		return x.Ksid
	}
	return nil
}

type WxVerifyCodeReqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifySignature *string `protobuf:"bytes,1,opt,name=verifySignature" json:"verifySignature,omitempty"`
	VerifyContent   *string `protobuf:"bytes,2,opt,name=verifyContent" json:"verifyContent,omitempty"`
}

func (x *WxVerifyCodeReqInfo) Reset() {
	*x = WxVerifyCodeReqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxVerifyCodeReqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxVerifyCodeReqInfo) ProtoMessage() {}

func (x *WxVerifyCodeReqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxVerifyCodeReqInfo.ProtoReflect.Descriptor instead.
func (*WxVerifyCodeReqInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{32}
}

func (x *WxVerifyCodeReqInfo) GetVerifySignature() string {
	if x != nil && x.VerifySignature != nil {
		return *x.VerifySignature
	}
	return ""
}

func (x *WxVerifyCodeReqInfo) GetVerifyContent() string {
	if x != nil && x.VerifyContent != nil {
		return *x.VerifyContent
	}
	return ""
}

type BaseAuthReqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WtloginReqBuff      *SKBuiltinBufferT    `protobuf:"bytes,1,opt,name=wtloginReqBuff" json:"wtloginReqBuff,omitempty"`
	WtloginImgReqInfo   *WTLoginImgReqInfo   `protobuf:"bytes,2,opt,name=wtloginImgReqInfo" json:"wtloginImgReqInfo,omitempty"`
	WxVerifyCodeReqInfo *WxVerifyCodeReqInfo `protobuf:"bytes,3,opt,name=wxVerifyCodeReqInfo" json:"wxVerifyCodeReqInfo,omitempty"`
	CliDbencryptKey     *SKBuiltinBufferT    `protobuf:"bytes,4,opt,name=cliDbencryptKey" json:"cliDbencryptKey,omitempty"`
	CliDbencryptInfo    *SKBuiltinBufferT    `protobuf:"bytes,5,opt,name=cliDbencryptInfo" json:"cliDbencryptInfo,omitempty"`
	AuthReqFlag         *uint32              `protobuf:"varint,6,opt,name=authReqFlag" json:"authReqFlag,omitempty"`
	AuthTicket          *string              `protobuf:"bytes,7,opt,name=authTicket" json:"authTicket,omitempty"`
}

func (x *BaseAuthReqInfo) Reset() {
	*x = BaseAuthReqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseAuthReqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseAuthReqInfo) ProtoMessage() {}

func (x *BaseAuthReqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseAuthReqInfo.ProtoReflect.Descriptor instead.
func (*BaseAuthReqInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{33}
}

func (x *BaseAuthReqInfo) GetWtloginReqBuff() *SKBuiltinBufferT {
	if x != nil {
		return x.WtloginReqBuff
	}
	return nil
}

func (x *BaseAuthReqInfo) GetWtloginImgReqInfo() *WTLoginImgReqInfo {
	if x != nil {
		return x.WtloginImgReqInfo
	}
	return nil
}

func (x *BaseAuthReqInfo) GetWxVerifyCodeReqInfo() *WxVerifyCodeReqInfo {
	if x != nil {
		return x.WxVerifyCodeReqInfo
	}
	return nil
}

func (x *BaseAuthReqInfo) GetCliDbencryptKey() *SKBuiltinBufferT {
	if x != nil {
		return x.CliDbencryptKey
	}
	return nil
}

func (x *BaseAuthReqInfo) GetCliDbencryptInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.CliDbencryptInfo
	}
	return nil
}

func (x *BaseAuthReqInfo) GetAuthReqFlag() uint32 {
	if x != nil && x.AuthReqFlag != nil {
		return *x.AuthReqFlag
	}
	return 0
}

func (x *BaseAuthReqInfo) GetAuthTicket() string {
	if x != nil && x.AuthTicket != nil {
		return *x.AuthTicket
	}
	return ""
}

type ManualAuthAesReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest     *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	BaseReqInfo     *BaseAuthReqInfo  `protobuf:"bytes,2,opt,name=baseReqInfo" json:"baseReqInfo,omitempty"`
	Imei            *string           `protobuf:"bytes,3,opt,name=imei" json:"imei,omitempty"`
	SoftType        *string           `protobuf:"bytes,4,opt,name=softType" json:"softType,omitempty"`
	BuiltinIpseq    *uint32           `protobuf:"varint,5,opt,name=builtinIpseq" json:"builtinIpseq,omitempty"`
	ClientSeqId     *string           `protobuf:"bytes,6,opt,name=clientSeqId" json:"clientSeqId,omitempty"`
	Signature       *string           `protobuf:"bytes,7,opt,name=signature" json:"signature,omitempty"`
	DeviceName      *string           `protobuf:"bytes,8,opt,name=deviceName" json:"deviceName,omitempty"`
	DeviceType      *string           `protobuf:"bytes,9,opt,name=deviceType" json:"deviceType,omitempty"`
	Language        *string           `protobuf:"bytes,10,opt,name=language" json:"language,omitempty"`
	TimeZone        *string           `protobuf:"bytes,11,opt,name=timeZone" json:"timeZone,omitempty"`
	Channel         *int32            `protobuf:"varint,13,opt,name=channel" json:"channel,omitempty"`
	TimeStamp       *uint32           `protobuf:"varint,14,opt,name=timeStamp" json:"timeStamp,omitempty"`
	DeviceBrand     *string           `protobuf:"bytes,15,opt,name=deviceBrand" json:"deviceBrand,omitempty"`
	DeviceModel     *string           `protobuf:"bytes,16,opt,name=deviceModel" json:"deviceModel,omitempty"`
	Ostype          *string           `protobuf:"bytes,17,opt,name=ostype" json:"ostype,omitempty"`
	RealCountry     *string           `protobuf:"bytes,18,opt,name=realCountry" json:"realCountry,omitempty"`
	BundleId        *string           `protobuf:"bytes,19,opt,name=bundleId" json:"bundleId,omitempty"`
	AdSource        *string           `protobuf:"bytes,20,opt,name=adSource" json:"adSource,omitempty"`
	IphoneVer       *string           `protobuf:"bytes,21,opt,name=iphoneVer" json:"iphoneVer,omitempty"`
	InputType       *uint32           `protobuf:"varint,22,opt,name=inputType" json:"inputType,omitempty"`
	ClientCheckData *SKBuiltinBufferT `protobuf:"bytes,23,opt,name=clientCheckData" json:"clientCheckData,omitempty"`
	ExtSpamInfo     *SKBuiltinBufferT `protobuf:"bytes,24,opt,name=extSpamInfo" json:"extSpamInfo,omitempty"`
}

func (x *ManualAuthAesReqData) Reset() {
	*x = ManualAuthAesReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualAuthAesReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualAuthAesReqData) ProtoMessage() {}

func (x *ManualAuthAesReqData) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualAuthAesReqData.ProtoReflect.Descriptor instead.
func (*ManualAuthAesReqData) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{34}
}

func (x *ManualAuthAesReqData) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *ManualAuthAesReqData) GetBaseReqInfo() *BaseAuthReqInfo {
	if x != nil {
		return x.BaseReqInfo
	}
	return nil
}

func (x *ManualAuthAesReqData) GetImei() string {
	if x != nil && x.Imei != nil {
		return *x.Imei
	}
	return ""
}

func (x *ManualAuthAesReqData) GetSoftType() string {
	if x != nil && x.SoftType != nil {
		return *x.SoftType
	}
	return ""
}

func (x *ManualAuthAesReqData) GetBuiltinIpseq() uint32 {
	if x != nil && x.BuiltinIpseq != nil {
		return *x.BuiltinIpseq
	}
	return 0
}

func (x *ManualAuthAesReqData) GetClientSeqId() string {
	if x != nil && x.ClientSeqId != nil {
		return *x.ClientSeqId
	}
	return ""
}

func (x *ManualAuthAesReqData) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *ManualAuthAesReqData) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *ManualAuthAesReqData) GetDeviceType() string {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return ""
}

func (x *ManualAuthAesReqData) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *ManualAuthAesReqData) GetTimeZone() string {
	if x != nil && x.TimeZone != nil {
		return *x.TimeZone
	}
	return ""
}

func (x *ManualAuthAesReqData) GetChannel() int32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

func (x *ManualAuthAesReqData) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *ManualAuthAesReqData) GetDeviceBrand() string {
	if x != nil && x.DeviceBrand != nil {
		return *x.DeviceBrand
	}
	return ""
}

func (x *ManualAuthAesReqData) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

func (x *ManualAuthAesReqData) GetOstype() string {
	if x != nil && x.Ostype != nil {
		return *x.Ostype
	}
	return ""
}

func (x *ManualAuthAesReqData) GetRealCountry() string {
	if x != nil && x.RealCountry != nil {
		return *x.RealCountry
	}
	return ""
}

func (x *ManualAuthAesReqData) GetBundleId() string {
	if x != nil && x.BundleId != nil {
		return *x.BundleId
	}
	return ""
}

func (x *ManualAuthAesReqData) GetAdSource() string {
	if x != nil && x.AdSource != nil {
		return *x.AdSource
	}
	return ""
}

func (x *ManualAuthAesReqData) GetIphoneVer() string {
	if x != nil && x.IphoneVer != nil {
		return *x.IphoneVer
	}
	return ""
}

func (x *ManualAuthAesReqData) GetInputType() uint32 {
	if x != nil && x.InputType != nil {
		return *x.InputType
	}
	return 0
}

func (x *ManualAuthAesReqData) GetClientCheckData() *SKBuiltinBufferT {
	if x != nil {
		return x.ClientCheckData
	}
	return nil
}

func (x *ManualAuthAesReqData) GetExtSpamInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.ExtSpamInfo
	}
	return nil
}

type SecManualLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RsaReqData *ManualAuthRsaReqData `protobuf:"bytes,1,opt,name=rsaReqData" json:"rsaReqData,omitempty"`
	AesReqData *ManualAuthAesReqData `protobuf:"bytes,2,opt,name=aesReqData" json:"aesReqData,omitempty"`
}

func (x *SecManualLoginRequest) Reset() {
	*x = SecManualLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecManualLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecManualLoginRequest) ProtoMessage() {}

func (x *SecManualLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecManualLoginRequest.ProtoReflect.Descriptor instead.
func (*SecManualLoginRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{35}
}

func (x *SecManualLoginRequest) GetRsaReqData() *ManualAuthRsaReqData {
	if x != nil {
		return x.RsaReqData
	}
	return nil
}

func (x *SecManualLoginRequest) GetAesReqData() *ManualAuthAesReqData {
	if x != nil {
		return x.AesReqData
	}
	return nil
}

type SecAutoLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RsaReqData *ManualAuthRsaReqData `protobuf:"bytes,1,opt,name=rsaReqData" json:"rsaReqData,omitempty"`
	AesReqData *ManualAuthAesReqData `protobuf:"bytes,2,opt,name=aesReqData" json:"aesReqData,omitempty"`
}

func (x *SecAutoLoginRequest) Reset() {
	*x = SecAutoLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecAutoLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecAutoLoginRequest) ProtoMessage() {}

func (x *SecAutoLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecAutoLoginRequest.ProtoReflect.Descriptor instead.
func (*SecAutoLoginRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{36}
}

func (x *SecAutoLoginRequest) GetRsaReqData() *ManualAuthRsaReqData {
	if x != nil {
		return x.RsaReqData
	}
	return nil
}

func (x *SecAutoLoginRequest) GetAesReqData() *ManualAuthAesReqData {
	if x != nil {
		return x.AesReqData
	}
	return nil
}

type CheckLoginQRCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	RandomEncryKey *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=randomEncryKey" json:"randomEncryKey,omitempty"`
	Uuid           *string           `protobuf:"bytes,3,opt,name=uuid" json:"uuid,omitempty"`
	TimeStamp      *uint32           `protobuf:"varint,4,opt,name=timeStamp" json:"timeStamp,omitempty"`
	Opcode         *uint32           `protobuf:"varint,5,opt,name=opcode" json:"opcode,omitempty"`
}

func (x *CheckLoginQRCodeRequest) Reset() {
	*x = CheckLoginQRCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLoginQRCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLoginQRCodeRequest) ProtoMessage() {}

func (x *CheckLoginQRCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLoginQRCodeRequest.ProtoReflect.Descriptor instead.
func (*CheckLoginQRCodeRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{37}
}

func (x *CheckLoginQRCodeRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *CheckLoginQRCodeRequest) GetRandomEncryKey() *SKBuiltinBufferT {
	if x != nil {
		return x.RandomEncryKey
	}
	return nil
}

func (x *CheckLoginQRCodeRequest) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *CheckLoginQRCodeRequest) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CheckLoginQRCodeRequest) GetOpcode() uint32 {
	if x != nil && x.Opcode != nil {
		return *x.Opcode
	}
	return 0
}

type CheckLoginQRCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse         `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	NotifyPkg    *LoginQRCodeNotifyPkg `protobuf:"bytes,3,opt,name=notifyPkg" json:"notifyPkg,omitempty"`
}

func (x *CheckLoginQRCodeResponse) Reset() {
	*x = CheckLoginQRCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLoginQRCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLoginQRCodeResponse) ProtoMessage() {}

func (x *CheckLoginQRCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLoginQRCodeResponse.ProtoReflect.Descriptor instead.
func (*CheckLoginQRCodeResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{38}
}

func (x *CheckLoginQRCodeResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *CheckLoginQRCodeResponse) GetNotifyPkg() *LoginQRCodeNotifyPkg {
	if x != nil {
		return x.NotifyPkg
	}
	return nil
}

type LoginQRCodeNotifyPkg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyData *SKBuiltinBufferT `protobuf:"bytes,1,opt,name=notifyData" json:"notifyData,omitempty"`
	Opcode     *uint32           `protobuf:"varint,2,opt,name=opcode" json:"opcode,omitempty"`
}

func (x *LoginQRCodeNotifyPkg) Reset() {
	*x = LoginQRCodeNotifyPkg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginQRCodeNotifyPkg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginQRCodeNotifyPkg) ProtoMessage() {}

func (x *LoginQRCodeNotifyPkg) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginQRCodeNotifyPkg.ProtoReflect.Descriptor instead.
func (*LoginQRCodeNotifyPkg) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{39}
}

func (x *LoginQRCodeNotifyPkg) GetNotifyData() *SKBuiltinBufferT {
	if x != nil {
		return x.NotifyData
	}
	return nil
}

func (x *LoginQRCodeNotifyPkg) GetOpcode() uint32 {
	if x != nil && x.Opcode != nil {
		return *x.Opcode
	}
	return 0
}

type LoginQRCodeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                    *string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Status                  *uint32 `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	UserName                *string `protobuf:"bytes,3,opt,name=userName" json:"userName,omitempty"`
	Pwd                     *string `protobuf:"bytes,4,opt,name=pwd" json:"pwd,omitempty"`
	HeadImgUrl              *string `protobuf:"bytes,5,opt,name=headImgUrl" json:"headImgUrl,omitempty"`
	PushLoginUrlexpiredTime *uint32 `protobuf:"varint,6,opt,name=pushLoginUrlexpiredTime" json:"pushLoginUrlexpiredTime,omitempty"`
	NickName                *string `protobuf:"bytes,7,opt,name=nickName" json:"nickName,omitempty"`
	ExpiredTime             *uint32 `protobuf:"varint,8,opt,name=expiredTime" json:"expiredTime,omitempty"`
}

func (x *LoginQRCodeNotify) Reset() {
	*x = LoginQRCodeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginQRCodeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginQRCodeNotify) ProtoMessage() {}

func (x *LoginQRCodeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginQRCodeNotify.ProtoReflect.Descriptor instead.
func (*LoginQRCodeNotify) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{40}
}

func (x *LoginQRCodeNotify) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *LoginQRCodeNotify) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *LoginQRCodeNotify) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *LoginQRCodeNotify) GetPwd() string {
	if x != nil && x.Pwd != nil {
		return *x.Pwd
	}
	return ""
}

func (x *LoginQRCodeNotify) GetHeadImgUrl() string {
	if x != nil && x.HeadImgUrl != nil {
		return *x.HeadImgUrl
	}
	return ""
}

func (x *LoginQRCodeNotify) GetPushLoginUrlexpiredTime() uint32 {
	if x != nil && x.PushLoginUrlexpiredTime != nil {
		return *x.PushLoginUrlexpiredTime
	}
	return 0
}

func (x *LoginQRCodeNotify) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *LoginQRCodeNotify) GetExpiredTime() uint32 {
	if x != nil && x.ExpiredTime != nil {
		return *x.ExpiredTime
	}
	return 0
}

type DeviceToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   *string           `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
	Encrypted *uint32           `protobuf:"varint,2,opt,name=Encrypted" json:"Encrypted,omitempty"`
	Data      *SKBuiltinStringT `protobuf:"bytes,3,opt,name=Data" json:"Data,omitempty"`
	TimeStamp *uint32           `protobuf:"varint,4,opt,name=TimeStamp" json:"TimeStamp,omitempty"`
	Optype    *uint32           `protobuf:"varint,5,opt,name=Optype" json:"Optype,omitempty"`
	Uin       *uint32           `protobuf:"varint,6,opt,name=Uin" json:"Uin,omitempty"`
}

func (x *DeviceToken) Reset() {
	*x = DeviceToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceToken) ProtoMessage() {}

func (x *DeviceToken) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceToken.ProtoReflect.Descriptor instead.
func (*DeviceToken) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{41}
}

func (x *DeviceToken) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *DeviceToken) GetEncrypted() uint32 {
	if x != nil && x.Encrypted != nil {
		return *x.Encrypted
	}
	return 0
}

func (x *DeviceToken) GetData() *SKBuiltinStringT {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceToken) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *DeviceToken) GetOptype() uint32 {
	if x != nil && x.Optype != nil {
		return *x.Optype
	}
	return 0
}

func (x *DeviceToken) GetUin() uint32 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

type AndroidSpamDataBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loc                  *uint32 `protobuf:"varint,1,opt,name=Loc" json:"Loc,omitempty"`
	Root                 *uint32 `protobuf:"varint,2,opt,name=Root" json:"Root,omitempty"`
	Debug                *uint32 `protobuf:"varint,3,opt,name=Debug" json:"Debug,omitempty"`
	PackageSign          *string `protobuf:"bytes,4,opt,name=PackageSign" json:"PackageSign,omitempty"`
	RadioVersion         *string `protobuf:"bytes,5,opt,name=RadioVersion" json:"RadioVersion,omitempty"`
	BuildVersion         *string `protobuf:"bytes,6,opt,name=BuildVersion" json:"BuildVersion,omitempty"`
	DeviceId             *string `protobuf:"bytes,7,opt,name=DeviceId" json:"DeviceId,omitempty"`
	AndroidId            *string `protobuf:"bytes,8,opt,name=AndroidId" json:"AndroidId,omitempty"`
	SerialId             *string `protobuf:"bytes,9,opt,name=SerialId" json:"SerialId,omitempty"`
	Model                *string `protobuf:"bytes,10,opt,name=Model" json:"Model,omitempty"`
	CpuCount             *uint32 `protobuf:"varint,11,opt,name=CpuCount" json:"CpuCount,omitempty"`
	CpuBrand             *string `protobuf:"bytes,12,opt,name=CpuBrand" json:"CpuBrand,omitempty"`
	CpuExt               *string `protobuf:"bytes,13,opt,name=CpuExt" json:"CpuExt,omitempty"`
	WlanAddress          *string `protobuf:"bytes,14,opt,name=WlanAddress" json:"WlanAddress,omitempty"`
	Ssid                 *string `protobuf:"bytes,15,opt,name=Ssid" json:"Ssid,omitempty"`
	Bssid                *string `protobuf:"bytes,16,opt,name=Bssid" json:"Bssid,omitempty"`
	SimOperator          *string `protobuf:"bytes,17,opt,name=SimOperator" json:"SimOperator,omitempty"`
	WifiName             *string `protobuf:"bytes,18,opt,name=WifiName" json:"WifiName,omitempty"`
	BuildFP              *string `protobuf:"bytes,19,opt,name=BuildFP" json:"BuildFP,omitempty"`
	BuildBoard           *string `protobuf:"bytes,20,opt,name=BuildBoard" json:"BuildBoard,omitempty"`
	BuildBootLoader      *string `protobuf:"bytes,21,opt,name=BuildBootLoader" json:"BuildBootLoader,omitempty"`
	BuildBrand           *string `protobuf:"bytes,22,opt,name=BuildBrand" json:"BuildBrand,omitempty"`
	BuildDevice          *string `protobuf:"bytes,23,opt,name=BuildDevice" json:"BuildDevice,omitempty"`
	BuildHardware        *string `protobuf:"bytes,24,opt,name=BuildHardware" json:"BuildHardware,omitempty"`
	BuildProduct         *string `protobuf:"bytes,25,opt,name=BuildProduct" json:"BuildProduct,omitempty"`
	BuildManufacturer    *string `protobuf:"bytes,26,opt,name=BuildManufacturer" json:"BuildManufacturer,omitempty"`
	PhoneNum             *string `protobuf:"bytes,27,opt,name=PhoneNum" json:"PhoneNum,omitempty"`
	NetType              *string `protobuf:"bytes,28,opt,name=NetType" json:"NetType,omitempty"`
	Qemu                 *uint32 `protobuf:"varint,29,opt,name=Qemu" json:"Qemu,omitempty"`
	Modified             *uint32 `protobuf:"varint,30,opt,name=Modified" json:"Modified,omitempty"`
	Task                 *uint32 `protobuf:"varint,31,opt,name=Task" json:"Task,omitempty"`
	PackageName          *string `protobuf:"bytes,32,opt,name=PackageName" json:"PackageName,omitempty"`
	AppName              *string `protobuf:"bytes,33,opt,name=AppName" json:"AppName,omitempty"`
	DataDir              *string `protobuf:"bytes,34,opt,name=DataDir" json:"DataDir,omitempty"`
	ClassLoader          *string `protobuf:"bytes,35,opt,name=ClassLoader" json:"ClassLoader,omitempty"`
	HardwareMask         *uint32 `protobuf:"varint,38,opt,name=HardwareMask" json:"HardwareMask,omitempty"`
	Luckpackcount        *uint32 `protobuf:"varint,41,opt,name=Luckpackcount" json:"Luckpackcount,omitempty"`
	BaseAPKMD5           *string `protobuf:"bytes,42,opt,name=BaseAPKMD5" json:"BaseAPKMD5,omitempty"`
	ClientVersion        *string `protobuf:"bytes,43,opt,name=ClientVersion" json:"ClientVersion,omitempty"`
	TbVersion            *string `protobuf:"bytes,44,opt,name=TbVersion" json:"TbVersion,omitempty"`
	Ip                   *string `protobuf:"bytes,45,opt,name=Ip" json:"Ip,omitempty"`
	Locale               *string `protobuf:"bytes,46,opt,name=Locale" json:"Locale,omitempty"`
	CallState            *uint32 `protobuf:"varint,47,opt,name=CallState" json:"CallState,omitempty"`
	KeyGuardSecure       *uint32 `protobuf:"varint,48,opt,name=KeyGuardSecure" json:"KeyGuardSecure,omitempty"`
	WifiOn               *uint32 `protobuf:"varint,50,opt,name=WifiOn" json:"WifiOn,omitempty"`
	XposeCall            *uint32 `protobuf:"varint,51,opt,name=XposeCall" json:"XposeCall,omitempty"`
	AdbEnable            *uint32 `protobuf:"varint,53,opt,name=AdbEnable" json:"AdbEnable,omitempty"`
	Monkey               *uint32 `protobuf:"varint,54,opt,name=Monkey" json:"Monkey,omitempty"`
	SplashName           *string `protobuf:"bytes,55,opt,name=SplashName" json:"SplashName,omitempty"`
	OsBinderProxy        *string `protobuf:"bytes,56,opt,name=OsBinderProxy" json:"OsBinderProxy,omitempty"`
	StubProxy            *string `protobuf:"bytes,57,opt,name=StubProxy" json:"StubProxy,omitempty"`
	VirtualNet           *uint32 `protobuf:"varint,58,opt,name=VirtualNet" json:"VirtualNet,omitempty"`
	Vpn                  *uint32 `protobuf:"varint,59,opt,name=Vpn" json:"Vpn,omitempty"`
	SubScriberId         *string `protobuf:"bytes,60,opt,name=SubScriberId" json:"SubScriberId,omitempty"`
	GsmSimSate           *string `protobuf:"bytes,61,opt,name=GsmSimSate" json:"GsmSimSate,omitempty"`
	GsmSimOperator       *string `protobuf:"bytes,62,opt,name=GsmSimOperator" json:"GsmSimOperator,omitempty"`
	GsmSimOperatorNumber *string `protobuf:"bytes,63,opt,name=GsmSimOperatorNumber" json:"GsmSimOperatorNumber,omitempty"`
	SoterId              *string `protobuf:"bytes,64,opt,name=SoterId" json:"SoterId,omitempty"`
	KernelReleaseNumber  *string `protobuf:"bytes,65,opt,name=KernelReleaseNumber" json:"KernelReleaseNumber,omitempty"`
	UsbState             *uint32 `protobuf:"varint,66,opt,name=UsbState" json:"UsbState,omitempty"`
	Sign                 *string `protobuf:"bytes,67,opt,name=Sign" json:"Sign,omitempty"`
	PackageFlag          *uint32 `protobuf:"varint,68,opt,name=PackageFlag" json:"PackageFlag,omitempty"`
	AccessFlag           *uint32 `protobuf:"varint,69,opt,name=AccessFlag" json:"AccessFlag,omitempty"`
	Unkonwn              *uint32 `protobuf:"varint,70,opt,name=Unkonwn" json:"Unkonwn,omitempty"`
	TbVersionCrc         *uint32 `protobuf:"varint,71,opt,name=TbVersionCrc" json:"TbVersionCrc,omitempty"`
	SfMD5                *string `protobuf:"bytes,72,opt,name=SfMD5" json:"SfMD5,omitempty"`
	SfArmMD5             *string `protobuf:"bytes,73,opt,name=SfArmMD5" json:"SfArmMD5,omitempty"`
	SfArm64MD5           *string `protobuf:"bytes,74,opt,name=SfArm64MD5" json:"SfArm64MD5,omitempty"`
	SbMD5                *string `protobuf:"bytes,75,opt,name=SbMD5" json:"SbMD5,omitempty"`
	SoterId2             *string `protobuf:"bytes,76,opt,name=SoterId2" json:"SoterId2,omitempty"`
	WidevineDeviceID     *string `protobuf:"bytes,77,opt,name=WidevineDeviceID" json:"WidevineDeviceID,omitempty"`
	FSID                 *string `protobuf:"bytes,78,opt,name=FSID" json:"FSID,omitempty"`
	Oaid                 *string `protobuf:"bytes,79,opt,name=Oaid" json:"Oaid,omitempty"`
	TimeCheck            *uint32 `protobuf:"varint,80,opt,name=TimeCheck" json:"TimeCheck,omitempty"`
	NanoTime             *uint32 `protobuf:"varint,81,opt,name=NanoTime" json:"NanoTime,omitempty"`
	Refreshtime          *uint32 `protobuf:"varint,83,opt,name=Refreshtime" json:"Refreshtime,omitempty"`
	SoftConfig           *string `protobuf:"bytes,84,opt,name=SoftConfig" json:"SoftConfig,omitempty"`
	SoftData             []byte  `protobuf:"bytes,85,opt,name=SoftData" json:"SoftData,omitempty"`
}

func (x *AndroidSpamDataBody) Reset() {
	*x = AndroidSpamDataBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidSpamDataBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidSpamDataBody) ProtoMessage() {}

func (x *AndroidSpamDataBody) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidSpamDataBody.ProtoReflect.Descriptor instead.
func (*AndroidSpamDataBody) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{42}
}

func (x *AndroidSpamDataBody) GetLoc() uint32 {
	if x != nil && x.Loc != nil {
		return *x.Loc
	}
	return 0
}

func (x *AndroidSpamDataBody) GetRoot() uint32 {
	if x != nil && x.Root != nil {
		return *x.Root
	}
	return 0
}

func (x *AndroidSpamDataBody) GetDebug() uint32 {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return 0
}

func (x *AndroidSpamDataBody) GetPackageSign() string {
	if x != nil && x.PackageSign != nil {
		return *x.PackageSign
	}
	return ""
}

func (x *AndroidSpamDataBody) GetRadioVersion() string {
	if x != nil && x.RadioVersion != nil {
		return *x.RadioVersion
	}
	return ""
}

func (x *AndroidSpamDataBody) GetBuildVersion() string {
	if x != nil && x.BuildVersion != nil {
		return *x.BuildVersion
	}
	return ""
}

func (x *AndroidSpamDataBody) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *AndroidSpamDataBody) GetAndroidId() string {
	if x != nil && x.AndroidId != nil {
		return *x.AndroidId
	}
	return ""
}

func (x *AndroidSpamDataBody) GetSerialId() string {
	if x != nil && x.SerialId != nil {
		return *x.SerialId
	}
	return ""
}

func (x *AndroidSpamDataBody) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *AndroidSpamDataBody) GetCpuCount() uint32 {
	if x != nil && x.CpuCount != nil {
		return *x.CpuCount
	}
	return 0
}

func (x *AndroidSpamDataBody) GetCpuBrand() string {
	if x != nil && x.CpuBrand != nil {
		return *x.CpuBrand
	}
	return ""
}

func (x *AndroidSpamDataBody) GetCpuExt() string {
	if x != nil && x.CpuExt != nil {
		return *x.CpuExt
	}
	return ""
}

func (x *AndroidSpamDataBody) GetWlanAddress() string {
	if x != nil && x.WlanAddress != nil {
		return *x.WlanAddress
	}
	return ""
}

func (x *AndroidSpamDataBody) GetSsid() string {
	if x != nil && x.Ssid != nil {
		return *x.Ssid
	}
	return ""
}

func (x *AndroidSpamDataBody) GetBssid() string {
	if x != nil && x.Bssid != nil {
		return *x.Bssid
	}
	return ""
}

func (x *AndroidSpamDataBody) GetSimOperator() string {
	if x != nil && x.SimOperator != nil {
		return *x.SimOperator
	}
	return ""
}

func (x *AndroidSpamDataBody) GetWifiName() string {
	if x != nil && x.WifiName != nil {
		return *x.WifiName
	}
	return ""
}

func (x *AndroidSpamDataBody) GetBuildFP() string {
	if x != nil && x.BuildFP != nil {
		return *x.BuildFP
	}
	return ""
}

func (x *AndroidSpamDataBody) GetBuildBoard() string {
	if x != nil && x.BuildBoard != nil {
		return *x.BuildBoard
	}
	return ""
}

func (x *AndroidSpamDataBody) GetBuildBootLoader() string {
	if x != nil && x.BuildBootLoader != nil {
		return *x.BuildBootLoader
	}
	return ""
}

func (x *AndroidSpamDataBody) GetBuildBrand() string {
	if x != nil && x.BuildBrand != nil {
		return *x.BuildBrand
	}
	return ""
}

func (x *AndroidSpamDataBody) GetBuildDevice() string {
	if x != nil && x.BuildDevice != nil {
		return *x.BuildDevice
	}
	return ""
}

func (x *AndroidSpamDataBody) GetBuildHardware() string {
	if x != nil && x.BuildHardware != nil {
		return *x.BuildHardware
	}
	return ""
}

func (x *AndroidSpamDataBody) GetBuildProduct() string {
	if x != nil && x.BuildProduct != nil {
		return *x.BuildProduct
	}
	return ""
}

func (x *AndroidSpamDataBody) GetBuildManufacturer() string {
	if x != nil && x.BuildManufacturer != nil {
		return *x.BuildManufacturer
	}
	return ""
}

func (x *AndroidSpamDataBody) GetPhoneNum() string {
	if x != nil && x.PhoneNum != nil {
		return *x.PhoneNum
	}
	return ""
}

func (x *AndroidSpamDataBody) GetNetType() string {
	if x != nil && x.NetType != nil {
		return *x.NetType
	}
	return ""
}

func (x *AndroidSpamDataBody) GetQemu() uint32 {
	if x != nil && x.Qemu != nil {
		return *x.Qemu
	}
	return 0
}

func (x *AndroidSpamDataBody) GetModified() uint32 {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return 0
}

func (x *AndroidSpamDataBody) GetTask() uint32 {
	if x != nil && x.Task != nil {
		return *x.Task
	}
	return 0
}

func (x *AndroidSpamDataBody) GetPackageName() string {
	if x != nil && x.PackageName != nil {
		return *x.PackageName
	}
	return ""
}

func (x *AndroidSpamDataBody) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *AndroidSpamDataBody) GetDataDir() string {
	if x != nil && x.DataDir != nil {
		return *x.DataDir
	}
	return ""
}

func (x *AndroidSpamDataBody) GetClassLoader() string {
	if x != nil && x.ClassLoader != nil {
		return *x.ClassLoader
	}
	return ""
}

func (x *AndroidSpamDataBody) GetHardwareMask() uint32 {
	if x != nil && x.HardwareMask != nil {
		return *x.HardwareMask
	}
	return 0
}

func (x *AndroidSpamDataBody) GetLuckpackcount() uint32 {
	if x != nil && x.Luckpackcount != nil {
		return *x.Luckpackcount
	}
	return 0
}

func (x *AndroidSpamDataBody) GetBaseAPKMD5() string {
	if x != nil && x.BaseAPKMD5 != nil {
		return *x.BaseAPKMD5
	}
	return ""
}

func (x *AndroidSpamDataBody) GetClientVersion() string {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return ""
}

func (x *AndroidSpamDataBody) GetTbVersion() string {
	if x != nil && x.TbVersion != nil {
		return *x.TbVersion
	}
	return ""
}

func (x *AndroidSpamDataBody) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *AndroidSpamDataBody) GetLocale() string {
	if x != nil && x.Locale != nil {
		return *x.Locale
	}
	return ""
}

func (x *AndroidSpamDataBody) GetCallState() uint32 {
	if x != nil && x.CallState != nil {
		return *x.CallState
	}
	return 0
}

func (x *AndroidSpamDataBody) GetKeyGuardSecure() uint32 {
	if x != nil && x.KeyGuardSecure != nil {
		return *x.KeyGuardSecure
	}
	return 0
}

func (x *AndroidSpamDataBody) GetWifiOn() uint32 {
	if x != nil && x.WifiOn != nil {
		return *x.WifiOn
	}
	return 0
}

func (x *AndroidSpamDataBody) GetXposeCall() uint32 {
	if x != nil && x.XposeCall != nil {
		return *x.XposeCall
	}
	return 0
}

func (x *AndroidSpamDataBody) GetAdbEnable() uint32 {
	if x != nil && x.AdbEnable != nil {
		return *x.AdbEnable
	}
	return 0
}

func (x *AndroidSpamDataBody) GetMonkey() uint32 {
	if x != nil && x.Monkey != nil {
		return *x.Monkey
	}
	return 0
}

func (x *AndroidSpamDataBody) GetSplashName() string {
	if x != nil && x.SplashName != nil {
		return *x.SplashName
	}
	return ""
}

func (x *AndroidSpamDataBody) GetOsBinderProxy() string {
	if x != nil && x.OsBinderProxy != nil {
		return *x.OsBinderProxy
	}
	return ""
}

func (x *AndroidSpamDataBody) GetStubProxy() string {
	if x != nil && x.StubProxy != nil {
		return *x.StubProxy
	}
	return ""
}

func (x *AndroidSpamDataBody) GetVirtualNet() uint32 {
	if x != nil && x.VirtualNet != nil {
		return *x.VirtualNet
	}
	return 0
}

func (x *AndroidSpamDataBody) GetVpn() uint32 {
	if x != nil && x.Vpn != nil {
		return *x.Vpn
	}
	return 0
}

func (x *AndroidSpamDataBody) GetSubScriberId() string {
	if x != nil && x.SubScriberId != nil {
		return *x.SubScriberId
	}
	return ""
}

func (x *AndroidSpamDataBody) GetGsmSimSate() string {
	if x != nil && x.GsmSimSate != nil {
		return *x.GsmSimSate
	}
	return ""
}

func (x *AndroidSpamDataBody) GetGsmSimOperator() string {
	if x != nil && x.GsmSimOperator != nil {
		return *x.GsmSimOperator
	}
	return ""
}

func (x *AndroidSpamDataBody) GetGsmSimOperatorNumber() string {
	if x != nil && x.GsmSimOperatorNumber != nil {
		return *x.GsmSimOperatorNumber
	}
	return ""
}

func (x *AndroidSpamDataBody) GetSoterId() string {
	if x != nil && x.SoterId != nil {
		return *x.SoterId
	}
	return ""
}

func (x *AndroidSpamDataBody) GetKernelReleaseNumber() string {
	if x != nil && x.KernelReleaseNumber != nil {
		return *x.KernelReleaseNumber
	}
	return ""
}

func (x *AndroidSpamDataBody) GetUsbState() uint32 {
	if x != nil && x.UsbState != nil {
		return *x.UsbState
	}
	return 0
}

func (x *AndroidSpamDataBody) GetSign() string {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return ""
}

func (x *AndroidSpamDataBody) GetPackageFlag() uint32 {
	if x != nil && x.PackageFlag != nil {
		return *x.PackageFlag
	}
	return 0
}

func (x *AndroidSpamDataBody) GetAccessFlag() uint32 {
	if x != nil && x.AccessFlag != nil {
		return *x.AccessFlag
	}
	return 0
}

func (x *AndroidSpamDataBody) GetUnkonwn() uint32 {
	if x != nil && x.Unkonwn != nil {
		return *x.Unkonwn
	}
	return 0
}

func (x *AndroidSpamDataBody) GetTbVersionCrc() uint32 {
	if x != nil && x.TbVersionCrc != nil {
		return *x.TbVersionCrc
	}
	return 0
}

func (x *AndroidSpamDataBody) GetSfMD5() string {
	if x != nil && x.SfMD5 != nil {
		return *x.SfMD5
	}
	return ""
}

func (x *AndroidSpamDataBody) GetSfArmMD5() string {
	if x != nil && x.SfArmMD5 != nil {
		return *x.SfArmMD5
	}
	return ""
}

func (x *AndroidSpamDataBody) GetSfArm64MD5() string {
	if x != nil && x.SfArm64MD5 != nil {
		return *x.SfArm64MD5
	}
	return ""
}

func (x *AndroidSpamDataBody) GetSbMD5() string {
	if x != nil && x.SbMD5 != nil {
		return *x.SbMD5
	}
	return ""
}

func (x *AndroidSpamDataBody) GetSoterId2() string {
	if x != nil && x.SoterId2 != nil {
		return *x.SoterId2
	}
	return ""
}

func (x *AndroidSpamDataBody) GetWidevineDeviceID() string {
	if x != nil && x.WidevineDeviceID != nil {
		return *x.WidevineDeviceID
	}
	return ""
}

func (x *AndroidSpamDataBody) GetFSID() string {
	if x != nil && x.FSID != nil {
		return *x.FSID
	}
	return ""
}

func (x *AndroidSpamDataBody) GetOaid() string {
	if x != nil && x.Oaid != nil {
		return *x.Oaid
	}
	return ""
}

func (x *AndroidSpamDataBody) GetTimeCheck() uint32 {
	if x != nil && x.TimeCheck != nil {
		return *x.TimeCheck
	}
	return 0
}

func (x *AndroidSpamDataBody) GetNanoTime() uint32 {
	if x != nil && x.NanoTime != nil {
		return *x.NanoTime
	}
	return 0
}

func (x *AndroidSpamDataBody) GetRefreshtime() uint32 {
	if x != nil && x.Refreshtime != nil {
		return *x.Refreshtime
	}
	return 0
}

func (x *AndroidSpamDataBody) GetSoftConfig() string {
	if x != nil && x.SoftConfig != nil {
		return *x.SoftConfig
	}
	return ""
}

func (x *AndroidSpamDataBody) GetSoftData() []byte {
	if x != nil {
		return x.SoftData
	}
	return nil
}

type AndroidCcdDataBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crc       *uint32              `protobuf:"varint,1,opt,name=Crc" json:"Crc,omitempty"`
	TimeStamp *uint32              `protobuf:"varint,2,opt,name=TimeStamp" json:"TimeStamp,omitempty"`
	Body      *AndroidSpamDataBody `protobuf:"bytes,3,opt,name=Body" json:"Body,omitempty"`
}

func (x *AndroidCcdDataBody) Reset() {
	*x = AndroidCcdDataBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCcdDataBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCcdDataBody) ProtoMessage() {}

func (x *AndroidCcdDataBody) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCcdDataBody.ProtoReflect.Descriptor instead.
func (*AndroidCcdDataBody) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{43}
}

func (x *AndroidCcdDataBody) GetCrc() uint32 {
	if x != nil && x.Crc != nil {
		return *x.Crc
	}
	return 0
}

func (x *AndroidCcdDataBody) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *AndroidCcdDataBody) GetBody() *AndroidSpamDataBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type SpamDataBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnKnown1              *int32      `protobuf:"varint,1,opt,name=unKnown1" json:"unKnown1,omitempty"`
	TimeStamp             *int32      `protobuf:"varint,2,opt,name=timeStamp" json:"timeStamp,omitempty"`
	KeyHash               *int32      `protobuf:"varint,3,opt,name=keyHash" json:"keyHash,omitempty"`
	Yes1                  *string     `protobuf:"bytes,11,opt,name=yes1" json:"yes1,omitempty"`
	Yes2                  *string     `protobuf:"bytes,12,opt,name=yes2" json:"yes2,omitempty"`
	IosVersion            *string     `protobuf:"bytes,13,opt,name=iosVersion" json:"iosVersion,omitempty"`
	DeviceType            *string     `protobuf:"bytes,14,opt,name=deviceType" json:"deviceType,omitempty"`
	UnKnown2              *int32      `protobuf:"varint,15,opt,name=unKnown2" json:"unKnown2,omitempty"`
	IdentifierForVendor   *string     `protobuf:"bytes,16,opt,name=identifierForVendor" json:"identifierForVendor,omitempty"`
	AdvertisingIdentifier *string     `protobuf:"bytes,17,opt,name=advertisingIdentifier" json:"advertisingIdentifier,omitempty"`
	Carrier               *string     `protobuf:"bytes,18,opt,name=carrier" json:"carrier,omitempty"`
	BatteryInfo           *int32      `protobuf:"varint,19,opt,name=batteryInfo" json:"batteryInfo,omitempty"`
	NetworkName           *string     `protobuf:"bytes,20,opt,name=networkName" json:"networkName,omitempty"`
	NetType               *int32      `protobuf:"varint,21,opt,name=netType" json:"netType,omitempty"`
	AppBundleId           *string     `protobuf:"bytes,22,opt,name=appBundleId" json:"appBundleId,omitempty"`
	DeviceName            *string     `protobuf:"bytes,23,opt,name=deviceName" json:"deviceName,omitempty"`
	UserName              *string     `protobuf:"bytes,24,opt,name=userName" json:"userName,omitempty"`
	Unknown3              *int64      `protobuf:"varint,25,opt,name=unknown3" json:"unknown3,omitempty"`
	Unknown4              *int64      `protobuf:"varint,26,opt,name=unknown4" json:"unknown4,omitempty"`
	Unknown5              *int32      `protobuf:"varint,27,opt,name=unknown5" json:"unknown5,omitempty"`
	Unknown6              *int32      `protobuf:"varint,28,opt,name=unknown6" json:"unknown6,omitempty"`
	Lang                  *string     `protobuf:"bytes,29,opt,name=lang" json:"lang,omitempty"`
	Country               *string     `protobuf:"bytes,30,opt,name=country" json:"country,omitempty"`
	Unknown7              *int32      `protobuf:"varint,31,opt,name=unknown7" json:"unknown7,omitempty"`
	DocumentDir           *string     `protobuf:"bytes,32,opt,name=documentDir" json:"documentDir,omitempty"`
	Unknown8              *int32      `protobuf:"varint,33,opt,name=unknown8" json:"unknown8,omitempty"`
	Unknown9              *int32      `protobuf:"varint,34,opt,name=unknown9" json:"unknown9,omitempty"`
	HeadMD5               *string     `protobuf:"bytes,35,opt,name=headMD5" json:"headMD5,omitempty"`
	AppUUID               *string     `protobuf:"bytes,36,opt,name=appUUID" json:"appUUID,omitempty"`
	SyslogUUID            *string     `protobuf:"bytes,37,opt,name=syslogUUID" json:"syslogUUID,omitempty"`
	Unknown10             *string     `protobuf:"bytes,38,opt,name=unknown10" json:"unknown10,omitempty"`
	Unknown11             *string     `protobuf:"bytes,39,opt,name=unknown11" json:"unknown11,omitempty"`
	AppName               *string     `protobuf:"bytes,40,opt,name=appName" json:"appName,omitempty"`
	SshPath               *string     `protobuf:"bytes,41,opt,name=sshPath" json:"sshPath,omitempty"`
	TempTest              *string     `protobuf:"bytes,42,opt,name=tempTest" json:"tempTest,omitempty"`
	DevMD5                *string     `protobuf:"bytes,43,opt,name=devMD5" json:"devMD5,omitempty"`
	DevUser               *string     `protobuf:"bytes,44,opt,name=devUser" json:"devUser,omitempty"`
	DevPrefix             *string     `protobuf:"bytes,45,opt,name=devPrefix" json:"devPrefix,omitempty"`
	AppFileInfo           []*FileInfo `protobuf:"bytes,46,rep,name=appFileInfo" json:"appFileInfo,omitempty"`
	Unknown12             *string     `protobuf:"bytes,47,opt,name=unknown12" json:"unknown12,omitempty"`
	IsModify              *int32      `protobuf:"varint,50,opt,name=isModify" json:"isModify,omitempty"`
	ModifyMD5             *string     `protobuf:"bytes,51,opt,name=modifyMD5" json:"modifyMD5,omitempty"`
	RqtHash               *int64      `protobuf:"varint,52,opt,name=rqtHash" json:"rqtHash,omitempty"`
	Unknown43             *uint64     `protobuf:"varint,53,opt,name=unknown43" json:"unknown43,omitempty"`
	Unknown44             *uint64     `protobuf:"varint,54,opt,name=unknown44" json:"unknown44,omitempty"`
	Unknown45             *uint64     `protobuf:"varint,55,opt,name=unknown45" json:"unknown45,omitempty"`
	Unknown46             *uint64     `protobuf:"varint,56,opt,name=unknown46" json:"unknown46,omitempty"`
	Unknown47             *uint64     `protobuf:"varint,57,opt,name=unknown47" json:"unknown47,omitempty"`
	Unknown48             *string     `protobuf:"bytes,58,opt,name=unknown48" json:"unknown48,omitempty"`
	Unknown49             *string     `protobuf:"bytes,59,opt,name=unknown49" json:"unknown49,omitempty"`
	Unknown50             *string     `protobuf:"bytes,60,opt,name=unknown50" json:"unknown50,omitempty"`
	Unknown51             *string     `protobuf:"bytes,61,opt,name=unknown51" json:"unknown51,omitempty"`
	Unknown52             *uint64     `protobuf:"varint,62,opt,name=unknown52" json:"unknown52,omitempty"`
	Unknown53             *string     `protobuf:"bytes,63,opt,name=unknown53" json:"unknown53,omitempty"`
	Unknown54             *string     `protobuf:"bytes,64,opt,name=unknown54" json:"unknown54,omitempty"`
}

func (x *SpamDataBody) Reset() {
	*x = SpamDataBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpamDataBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpamDataBody) ProtoMessage() {}

func (x *SpamDataBody) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpamDataBody.ProtoReflect.Descriptor instead.
func (*SpamDataBody) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{44}
}

func (x *SpamDataBody) GetUnKnown1() int32 {
	if x != nil && x.UnKnown1 != nil {
		return *x.UnKnown1
	}
	return 0
}

func (x *SpamDataBody) GetTimeStamp() int32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *SpamDataBody) GetKeyHash() int32 {
	if x != nil && x.KeyHash != nil {
		return *x.KeyHash
	}
	return 0
}

func (x *SpamDataBody) GetYes1() string {
	if x != nil && x.Yes1 != nil {
		return *x.Yes1
	}
	return ""
}

func (x *SpamDataBody) GetYes2() string {
	if x != nil && x.Yes2 != nil {
		return *x.Yes2
	}
	return ""
}

func (x *SpamDataBody) GetIosVersion() string {
	if x != nil && x.IosVersion != nil {
		return *x.IosVersion
	}
	return ""
}

func (x *SpamDataBody) GetDeviceType() string {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return ""
}

func (x *SpamDataBody) GetUnKnown2() int32 {
	if x != nil && x.UnKnown2 != nil {
		return *x.UnKnown2
	}
	return 0
}

func (x *SpamDataBody) GetIdentifierForVendor() string {
	if x != nil && x.IdentifierForVendor != nil {
		return *x.IdentifierForVendor
	}
	return ""
}

func (x *SpamDataBody) GetAdvertisingIdentifier() string {
	if x != nil && x.AdvertisingIdentifier != nil {
		return *x.AdvertisingIdentifier
	}
	return ""
}

func (x *SpamDataBody) GetCarrier() string {
	if x != nil && x.Carrier != nil {
		return *x.Carrier
	}
	return ""
}

func (x *SpamDataBody) GetBatteryInfo() int32 {
	if x != nil && x.BatteryInfo != nil {
		return *x.BatteryInfo
	}
	return 0
}

func (x *SpamDataBody) GetNetworkName() string {
	if x != nil && x.NetworkName != nil {
		return *x.NetworkName
	}
	return ""
}

func (x *SpamDataBody) GetNetType() int32 {
	if x != nil && x.NetType != nil {
		return *x.NetType
	}
	return 0
}

func (x *SpamDataBody) GetAppBundleId() string {
	if x != nil && x.AppBundleId != nil {
		return *x.AppBundleId
	}
	return ""
}

func (x *SpamDataBody) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *SpamDataBody) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *SpamDataBody) GetUnknown3() int64 {
	if x != nil && x.Unknown3 != nil {
		return *x.Unknown3
	}
	return 0
}

func (x *SpamDataBody) GetUnknown4() int64 {
	if x != nil && x.Unknown4 != nil {
		return *x.Unknown4
	}
	return 0
}

func (x *SpamDataBody) GetUnknown5() int32 {
	if x != nil && x.Unknown5 != nil {
		return *x.Unknown5
	}
	return 0
}

func (x *SpamDataBody) GetUnknown6() int32 {
	if x != nil && x.Unknown6 != nil {
		return *x.Unknown6
	}
	return 0
}

func (x *SpamDataBody) GetLang() string {
	if x != nil && x.Lang != nil {
		return *x.Lang
	}
	return ""
}

func (x *SpamDataBody) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *SpamDataBody) GetUnknown7() int32 {
	if x != nil && x.Unknown7 != nil {
		return *x.Unknown7
	}
	return 0
}

func (x *SpamDataBody) GetDocumentDir() string {
	if x != nil && x.DocumentDir != nil {
		return *x.DocumentDir
	}
	return ""
}

func (x *SpamDataBody) GetUnknown8() int32 {
	if x != nil && x.Unknown8 != nil {
		return *x.Unknown8
	}
	return 0
}

func (x *SpamDataBody) GetUnknown9() int32 {
	if x != nil && x.Unknown9 != nil {
		return *x.Unknown9
	}
	return 0
}

func (x *SpamDataBody) GetHeadMD5() string {
	if x != nil && x.HeadMD5 != nil {
		return *x.HeadMD5
	}
	return ""
}

func (x *SpamDataBody) GetAppUUID() string {
	if x != nil && x.AppUUID != nil {
		return *x.AppUUID
	}
	return ""
}

func (x *SpamDataBody) GetSyslogUUID() string {
	if x != nil && x.SyslogUUID != nil {
		return *x.SyslogUUID
	}
	return ""
}

func (x *SpamDataBody) GetUnknown10() string {
	if x != nil && x.Unknown10 != nil {
		return *x.Unknown10
	}
	return ""
}

func (x *SpamDataBody) GetUnknown11() string {
	if x != nil && x.Unknown11 != nil {
		return *x.Unknown11
	}
	return ""
}

func (x *SpamDataBody) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *SpamDataBody) GetSshPath() string {
	if x != nil && x.SshPath != nil {
		return *x.SshPath
	}
	return ""
}

func (x *SpamDataBody) GetTempTest() string {
	if x != nil && x.TempTest != nil {
		return *x.TempTest
	}
	return ""
}

func (x *SpamDataBody) GetDevMD5() string {
	if x != nil && x.DevMD5 != nil {
		return *x.DevMD5
	}
	return ""
}

func (x *SpamDataBody) GetDevUser() string {
	if x != nil && x.DevUser != nil {
		return *x.DevUser
	}
	return ""
}

func (x *SpamDataBody) GetDevPrefix() string {
	if x != nil && x.DevPrefix != nil {
		return *x.DevPrefix
	}
	return ""
}

func (x *SpamDataBody) GetAppFileInfo() []*FileInfo {
	if x != nil {
		return x.AppFileInfo
	}
	return nil
}

func (x *SpamDataBody) GetUnknown12() string {
	if x != nil && x.Unknown12 != nil {
		return *x.Unknown12
	}
	return ""
}

func (x *SpamDataBody) GetIsModify() int32 {
	if x != nil && x.IsModify != nil {
		return *x.IsModify
	}
	return 0
}

func (x *SpamDataBody) GetModifyMD5() string {
	if x != nil && x.ModifyMD5 != nil {
		return *x.ModifyMD5
	}
	return ""
}

func (x *SpamDataBody) GetRqtHash() int64 {
	if x != nil && x.RqtHash != nil {
		return *x.RqtHash
	}
	return 0
}

func (x *SpamDataBody) GetUnknown43() uint64 {
	if x != nil && x.Unknown43 != nil {
		return *x.Unknown43
	}
	return 0
}

func (x *SpamDataBody) GetUnknown44() uint64 {
	if x != nil && x.Unknown44 != nil {
		return *x.Unknown44
	}
	return 0
}

func (x *SpamDataBody) GetUnknown45() uint64 {
	if x != nil && x.Unknown45 != nil {
		return *x.Unknown45
	}
	return 0
}

func (x *SpamDataBody) GetUnknown46() uint64 {
	if x != nil && x.Unknown46 != nil {
		return *x.Unknown46
	}
	return 0
}

func (x *SpamDataBody) GetUnknown47() uint64 {
	if x != nil && x.Unknown47 != nil {
		return *x.Unknown47
	}
	return 0
}

func (x *SpamDataBody) GetUnknown48() string {
	if x != nil && x.Unknown48 != nil {
		return *x.Unknown48
	}
	return ""
}

func (x *SpamDataBody) GetUnknown49() string {
	if x != nil && x.Unknown49 != nil {
		return *x.Unknown49
	}
	return ""
}

func (x *SpamDataBody) GetUnknown50() string {
	if x != nil && x.Unknown50 != nil {
		return *x.Unknown50
	}
	return ""
}

func (x *SpamDataBody) GetUnknown51() string {
	if x != nil && x.Unknown51 != nil {
		return *x.Unknown51
	}
	return ""
}

func (x *SpamDataBody) GetUnknown52() uint64 {
	if x != nil && x.Unknown52 != nil {
		return *x.Unknown52
	}
	return 0
}

func (x *SpamDataBody) GetUnknown53() string {
	if x != nil && x.Unknown53 != nil {
		return *x.Unknown53
	}
	return ""
}

func (x *SpamDataBody) GetUnknown54() string {
	if x != nil && x.Unknown54 != nil {
		return *x.Unknown54
	}
	return ""
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filepath *string `protobuf:"bytes,1,opt,name=filepath" json:"filepath,omitempty"`
	Fileuuid *string `protobuf:"bytes,2,opt,name=fileuuid" json:"fileuuid,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{45}
}

func (x *FileInfo) GetFilepath() string {
	if x != nil && x.Filepath != nil {
		return *x.Filepath
	}
	return ""
}

func (x *FileInfo) GetFileuuid() string {
	if x != nil && x.Fileuuid != nil {
		return *x.Fileuuid
	}
	return ""
}

type CryptoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     []byte  `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Type        *uint32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	EncryptData []byte  `protobuf:"bytes,3,opt,name=encryptData" json:"encryptData,omitempty"`
	Timestamp   *uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Unknown5    *uint32 `protobuf:"varint,5,opt,name=unknown5" json:"unknown5,omitempty"`
	Unknown6    *uint32 `protobuf:"varint,6,opt,name=unknown6" json:"unknown6,omitempty"`
}

func (x *CryptoData) Reset() {
	*x = CryptoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoData) ProtoMessage() {}

func (x *CryptoData) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoData.ProtoReflect.Descriptor instead.
func (*CryptoData) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{46}
}

func (x *CryptoData) GetVersion() []byte {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *CryptoData) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CryptoData) GetEncryptData() []byte {
	if x != nil {
		return x.EncryptData
	}
	return nil
}

func (x *CryptoData) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CryptoData) GetUnknown5() uint32 {
	if x != nil && x.Unknown5 != nil {
		return *x.Unknown5
	}
	return 0
}

func (x *CryptoData) GetUnknown6() uint32 {
	if x != nil && x.Unknown6 != nil {
		return *x.Unknown6
	}
	return 0
}

type WCExtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wcstf          *SKBuiltinBufferT `protobuf:"bytes,1,opt,name=wcstf" json:"wcstf,omitempty"`
	Wcste          *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=wcste" json:"wcste,omitempty"`
	CcData         *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=ccData" json:"ccData,omitempty"`
	UserAttrInfo   *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=userAttrInfo" json:"userAttrInfo,omitempty"`
	AcgiDeviceInfo *SKBuiltinBufferT `protobuf:"bytes,5,opt,name=acgiDeviceInfo" json:"acgiDeviceInfo,omitempty"`
	AcgiTuring     *SKBuiltinBufferT `protobuf:"bytes,6,opt,name=acgiTuring" json:"acgiTuring,omitempty"`
	DeviceToken    *SKBuiltinBufferT `protobuf:"bytes,7,opt,name=deviceToken" json:"deviceToken,omitempty"`
	IosturingHuman *SKBuiltinBufferT `protobuf:"bytes,101,opt,name=iosturingHuman" json:"iosturingHuman,omitempty"`
	IosturingOwner *SKBuiltinBufferT `protobuf:"bytes,102,opt,name=iosturingOwner" json:"iosturingOwner,omitempty"`
}

func (x *WCExtInfo) Reset() {
	*x = WCExtInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WCExtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WCExtInfo) ProtoMessage() {}

func (x *WCExtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WCExtInfo.ProtoReflect.Descriptor instead.
func (*WCExtInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{47}
}

func (x *WCExtInfo) GetWcstf() *SKBuiltinBufferT {
	if x != nil {
		return x.Wcstf
	}
	return nil
}

func (x *WCExtInfo) GetWcste() *SKBuiltinBufferT {
	if x != nil {
		return x.Wcste
	}
	return nil
}

func (x *WCExtInfo) GetCcData() *SKBuiltinBufferT {
	if x != nil {
		return x.CcData
	}
	return nil
}

func (x *WCExtInfo) GetUserAttrInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.UserAttrInfo
	}
	return nil
}

func (x *WCExtInfo) GetAcgiDeviceInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.AcgiDeviceInfo
	}
	return nil
}

func (x *WCExtInfo) GetAcgiTuring() *SKBuiltinBufferT {
	if x != nil {
		return x.AcgiTuring
	}
	return nil
}

func (x *WCExtInfo) GetDeviceToken() *SKBuiltinBufferT {
	if x != nil {
		return x.DeviceToken
	}
	return nil
}

func (x *WCExtInfo) GetIosturingHuman() *SKBuiltinBufferT {
	if x != nil {
		return x.IosturingHuman
	}
	return nil
}

func (x *WCExtInfo) GetIosturingOwner() *SKBuiltinBufferT {
	if x != nil {
		return x.IosturingOwner
	}
	return nil
}

type Wcaes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        []byte `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	IV          []byte `protobuf:"bytes,2,opt,name=IV" json:"IV,omitempty"`
	Len         *int32 `protobuf:"varint,3,opt,name=len" json:"len,omitempty"`
	Mztkey      []byte `protobuf:"bytes,4,opt,name=mztkey" json:"mztkey,omitempty"`
	Mztkeyvalue []byte `protobuf:"bytes,5,opt,name=mztkeyvalue" json:"mztkeyvalue,omitempty"`
	Unkown6     []byte `protobuf:"bytes,6,opt,name=unkown6" json:"unkown6,omitempty"`
	Unkown7     []byte `protobuf:"bytes,7,opt,name=unkown7" json:"unkown7,omitempty"`
	Unkown8     []byte `protobuf:"bytes,8,opt,name=unkown8" json:"unkown8,omitempty"`
	Unkown9     []byte `protobuf:"bytes,9,opt,name=unkown9" json:"unkown9,omitempty"`
	Tablekey    []byte `protobuf:"bytes,10,opt,name=tablekey" json:"tablekey,omitempty"`
	Unkown11    []byte `protobuf:"bytes,11,opt,name=unkown11" json:"unkown11,omitempty"`
	Tablevalue  []byte `protobuf:"bytes,12,opt,name=tablevalue" json:"tablevalue,omitempty"`
	Unkown13    []byte `protobuf:"bytes,13,opt,name=unkown13" json:"unkown13,omitempty"`
	Unkown14    []byte `protobuf:"bytes,14,opt,name=unkown14" json:"unkown14,omitempty"`
	Unkown15    []byte `protobuf:"bytes,15,opt,name=unkown15" json:"unkown15,omitempty"`
	Unkown16    []byte `protobuf:"bytes,16,opt,name=unkown16" json:"unkown16,omitempty"`
	Unkown17    []byte `protobuf:"bytes,17,opt,name=unkown17" json:"unkown17,omitempty"`
	Unkown18    []byte `protobuf:"bytes,18,opt,name=unkown18" json:"unkown18,omitempty"`
	Unkown19    []byte `protobuf:"bytes,19,opt,name=unkown19" json:"unkown19,omitempty"`
	Unkown20    []byte `protobuf:"bytes,20,opt,name=unkown20" json:"unkown20,omitempty"`
	Unkown21    []byte `protobuf:"bytes,21,opt,name=unkown21" json:"unkown21,omitempty"`
	Unkown22    []byte `protobuf:"bytes,22,opt,name=unkown22" json:"unkown22,omitempty"`
	Unkown23    []byte `protobuf:"bytes,23,opt,name=unkown23" json:"unkown23,omitempty"`
	Unkown24    []byte `protobuf:"bytes,24,opt,name=unkown24" json:"unkown24,omitempty"`
	Unkown25    []byte `protobuf:"bytes,25,opt,name=unkown25" json:"unkown25,omitempty"`
}

func (x *Wcaes) Reset() {
	*x = Wcaes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wcaes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wcaes) ProtoMessage() {}

func (x *Wcaes) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wcaes.ProtoReflect.Descriptor instead.
func (*Wcaes) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{48}
}

func (x *Wcaes) GetType() []byte {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Wcaes) GetIV() []byte {
	if x != nil {
		return x.IV
	}
	return nil
}

func (x *Wcaes) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Wcaes) GetMztkey() []byte {
	if x != nil {
		return x.Mztkey
	}
	return nil
}

func (x *Wcaes) GetMztkeyvalue() []byte {
	if x != nil {
		return x.Mztkeyvalue
	}
	return nil
}

func (x *Wcaes) GetUnkown6() []byte {
	if x != nil {
		return x.Unkown6
	}
	return nil
}

func (x *Wcaes) GetUnkown7() []byte {
	if x != nil {
		return x.Unkown7
	}
	return nil
}

func (x *Wcaes) GetUnkown8() []byte {
	if x != nil {
		return x.Unkown8
	}
	return nil
}

func (x *Wcaes) GetUnkown9() []byte {
	if x != nil {
		return x.Unkown9
	}
	return nil
}

func (x *Wcaes) GetTablekey() []byte {
	if x != nil {
		return x.Tablekey
	}
	return nil
}

func (x *Wcaes) GetUnkown11() []byte {
	if x != nil {
		return x.Unkown11
	}
	return nil
}

func (x *Wcaes) GetTablevalue() []byte {
	if x != nil {
		return x.Tablevalue
	}
	return nil
}

func (x *Wcaes) GetUnkown13() []byte {
	if x != nil {
		return x.Unkown13
	}
	return nil
}

func (x *Wcaes) GetUnkown14() []byte {
	if x != nil {
		return x.Unkown14
	}
	return nil
}

func (x *Wcaes) GetUnkown15() []byte {
	if x != nil {
		return x.Unkown15
	}
	return nil
}

func (x *Wcaes) GetUnkown16() []byte {
	if x != nil {
		return x.Unkown16
	}
	return nil
}

func (x *Wcaes) GetUnkown17() []byte {
	if x != nil {
		return x.Unkown17
	}
	return nil
}

func (x *Wcaes) GetUnkown18() []byte {
	if x != nil {
		return x.Unkown18
	}
	return nil
}

func (x *Wcaes) GetUnkown19() []byte {
	if x != nil {
		return x.Unkown19
	}
	return nil
}

func (x *Wcaes) GetUnkown20() []byte {
	if x != nil {
		return x.Unkown20
	}
	return nil
}

func (x *Wcaes) GetUnkown21() []byte {
	if x != nil {
		return x.Unkown21
	}
	return nil
}

func (x *Wcaes) GetUnkown22() []byte {
	if x != nil {
		return x.Unkown22
	}
	return nil
}

func (x *Wcaes) GetUnkown23() []byte {
	if x != nil {
		return x.Unkown23
	}
	return nil
}

func (x *Wcaes) GetUnkown24() []byte {
	if x != nil {
		return x.Unkown24
	}
	return nil
}

func (x *Wcaes) GetUnkown25() []byte {
	if x != nil {
		return x.Unkown25
	}
	return nil
}

type NewClientCheckData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C32Cdata  *int64 `protobuf:"varint,1,opt,name=c32cdata" json:"c32cdata,omitempty"`
	TimeStamp *int64 `protobuf:"varint,2,opt,name=timeStamp" json:"timeStamp,omitempty"`
	Databody  []byte `protobuf:"bytes,3,opt,name=databody" json:"databody,omitempty"`
}

func (x *NewClientCheckData) Reset() {
	*x = NewClientCheckData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewClientCheckData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewClientCheckData) ProtoMessage() {}

func (x *NewClientCheckData) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewClientCheckData.ProtoReflect.Descriptor instead.
func (*NewClientCheckData) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{49}
}

func (x *NewClientCheckData) GetC32Cdata() int64 {
	if x != nil && x.C32Cdata != nil {
		return *x.C32Cdata
	}
	return 0
}

func (x *NewClientCheckData) GetTimeStamp() int64 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *NewClientCheckData) GetDatabody() []byte {
	if x != nil {
		return x.Databody
	}
	return nil
}

type CmdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *uint32    `protobuf:"varint,1,opt,name=Count" json:"Count,omitempty"`
	List  []*CmdItem `protobuf:"bytes,2,rep,name=List" json:"List,omitempty"`
}

func (x *CmdList) Reset() {
	*x = CmdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdList) ProtoMessage() {}

func (x *CmdList) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdList.ProtoReflect.Descriptor instead.
func (*CmdList) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{50}
}

func (x *CmdList) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CmdList) GetList() []*CmdItem {
	if x != nil {
		return x.List
	}
	return nil
}

type CmdItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdId  *int32            `protobuf:"varint,1,opt,name=CmdId" json:"CmdId,omitempty"`
	CmdBuf *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=CmdBuf" json:"CmdBuf,omitempty"`
}

func (x *CmdItem) Reset() {
	*x = CmdItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdItem) ProtoMessage() {}

func (x *CmdItem) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdItem.ProtoReflect.Descriptor instead.
func (*CmdItem) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{51}
}

func (x *CmdItem) GetCmdId() int32 {
	if x != nil && x.CmdId != nil {
		return *x.CmdId
	}
	return 0
}

func (x *CmdItem) GetCmdBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.CmdBuf
	}
	return nil
}

type NewSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oplog         *CmdList          `protobuf:"bytes,1,opt,name=oplog" json:"oplog,omitempty"`
	Selector      *uint32           `protobuf:"varint,2,opt,name=selector" json:"selector,omitempty"`
	KeyBuf        *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=keyBuf" json:"keyBuf,omitempty"`
	Scene         *uint32           `protobuf:"varint,4,opt,name=scene" json:"scene,omitempty"`
	DeviceType    *string           `protobuf:"bytes,5,opt,name=deviceType" json:"deviceType,omitempty"`
	SyncMsgDigest *uint32           `protobuf:"varint,6,opt,name=syncMsgDigest" json:"syncMsgDigest,omitempty"`
}

func (x *NewSyncRequest) Reset() {
	*x = NewSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSyncRequest) ProtoMessage() {}

func (x *NewSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSyncRequest.ProtoReflect.Descriptor instead.
func (*NewSyncRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{52}
}

func (x *NewSyncRequest) GetOplog() *CmdList {
	if x != nil {
		return x.Oplog
	}
	return nil
}

func (x *NewSyncRequest) GetSelector() uint32 {
	if x != nil && x.Selector != nil {
		return *x.Selector
	}
	return 0
}

func (x *NewSyncRequest) GetKeyBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.KeyBuf
	}
	return nil
}

func (x *NewSyncRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *NewSyncRequest) GetDeviceType() string {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return ""
}

func (x *NewSyncRequest) GetSyncMsgDigest() uint32 {
	if x != nil && x.SyncMsgDigest != nil {
		return *x.SyncMsgDigest
	}
	return 0
}

type NewSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32            `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	CmdList      *CmdList          `protobuf:"bytes,2,opt,name=CmdList" json:"CmdList,omitempty"`
	ContinueFlag *int32            `protobuf:"varint,3,opt,name=ContinueFlag" json:"ContinueFlag,omitempty"`
	KeyBuf       *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=KeyBuf" json:"KeyBuf,omitempty"`
	Status       *int32            `protobuf:"varint,5,opt,name=Status" json:"Status,omitempty"`
	Continue     *int32            `protobuf:"varint,6,opt,name=Continue" json:"Continue,omitempty"`
	Time         *int32            `protobuf:"varint,7,opt,name=time" json:"time,omitempty"`
}

func (x *NewSyncResponse) Reset() {
	*x = NewSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSyncResponse) ProtoMessage() {}

func (x *NewSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSyncResponse.ProtoReflect.Descriptor instead.
func (*NewSyncResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{53}
}

func (x *NewSyncResponse) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *NewSyncResponse) GetCmdList() *CmdList {
	if x != nil {
		return x.CmdList
	}
	return nil
}

func (x *NewSyncResponse) GetContinueFlag() int32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *NewSyncResponse) GetKeyBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.KeyBuf
	}
	return nil
}

func (x *NewSyncResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *NewSyncResponse) GetContinue() int32 {
	if x != nil && x.Continue != nil {
		return *x.Continue
	}
	return 0
}

func (x *NewSyncResponse) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

// 新设备第一次登录初始化请求
type NewInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest      `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	UserName       *string           `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
	CurrentSynckey *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=CurrentSynckey" json:"CurrentSynckey,omitempty"`
	MaxSynckey     *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=MaxSynckey" json:"MaxSynckey,omitempty"`
	Language       *string           `protobuf:"bytes,5,opt,name=Language" json:"Language,omitempty"`
}

func (x *NewInitRequest) Reset() {
	*x = NewInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewInitRequest) ProtoMessage() {}

func (x *NewInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewInitRequest.ProtoReflect.Descriptor instead.
func (*NewInitRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{54}
}

func (x *NewInitRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *NewInitRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *NewInitRequest) GetCurrentSynckey() *SKBuiltinBufferT {
	if x != nil {
		return x.CurrentSynckey
	}
	return nil
}

func (x *NewInitRequest) GetMaxSynckey() *SKBuiltinBufferT {
	if x != nil {
		return x.MaxSynckey
	}
	return nil
}

func (x *NewInitRequest) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

// 新设备第一次登录初始化服务器响应
type NewInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse   *BaseResponse     `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	CurrentSynckey *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=CurrentSynckey" json:"CurrentSynckey,omitempty"` //二次同步需要带入
	MaxSynckey     *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=MaxSynckey" json:"MaxSynckey,omitempty"`         //二次同步需要带入
	ContinueFlag   *uint32           `protobuf:"varint,4,opt,name=ContinueFlag" json:"ContinueFlag,omitempty"`    //等于1需要继续同步
	SelectBitmap   *uint32           `protobuf:"varint,5,opt,name=SelectBitmap" json:"SelectBitmap,omitempty"`
	CmdCount       *uint32           `protobuf:"varint,6,opt,name=CmdCount" json:"CmdCount,omitempty"`
	CmdList        []*CmdItem        `protobuf:"bytes,7,rep,name=CmdList" json:"CmdList,omitempty"`
	Ratio          *uint32           `protobuf:"varint,8,opt,name=Ratio" json:"Ratio,omitempty"`
}

func (x *NewInitResponse) Reset() {
	*x = NewInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewInitResponse) ProtoMessage() {}

func (x *NewInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewInitResponse.ProtoReflect.Descriptor instead.
func (*NewInitResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{55}
}

func (x *NewInitResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *NewInitResponse) GetCurrentSynckey() *SKBuiltinBufferT {
	if x != nil {
		return x.CurrentSynckey
	}
	return nil
}

func (x *NewInitResponse) GetMaxSynckey() *SKBuiltinBufferT {
	if x != nil {
		return x.MaxSynckey
	}
	return nil
}

func (x *NewInitResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *NewInitResponse) GetSelectBitmap() uint32 {
	if x != nil && x.SelectBitmap != nil {
		return *x.SelectBitmap
	}
	return 0
}

func (x *NewInitResponse) GetCmdCount() uint32 {
	if x != nil && x.CmdCount != nil {
		return *x.CmdCount
	}
	return 0
}

func (x *NewInitResponse) GetCmdList() []*CmdItem {
	if x != nil {
		return x.CmdList
	}
	return nil
}

func (x *NewInitResponse) GetRatio() uint32 {
	if x != nil && x.Ratio != nil {
		return *x.Ratio
	}
	return 0
}

type AutoAuthRsaReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AesEncryptKey *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=aesEncryptKey" json:"aesEncryptKey,omitempty"`
	CliPubEcdhkey *ECDHKey          `protobuf:"bytes,3,opt,name=cliPubEcdhkey" json:"cliPubEcdhkey,omitempty"`
}

func (x *AutoAuthRsaReqData) Reset() {
	*x = AutoAuthRsaReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoAuthRsaReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoAuthRsaReqData) ProtoMessage() {}

func (x *AutoAuthRsaReqData) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoAuthRsaReqData.ProtoReflect.Descriptor instead.
func (*AutoAuthRsaReqData) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{56}
}

func (x *AutoAuthRsaReqData) GetAesEncryptKey() *SKBuiltinBufferT {
	if x != nil {
		return x.AesEncryptKey
	}
	return nil
}

func (x *AutoAuthRsaReqData) GetCliPubEcdhkey() *ECDHKey {
	if x != nil {
		return x.CliPubEcdhkey
	}
	return nil
}

type AutoAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RsaReqData *AutoAuthRsaReqData `protobuf:"bytes,1,opt,name=rsaReqData" json:"rsaReqData,omitempty"`
	AesReqData *AutoAuthAesReqData `protobuf:"bytes,2,opt,name=aesReqData" json:"aesReqData,omitempty"`
}

func (x *AutoAuthRequest) Reset() {
	*x = AutoAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoAuthRequest) ProtoMessage() {}

func (x *AutoAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoAuthRequest.ProtoReflect.Descriptor instead.
func (*AutoAuthRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{57}
}

func (x *AutoAuthRequest) GetRsaReqData() *AutoAuthRsaReqData {
	if x != nil {
		return x.RsaReqData
	}
	return nil
}

func (x *AutoAuthRequest) GetAesReqData() *AutoAuthAesReqData {
	if x != nil {
		return x.AesReqData
	}
	return nil
}

type AutoAuthAesReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest     *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	BaseReqInfo     *BaseAuthReqInfo  `protobuf:"bytes,2,opt,name=baseReqInfo" json:"baseReqInfo,omitempty"`
	AutoAuthKey     *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=autoAuthKey" json:"autoAuthKey,omitempty"`
	Imei            *string           `protobuf:"bytes,4,opt,name=imei" json:"imei,omitempty"`
	SoftType        *string           `protobuf:"bytes,5,opt,name=softType" json:"softType,omitempty"`
	BuiltinIpseq    *uint32           `protobuf:"varint,6,opt,name=builtinIpseq" json:"builtinIpseq,omitempty"`
	ClientSeqId     *string           `protobuf:"bytes,7,opt,name=clientSeqId" json:"clientSeqId,omitempty"`
	Signature       *string           `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
	DeviceName      *string           `protobuf:"bytes,9,opt,name=deviceName" json:"deviceName,omitempty"`
	DeviceType      *string           `protobuf:"bytes,10,opt,name=deviceType" json:"deviceType,omitempty"`
	Language        *string           `protobuf:"bytes,11,opt,name=language" json:"language,omitempty"`
	TimeZone        *string           `protobuf:"bytes,12,opt,name=timeZone" json:"timeZone,omitempty"`
	Channel         *int32            `protobuf:"varint,13,opt,name=channel" json:"channel,omitempty"`
	ClientCheckData *SKBuiltinBufferT `protobuf:"bytes,14,opt,name=clientCheckData" json:"clientCheckData,omitempty"`
	ExtSpamInfo     *SKBuiltinBufferT `protobuf:"bytes,15,opt,name=extSpamInfo" json:"extSpamInfo,omitempty"`
}

func (x *AutoAuthAesReqData) Reset() {
	*x = AutoAuthAesReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoAuthAesReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoAuthAesReqData) ProtoMessage() {}

func (x *AutoAuthAesReqData) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoAuthAesReqData.ProtoReflect.Descriptor instead.
func (*AutoAuthAesReqData) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{58}
}

func (x *AutoAuthAesReqData) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *AutoAuthAesReqData) GetBaseReqInfo() *BaseAuthReqInfo {
	if x != nil {
		return x.BaseReqInfo
	}
	return nil
}

func (x *AutoAuthAesReqData) GetAutoAuthKey() *SKBuiltinBufferT {
	if x != nil {
		return x.AutoAuthKey
	}
	return nil
}

func (x *AutoAuthAesReqData) GetImei() string {
	if x != nil && x.Imei != nil {
		return *x.Imei
	}
	return ""
}

func (x *AutoAuthAesReqData) GetSoftType() string {
	if x != nil && x.SoftType != nil {
		return *x.SoftType
	}
	return ""
}

func (x *AutoAuthAesReqData) GetBuiltinIpseq() uint32 {
	if x != nil && x.BuiltinIpseq != nil {
		return *x.BuiltinIpseq
	}
	return 0
}

func (x *AutoAuthAesReqData) GetClientSeqId() string {
	if x != nil && x.ClientSeqId != nil {
		return *x.ClientSeqId
	}
	return ""
}

func (x *AutoAuthAesReqData) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *AutoAuthAesReqData) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *AutoAuthAesReqData) GetDeviceType() string {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return ""
}

func (x *AutoAuthAesReqData) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *AutoAuthAesReqData) GetTimeZone() string {
	if x != nil && x.TimeZone != nil {
		return *x.TimeZone
	}
	return ""
}

func (x *AutoAuthAesReqData) GetChannel() int32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

func (x *AutoAuthAesReqData) GetClientCheckData() *SKBuiltinBufferT {
	if x != nil {
		return x.ClientCheckData
	}
	return nil
}

func (x *AutoAuthAesReqData) GetExtSpamInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.ExtSpamInfo
	}
	return nil
}

type PushLoginURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest      *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Username         *string           `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Autoauthticket   *string           `protobuf:"bytes,3,opt,name=Autoauthticket" json:"Autoauthticket,omitempty"`
	ClientId         *string           `protobuf:"bytes,4,opt,name=ClientId" json:"ClientId,omitempty"`
	RandomEncryKey   *SKBuiltinBufferT `protobuf:"bytes,5,opt,name=randomEncryKey" json:"randomEncryKey,omitempty"`
	Opcode           *int32            `protobuf:"varint,6,opt,name=Opcode" json:"Opcode,omitempty"`
	Devicename       *string           `protobuf:"bytes,7,opt,name=Devicename" json:"Devicename,omitempty"`
	Autoauthkey      *SKBuiltinBufferT `protobuf:"bytes,8,opt,name=Autoauthkey" json:"Autoauthkey,omitempty"`
	HardwareExtra    *string           `protobuf:"bytes,9,opt,name=HardwareExtra" json:"HardwareExtra,omitempty"`
	MsgContextPubKey *SKBuiltinBufferT `protobuf:"bytes,10,opt,name=MsgContextPubKey" json:"MsgContextPubKey,omitempty"`
}

func (x *PushLoginURLRequest) Reset() {
	*x = PushLoginURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushLoginURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushLoginURLRequest) ProtoMessage() {}

func (x *PushLoginURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushLoginURLRequest.ProtoReflect.Descriptor instead.
func (*PushLoginURLRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{59}
}

func (x *PushLoginURLRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *PushLoginURLRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *PushLoginURLRequest) GetAutoauthticket() string {
	if x != nil && x.Autoauthticket != nil {
		return *x.Autoauthticket
	}
	return ""
}

func (x *PushLoginURLRequest) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *PushLoginURLRequest) GetRandomEncryKey() *SKBuiltinBufferT {
	if x != nil {
		return x.RandomEncryKey
	}
	return nil
}

func (x *PushLoginURLRequest) GetOpcode() int32 {
	if x != nil && x.Opcode != nil {
		return *x.Opcode
	}
	return 0
}

func (x *PushLoginURLRequest) GetDevicename() string {
	if x != nil && x.Devicename != nil {
		return *x.Devicename
	}
	return ""
}

func (x *PushLoginURLRequest) GetAutoauthkey() *SKBuiltinBufferT {
	if x != nil {
		return x.Autoauthkey
	}
	return nil
}

func (x *PushLoginURLRequest) GetHardwareExtra() string {
	if x != nil && x.HardwareExtra != nil {
		return *x.HardwareExtra
	}
	return ""
}

func (x *PushLoginURLRequest) GetMsgContextPubKey() *SKBuiltinBufferT {
	if x != nil {
		return x.MsgContextPubKey
	}
	return nil
}

type BufferT struct {
	ILen                 *uint32  `protobuf:"varint,1,req,name=iLen" json:"iLen,omitempty"`
	Buffer               []byte   `protobuf:"bytes,2,opt,name=Buffer" json:"Buffer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BufferT) Reset()         { *m = BufferT{} }
func (m *BufferT) String() string { return proto.CompactTextString(m) }
func (*BufferT) ProtoMessage()    {}
func (*BufferT) Descriptor() ([]byte, []int) {
	return fileDescriptor_e74b134486e7456c, []int{4}
}

func (m *BufferT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BufferT.Unmarshal(m, b)
}
func (m *BufferT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BufferT.Marshal(b, m, deterministic)
}
func (m *BufferT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BufferT.Merge(m, src)
}
func (m *BufferT) XXX_Size() int {
	return xxx_messageInfo_BufferT.Size(m)
}
func (m *BufferT) XXX_DiscardUnknown() {
	xxx_messageInfo_BufferT.DiscardUnknown(m)
}

var xxx_messageInfo_BufferT proto.InternalMessageInfo

func (m *BufferT) GetILen() uint32 {
	if m != nil && m.ILen != nil {
		return *m.ILen
	}
	return 0
}

func (m *BufferT) GetBuffer() []byte {
	if m != nil {
		return m.Buffer
	}
	return nil
}


type PushLoginURLResponse struct {
	BaseResponse              *BaseResponse `protobuf:"bytes,1,req,name=BaseResponse" json:"BaseResponse,omitempty"`
	UUID                      *string       `protobuf:"bytes,2,opt,name=UUID" json:"UUID,omitempty"`
	NotifyKey                 *BufferT      `protobuf:"bytes,3,req,name=NotifyKey" json:"NotifyKey,omitempty"`
	CheckTime                 *uint32       `protobuf:"varint,4,req,name=CheckTime" json:"CheckTime,omitempty"`
	ExpiredTime               *uint32       `protobuf:"varint,5,req,name=ExpiredTime" json:"ExpiredTime,omitempty"`
	BlueToothBroadCastUUID    *string       `protobuf:"bytes,6,opt,name=BlueToothBroadCastUUID" json:"BlueToothBroadCastUUID,omitempty"`
	BlueToothBroadCastContent *BufferT      `protobuf:"bytes,7,opt,name=BlueToothBroadCastContent" json:"BlueToothBroadCastContent,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}      `json:"-"`
	XXX_unrecognized          []byte        `json:"-"`
	XXX_sizecache             int32         `json:"-"`
}

func (m *PushLoginURLResponse) Reset()         { *m = PushLoginURLResponse{} }
func (m *PushLoginURLResponse) String() string { return proto.CompactTextString(m) }
func (*PushLoginURLResponse) ProtoMessage()    {}
func (*PushLoginURLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e74b134486e7456c, []int{170}
}

func (m *PushLoginURLResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushLoginURLResponse.Unmarshal(m, b)
}
func (m *PushLoginURLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushLoginURLResponse.Marshal(b, m, deterministic)
}
func (m *PushLoginURLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushLoginURLResponse.Merge(m, src)
}
func (m *PushLoginURLResponse) XXX_Size() int {
	return xxx_messageInfo_PushLoginURLResponse.Size(m)
}
func (m *PushLoginURLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PushLoginURLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PushLoginURLResponse proto.InternalMessageInfo

func (m *PushLoginURLResponse) GetBaseResponse() *BaseResponse {
	if m != nil {
		return m.BaseResponse
	}
	return nil
}

func (m *PushLoginURLResponse) GetUUID() string {
	if m != nil && m.UUID != nil {
		return *m.UUID
	}
	return ""
}

func (m *PushLoginURLResponse) GetNotifyKey() *BufferT {
	if m != nil {
		return m.NotifyKey
	}
	return nil
}

func (m *PushLoginURLResponse) GetCheckTime() uint32 {
	if m != nil && m.CheckTime != nil {
		return *m.CheckTime
	}
	return 0
}

func (m *PushLoginURLResponse) GetExpiredTime() uint32 {
	if m != nil && m.ExpiredTime != nil {
		return *m.ExpiredTime
	}
	return 0
}

func (m *PushLoginURLResponse) GetBlueToothBroadCastUUID() string {
	if m != nil && m.BlueToothBroadCastUUID != nil {
		return *m.BlueToothBroadCastUUID
	}
	return ""
}

func (m *PushLoginURLResponse) GetBlueToothBroadCastContent() *BufferT {
	if m != nil {
		return m.BlueToothBroadCastContent
	}
	return nil
}


type NewSendMsgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cnt  *int32    `protobuf:"varint,1,opt,name=cnt" json:"cnt,omitempty"`
	Info *ChatInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (x *NewSendMsgRequest) Reset() {
	*x = NewSendMsgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSendMsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSendMsgRequest) ProtoMessage() {}

func (x *NewSendMsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSendMsgRequest.ProtoReflect.Descriptor instead.
func (*NewSendMsgRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{61}
}

func (x *NewSendMsgRequest) GetCnt() int32 {
	if x != nil && x.Cnt != nil {
		return *x.Cnt
	}
	return 0
}

func (x *NewSendMsgRequest) GetInfo() *ChatInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type NewSendMsgRespone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse       `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	Count        *int32              `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
	List         []*NewMsgResponeNew `protobuf:"bytes,3,rep,name=List" json:"List,omitempty"`
	NoKnow       *int32              `protobuf:"varint,4,opt,name=NoKnow" json:"NoKnow,omitempty"`
}

func (x *NewSendMsgRespone) Reset() {
	*x = NewSendMsgRespone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSendMsgRespone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSendMsgRespone) ProtoMessage() {}

func (x *NewSendMsgRespone) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSendMsgRespone.ProtoReflect.Descriptor instead.
func (*NewSendMsgRespone) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{62}
}

func (x *NewSendMsgRespone) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *NewSendMsgRespone) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *NewSendMsgRespone) GetList() []*NewMsgResponeNew {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *NewSendMsgRespone) GetNoKnow() int32 {
	if x != nil && x.NoKnow != nil {
		return *x.NoKnow
	}
	return 0
}

type NewMsgResponeNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret         *int64            `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	ToUsetName  *SKBuiltinStringT `protobuf:"bytes,2,opt,name=ToUsetName" json:"ToUsetName,omitempty"`
	MsgId       *uint64           `protobuf:"varint,3,opt,name=MsgId" json:"MsgId,omitempty"`
	ClientMsgid *uint64           `protobuf:"varint,4,opt,name=ClientMsgid" json:"ClientMsgid,omitempty"`
	Createtime  *uint32           `protobuf:"varint,5,opt,name=Createtime" json:"Createtime,omitempty"`
	Servertime  *uint32           `protobuf:"varint,6,opt,name=servertime" json:"servertime,omitempty"`
	Type        *uint32           `protobuf:"varint,7,opt,name=Type" json:"Type,omitempty"`
	NewMsgId    *uint64           `protobuf:"varint,8,opt,name=NewMsgId" json:"NewMsgId,omitempty"`
}

func (x *NewMsgResponeNew) Reset() {
	*x = NewMsgResponeNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMsgResponeNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMsgResponeNew) ProtoMessage() {}

func (x *NewMsgResponeNew) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMsgResponeNew.ProtoReflect.Descriptor instead.
func (*NewMsgResponeNew) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{63}
}

func (x *NewMsgResponeNew) GetRet() int64 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *NewMsgResponeNew) GetToUsetName() *SKBuiltinStringT {
	if x != nil {
		return x.ToUsetName
	}
	return nil
}

func (x *NewMsgResponeNew) GetMsgId() uint64 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *NewMsgResponeNew) GetClientMsgid() uint64 {
	if x != nil && x.ClientMsgid != nil {
		return *x.ClientMsgid
	}
	return 0
}

func (x *NewMsgResponeNew) GetCreatetime() uint32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return 0
}

func (x *NewMsgResponeNew) GetServertime() uint32 {
	if x != nil && x.Servertime != nil {
		return *x.Servertime
	}
	return 0
}

func (x *NewMsgResponeNew) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *NewMsgResponeNew) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

// ===========撤回消息
type RevokeMsgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	ClientMsgId    *string      `protobuf:"bytes,2,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	NewClientMsgId *uint64      `protobuf:"varint,3,opt,name=newClientMsgId" json:"newClientMsgId,omitempty"`
	CreateTime     *uint64      `protobuf:"varint,4,opt,name=createTime" json:"createTime,omitempty"`
	IndexOfRequest *uint64      `protobuf:"varint,5,opt,name=indexOfRequest" json:"indexOfRequest,omitempty"`
	FromUserName   *string      `protobuf:"bytes,6,opt,name=FromUserName" json:"FromUserName,omitempty"`
	ToUserName     *string      `protobuf:"bytes,7,opt,name=ToUserName" json:"ToUserName,omitempty"`
	MsgId          *uint64      `protobuf:"varint,8,opt,name=MsgId" json:"MsgId,omitempty"`
	NewMsgId       *uint64      `protobuf:"varint,9,opt,name=NewMsgId" json:"NewMsgId,omitempty"`
}

func (x *RevokeMsgRequest) Reset() {
	*x = RevokeMsgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeMsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeMsgRequest) ProtoMessage() {}

func (x *RevokeMsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeMsgRequest.ProtoReflect.Descriptor instead.
func (*RevokeMsgRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{64}
}

func (x *RevokeMsgRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *RevokeMsgRequest) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *RevokeMsgRequest) GetNewClientMsgId() uint64 {
	if x != nil && x.NewClientMsgId != nil {
		return *x.NewClientMsgId
	}
	return 0
}

func (x *RevokeMsgRequest) GetCreateTime() uint64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *RevokeMsgRequest) GetIndexOfRequest() uint64 {
	if x != nil && x.IndexOfRequest != nil {
		return *x.IndexOfRequest
	}
	return 0
}

func (x *RevokeMsgRequest) GetFromUserName() string {
	if x != nil && x.FromUserName != nil {
		return *x.FromUserName
	}
	return ""
}

func (x *RevokeMsgRequest) GetToUserName() string {
	if x != nil && x.ToUserName != nil {
		return *x.ToUserName
	}
	return ""
}

func (x *RevokeMsgRequest) GetMsgId() uint64 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *RevokeMsgRequest) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

type RevokeMsgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	Introduction *string       `protobuf:"bytes,2,opt,name=introduction" json:"introduction,omitempty"`
	IsysWording  *string       `protobuf:"bytes,3,opt,name=isysWording" json:"isysWording,omitempty"`
}

func (x *RevokeMsgResponse) Reset() {
	*x = RevokeMsgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeMsgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeMsgResponse) ProtoMessage() {}

func (x *RevokeMsgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeMsgResponse.ProtoReflect.Descriptor instead.
func (*RevokeMsgResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{65}
}

func (x *RevokeMsgResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *RevokeMsgResponse) GetIntroduction() string {
	if x != nil && x.Introduction != nil {
		return *x.Introduction
	}
	return ""
}

func (x *RevokeMsgResponse) GetIsysWording() string {
	if x != nil && x.IsysWording != nil {
		return *x.IsysWording
	}
	return ""
}

type ChatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Toid        *SKBuiltinStringT `protobuf:"bytes,1,opt,name=toid" json:"toid,omitempty"`
	Content     *string           `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	Type        *int64            `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Utc         *int64            `protobuf:"varint,4,opt,name=utc" json:"utc,omitempty"`
	ClientMsgId *uint64           `protobuf:"varint,5,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	MsgSource   *string           `protobuf:"bytes,6,opt,name=msgSource" json:"msgSource,omitempty"`
}

func (x *ChatInfo) Reset() {
	*x = ChatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatInfo) ProtoMessage() {}

func (x *ChatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatInfo.ProtoReflect.Descriptor instead.
func (*ChatInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{66}
}

func (x *ChatInfo) GetToid() *SKBuiltinStringT {
	if x != nil {
		return x.Toid
	}
	return nil
}

func (x *ChatInfo) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *ChatInfo) GetType() int64 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ChatInfo) GetUtc() int64 {
	if x != nil && x.Utc != nil {
		return *x.Utc
	}
	return 0
}

func (x *ChatInfo) GetClientMsgId() uint64 {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return 0
}

func (x *ChatInfo) GetMsgSource() string {
	if x != nil && x.MsgSource != nil {
		return *x.MsgSource
	}
	return ""
}

type AutoAuthKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptKey *SKBuiltinBufferT `protobuf:"bytes,1,opt,name=EncryptKey" json:"EncryptKey,omitempty"`
	Key        *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
}

func (x *AutoAuthKey) Reset() {
	*x = AutoAuthKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoAuthKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoAuthKey) ProtoMessage() {}

func (x *AutoAuthKey) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoAuthKey.ProtoReflect.Descriptor instead.
func (*AutoAuthKey) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{67}
}

func (x *AutoAuthKey) GetEncryptKey() *SKBuiltinBufferT {
	if x != nil {
		return x.EncryptKey
	}
	return nil
}

func (x *AutoAuthKey) GetKey() *SKBuiltinBufferT {
	if x != nil {
		return x.Key
	}
	return nil
}

type SnsUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnsFlag       *uint32 `protobuf:"varint,1,opt,name=SnsFlag" json:"SnsFlag,omitempty"`
	SnsBgimgId    *string `protobuf:"bytes,2,opt,name=SnsBgimgId" json:"SnsBgimgId,omitempty"`
	SnsBgobjectId *uint64 `protobuf:"varint,3,opt,name=SnsBgobjectId" json:"SnsBgobjectId,omitempty"`
	SnsFlagEx     *uint32 `protobuf:"varint,4,opt,name=SnsFlagEx" json:"SnsFlagEx,omitempty"`
}

func (x *SnsUserInfo) Reset() {
	*x = SnsUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsUserInfo) ProtoMessage() {}

func (x *SnsUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsUserInfo.ProtoReflect.Descriptor instead.
func (*SnsUserInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{68}
}

func (x *SnsUserInfo) GetSnsFlag() uint32 {
	if x != nil && x.SnsFlag != nil {
		return *x.SnsFlag
	}
	return 0
}

func (x *SnsUserInfo) GetSnsBgimgId() string {
	if x != nil && x.SnsBgimgId != nil {
		return *x.SnsBgimgId
	}
	return ""
}

func (x *SnsUserInfo) GetSnsBgobjectId() uint64 {
	if x != nil && x.SnsBgobjectId != nil {
		return *x.SnsBgobjectId
	}
	return 0
}

func (x *SnsUserInfo) GetSnsFlagEx() uint32 {
	if x != nil && x.SnsFlagEx != nil {
		return *x.SnsFlagEx
	}
	return 0
}

type SnsServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostMentionLimit      *int32 `protobuf:"varint,1,opt,name=PostMentionLimit" json:"PostMentionLimit,omitempty"`
	CopyAndPasteWordLimit *int32 `protobuf:"varint,2,opt,name=CopyAndPasteWordLimit" json:"CopyAndPasteWordLimit,omitempty"`
}

func (x *SnsServerConfig) Reset() {
	*x = SnsServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsServerConfig) ProtoMessage() {}

func (x *SnsServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsServerConfig.ProtoReflect.Descriptor instead.
func (*SnsServerConfig) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{69}
}

func (x *SnsServerConfig) GetPostMentionLimit() int32 {
	if x != nil && x.PostMentionLimit != nil {
		return *x.PostMentionLimit
	}
	return 0
}

func (x *SnsServerConfig) GetCopyAndPasteWordLimit() int32 {
	if x != nil && x.CopyAndPasteWordLimit != nil {
		return *x.CopyAndPasteWordLimit
	}
	return 0
}

type SnsObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *uint64             `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Username             *string             `protobuf:"bytes,2,opt,name=Username" json:"Username,omitempty"`
	Nickname             *string             `protobuf:"bytes,3,opt,name=Nickname" json:"Nickname,omitempty"`
	CreateTime           *uint32             `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty"`
	ObjectDesc           *SKBuiltinString_S  `protobuf:"bytes,5,opt,name=ObjectDesc" json:"ObjectDesc,omitempty"`
	LikeFlag             *uint32             `protobuf:"varint,6,opt,name=LikeFlag" json:"LikeFlag,omitempty"`
	LikeCount            *uint32             `protobuf:"varint,7,opt,name=LikeCount" json:"LikeCount,omitempty"`
	LikeUserListCount    *uint32             `protobuf:"varint,8,opt,name=LikeUserListCount" json:"LikeUserListCount,omitempty"`
	LikeUserList         []*SnsCommentInfo   `protobuf:"bytes,9,rep,name=LikeUserList" json:"LikeUserList,omitempty"`
	CommentCount         *uint32             `protobuf:"varint,10,opt,name=CommentCount" json:"CommentCount,omitempty"`
	CommentUserListCount *uint32             `protobuf:"varint,11,opt,name=CommentUserListCount" json:"CommentUserListCount,omitempty"`
	CommentUserList      []*SnsCommentInfo   `protobuf:"bytes,12,rep,name=CommentUserList" json:"CommentUserList,omitempty"`
	WithUserCount        *uint32             `protobuf:"varint,13,opt,name=WithUserCount" json:"WithUserCount,omitempty"`
	WithUserListCount    *uint32             `protobuf:"varint,14,opt,name=WithUserListCount" json:"WithUserListCount,omitempty"`
	WithUserList         []*SnsCommentInfo   `protobuf:"bytes,15,rep,name=WithUserList" json:"WithUserList,omitempty"`
	ExtFlag              *uint32             `protobuf:"varint,16,opt,name=ExtFlag" json:"ExtFlag,omitempty"`
	NoChange             *uint32             `protobuf:"varint,17,opt,name=NoChange" json:"NoChange,omitempty"`
	GroupCount           *uint32             `protobuf:"varint,18,opt,name=GroupCount" json:"GroupCount,omitempty"`
	GroupList            []*SnsGroup         `protobuf:"bytes,19,rep,name=GroupList" json:"GroupList,omitempty"`
	IsNotRichText        *uint32             `protobuf:"varint,20,opt,name=IsNotRichText" json:"IsNotRichText,omitempty"`
	ReferUsername        *string             `protobuf:"bytes,21,opt,name=ReferUsername" json:"ReferUsername,omitempty"`
	ReferId              *uint64             `protobuf:"varint,22,opt,name=ReferId" json:"ReferId,omitempty"`
	BlackListCount       *uint32             `protobuf:"varint,23,opt,name=BlackListCount" json:"BlackListCount,omitempty"`
	BlackList            []*SKBuiltinBufferT `protobuf:"bytes,24,rep,name=BlackList" json:"BlackList,omitempty"`
	DeleteFlag           *uint32             `protobuf:"varint,25,opt,name=DeleteFlag" json:"DeleteFlag,omitempty"`
	GroupUserCount       *uint32             `protobuf:"varint,26,opt,name=GroupUserCount" json:"GroupUserCount,omitempty"`
	GroupUser            []*SKBuiltinBufferT `protobuf:"bytes,27,rep,name=GroupUser" json:"GroupUser,omitempty"`
	ObjectOperations     []*SKBuiltinBufferT `protobuf:"bytes,28,rep,name=ObjectOperations" json:"ObjectOperations,omitempty"`
	SnsRedEnvelops       *SnsRedEnvelops     `protobuf:"bytes,29,opt,name=SnsRedEnvelops" json:"SnsRedEnvelops,omitempty"`
	PreDownloadInfo      *PreDownloadInfo    `protobuf:"bytes,30,opt,name=PreDownloadInfo" json:"PreDownloadInfo,omitempty"`
	WeAppInfo            *SnsWeAppInfo       `protobuf:"bytes,31,opt,name=WeAppInfo" json:"WeAppInfo,omitempty"`
}

func (x *SnsObject) Reset() {
	*x = SnsObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsObject) ProtoMessage() {}

func (x *SnsObject) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsObject.ProtoReflect.Descriptor instead.
func (*SnsObject) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{70}
}

func (x *SnsObject) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SnsObject) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *SnsObject) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *SnsObject) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *SnsObject) GetObjectDesc() *SKBuiltinString_S {
	if x != nil {
		return x.ObjectDesc
	}
	return nil
}

func (x *SnsObject) GetLikeFlag() uint32 {
	if x != nil && x.LikeFlag != nil {
		return *x.LikeFlag
	}
	return 0
}

func (x *SnsObject) GetLikeCount() uint32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *SnsObject) GetLikeUserListCount() uint32 {
	if x != nil && x.LikeUserListCount != nil {
		return *x.LikeUserListCount
	}
	return 0
}

func (x *SnsObject) GetLikeUserList() []*SnsCommentInfo {
	if x != nil {
		return x.LikeUserList
	}
	return nil
}

func (x *SnsObject) GetCommentCount() uint32 {
	if x != nil && x.CommentCount != nil {
		return *x.CommentCount
	}
	return 0
}

func (x *SnsObject) GetCommentUserListCount() uint32 {
	if x != nil && x.CommentUserListCount != nil {
		return *x.CommentUserListCount
	}
	return 0
}

func (x *SnsObject) GetCommentUserList() []*SnsCommentInfo {
	if x != nil {
		return x.CommentUserList
	}
	return nil
}

func (x *SnsObject) GetWithUserCount() uint32 {
	if x != nil && x.WithUserCount != nil {
		return *x.WithUserCount
	}
	return 0
}

func (x *SnsObject) GetWithUserListCount() uint32 {
	if x != nil && x.WithUserListCount != nil {
		return *x.WithUserListCount
	}
	return 0
}

func (x *SnsObject) GetWithUserList() []*SnsCommentInfo {
	if x != nil {
		return x.WithUserList
	}
	return nil
}

func (x *SnsObject) GetExtFlag() uint32 {
	if x != nil && x.ExtFlag != nil {
		return *x.ExtFlag
	}
	return 0
}

func (x *SnsObject) GetNoChange() uint32 {
	if x != nil && x.NoChange != nil {
		return *x.NoChange
	}
	return 0
}

func (x *SnsObject) GetGroupCount() uint32 {
	if x != nil && x.GroupCount != nil {
		return *x.GroupCount
	}
	return 0
}

func (x *SnsObject) GetGroupList() []*SnsGroup {
	if x != nil {
		return x.GroupList
	}
	return nil
}

func (x *SnsObject) GetIsNotRichText() uint32 {
	if x != nil && x.IsNotRichText != nil {
		return *x.IsNotRichText
	}
	return 0
}

func (x *SnsObject) GetReferUsername() string {
	if x != nil && x.ReferUsername != nil {
		return *x.ReferUsername
	}
	return ""
}

func (x *SnsObject) GetReferId() uint64 {
	if x != nil && x.ReferId != nil {
		return *x.ReferId
	}
	return 0
}

func (x *SnsObject) GetBlackListCount() uint32 {
	if x != nil && x.BlackListCount != nil {
		return *x.BlackListCount
	}
	return 0
}

func (x *SnsObject) GetBlackList() []*SKBuiltinBufferT {
	if x != nil {
		return x.BlackList
	}
	return nil
}

func (x *SnsObject) GetDeleteFlag() uint32 {
	if x != nil && x.DeleteFlag != nil {
		return *x.DeleteFlag
	}
	return 0
}

func (x *SnsObject) GetGroupUserCount() uint32 {
	if x != nil && x.GroupUserCount != nil {
		return *x.GroupUserCount
	}
	return 0
}

func (x *SnsObject) GetGroupUser() []*SKBuiltinBufferT {
	if x != nil {
		return x.GroupUser
	}
	return nil
}

func (x *SnsObject) GetObjectOperations() []*SKBuiltinBufferT {
	if x != nil {
		return x.ObjectOperations
	}
	return nil
}

func (x *SnsObject) GetSnsRedEnvelops() *SnsRedEnvelops {
	if x != nil {
		return x.SnsRedEnvelops
	}
	return nil
}

func (x *SnsObject) GetPreDownloadInfo() *PreDownloadInfo {
	if x != nil {
		return x.PreDownloadInfo
	}
	return nil
}

func (x *SnsObject) GetWeAppInfo() *SnsWeAppInfo {
	if x != nil {
		return x.WeAppInfo
	}
	return nil
}

type SnsCommentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username        *string `protobuf:"bytes,1,opt,name=Username" json:"Username,omitempty"`
	Nickname        *string `protobuf:"bytes,2,opt,name=Nickname" json:"Nickname,omitempty"`
	Source          *uint32 `protobuf:"varint,3,opt,name=Source" json:"Source,omitempty"`
	Type            *uint32 `protobuf:"varint,4,opt,name=Type" json:"Type,omitempty"`
	Content         *string `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty"`
	CreateTime      *uint32 `protobuf:"varint,6,opt,name=CreateTime" json:"CreateTime,omitempty"`
	CommentId       *int32  `protobuf:"varint,7,opt,name=CommentId" json:"CommentId,omitempty"`
	ReplyCommentId  *int32  `protobuf:"varint,8,opt,name=ReplyCommentId" json:"ReplyCommentId,omitempty"`
	ReplyUsername   *string `protobuf:"bytes,9,opt,name=ReplyUsername" json:"ReplyUsername,omitempty"`
	IsNotRichText   *uint32 `protobuf:"varint,10,opt,name=IsNotRichText" json:"IsNotRichText,omitempty"`
	ReplyCommentId2 *uint64 `protobuf:"varint,11,opt,name=ReplyCommentId2" json:"ReplyCommentId2,omitempty"`
	CommentId2      *uint64 `protobuf:"varint,12,opt,name=CommentId2" json:"CommentId2,omitempty"`
	DeleteFlag      *uint32 `protobuf:"varint,13,opt,name=DeleteFlag" json:"DeleteFlag,omitempty"`
	CommentFlag     *uint32 `protobuf:"varint,14,opt,name=CommentFlag" json:"CommentFlag,omitempty"`
}

func (x *SnsCommentInfo) Reset() {
	*x = SnsCommentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsCommentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsCommentInfo) ProtoMessage() {}

func (x *SnsCommentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsCommentInfo.ProtoReflect.Descriptor instead.
func (*SnsCommentInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{71}
}

func (x *SnsCommentInfo) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *SnsCommentInfo) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *SnsCommentInfo) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *SnsCommentInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *SnsCommentInfo) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *SnsCommentInfo) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *SnsCommentInfo) GetCommentId() int32 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *SnsCommentInfo) GetReplyCommentId() int32 {
	if x != nil && x.ReplyCommentId != nil {
		return *x.ReplyCommentId
	}
	return 0
}

func (x *SnsCommentInfo) GetReplyUsername() string {
	if x != nil && x.ReplyUsername != nil {
		return *x.ReplyUsername
	}
	return ""
}

func (x *SnsCommentInfo) GetIsNotRichText() uint32 {
	if x != nil && x.IsNotRichText != nil {
		return *x.IsNotRichText
	}
	return 0
}

func (x *SnsCommentInfo) GetReplyCommentId2() uint64 {
	if x != nil && x.ReplyCommentId2 != nil {
		return *x.ReplyCommentId2
	}
	return 0
}

func (x *SnsCommentInfo) GetCommentId2() uint64 {
	if x != nil && x.CommentId2 != nil {
		return *x.CommentId2
	}
	return 0
}

func (x *SnsCommentInfo) GetDeleteFlag() uint32 {
	if x != nil && x.DeleteFlag != nil {
		return *x.DeleteFlag
	}
	return 0
}

func (x *SnsCommentInfo) GetCommentFlag() uint32 {
	if x != nil && x.CommentFlag != nil {
		return *x.CommentFlag
	}
	return 0
}

type SnsGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId *uint64 `protobuf:"varint,1,opt,name=GroupId" json:"GroupId,omitempty"`
}

func (x *SnsGroup) Reset() {
	*x = SnsGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsGroup) ProtoMessage() {}

func (x *SnsGroup) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsGroup.ProtoReflect.Descriptor instead.
func (*SnsGroup) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{72}
}

func (x *SnsGroup) GetGroupId() uint64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

type SnsRedEnvelops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardCount    *uint32 `protobuf:"varint,1,opt,name=RewardCount" json:"RewardCount,omitempty"`
	RewardUserList []byte  `protobuf:"bytes,2,opt,name=RewardUserList" json:"RewardUserList,omitempty"`
	ReportId       *uint32 `protobuf:"varint,3,opt,name=ReportId" json:"ReportId,omitempty"`
	ReportKey      *uint32 `protobuf:"varint,4,opt,name=ReportKey" json:"ReportKey,omitempty"`
	ResourceId     *uint32 `protobuf:"varint,5,opt,name=ResourceId" json:"ResourceId,omitempty"`
}

func (x *SnsRedEnvelops) Reset() {
	*x = SnsRedEnvelops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsRedEnvelops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsRedEnvelops) ProtoMessage() {}

func (x *SnsRedEnvelops) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsRedEnvelops.ProtoReflect.Descriptor instead.
func (*SnsRedEnvelops) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{73}
}

func (x *SnsRedEnvelops) GetRewardCount() uint32 {
	if x != nil && x.RewardCount != nil {
		return *x.RewardCount
	}
	return 0
}

func (x *SnsRedEnvelops) GetRewardUserList() []byte {
	if x != nil {
		return x.RewardUserList
	}
	return nil
}

func (x *SnsRedEnvelops) GetReportId() uint32 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

func (x *SnsRedEnvelops) GetReportKey() uint32 {
	if x != nil && x.ReportKey != nil {
		return *x.ReportKey
	}
	return 0
}

func (x *SnsRedEnvelops) GetResourceId() uint32 {
	if x != nil && x.ResourceId != nil {
		return *x.ResourceId
	}
	return 0
}

type PreDownloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreDownloadPercent *uint32 `protobuf:"varint,1,opt,name=PreDownloadPercent" json:"PreDownloadPercent,omitempty"`
	PreDownloadNetType *uint32 `protobuf:"varint,2,opt,name=PreDownloadNetType" json:"PreDownloadNetType,omitempty"`
	NoPreDownloadRange *string `protobuf:"bytes,3,opt,name=NoPreDownloadRange" json:"NoPreDownloadRange,omitempty"`
}

func (x *PreDownloadInfo) Reset() {
	*x = PreDownloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreDownloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreDownloadInfo) ProtoMessage() {}

func (x *PreDownloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreDownloadInfo.ProtoReflect.Descriptor instead.
func (*PreDownloadInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{74}
}

func (x *PreDownloadInfo) GetPreDownloadPercent() uint32 {
	if x != nil && x.PreDownloadPercent != nil {
		return *x.PreDownloadPercent
	}
	return 0
}

func (x *PreDownloadInfo) GetPreDownloadNetType() uint32 {
	if x != nil && x.PreDownloadNetType != nil {
		return *x.PreDownloadNetType
	}
	return 0
}

func (x *PreDownloadInfo) GetNoPreDownloadRange() string {
	if x != nil && x.NoPreDownloadRange != nil {
		return *x.NoPreDownloadRange
	}
	return ""
}

type SnsWeAppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapPoiId    *string `protobuf:"bytes,1,opt,name=MapPoiId" json:"MapPoiId,omitempty"`
	AppId       *uint32 `protobuf:"varint,2,opt,name=AppId" json:"AppId,omitempty"`
	UserName    *string `protobuf:"bytes,3,opt,name=UserName" json:"UserName,omitempty"`
	RedirectUrl *string `protobuf:"bytes,4,opt,name=RedirectUrl" json:"RedirectUrl,omitempty"`
	ShowType    *uint32 `protobuf:"varint,5,opt,name=ShowType" json:"ShowType,omitempty"`
	RScore      *uint32 `protobuf:"varint,6,opt,name=RScore" json:"RScore,omitempty"`
}

func (x *SnsWeAppInfo) Reset() {
	*x = SnsWeAppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsWeAppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsWeAppInfo) ProtoMessage() {}

func (x *SnsWeAppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsWeAppInfo.ProtoReflect.Descriptor instead.
func (*SnsWeAppInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{75}
}

func (x *SnsWeAppInfo) GetMapPoiId() string {
	if x != nil && x.MapPoiId != nil {
		return *x.MapPoiId
	}
	return ""
}

func (x *SnsWeAppInfo) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *SnsWeAppInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *SnsWeAppInfo) GetRedirectUrl() string {
	if x != nil && x.RedirectUrl != nil {
		return *x.RedirectUrl
	}
	return ""
}

func (x *SnsWeAppInfo) GetShowType() uint32 {
	if x != nil && x.ShowType != nil {
		return *x.ShowType
	}
	return 0
}

func (x *SnsWeAppInfo) GetRScore() uint32 {
	if x != nil && x.RScore != nil {
		return *x.RScore
	}
	return 0
}

type GetA8KeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	OpCode         *uint32           `protobuf:"varint,2,opt,name=OpCode" json:"OpCode,omitempty"`
	A2Key          *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=A2key" json:"A2key,omitempty"`
	AppID          *SKBuiltinStringT `protobuf:"bytes,4,opt,name=AppID" json:"AppID,omitempty"`
	Scope          *SKBuiltinStringT `protobuf:"bytes,5,opt,name=Scope" json:"Scope,omitempty"`
	State          *SKBuiltinStringT `protobuf:"bytes,6,opt,name=State" json:"State,omitempty"`
	ReqUrl         *SKBuiltinStringT `protobuf:"bytes,7,opt,name=ReqUrl" json:"ReqUrl,omitempty"`
	FriendUserName *string           `protobuf:"bytes,8,opt,name=FriendUserName" json:"FriendUserName,omitempty"`
	FriendQq       *uint32           `protobuf:"varint,9,opt,name=FriendQq" json:"FriendQq,omitempty"`
	Scene          *uint32           `protobuf:"varint,10,opt,name=Scene" json:"Scene,omitempty"`
	UserName       *string           `protobuf:"bytes,11,opt,name=UserName" json:"UserName,omitempty"`
	BundleID       *string           `protobuf:"bytes,12,opt,name=BundleID" json:"BundleID,omitempty"`
	A2KeyNew       []byte            `protobuf:"bytes,13,opt,name=A2KeyNew" json:"A2KeyNew,omitempty"`
	Reason         *uint32           `protobuf:"varint,14,opt,name=Reason" json:"Reason,omitempty"`
	FontScale      *uint32           `protobuf:"varint,15,opt,name=FontScale" json:"FontScale,omitempty"`
	Flag           *uint32           `protobuf:"varint,16,opt,name=Flag" json:"Flag,omitempty"`
	NetType        *string           `protobuf:"bytes,17,opt,name=NetType" json:"NetType,omitempty"`
	CodeType       *uint32           `protobuf:"varint,18,opt,name=CodeType" json:"CodeType,omitempty"`
	CodeVersion    *uint32           `protobuf:"varint,19,opt,name=CodeVersion" json:"CodeVersion,omitempty"`
	RequestId      *uint64           `protobuf:"varint,20,opt,name=RequestId" json:"RequestId,omitempty"`
	FunctionId     *string           `protobuf:"bytes,21,opt,name=FunctionId" json:"FunctionId,omitempty"`
	WalletRegion   *uint32           `protobuf:"varint,22,opt,name=WalletRegion" json:"WalletRegion,omitempty"`
	Cookie         *SKBuiltinBufferT `protobuf:"bytes,23,opt,name=Cookie" json:"Cookie,omitempty"`
	OuterUrl       *string           `protobuf:"bytes,24,opt,name=OuterUrl" json:"OuterUrl,omitempty"`
	SubScene       *uint32           `protobuf:"varint,25,opt,name=SubScene" json:"SubScene,omitempty"`
}

func (x *GetA8KeyReq) Reset() {
	*x = GetA8KeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetA8KeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetA8KeyReq) ProtoMessage() {}

func (x *GetA8KeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetA8KeyReq.ProtoReflect.Descriptor instead.
func (*GetA8KeyReq) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{76}
}

func (x *GetA8KeyReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GetA8KeyReq) GetOpCode() uint32 {
	if x != nil && x.OpCode != nil {
		return *x.OpCode
	}
	return 0
}

func (x *GetA8KeyReq) GetA2Key() *SKBuiltinBufferT {
	if x != nil {
		return x.A2Key
	}
	return nil
}

func (x *GetA8KeyReq) GetAppID() *SKBuiltinStringT {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *GetA8KeyReq) GetScope() *SKBuiltinStringT {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GetA8KeyReq) GetState() *SKBuiltinStringT {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *GetA8KeyReq) GetReqUrl() *SKBuiltinStringT {
	if x != nil {
		return x.ReqUrl
	}
	return nil
}

func (x *GetA8KeyReq) GetFriendUserName() string {
	if x != nil && x.FriendUserName != nil {
		return *x.FriendUserName
	}
	return ""
}

func (x *GetA8KeyReq) GetFriendQq() uint32 {
	if x != nil && x.FriendQq != nil {
		return *x.FriendQq
	}
	return 0
}

func (x *GetA8KeyReq) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *GetA8KeyReq) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *GetA8KeyReq) GetBundleID() string {
	if x != nil && x.BundleID != nil {
		return *x.BundleID
	}
	return ""
}

func (x *GetA8KeyReq) GetA2KeyNew() []byte {
	if x != nil {
		return x.A2KeyNew
	}
	return nil
}

func (x *GetA8KeyReq) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

func (x *GetA8KeyReq) GetFontScale() uint32 {
	if x != nil && x.FontScale != nil {
		return *x.FontScale
	}
	return 0
}

func (x *GetA8KeyReq) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *GetA8KeyReq) GetNetType() string {
	if x != nil && x.NetType != nil {
		return *x.NetType
	}
	return ""
}

func (x *GetA8KeyReq) GetCodeType() uint32 {
	if x != nil && x.CodeType != nil {
		return *x.CodeType
	}
	return 0
}

func (x *GetA8KeyReq) GetCodeVersion() uint32 {
	if x != nil && x.CodeVersion != nil {
		return *x.CodeVersion
	}
	return 0
}

func (x *GetA8KeyReq) GetRequestId() uint64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *GetA8KeyReq) GetFunctionId() string {
	if x != nil && x.FunctionId != nil {
		return *x.FunctionId
	}
	return ""
}

func (x *GetA8KeyReq) GetWalletRegion() uint32 {
	if x != nil && x.WalletRegion != nil {
		return *x.WalletRegion
	}
	return 0
}

func (x *GetA8KeyReq) GetCookie() *SKBuiltinBufferT {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *GetA8KeyReq) GetOuterUrl() string {
	if x != nil && x.OuterUrl != nil {
		return *x.OuterUrl
	}
	return ""
}

func (x *GetA8KeyReq) GetSubScene() uint32 {
	if x != nil && x.SubScene != nil {
		return *x.SubScene
	}
	return 0
}

type GetA8KeyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse         *BaseResponse          `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	FullURL              *string                `protobuf:"bytes,2,opt,name=FullURL" json:"FullURL,omitempty"`
	A8Key                *string                `protobuf:"bytes,3,opt,name=A8key" json:"A8key,omitempty"`
	ActionCode           *string                `protobuf:"bytes,4,opt,name=ActionCode" json:"ActionCode,omitempty"`
	Title                *string                `protobuf:"bytes,5,opt,name=Title" json:"Title,omitempty"`
	Content              *string                `protobuf:"bytes,6,opt,name=Content" json:"Content,omitempty"`
	JSAPIPermission      *JSAPIPermissionBitSet `protobuf:"bytes,7,opt,name=JSAPIPermission" json:"JSAPIPermission,omitempty"`
	GeneralControlBitSet *GeneralControlBitSet  `protobuf:"bytes,8,opt,name=GeneralControlBitSet" json:"GeneralControlBitSet,omitempty"`
	UserName             *string                `protobuf:"bytes,9,opt,name=UserName" json:"UserName,omitempty"`
	ShareURL             *string                `protobuf:"bytes,15,opt,name=ShareURL" json:"ShareURL,omitempty"`
	ScopeCount           *uint32                `protobuf:"varint,16,opt,name=ScopeCount" json:"ScopeCount,omitempty"`
	ScopeList            []*BizScopeInfo        `protobuf:"bytes,17,rep,name=ScopeList" json:"ScopeList,omitempty"`
	AntispamTicket       *string                `protobuf:"bytes,18,opt,name=AntispamTicket" json:"AntispamTicket,omitempty"`
	Ssid                 *string                `protobuf:"bytes,20,opt,name=Ssid" json:"Ssid,omitempty"`
	MID                  *string                `protobuf:"bytes,21,opt,name=MID" json:"MID,omitempty"`
	DeepLinkBitSet       *DeepLinkBitSet        `protobuf:"bytes,22,opt,name=DeepLinkBitSet" json:"DeepLinkBitSet,omitempty"`
	JSAPIControlBytes    *SKBuiltinBufferT      `protobuf:"bytes,23,opt,name=JSAPIControlBytes" json:"JSAPIControlBytes,omitempty"`
	HttpHeaderCount      *uint32                `protobuf:"varint,24,opt,name=HttpHeaderCount" json:"HttpHeaderCount,omitempty"`
	HttpHeader           []*HttpHeader          `protobuf:"bytes,25,rep,name=HttpHeader" json:"HttpHeader,omitempty"`
	Wording              *string                `protobuf:"bytes,26,opt,name=Wording" json:"Wording,omitempty"`
	Headimg              *string                `protobuf:"bytes,27,opt,name=Headimg" json:"Headimg,omitempty"`
	Cookie               *SKBuiltinBufferT      `protobuf:"bytes,28,opt,name=Cookie" json:"Cookie,omitempty"`
	MenuWording          *string                `protobuf:"bytes,29,opt,name=MenuWording" json:"MenuWording,omitempty"`
}

func (x *GetA8KeyResp) Reset() {
	*x = GetA8KeyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetA8KeyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetA8KeyResp) ProtoMessage() {}

func (x *GetA8KeyResp) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetA8KeyResp.ProtoReflect.Descriptor instead.
func (*GetA8KeyResp) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{77}
}

func (x *GetA8KeyResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetA8KeyResp) GetFullURL() string {
	if x != nil && x.FullURL != nil {
		return *x.FullURL
	}
	return ""
}

func (x *GetA8KeyResp) GetA8Key() string {
	if x != nil && x.A8Key != nil {
		return *x.A8Key
	}
	return ""
}

func (x *GetA8KeyResp) GetActionCode() string {
	if x != nil && x.ActionCode != nil {
		return *x.ActionCode
	}
	return ""
}

func (x *GetA8KeyResp) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *GetA8KeyResp) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *GetA8KeyResp) GetJSAPIPermission() *JSAPIPermissionBitSet {
	if x != nil {
		return x.JSAPIPermission
	}
	return nil
}

func (x *GetA8KeyResp) GetGeneralControlBitSet() *GeneralControlBitSet {
	if x != nil {
		return x.GeneralControlBitSet
	}
	return nil
}

func (x *GetA8KeyResp) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *GetA8KeyResp) GetShareURL() string {
	if x != nil && x.ShareURL != nil {
		return *x.ShareURL
	}
	return ""
}

func (x *GetA8KeyResp) GetScopeCount() uint32 {
	if x != nil && x.ScopeCount != nil {
		return *x.ScopeCount
	}
	return 0
}

func (x *GetA8KeyResp) GetScopeList() []*BizScopeInfo {
	if x != nil {
		return x.ScopeList
	}
	return nil
}

func (x *GetA8KeyResp) GetAntispamTicket() string {
	if x != nil && x.AntispamTicket != nil {
		return *x.AntispamTicket
	}
	return ""
}

func (x *GetA8KeyResp) GetSsid() string {
	if x != nil && x.Ssid != nil {
		return *x.Ssid
	}
	return ""
}

func (x *GetA8KeyResp) GetMID() string {
	if x != nil && x.MID != nil {
		return *x.MID
	}
	return ""
}

func (x *GetA8KeyResp) GetDeepLinkBitSet() *DeepLinkBitSet {
	if x != nil {
		return x.DeepLinkBitSet
	}
	return nil
}

func (x *GetA8KeyResp) GetJSAPIControlBytes() *SKBuiltinBufferT {
	if x != nil {
		return x.JSAPIControlBytes
	}
	return nil
}

func (x *GetA8KeyResp) GetHttpHeaderCount() uint32 {
	if x != nil && x.HttpHeaderCount != nil {
		return *x.HttpHeaderCount
	}
	return 0
}

func (x *GetA8KeyResp) GetHttpHeader() []*HttpHeader {
	if x != nil {
		return x.HttpHeader
	}
	return nil
}

func (x *GetA8KeyResp) GetWording() string {
	if x != nil && x.Wording != nil {
		return *x.Wording
	}
	return ""
}

func (x *GetA8KeyResp) GetHeadimg() string {
	if x != nil && x.Headimg != nil {
		return *x.Headimg
	}
	return ""
}

func (x *GetA8KeyResp) GetCookie() *SKBuiltinBufferT {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *GetA8KeyResp) GetMenuWording() string {
	if x != nil && x.MenuWording != nil {
		return *x.MenuWording
	}
	return ""
}

type HttpHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *HttpHeader) Reset() {
	*x = HttpHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHeader) ProtoMessage() {}

func (x *HttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHeader.ProtoReflect.Descriptor instead.
func (*HttpHeader) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{78}
}

func (x *HttpHeader) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *HttpHeader) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type JSAPIPermissionBitSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitValue  *uint32 `protobuf:"varint,1,opt,name=bitValue" json:"bitValue,omitempty"`
	BitValue2 *uint32 `protobuf:"varint,2,opt,name=bitValue2" json:"bitValue2,omitempty"`
	BitValue3 *uint32 `protobuf:"varint,3,opt,name=bitValue3" json:"bitValue3,omitempty"`
	BitValue4 *uint32 `protobuf:"varint,4,opt,name=bitValue4" json:"bitValue4,omitempty"`
}

func (x *JSAPIPermissionBitSet) Reset() {
	*x = JSAPIPermissionBitSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSAPIPermissionBitSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSAPIPermissionBitSet) ProtoMessage() {}

func (x *JSAPIPermissionBitSet) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSAPIPermissionBitSet.ProtoReflect.Descriptor instead.
func (*JSAPIPermissionBitSet) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{79}
}

func (x *JSAPIPermissionBitSet) GetBitValue() uint32 {
	if x != nil && x.BitValue != nil {
		return *x.BitValue
	}
	return 0
}

func (x *JSAPIPermissionBitSet) GetBitValue2() uint32 {
	if x != nil && x.BitValue2 != nil {
		return *x.BitValue2
	}
	return 0
}

func (x *JSAPIPermissionBitSet) GetBitValue3() uint32 {
	if x != nil && x.BitValue3 != nil {
		return *x.BitValue3
	}
	return 0
}

func (x *JSAPIPermissionBitSet) GetBitValue4() uint32 {
	if x != nil && x.BitValue4 != nil {
		return *x.BitValue4
	}
	return 0
}

type GeneralControlBitSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitValue *uint32 `protobuf:"varint,1,opt,name=bitValue" json:"bitValue,omitempty"`
}

func (x *GeneralControlBitSet) Reset() {
	*x = GeneralControlBitSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralControlBitSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralControlBitSet) ProtoMessage() {}

func (x *GeneralControlBitSet) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralControlBitSet.ProtoReflect.Descriptor instead.
func (*GeneralControlBitSet) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{80}
}

func (x *GeneralControlBitSet) GetBitValue() uint32 {
	if x != nil && x.BitValue != nil {
		return *x.BitValue
	}
	return 0
}

type BizScopeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope       *string       `protobuf:"bytes,1,opt,name=scope" json:"scope,omitempty"`
	ScopeStatus *uint32       `protobuf:"varint,2,opt,name=scopeStatus" json:"scopeStatus,omitempty"`
	ScopeDesc   *string       `protobuf:"bytes,3,opt,name=scopeDesc" json:"scopeDesc,omitempty"`
	ApiCount    *uint32       `protobuf:"varint,4,opt,name=apiCount" json:"apiCount,omitempty"`
	ApiList     []*BizApiInfo `protobuf:"bytes,5,rep,name=apiList" json:"apiList,omitempty"`
}

func (x *BizScopeInfo) Reset() {
	*x = BizScopeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizScopeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizScopeInfo) ProtoMessage() {}

func (x *BizScopeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizScopeInfo.ProtoReflect.Descriptor instead.
func (*BizScopeInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{81}
}

func (x *BizScopeInfo) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *BizScopeInfo) GetScopeStatus() uint32 {
	if x != nil && x.ScopeStatus != nil {
		return *x.ScopeStatus
	}
	return 0
}

func (x *BizScopeInfo) GetScopeDesc() string {
	if x != nil && x.ScopeDesc != nil {
		return *x.ScopeDesc
	}
	return ""
}

func (x *BizScopeInfo) GetApiCount() uint32 {
	if x != nil && x.ApiCount != nil {
		return *x.ApiCount
	}
	return 0
}

func (x *BizScopeInfo) GetApiList() []*BizApiInfo {
	if x != nil {
		return x.ApiList
	}
	return nil
}

type BizApiInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiName *string `protobuf:"bytes,1,opt,name=apiName" json:"apiName,omitempty"`
}

func (x *BizApiInfo) Reset() {
	*x = BizApiInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizApiInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizApiInfo) ProtoMessage() {}

func (x *BizApiInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizApiInfo.ProtoReflect.Descriptor instead.
func (*BizApiInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{82}
}

func (x *BizApiInfo) GetApiName() string {
	if x != nil && x.ApiName != nil {
		return *x.ApiName
	}
	return ""
}

type DeepLinkBitSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitValue *uint64 `protobuf:"varint,1,opt,name=bitValue" json:"bitValue,omitempty"`
}

func (x *DeepLinkBitSet) Reset() {
	*x = DeepLinkBitSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepLinkBitSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepLinkBitSet) ProtoMessage() {}

func (x *DeepLinkBitSet) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepLinkBitSet.ProtoReflect.Descriptor instead.
func (*DeepLinkBitSet) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{83}
}

func (x *DeepLinkBitSet) GetBitValue() uint64 {
	if x != nil && x.BitValue != nil {
		return *x.BitValue
	}
	return 0
}

type TwitterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OauthToken       *string `protobuf:"bytes,1,opt,name=OauthToken" json:"OauthToken,omitempty"`
	OauthTokenSecret *string `protobuf:"bytes,2,opt,name=OauthTokenSecret" json:"OauthTokenSecret,omitempty"`
}

func (x *TwitterInfo) Reset() {
	*x = TwitterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwitterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwitterInfo) ProtoMessage() {}

func (x *TwitterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwitterInfo.ProtoReflect.Descriptor instead.
func (*TwitterInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{84}
}

func (x *TwitterInfo) GetOauthToken() string {
	if x != nil && x.OauthToken != nil {
		return *x.OauthToken
	}
	return ""
}

func (x *TwitterInfo) GetOauthTokenSecret() string {
	if x != nil && x.OauthTokenSecret != nil {
		return *x.OauthTokenSecret
	}
	return ""
}

type SnsPostCtocUploadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag       *uint32 `protobuf:"varint,1,opt,name=Flag" json:"Flag,omitempty"`
	PhotoCount *uint32 `protobuf:"varint,2,opt,name=PhotoCount" json:"PhotoCount,omitempty"`
}

func (x *SnsPostCtocUploadInfo) Reset() {
	*x = SnsPostCtocUploadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsPostCtocUploadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsPostCtocUploadInfo) ProtoMessage() {}

func (x *SnsPostCtocUploadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsPostCtocUploadInfo.ProtoReflect.Descriptor instead.
func (*SnsPostCtocUploadInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{85}
}

func (x *SnsPostCtocUploadInfo) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *SnsPostCtocUploadInfo) GetPhotoCount() uint32 {
	if x != nil && x.PhotoCount != nil {
		return *x.PhotoCount
	}
	return 0
}

type SnsPostOperationFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareUrlOriginal *string `protobuf:"bytes,1,opt,name=ShareUrlOriginal" json:"ShareUrlOriginal,omitempty"`
	ShareUrlOpen     *string `protobuf:"bytes,2,opt,name=ShareUrlOpen" json:"ShareUrlOpen,omitempty"`
	JsAppid          *string `protobuf:"bytes,3,opt,name=JsAppid" json:"JsAppid,omitempty"`
	ContactTagCount  *uint32 `protobuf:"varint,4,opt,name=ContactTagCount" json:"ContactTagCount,omitempty"`
	TempUserCount    *uint32 `protobuf:"varint,5,opt,name=TempUserCount" json:"TempUserCount,omitempty"`
}

func (x *SnsPostOperationFields) Reset() {
	*x = SnsPostOperationFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsPostOperationFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsPostOperationFields) ProtoMessage() {}

func (x *SnsPostOperationFields) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsPostOperationFields.ProtoReflect.Descriptor instead.
func (*SnsPostOperationFields) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{86}
}

func (x *SnsPostOperationFields) GetShareUrlOriginal() string {
	if x != nil && x.ShareUrlOriginal != nil {
		return *x.ShareUrlOriginal
	}
	return ""
}

func (x *SnsPostOperationFields) GetShareUrlOpen() string {
	if x != nil && x.ShareUrlOpen != nil {
		return *x.ShareUrlOpen
	}
	return ""
}

func (x *SnsPostOperationFields) GetJsAppid() string {
	if x != nil && x.JsAppid != nil {
		return *x.JsAppid
	}
	return ""
}

func (x *SnsPostOperationFields) GetContactTagCount() uint32 {
	if x != nil && x.ContactTagCount != nil {
		return *x.ContactTagCount
	}
	return 0
}

func (x *SnsPostOperationFields) GetTempUserCount() uint32 {
	if x != nil && x.TempUserCount != nil {
		return *x.TempUserCount
	}
	return 0
}

type CanvasInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataBuffer *string `protobuf:"bytes,1,opt,name=DataBuffer" json:"DataBuffer,omitempty"`
}

func (x *CanvasInfo) Reset() {
	*x = CanvasInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanvasInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanvasInfo) ProtoMessage() {}

func (x *CanvasInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanvasInfo.ProtoReflect.Descriptor instead.
func (*CanvasInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{87}
}

func (x *CanvasInfo) GetDataBuffer() string {
	if x != nil && x.DataBuffer != nil {
		return *x.DataBuffer
	}
	return ""
}

type MediaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source          *uint32       `protobuf:"varint,1,opt,name=Source" json:"Source,omitempty"`
	MediaType       *SnsMediaType `protobuf:"varint,2,opt,name=MediaType,enum=mm.SnsMediaType" json:"MediaType,omitempty"`
	VideoPlayLength *uint32       `protobuf:"varint,3,opt,name=VideoPlayLength" json:"VideoPlayLength,omitempty"`
	SessionId       *string       `protobuf:"bytes,4,opt,name=SessionId" json:"SessionId,omitempty"`
	StartTime       *uint32       `protobuf:"varint,5,opt,name=StartTime" json:"StartTime,omitempty"`
}

func (x *MediaInfo) Reset() {
	*x = MediaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaInfo) ProtoMessage() {}

func (x *MediaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaInfo.ProtoReflect.Descriptor instead.
func (*MediaInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{88}
}

func (x *MediaInfo) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *MediaInfo) GetMediaType() SnsMediaType {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return SnsMediaType_MMSNS_DATA_TEXT
}

func (x *MediaInfo) GetVideoPlayLength() uint32 {
	if x != nil && x.VideoPlayLength != nil {
		return *x.VideoPlayLength
	}
	return 0
}

func (x *MediaInfo) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *MediaInfo) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

// 朋友圈操作
type SnsPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest            *BaseRequest            `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	ObjectDesc             *SKBuiltinString_S      `protobuf:"bytes,2,opt,name=ObjectDesc" json:"ObjectDesc,omitempty"`
	WithUserListNum        *uint32                 `protobuf:"varint,3,opt,name=WithUserListNum" json:"WithUserListNum,omitempty"`
	WithUserList           []*SKBuiltinStringT     `protobuf:"bytes,4,rep,name=WithUserList" json:"WithUserList,omitempty"`
	Privacy                *uint32                 `protobuf:"varint,5,opt,name=Privacy" json:"Privacy,omitempty"`
	SyncFlag               *uint32                 `protobuf:"varint,6,opt,name=SyncFlag" json:"SyncFlag,omitempty"`
	ClientId               *string                 `protobuf:"bytes,7,opt,name=ClientId" json:"ClientId,omitempty"`
	PostBGImgType          *uint32                 `protobuf:"varint,8,opt,name=PostBGImgType" json:"PostBGImgType,omitempty"`
	GroupNum               *uint32                 `protobuf:"varint,9,opt,name=GroupNum" json:"GroupNum,omitempty"`
	GroupIds               []*SnsGroup             `protobuf:"bytes,10,rep,name=GroupIds" json:"GroupIds,omitempty"`
	ObjectSource           *uint32                 `protobuf:"varint,11,opt,name=ObjectSource" json:"ObjectSource,omitempty"`
	ReferId                *uint64                 `protobuf:"varint,12,opt,name=ReferId" json:"ReferId,omitempty"`
	BlackListNum           *uint32                 `protobuf:"varint,13,opt,name=BlackListNum" json:"BlackListNum,omitempty"`
	BlackList              []*SKBuiltinStringT     `protobuf:"bytes,14,rep,name=BlackList" json:"BlackList,omitempty"`
	TwitterInfo            *TwitterInfo            `protobuf:"bytes,15,opt,name=TwitterInfo" json:"TwitterInfo,omitempty"`
	GroupUserNum           *uint32                 `protobuf:"varint,16,opt,name=GroupUserNum" json:"GroupUserNum,omitempty"`
	GroupUser              []*SKBuiltinStringT     `protobuf:"bytes,17,rep,name=GroupUser" json:"GroupUser,omitempty"`
	CtocUploadInfo         *SnsPostCtocUploadInfo  `protobuf:"bytes,18,opt,name=CtocUploadInfo" json:"CtocUploadInfo,omitempty"`
	SnsPostOperationFields *SnsPostOperationFields `protobuf:"bytes,19,opt,name=SnsPostOperationFields" json:"SnsPostOperationFields,omitempty"`
	SnsRedEnvelops         *SnsRedEnvelops         `protobuf:"bytes,20,opt,name=SnsRedEnvelops" json:"SnsRedEnvelops,omitempty"`
	PoiInfo                *SKBuiltinBufferT       `protobuf:"bytes,21,opt,name=PoiInfo" json:"PoiInfo,omitempty"`
	FromScene              *string                 `protobuf:"bytes,22,opt,name=FromScene" json:"FromScene,omitempty"`
	CanvasInfo             *CanvasInfo             `protobuf:"bytes,23,opt,name=CanvasInfo" json:"CanvasInfo,omitempty"`
	MediaInfoCount         *uint32                 `protobuf:"varint,24,opt,name=MediaInfoCount" json:"MediaInfoCount,omitempty"`
	MediaInfo              []*MediaInfo            `protobuf:"bytes,25,rep,name=MediaInfo" json:"MediaInfo,omitempty"`
	WeAppInfo              []*SnsWeAppInfo         `protobuf:"bytes,26,rep,name=WeAppInfo" json:"WeAppInfo,omitempty"`
	ClientCheckData        *SKBuiltinBufferT       `protobuf:"bytes,27,opt,name=ClientCheckData" json:"ClientCheckData,omitempty"`
	ExtSpamInfo            *SKBuiltinBufferT       `protobuf:"bytes,28,opt,name=ExtSpamInfo" json:"ExtSpamInfo,omitempty"`
}

func (x *SnsPostRequest) Reset() {
	*x = SnsPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsPostRequest) ProtoMessage() {}

func (x *SnsPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsPostRequest.ProtoReflect.Descriptor instead.
func (*SnsPostRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{89}
}

func (x *SnsPostRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SnsPostRequest) GetObjectDesc() *SKBuiltinString_S {
	if x != nil {
		return x.ObjectDesc
	}
	return nil
}

func (x *SnsPostRequest) GetWithUserListNum() uint32 {
	if x != nil && x.WithUserListNum != nil {
		return *x.WithUserListNum
	}
	return 0
}

func (x *SnsPostRequest) GetWithUserList() []*SKBuiltinStringT {
	if x != nil {
		return x.WithUserList
	}
	return nil
}

func (x *SnsPostRequest) GetPrivacy() uint32 {
	if x != nil && x.Privacy != nil {
		return *x.Privacy
	}
	return 0
}

func (x *SnsPostRequest) GetSyncFlag() uint32 {
	if x != nil && x.SyncFlag != nil {
		return *x.SyncFlag
	}
	return 0
}

func (x *SnsPostRequest) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *SnsPostRequest) GetPostBGImgType() uint32 {
	if x != nil && x.PostBGImgType != nil {
		return *x.PostBGImgType
	}
	return 0
}

func (x *SnsPostRequest) GetGroupNum() uint32 {
	if x != nil && x.GroupNum != nil {
		return *x.GroupNum
	}
	return 0
}

func (x *SnsPostRequest) GetGroupIds() []*SnsGroup {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *SnsPostRequest) GetObjectSource() uint32 {
	if x != nil && x.ObjectSource != nil {
		return *x.ObjectSource
	}
	return 0
}

func (x *SnsPostRequest) GetReferId() uint64 {
	if x != nil && x.ReferId != nil {
		return *x.ReferId
	}
	return 0
}

func (x *SnsPostRequest) GetBlackListNum() uint32 {
	if x != nil && x.BlackListNum != nil {
		return *x.BlackListNum
	}
	return 0
}

func (x *SnsPostRequest) GetBlackList() []*SKBuiltinStringT {
	if x != nil {
		return x.BlackList
	}
	return nil
}

func (x *SnsPostRequest) GetTwitterInfo() *TwitterInfo {
	if x != nil {
		return x.TwitterInfo
	}
	return nil
}

func (x *SnsPostRequest) GetGroupUserNum() uint32 {
	if x != nil && x.GroupUserNum != nil {
		return *x.GroupUserNum
	}
	return 0
}

func (x *SnsPostRequest) GetGroupUser() []*SKBuiltinStringT {
	if x != nil {
		return x.GroupUser
	}
	return nil
}

func (x *SnsPostRequest) GetCtocUploadInfo() *SnsPostCtocUploadInfo {
	if x != nil {
		return x.CtocUploadInfo
	}
	return nil
}

func (x *SnsPostRequest) GetSnsPostOperationFields() *SnsPostOperationFields {
	if x != nil {
		return x.SnsPostOperationFields
	}
	return nil
}

func (x *SnsPostRequest) GetSnsRedEnvelops() *SnsRedEnvelops {
	if x != nil {
		return x.SnsRedEnvelops
	}
	return nil
}

func (x *SnsPostRequest) GetPoiInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.PoiInfo
	}
	return nil
}

func (x *SnsPostRequest) GetFromScene() string {
	if x != nil && x.FromScene != nil {
		return *x.FromScene
	}
	return ""
}

func (x *SnsPostRequest) GetCanvasInfo() *CanvasInfo {
	if x != nil {
		return x.CanvasInfo
	}
	return nil
}

func (x *SnsPostRequest) GetMediaInfoCount() uint32 {
	if x != nil && x.MediaInfoCount != nil {
		return *x.MediaInfoCount
	}
	return 0
}

func (x *SnsPostRequest) GetMediaInfo() []*MediaInfo {
	if x != nil {
		return x.MediaInfo
	}
	return nil
}

func (x *SnsPostRequest) GetWeAppInfo() []*SnsWeAppInfo {
	if x != nil {
		return x.WeAppInfo
	}
	return nil
}

func (x *SnsPostRequest) GetClientCheckData() *SKBuiltinBufferT {
	if x != nil {
		return x.ClientCheckData
	}
	return nil
}

func (x *SnsPostRequest) GetExtSpamInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.ExtSpamInfo
	}
	return nil
}

type SnsPostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	SnsObject    *SnsObject    `protobuf:"bytes,2,opt,name=SnsObject" json:"SnsObject,omitempty"`
	SpamTips     *string       `protobuf:"bytes,3,opt,name=SpamTips" json:"SpamTips,omitempty"`
}

func (x *SnsPostResponse) Reset() {
	*x = SnsPostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsPostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsPostResponse) ProtoMessage() {}

func (x *SnsPostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsPostResponse.ProtoReflect.Descriptor instead.
func (*SnsPostResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{90}
}

func (x *SnsPostResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *SnsPostResponse) GetSnsObject() *SnsObject {
	if x != nil {
		return x.SnsObject
	}
	return nil
}

func (x *SnsPostResponse) GetSpamTips() string {
	if x != nil && x.SpamTips != nil {
		return *x.SpamTips
	}
	return ""
}

type SnsObjectOpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	OpCount     *uint32      `protobuf:"varint,2,opt,name=opCount" json:"opCount,omitempty"`
	OpList      *SnsObjectOp `protobuf:"bytes,3,opt,name=opList" json:"opList,omitempty"`
}

func (x *SnsObjectOpRequest) Reset() {
	*x = SnsObjectOpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsObjectOpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsObjectOpRequest) ProtoMessage() {}

func (x *SnsObjectOpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsObjectOpRequest.ProtoReflect.Descriptor instead.
func (*SnsObjectOpRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{91}
}

func (x *SnsObjectOpRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SnsObjectOpRequest) GetOpCount() uint32 {
	if x != nil && x.OpCount != nil {
		return *x.OpCount
	}
	return 0
}

func (x *SnsObjectOpRequest) GetOpList() *SnsObjectOp {
	if x != nil {
		return x.OpList
	}
	return nil
}

type SnsObjectOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *uint64           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	OpType *uint32           `protobuf:"varint,2,opt,name=opType" json:"opType,omitempty"`
	Ext    *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=ext" json:"ext,omitempty"`
}

func (x *SnsObjectOp) Reset() {
	*x = SnsObjectOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsObjectOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsObjectOp) ProtoMessage() {}

func (x *SnsObjectOp) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsObjectOp.ProtoReflect.Descriptor instead.
func (*SnsObjectOp) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{92}
}

func (x *SnsObjectOp) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SnsObjectOp) GetOpType() uint32 {
	if x != nil && x.OpType != nil {
		return *x.OpType
	}
	return 0
}

func (x *SnsObjectOp) GetExt() *SKBuiltinBufferT {
	if x != nil {
		return x.Ext
	}
	return nil
}

type SnsObjectOpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	OpCount      *uint32       `protobuf:"varint,2,opt,name=opCount" json:"opCount,omitempty"`
	OpRetList    []int32       `protobuf:"varint,3,rep,name=opRetList" json:"opRetList,omitempty"`
}

func (x *SnsObjectOpResponse) Reset() {
	*x = SnsObjectOpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsObjectOpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsObjectOpResponse) ProtoMessage() {}

func (x *SnsObjectOpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsObjectOpResponse.ProtoReflect.Descriptor instead.
func (*SnsObjectOpResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{93}
}

func (x *SnsObjectOpResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *SnsObjectOpResponse) GetOpCount() uint32 {
	if x != nil && x.OpCount != nil {
		return *x.OpCount
	}
	return 0
}

func (x *SnsObjectOpResponse) GetOpRetList() []int32 {
	if x != nil {
		return x.OpRetList
	}
	return nil
}

type SnsCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest    `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Action      *SnsActionGroup `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
	Clientid    *string         `protobuf:"bytes,3,opt,name=clientid" json:"clientid,omitempty"`
}

func (x *SnsCommentRequest) Reset() {
	*x = SnsCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsCommentRequest) ProtoMessage() {}

func (x *SnsCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsCommentRequest.ProtoReflect.Descriptor instead.
func (*SnsCommentRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{94}
}

func (x *SnsCommentRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SnsCommentRequest) GetAction() *SnsActionGroup {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *SnsCommentRequest) GetClientid() string {
	if x != nil && x.Clientid != nil {
		return *x.Clientid
	}
	return ""
}

type SnsActionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *uint64    `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	ParentId         *uint64    `protobuf:"varint,2,opt,name=parentId" json:"parentId,omitempty"`
	CurrentAction    *SnsAction `protobuf:"bytes,3,opt,name=currentAction" json:"currentAction,omitempty"`
	ReferAction      *SnsAction `protobuf:"bytes,4,opt,name=referAction" json:"referAction,omitempty"`
	ClientId         *string    `protobuf:"bytes,5,opt,name=clientId" json:"clientId,omitempty"`
	ObjectCreateTime *int32     `protobuf:"varint,6,opt,name=objectCreateTime" json:"objectCreateTime,omitempty"`
}

func (x *SnsActionGroup) Reset() {
	*x = SnsActionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsActionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsActionGroup) ProtoMessage() {}

func (x *SnsActionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsActionGroup.ProtoReflect.Descriptor instead.
func (*SnsActionGroup) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{95}
}

func (x *SnsActionGroup) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SnsActionGroup) GetParentId() uint64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *SnsActionGroup) GetCurrentAction() *SnsAction {
	if x != nil {
		return x.CurrentAction
	}
	return nil
}

func (x *SnsActionGroup) GetReferAction() *SnsAction {
	if x != nil {
		return x.ReferAction
	}
	return nil
}

func (x *SnsActionGroup) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *SnsActionGroup) GetObjectCreateTime() int32 {
	if x != nil && x.ObjectCreateTime != nil {
		return *x.ObjectCreateTime
	}
	return 0
}

type SnsAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUsername      *string            `protobuf:"bytes,1,opt,name=FromUsername" json:"FromUsername,omitempty"`
	ToUsername        *string            `protobuf:"bytes,2,opt,name=ToUsername" json:"ToUsername,omitempty"`
	FromNickname      *string            `protobuf:"bytes,3,opt,name=FromNickname" json:"FromNickname,omitempty"`
	ToNickname        *string            `protobuf:"bytes,4,opt,name=ToNickname" json:"ToNickname,omitempty"`
	Type              *uint32            `protobuf:"varint,5,opt,name=Type" json:"Type,omitempty"`
	Source            *uint32            `protobuf:"varint,6,opt,name=Source" json:"Source,omitempty"`
	CreateTime        *uint32            `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty"`
	Content           *string            `protobuf:"bytes,8,opt,name=Content" json:"Content,omitempty"`
	ReplyCommentId    *int32             `protobuf:"varint,9,opt,name=ReplyCommentId" json:"ReplyCommentId,omitempty"`
	CommentId         *int32             `protobuf:"varint,10,opt,name=CommentId" json:"CommentId,omitempty"`
	IsNotRichText     *uint32            `protobuf:"varint,11,opt,name=IsNotRichText" json:"IsNotRichText,omitempty"`
	ReplyCommentId2   *uint64            `protobuf:"varint,12,opt,name=ReplyCommentId2" json:"ReplyCommentId2,omitempty"`
	CommentId2        *uint64            `protobuf:"varint,13,opt,name=CommentId2" json:"CommentId2,omitempty"`
	Hbbuffer          *SKBuiltinBufferT  `protobuf:"bytes,14,opt,name=hbbuffer" json:"hbbuffer,omitempty"`
	CommentFla        *uint64            `protobuf:"varint,15,opt,name=commentFla" json:"commentFla,omitempty"`
	RemindFriendsInfo *RemindFriendsInfo `protobuf:"bytes,16,opt,name=remindFriendsInfo" json:"remindFriendsInfo,omitempty"`
	SnsEmojiInfo      *SnsEmojiInfo      `protobuf:"bytes,17,opt,name=snsEmojiInfo" json:"snsEmojiInfo,omitempty"`
	SnsEmojiInfoCount *uint64            `protobuf:"varint,18,opt,name=snsEmojiInfoCount" json:"snsEmojiInfoCount,omitempty"`
}

func (x *SnsAction) Reset() {
	*x = SnsAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsAction) ProtoMessage() {}

func (x *SnsAction) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsAction.ProtoReflect.Descriptor instead.
func (*SnsAction) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{96}
}

func (x *SnsAction) GetFromUsername() string {
	if x != nil && x.FromUsername != nil {
		return *x.FromUsername
	}
	return ""
}

func (x *SnsAction) GetToUsername() string {
	if x != nil && x.ToUsername != nil {
		return *x.ToUsername
	}
	return ""
}

func (x *SnsAction) GetFromNickname() string {
	if x != nil && x.FromNickname != nil {
		return *x.FromNickname
	}
	return ""
}

func (x *SnsAction) GetToNickname() string {
	if x != nil && x.ToNickname != nil {
		return *x.ToNickname
	}
	return ""
}

func (x *SnsAction) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *SnsAction) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *SnsAction) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *SnsAction) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *SnsAction) GetReplyCommentId() int32 {
	if x != nil && x.ReplyCommentId != nil {
		return *x.ReplyCommentId
	}
	return 0
}

func (x *SnsAction) GetCommentId() int32 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *SnsAction) GetIsNotRichText() uint32 {
	if x != nil && x.IsNotRichText != nil {
		return *x.IsNotRichText
	}
	return 0
}

func (x *SnsAction) GetReplyCommentId2() uint64 {
	if x != nil && x.ReplyCommentId2 != nil {
		return *x.ReplyCommentId2
	}
	return 0
}

func (x *SnsAction) GetCommentId2() uint64 {
	if x != nil && x.CommentId2 != nil {
		return *x.CommentId2
	}
	return 0
}

func (x *SnsAction) GetHbbuffer() *SKBuiltinBufferT {
	if x != nil {
		return x.Hbbuffer
	}
	return nil
}

func (x *SnsAction) GetCommentFla() uint64 {
	if x != nil && x.CommentFla != nil {
		return *x.CommentFla
	}
	return 0
}

func (x *SnsAction) GetRemindFriendsInfo() *RemindFriendsInfo {
	if x != nil {
		return x.RemindFriendsInfo
	}
	return nil
}

func (x *SnsAction) GetSnsEmojiInfo() *SnsEmojiInfo {
	if x != nil {
		return x.SnsEmojiInfo
	}
	return nil
}

func (x *SnsAction) GetSnsEmojiInfoCount() uint64 {
	if x != nil && x.SnsEmojiInfoCount != nil {
		return *x.SnsEmojiInfoCount
	}
	return 0
}

type SnsEmojiInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Md5          *string           `protobuf:"bytes,1,opt,name=md5" json:"md5,omitempty"`
	EmojiInfoBuf *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=emojiInfoBuf" json:"emojiInfoBuf,omitempty"`
	Width        *uint32           `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	Height       *uint32           `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	Size         *uint32           `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
}

func (x *SnsEmojiInfo) Reset() {
	*x = SnsEmojiInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsEmojiInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsEmojiInfo) ProtoMessage() {}

func (x *SnsEmojiInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsEmojiInfo.ProtoReflect.Descriptor instead.
func (*SnsEmojiInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{97}
}

func (x *SnsEmojiInfo) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

func (x *SnsEmojiInfo) GetEmojiInfoBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.EmojiInfoBuf
	}
	return nil
}

func (x *SnsEmojiInfo) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *SnsEmojiInfo) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *SnsEmojiInfo) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type RemindFriendsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdgroupId   *uint64           `protobuf:"varint,1,opt,name=adgroupId" json:"adgroupId,omitempty"`
	SourceInfo  *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=sourceInfo" json:"sourceInfo,omitempty"`
	SelfInfo    *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=selfInfo" json:"selfInfo,omitempty"`
	PaidInfo    *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=paidInfo" json:"paidInfo,omitempty"`
	ExtraInfo   *SKBuiltinBufferT `protobuf:"bytes,5,opt,name=extraInfo" json:"extraInfo,omitempty"`
	AdgroupId64 *uint64           `protobuf:"varint,6,opt,name=adgroupId64" json:"adgroupId64,omitempty"`
}

func (x *RemindFriendsInfo) Reset() {
	*x = RemindFriendsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemindFriendsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemindFriendsInfo) ProtoMessage() {}

func (x *RemindFriendsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemindFriendsInfo.ProtoReflect.Descriptor instead.
func (*RemindFriendsInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{98}
}

func (x *RemindFriendsInfo) GetAdgroupId() uint64 {
	if x != nil && x.AdgroupId != nil {
		return *x.AdgroupId
	}
	return 0
}

func (x *RemindFriendsInfo) GetSourceInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.SourceInfo
	}
	return nil
}

func (x *RemindFriendsInfo) GetSelfInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.SelfInfo
	}
	return nil
}

func (x *RemindFriendsInfo) GetPaidInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.PaidInfo
	}
	return nil
}

func (x *RemindFriendsInfo) GetExtraInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *RemindFriendsInfo) GetAdgroupId64() uint64 {
	if x != nil && x.AdgroupId64 != nil {
		return *x.AdgroupId64
	}
	return 0
}

type SnsCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	SnsObject    *SnsObject    `protobuf:"bytes,2,opt,name=snsObject" json:"snsObject,omitempty"`
}

func (x *SnsCommentResponse) Reset() {
	*x = SnsCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsCommentResponse) ProtoMessage() {}

func (x *SnsCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsCommentResponse.ProtoReflect.Descriptor instead.
func (*SnsCommentResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{99}
}

func (x *SnsCommentResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *SnsCommentResponse) GetSnsObject() *SnsObject {
	if x != nil {
		return x.SnsObject
	}
	return nil
}

type SnsUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest      `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	Type        *uint32           `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	StartPos    *uint32           `protobuf:"varint,3,opt,name=StartPos" json:"StartPos,omitempty"`
	TotalLen    *uint32           `protobuf:"varint,4,opt,name=TotalLen" json:"TotalLen,omitempty"`
	Buffer      *SKBuiltinBufferT `protobuf:"bytes,5,opt,name=Buffer" json:"Buffer,omitempty"`
	ClientId    *string           `protobuf:"bytes,6,opt,name=ClientId" json:"ClientId,omitempty"`
	FilterStype *uint32           `protobuf:"varint,7,opt,name=FilterStype" json:"FilterStype,omitempty"`
	SyncFlag    *uint32           `protobuf:"varint,8,opt,name=SyncFlag" json:"SyncFlag,omitempty"`
	Description *string           `protobuf:"bytes,9,opt,name=Description" json:"Description,omitempty"`
	PhotoFrom   *int32            `protobuf:"varint,10,opt,name=PhotoFrom" json:"PhotoFrom,omitempty"`
	NetType     *int32            `protobuf:"varint,11,opt,name=NetType" json:"NetType,omitempty"`
	TwitterInfo *TwitterInfo      `protobuf:"bytes,12,opt,name=TwitterInfo" json:"TwitterInfo,omitempty"`
	AppId       *string           `protobuf:"bytes,13,opt,name=AppId" json:"AppId,omitempty"`
	ExtFlag     *uint32           `protobuf:"varint,14,opt,name=ExtFlag" json:"ExtFlag,omitempty"`
	MD5         *string           `protobuf:"bytes,15,opt,name=MD5" json:"MD5,omitempty"`
	ObjectType  *int32            `protobuf:"varint,16,opt,name=objectType" json:"objectType,omitempty"`
}

func (x *SnsUploadRequest) Reset() {
	*x = SnsUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsUploadRequest) ProtoMessage() {}

func (x *SnsUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsUploadRequest.ProtoReflect.Descriptor instead.
func (*SnsUploadRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{100}
}

func (x *SnsUploadRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SnsUploadRequest) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *SnsUploadRequest) GetStartPos() uint32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *SnsUploadRequest) GetTotalLen() uint32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *SnsUploadRequest) GetBuffer() *SKBuiltinBufferT {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *SnsUploadRequest) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *SnsUploadRequest) GetFilterStype() uint32 {
	if x != nil && x.FilterStype != nil {
		return *x.FilterStype
	}
	return 0
}

func (x *SnsUploadRequest) GetSyncFlag() uint32 {
	if x != nil && x.SyncFlag != nil {
		return *x.SyncFlag
	}
	return 0
}

func (x *SnsUploadRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SnsUploadRequest) GetPhotoFrom() int32 {
	if x != nil && x.PhotoFrom != nil {
		return *x.PhotoFrom
	}
	return 0
}

func (x *SnsUploadRequest) GetNetType() int32 {
	if x != nil && x.NetType != nil {
		return *x.NetType
	}
	return 0
}

func (x *SnsUploadRequest) GetTwitterInfo() *TwitterInfo {
	if x != nil {
		return x.TwitterInfo
	}
	return nil
}

func (x *SnsUploadRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *SnsUploadRequest) GetExtFlag() uint32 {
	if x != nil && x.ExtFlag != nil {
		return *x.ExtFlag
	}
	return 0
}

func (x *SnsUploadRequest) GetMD5() string {
	if x != nil && x.MD5 != nil {
		return *x.MD5
	}
	return ""
}

func (x *SnsUploadRequest) GetObjectType() int32 {
	if x != nil && x.ObjectType != nil {
		return *x.ObjectType
	}
	return 0
}

type SnsUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse  *BaseResponse   `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	StartPos      *uint32         `protobuf:"varint,2,opt,name=StartPos" json:"StartPos,omitempty"`
	TotalLen      *uint32         `protobuf:"varint,3,opt,name=TotalLen" json:"TotalLen,omitempty"`
	ClientId      *string         `protobuf:"bytes,4,opt,name=ClientId" json:"ClientId,omitempty"`
	BufferUrl     *SnsBufferUrl   `protobuf:"bytes,5,opt,name=BufferUrl" json:"BufferUrl,omitempty"`
	ThumbUrlCount *uint32         `protobuf:"varint,6,opt,name=ThumbUrlCount" json:"ThumbUrlCount,omitempty"`
	ThumbUrls     []*SnsBufferUrl `protobuf:"bytes,7,rep,name=ThumbUrls" json:"ThumbUrls,omitempty"`
	Id            *uint64         `protobuf:"varint,8,opt,name=Id" json:"Id,omitempty"`
	Type          *uint32         `protobuf:"varint,9,opt,name=Type" json:"Type,omitempty"`
}

func (x *SnsUploadResponse) Reset() {
	*x = SnsUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsUploadResponse) ProtoMessage() {}

func (x *SnsUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsUploadResponse.ProtoReflect.Descriptor instead.
func (*SnsUploadResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{101}
}

func (x *SnsUploadResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *SnsUploadResponse) GetStartPos() uint32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *SnsUploadResponse) GetTotalLen() uint32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *SnsUploadResponse) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *SnsUploadResponse) GetBufferUrl() *SnsBufferUrl {
	if x != nil {
		return x.BufferUrl
	}
	return nil
}

func (x *SnsUploadResponse) GetThumbUrlCount() uint32 {
	if x != nil && x.ThumbUrlCount != nil {
		return *x.ThumbUrlCount
	}
	return 0
}

func (x *SnsUploadResponse) GetThumbUrls() []*SnsBufferUrl {
	if x != nil {
		return x.ThumbUrls
	}
	return nil
}

func (x *SnsUploadResponse) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SnsUploadResponse) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type SnsTimeLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest              *BaseRequest      `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	FirstPageMd5             *string           `protobuf:"bytes,2,opt,name=FirstPageMd5" json:"FirstPageMd5,omitempty"`
	MaxId                    *uint64           `protobuf:"varint,3,opt,name=MaxId" json:"MaxId,omitempty"`
	MinFilterId              *uint64           `protobuf:"varint,4,opt,name=MinFilterId" json:"MinFilterId,omitempty"`
	LastRequestTime          *uint32           `protobuf:"varint,5,opt,name=LastRequestTime" json:"LastRequestTime,omitempty"`
	ClientLatestId           *uint64           `protobuf:"varint,6,opt,name=ClientLatestId" json:"ClientLatestId,omitempty"`
	Session                  *SKBuiltinBufferT `protobuf:"bytes,7,opt,name=Session" json:"Session,omitempty"`
	NetworkType              *int32            `protobuf:"varint,8,opt,name=networkType" json:"networkType,omitempty"`
	Adexpinfo                *SnsAdExpInfo     `protobuf:"bytes,9,opt,name=adexpinfo" json:"adexpinfo,omitempty"`
	RealFeedExposureIdsCount *uint32           `protobuf:"varint,10,opt,name=realFeedExposureIdsCount" json:"realFeedExposureIdsCount,omitempty"`
	RealFeedExposureIds      []uint32          `protobuf:"varint,11,rep,name=realFeedExposureIds" json:"realFeedExposureIds,omitempty"`
	UpdateTimelineScene      *uint32           `protobuf:"varint,12,opt,name=UpdateTimelineScene" json:"UpdateTimelineScene,omitempty"`
	PullType                 *uint32           `protobuf:"varint,13,opt,name=pullType" json:"pullType,omitempty"`
	MinIdForGetPrePage       *uint64           `protobuf:"varint,14,opt,name=minIdForGetPrePage" json:"minIdForGetPrePage,omitempty"`
	MinIdForCheckUnread      *uint64           `protobuf:"varint,15,opt,name=minIdForCheckUnread" json:"minIdForCheckUnread,omitempty"`
}

func (x *SnsTimeLineRequest) Reset() {
	*x = SnsTimeLineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsTimeLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsTimeLineRequest) ProtoMessage() {}

func (x *SnsTimeLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsTimeLineRequest.ProtoReflect.Descriptor instead.
func (*SnsTimeLineRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{102}
}

func (x *SnsTimeLineRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SnsTimeLineRequest) GetFirstPageMd5() string {
	if x != nil && x.FirstPageMd5 != nil {
		return *x.FirstPageMd5
	}
	return ""
}

func (x *SnsTimeLineRequest) GetMaxId() uint64 {
	if x != nil && x.MaxId != nil {
		return *x.MaxId
	}
	return 0
}

func (x *SnsTimeLineRequest) GetMinFilterId() uint64 {
	if x != nil && x.MinFilterId != nil {
		return *x.MinFilterId
	}
	return 0
}

func (x *SnsTimeLineRequest) GetLastRequestTime() uint32 {
	if x != nil && x.LastRequestTime != nil {
		return *x.LastRequestTime
	}
	return 0
}

func (x *SnsTimeLineRequest) GetClientLatestId() uint64 {
	if x != nil && x.ClientLatestId != nil {
		return *x.ClientLatestId
	}
	return 0
}

func (x *SnsTimeLineRequest) GetSession() *SKBuiltinBufferT {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *SnsTimeLineRequest) GetNetworkType() int32 {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return 0
}

func (x *SnsTimeLineRequest) GetAdexpinfo() *SnsAdExpInfo {
	if x != nil {
		return x.Adexpinfo
	}
	return nil
}

func (x *SnsTimeLineRequest) GetRealFeedExposureIdsCount() uint32 {
	if x != nil && x.RealFeedExposureIdsCount != nil {
		return *x.RealFeedExposureIdsCount
	}
	return 0
}

func (x *SnsTimeLineRequest) GetRealFeedExposureIds() []uint32 {
	if x != nil {
		return x.RealFeedExposureIds
	}
	return nil
}

func (x *SnsTimeLineRequest) GetUpdateTimelineScene() uint32 {
	if x != nil && x.UpdateTimelineScene != nil {
		return *x.UpdateTimelineScene
	}
	return 0
}

func (x *SnsTimeLineRequest) GetPullType() uint32 {
	if x != nil && x.PullType != nil {
		return *x.PullType
	}
	return 0
}

func (x *SnsTimeLineRequest) GetMinIdForGetPrePage() uint64 {
	if x != nil && x.MinIdForGetPrePage != nil {
		return *x.MinIdForGetPrePage
	}
	return 0
}

func (x *SnsTimeLineRequest) GetMinIdForCheckUnread() uint64 {
	if x != nil && x.MinIdForCheckUnread != nil {
		return *x.MinIdForCheckUnread
	}
	return 0
}

type SnsTimeLineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse          *BaseResponse     `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	FirstPageMd5          *string           `protobuf:"bytes,2,opt,name=FirstPageMd5" json:"FirstPageMd5,omitempty"`
	ObjectCount           *uint32           `protobuf:"varint,3,opt,name=ObjectCount" json:"ObjectCount,omitempty"`
	ObjectList            []*SnsObject      `protobuf:"bytes,4,rep,name=ObjectList" json:"ObjectList,omitempty"`
	NewRequestTime        *uint32           `protobuf:"varint,5,opt,name=NewRequestTime" json:"NewRequestTime,omitempty"`
	ObjectCountForSameMd5 *uint32           `protobuf:"varint,6,opt,name=ObjectCountForSameMd5" json:"ObjectCountForSameMd5,omitempty"`
	ControlFlag           *uint32           `protobuf:"varint,7,opt,name=ControlFlag" json:"ControlFlag,omitempty"`
	ServerConfig          *SnsServerConfig  `protobuf:"bytes,8,opt,name=ServerConfig" json:"ServerConfig,omitempty"`
	AdvertiseCount        *uint32           `protobuf:"varint,9,opt,name=AdvertiseCount" json:"AdvertiseCount,omitempty"`
	AdvertiseList         []byte            `protobuf:"bytes,10,opt,name=AdvertiseList" json:"AdvertiseList,omitempty"`
	Session               *SKBuiltinBufferT `protobuf:"bytes,11,opt,name=Session" json:"Session,omitempty"`
	RecCount              *uint32           `protobuf:"varint,12,opt,name=RecCount" json:"RecCount,omitempty"`
	RecList               *uint32           `protobuf:"varint,13,opt,name=RecList" json:"RecList,omitempty"`
}

func (x *SnsTimeLineResponse) Reset() {
	*x = SnsTimeLineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsTimeLineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsTimeLineResponse) ProtoMessage() {}

func (x *SnsTimeLineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsTimeLineResponse.ProtoReflect.Descriptor instead.
func (*SnsTimeLineResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{103}
}

func (x *SnsTimeLineResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *SnsTimeLineResponse) GetFirstPageMd5() string {
	if x != nil && x.FirstPageMd5 != nil {
		return *x.FirstPageMd5
	}
	return ""
}

func (x *SnsTimeLineResponse) GetObjectCount() uint32 {
	if x != nil && x.ObjectCount != nil {
		return *x.ObjectCount
	}
	return 0
}

func (x *SnsTimeLineResponse) GetObjectList() []*SnsObject {
	if x != nil {
		return x.ObjectList
	}
	return nil
}

func (x *SnsTimeLineResponse) GetNewRequestTime() uint32 {
	if x != nil && x.NewRequestTime != nil {
		return *x.NewRequestTime
	}
	return 0
}

func (x *SnsTimeLineResponse) GetObjectCountForSameMd5() uint32 {
	if x != nil && x.ObjectCountForSameMd5 != nil {
		return *x.ObjectCountForSameMd5
	}
	return 0
}

func (x *SnsTimeLineResponse) GetControlFlag() uint32 {
	if x != nil && x.ControlFlag != nil {
		return *x.ControlFlag
	}
	return 0
}

func (x *SnsTimeLineResponse) GetServerConfig() *SnsServerConfig {
	if x != nil {
		return x.ServerConfig
	}
	return nil
}

func (x *SnsTimeLineResponse) GetAdvertiseCount() uint32 {
	if x != nil && x.AdvertiseCount != nil {
		return *x.AdvertiseCount
	}
	return 0
}

func (x *SnsTimeLineResponse) GetAdvertiseList() []byte {
	if x != nil {
		return x.AdvertiseList
	}
	return nil
}

func (x *SnsTimeLineResponse) GetSession() *SKBuiltinBufferT {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *SnsTimeLineResponse) GetRecCount() uint32 {
	if x != nil && x.RecCount != nil {
		return *x.RecCount
	}
	return 0
}

func (x *SnsTimeLineResponse) GetRecList() uint32 {
	if x != nil && x.RecList != nil {
		return *x.RecList
	}
	return 0
}

type SnsAdExpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HateFeedid    *uint64 `protobuf:"varint,1,opt,name=hateFeedid" json:"hateFeedid,omitempty"`
	HateTimestamp *uint32 `protobuf:"varint,2,opt,name=hateTimestamp" json:"hateTimestamp,omitempty"`
}

func (x *SnsAdExpInfo) Reset() {
	*x = SnsAdExpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsAdExpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsAdExpInfo) ProtoMessage() {}

func (x *SnsAdExpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsAdExpInfo.ProtoReflect.Descriptor instead.
func (*SnsAdExpInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{104}
}

func (x *SnsAdExpInfo) GetHateFeedid() uint64 {
	if x != nil && x.HateFeedid != nil {
		return *x.HateFeedid
	}
	return 0
}

func (x *SnsAdExpInfo) GetHateTimestamp() uint32 {
	if x != nil && x.HateTimestamp != nil {
		return *x.HateTimestamp
	}
	return 0
}

type SnsUserPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest     *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	FirstPageMd5    *string      `protobuf:"bytes,2,opt,name=FirstPageMd5" json:"FirstPageMd5,omitempty"`
	Username        *string      `protobuf:"bytes,3,opt,name=Username" json:"Username,omitempty"`
	MaxId           *uint64      `protobuf:"varint,4,opt,name=MaxId" json:"MaxId,omitempty"`
	Source          *uint32      `protobuf:"varint,5,opt,name=Source" json:"Source,omitempty"`
	MinFilterId     *uint64      `protobuf:"varint,6,opt,name=MinFilterId" json:"MinFilterId,omitempty"`
	LastRequestTime *uint32      `protobuf:"varint,7,opt,name=LastRequestTime" json:"LastRequestTime,omitempty"`
	FilterType      *uint32      `protobuf:"varint,8,opt,name=FilterType" json:"FilterType,omitempty"`
}

func (x *SnsUserPageRequest) Reset() {
	*x = SnsUserPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsUserPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsUserPageRequest) ProtoMessage() {}

func (x *SnsUserPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsUserPageRequest.ProtoReflect.Descriptor instead.
func (*SnsUserPageRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{105}
}

func (x *SnsUserPageRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SnsUserPageRequest) GetFirstPageMd5() string {
	if x != nil && x.FirstPageMd5 != nil {
		return *x.FirstPageMd5
	}
	return ""
}

func (x *SnsUserPageRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *SnsUserPageRequest) GetMaxId() uint64 {
	if x != nil && x.MaxId != nil {
		return *x.MaxId
	}
	return 0
}

func (x *SnsUserPageRequest) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *SnsUserPageRequest) GetMinFilterId() uint64 {
	if x != nil && x.MinFilterId != nil {
		return *x.MinFilterId
	}
	return 0
}

func (x *SnsUserPageRequest) GetLastRequestTime() uint32 {
	if x != nil && x.LastRequestTime != nil {
		return *x.LastRequestTime
	}
	return 0
}

func (x *SnsUserPageRequest) GetFilterType() uint32 {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return 0
}

type SnsUserPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse          *BaseResponse      `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	FristPageMd5          *string            `protobuf:"bytes,2,opt,name=FristPageMd5" json:"FristPageMd5,omitempty"`
	ObjectCount           *uint32            `protobuf:"varint,3,opt,name=ObjectCount" json:"ObjectCount,omitempty"`
	ObjectList            []*SnsObject       `protobuf:"bytes,4,rep,name=ObjectList" json:"ObjectList,omitempty"`
	ObjectTotalCount      []uint32           `protobuf:"varint,5,rep,name=ObjectTotalCount" json:"ObjectTotalCount,omitempty"`
	SnsUserInfo           []*SnsUserInfo     `protobuf:"bytes,6,rep,name=SnsUserInfo" json:"SnsUserInfo,omitempty"`
	NewRequestTime        []uint32           `protobuf:"varint,7,rep,name=NewRequestTime" json:"NewRequestTime,omitempty"`
	ObjectCountForSameMd5 []uint32           `protobuf:"varint,8,rep,name=ObjectCountForSameMd5" json:"ObjectCountForSameMd5,omitempty"`
	ServerConfig          []*SnsServerConfig `protobuf:"bytes,9,rep,name=ServerConfig" json:"ServerConfig,omitempty"`
	LimitedId             []uint64           `protobuf:"varint,10,rep,name=LimitedId" json:"LimitedId,omitempty"`
	ContinueId            []uint64           `protobuf:"varint,11,rep,name=ContinueId" json:"ContinueId,omitempty"`
	RetTips               []string           `protobuf:"bytes,12,rep,name=RetTips" json:"RetTips,omitempty"`
}

func (x *SnsUserPageResponse) Reset() {
	*x = SnsUserPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsUserPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsUserPageResponse) ProtoMessage() {}

func (x *SnsUserPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsUserPageResponse.ProtoReflect.Descriptor instead.
func (*SnsUserPageResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{106}
}

func (x *SnsUserPageResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *SnsUserPageResponse) GetFristPageMd5() string {
	if x != nil && x.FristPageMd5 != nil {
		return *x.FristPageMd5
	}
	return ""
}

func (x *SnsUserPageResponse) GetObjectCount() uint32 {
	if x != nil && x.ObjectCount != nil {
		return *x.ObjectCount
	}
	return 0
}

func (x *SnsUserPageResponse) GetObjectList() []*SnsObject {
	if x != nil {
		return x.ObjectList
	}
	return nil
}

func (x *SnsUserPageResponse) GetObjectTotalCount() []uint32 {
	if x != nil {
		return x.ObjectTotalCount
	}
	return nil
}

func (x *SnsUserPageResponse) GetSnsUserInfo() []*SnsUserInfo {
	if x != nil {
		return x.SnsUserInfo
	}
	return nil
}

func (x *SnsUserPageResponse) GetNewRequestTime() []uint32 {
	if x != nil {
		return x.NewRequestTime
	}
	return nil
}

func (x *SnsUserPageResponse) GetObjectCountForSameMd5() []uint32 {
	if x != nil {
		return x.ObjectCountForSameMd5
	}
	return nil
}

func (x *SnsUserPageResponse) GetServerConfig() []*SnsServerConfig {
	if x != nil {
		return x.ServerConfig
	}
	return nil
}

func (x *SnsUserPageResponse) GetLimitedId() []uint64 {
	if x != nil {
		return x.LimitedId
	}
	return nil
}

func (x *SnsUserPageResponse) GetContinueId() []uint64 {
	if x != nil {
		return x.ContinueId
	}
	return nil
}

func (x *SnsUserPageResponse) GetRetTips() []string {
	if x != nil {
		return x.RetTips
	}
	return nil
}

// 通讯录好友操作
type InitContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username                  *string `protobuf:"bytes,1,opt,name=Username" json:"Username,omitempty"`
	CurrentWxcontactSeq       *int32  `protobuf:"varint,2,opt,name=CurrentWxcontactSeq" json:"CurrentWxcontactSeq,omitempty"`
	CurrentChatRoomContactSeq *int32  `protobuf:"varint,3,opt,name=CurrentChatRoomContactSeq" json:"CurrentChatRoomContactSeq,omitempty"`
}

func (x *InitContactRequest) Reset() {
	*x = InitContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitContactRequest) ProtoMessage() {}

func (x *InitContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitContactRequest.ProtoReflect.Descriptor instead.
func (*InitContactRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{107}
}

func (x *InitContactRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *InitContactRequest) GetCurrentWxcontactSeq() int32 {
	if x != nil && x.CurrentWxcontactSeq != nil {
		return *x.CurrentWxcontactSeq
	}
	return 0
}

func (x *InitContactRequest) GetCurrentChatRoomContactSeq() int32 {
	if x != nil && x.CurrentChatRoomContactSeq != nil {
		return *x.CurrentChatRoomContactSeq
	}
	return 0
}

type InitContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse              *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	CurrentWxcontactSeq       *int32        `protobuf:"varint,2,opt,name=CurrentWxcontactSeq" json:"CurrentWxcontactSeq,omitempty"`
	CurrentChatRoomContactSeq *int32        `protobuf:"varint,3,opt,name=CurrentChatRoomContactSeq" json:"CurrentChatRoomContactSeq,omitempty"`
	CountinueFlag             *int32        `protobuf:"varint,4,opt,name=CountinueFlag" json:"CountinueFlag,omitempty"`
	ContactUsernameList       []string      `protobuf:"bytes,5,rep,name=ContactUsernameList" json:"ContactUsernameList,omitempty"`
}

func (x *InitContactResponse) Reset() {
	*x = InitContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitContactResponse) ProtoMessage() {}

func (x *InitContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitContactResponse.ProtoReflect.Descriptor instead.
func (*InitContactResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{108}
}

func (x *InitContactResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *InitContactResponse) GetCurrentWxcontactSeq() int32 {
	if x != nil && x.CurrentWxcontactSeq != nil {
		return *x.CurrentWxcontactSeq
	}
	return 0
}

func (x *InitContactResponse) GetCurrentChatRoomContactSeq() int32 {
	if x != nil && x.CurrentChatRoomContactSeq != nil {
		return *x.CurrentChatRoomContactSeq
	}
	return 0
}

func (x *InitContactResponse) GetCountinueFlag() int32 {
	if x != nil && x.CountinueFlag != nil {
		return *x.CountinueFlag
	}
	return 0
}

func (x *InitContactResponse) GetContactUsernameList() []string {
	if x != nil {
		return x.ContactUsernameList
	}
	return nil
}

type ModContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName              *SKBuiltinStringT      `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	NickName              *SKBuiltinStringT      `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty"`
	PyInitial             *SKBuiltinStringT      `protobuf:"bytes,3,opt,name=PyInitial" json:"PyInitial,omitempty"`
	QuanPin               *SKBuiltinStringT      `protobuf:"bytes,4,opt,name=QuanPin" json:"QuanPin,omitempty"`
	Sex                   *int32                 `protobuf:"varint,5,opt,name=Sex" json:"Sex,omitempty"`
	ImgBuf                *SKBuiltinBufferT      `protobuf:"bytes,6,opt,name=ImgBuf" json:"ImgBuf,omitempty"`
	BitMask               *uint32                `protobuf:"varint,7,opt,name=BitMask" json:"BitMask,omitempty"`
	BitVal                *uint32                `protobuf:"varint,8,opt,name=BitVal" json:"BitVal,omitempty"`
	ImgFlag               *uint32                `protobuf:"varint,9,opt,name=ImgFlag" json:"ImgFlag,omitempty"`
	Remark                *SKBuiltinStringT      `protobuf:"bytes,10,opt,name=Remark" json:"Remark,omitempty"`
	RemarkPyinitial       *SKBuiltinStringT      `protobuf:"bytes,11,opt,name=RemarkPyinitial" json:"RemarkPyinitial,omitempty"`
	RemarkQuanPin         *SKBuiltinStringT      `protobuf:"bytes,12,opt,name=RemarkQuanPin" json:"RemarkQuanPin,omitempty"`
	ContactType           *uint32                `protobuf:"varint,13,opt,name=ContactType" json:"ContactType,omitempty"`
	RoomInfoCount         *uint32                `protobuf:"varint,14,opt,name=RoomInfoCount" json:"RoomInfoCount,omitempty"`
	RoomInfoList          []*RoomInfo            `protobuf:"bytes,15,rep,name=RoomInfoList" json:"RoomInfoList,omitempty"`
	DomainList            []*SKBuiltinStringT    `protobuf:"bytes,16,rep,name=DomainList" json:"DomainList,omitempty"`
	ChatRoomNotify        *uint32                `protobuf:"varint,17,opt,name=ChatRoomNotify" json:"ChatRoomNotify,omitempty"`
	AddContactScene       *uint32                `protobuf:"varint,18,opt,name=AddContactScene" json:"AddContactScene,omitempty"`
	Province              *string                `protobuf:"bytes,19,opt,name=Province" json:"Province,omitempty"`
	City                  *string                `protobuf:"bytes,20,opt,name=City" json:"City,omitempty"`
	Signature             *string                `protobuf:"bytes,21,opt,name=Signature" json:"Signature,omitempty"`
	PersonalCard          *uint32                `protobuf:"varint,22,opt,name=PersonalCard" json:"PersonalCard,omitempty"`
	HasWeiXinHdHeadImg    *uint32                `protobuf:"varint,23,opt,name=HasWeiXinHdHeadImg" json:"HasWeiXinHdHeadImg,omitempty"`
	VerifyFlag            *uint32                `protobuf:"varint,24,opt,name=VerifyFlag" json:"VerifyFlag,omitempty"`
	VerifyInfo            *string                `protobuf:"bytes,25,opt,name=VerifyInfo" json:"VerifyInfo,omitempty"`
	Level                 *int32                 `protobuf:"varint,26,opt,name=Level" json:"Level,omitempty"`
	Source                *uint32                `protobuf:"varint,27,opt,name=Source" json:"Source,omitempty"`
	Weibo                 *string                `protobuf:"bytes,28,opt,name=Weibo" json:"Weibo,omitempty"`
	VerifyContent         *string                `protobuf:"bytes,29,opt,name=VerifyContent" json:"VerifyContent,omitempty"`
	Alias                 *string                `protobuf:"bytes,30,opt,name=Alias" json:"Alias,omitempty"`
	ChatRoomOwner         *string                `protobuf:"bytes,31,opt,name=ChatRoomOwner" json:"ChatRoomOwner,omitempty"`
	WeiboNickname         *string                `protobuf:"bytes,32,opt,name=WeiboNickname" json:"WeiboNickname,omitempty"`
	WeiboFlag             *uint32                `protobuf:"varint,33,opt,name=WeiboFlag" json:"WeiboFlag,omitempty"`
	AlbumStyle            *int32                 `protobuf:"varint,34,opt,name=AlbumStyle" json:"AlbumStyle,omitempty"`
	AlbumFlag             *int32                 `protobuf:"varint,35,opt,name=AlbumFlag" json:"AlbumFlag,omitempty"`
	AlbumBGImgID          *string                `protobuf:"bytes,36,opt,name=AlbumBGImgID" json:"AlbumBGImgID,omitempty"`
	SnsUserInfo           *SnsUserInfo           `protobuf:"bytes,37,opt,name=SnsUserInfo" json:"SnsUserInfo,omitempty"`
	Country               *string                `protobuf:"bytes,38,opt,name=Country" json:"Country,omitempty"`
	BigHeadImgUrl         *string                `protobuf:"bytes,39,opt,name=BigHeadImgUrl" json:"BigHeadImgUrl,omitempty"`
	SmallHeadImgUrl       *string                `protobuf:"bytes,40,opt,name=SmallHeadImgUrl" json:"SmallHeadImgUrl,omitempty"`
	MyBrandList           *string                `protobuf:"bytes,41,opt,name=MyBrandList" json:"MyBrandList,omitempty"`
	CustomizedInfo        *CustomizedInfo        `protobuf:"bytes,42,opt,name=CustomizedInfo" json:"CustomizedInfo,omitempty"`
	ChatRoomData          *string                `protobuf:"bytes,43,opt,name=ChatRoomData" json:"ChatRoomData,omitempty"`
	HeadImgMd5            *string                `protobuf:"bytes,44,opt,name=HeadImgMd5" json:"HeadImgMd5,omitempty"`
	EncryptUserName       *string                `protobuf:"bytes,45,opt,name=EncryptUserName" json:"EncryptUserName,omitempty"`
	IdcardNum             *string                `protobuf:"bytes,46,opt,name=IdcardNum" json:"IdcardNum,omitempty"`
	RealName              *string                `protobuf:"bytes,47,opt,name=RealName" json:"RealName,omitempty"`
	MobileHash            *string                `protobuf:"bytes,48,opt,name=MobileHash" json:"MobileHash,omitempty"`
	MobileFullHash        *string                `protobuf:"bytes,49,opt,name=MobileFullHash" json:"MobileFullHash,omitempty"`
	AdditionalContactList *AdditionalContactList `protobuf:"bytes,50,opt,name=AdditionalContactList" json:"AdditionalContactList,omitempty"`
	ChatroomVersion       *uint32                `protobuf:"varint,51,opt,name=ChatroomVersion" json:"ChatroomVersion,omitempty"`
	ExtInfo               *string                `protobuf:"bytes,52,opt,name=ExtInfo" json:"ExtInfo,omitempty"`
	ChatroomMaxCount      *uint32                `protobuf:"varint,53,opt,name=ChatroomMaxCount" json:"ChatroomMaxCount,omitempty"`
	ChatroomAccessType    *uint32                `protobuf:"varint,54,opt,name=ChatroomAccessType" json:"ChatroomAccessType,omitempty"`
	NewChatroomData       *ChatRoomMemberData    `protobuf:"bytes,55,opt,name=NewChatroomData" json:"NewChatroomData,omitempty"`
	DeleteFlag            *int32                 `protobuf:"varint,56,opt,name=DeleteFlag" json:"DeleteFlag,omitempty"`
	Description           *string                `protobuf:"bytes,57,opt,name=Description" json:"Description,omitempty"`
	CardImgUrl            *string                `protobuf:"bytes,58,opt,name=CardImgUrl" json:"CardImgUrl,omitempty"`
	LabelIdList           *string                `protobuf:"bytes,59,opt,name=LabelIdList" json:"LabelIdList,omitempty"`
	PhoneNumListInfo      *PhoneNumListInfo      `protobuf:"bytes,60,opt,name=PhoneNumListInfo" json:"PhoneNumListInfo,omitempty"`
	WeiDianInfo           *string                `protobuf:"bytes,61,opt,name=WeiDianInfo" json:"WeiDianInfo,omitempty"`
	ChatroomInfoVersion   *int32                 `protobuf:"varint,62,opt,name=ChatroomInfoVersion" json:"ChatroomInfoVersion,omitempty"`
	DeletecontactScene    *int32                 `protobuf:"varint,63,opt,name=DeletecontactScene" json:"DeletecontactScene,omitempty"`
	ChatroomStatus        *int32                 `protobuf:"varint,64,opt,name=ChatroomStatus" json:"ChatroomStatus,omitempty"`
	Extflag               *int32                 `protobuf:"varint,65,opt,name=Extflag" json:"Extflag,omitempty"`
	CourceExtInfo         *string                `protobuf:"bytes,66,opt,name=CourceExtInfo" json:"CourceExtInfo,omitempty"`
	ChatRoomBusinessType  *uint32                `protobuf:"varint,67,opt,name=ChatRoomBusinessType" json:"ChatRoomBusinessType,omitempty"`
}

func (x *ModContact) Reset() {
	*x = ModContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModContact) ProtoMessage() {}

func (x *ModContact) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModContact.ProtoReflect.Descriptor instead.
func (*ModContact) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{109}
}

func (x *ModContact) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *ModContact) GetNickName() *SKBuiltinStringT {
	if x != nil {
		return x.NickName
	}
	return nil
}

func (x *ModContact) GetPyInitial() *SKBuiltinStringT {
	if x != nil {
		return x.PyInitial
	}
	return nil
}

func (x *ModContact) GetQuanPin() *SKBuiltinStringT {
	if x != nil {
		return x.QuanPin
	}
	return nil
}

func (x *ModContact) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *ModContact) GetImgBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.ImgBuf
	}
	return nil
}

func (x *ModContact) GetBitMask() uint32 {
	if x != nil && x.BitMask != nil {
		return *x.BitMask
	}
	return 0
}

func (x *ModContact) GetBitVal() uint32 {
	if x != nil && x.BitVal != nil {
		return *x.BitVal
	}
	return 0
}

func (x *ModContact) GetImgFlag() uint32 {
	if x != nil && x.ImgFlag != nil {
		return *x.ImgFlag
	}
	return 0
}

func (x *ModContact) GetRemark() *SKBuiltinStringT {
	if x != nil {
		return x.Remark
	}
	return nil
}

func (x *ModContact) GetRemarkPyinitial() *SKBuiltinStringT {
	if x != nil {
		return x.RemarkPyinitial
	}
	return nil
}

func (x *ModContact) GetRemarkQuanPin() *SKBuiltinStringT {
	if x != nil {
		return x.RemarkQuanPin
	}
	return nil
}

func (x *ModContact) GetContactType() uint32 {
	if x != nil && x.ContactType != nil {
		return *x.ContactType
	}
	return 0
}

func (x *ModContact) GetRoomInfoCount() uint32 {
	if x != nil && x.RoomInfoCount != nil {
		return *x.RoomInfoCount
	}
	return 0
}

func (x *ModContact) GetRoomInfoList() []*RoomInfo {
	if x != nil {
		return x.RoomInfoList
	}
	return nil
}

func (x *ModContact) GetDomainList() []*SKBuiltinStringT {
	if x != nil {
		return x.DomainList
	}
	return nil
}

func (x *ModContact) GetChatRoomNotify() uint32 {
	if x != nil && x.ChatRoomNotify != nil {
		return *x.ChatRoomNotify
	}
	return 0
}

func (x *ModContact) GetAddContactScene() uint32 {
	if x != nil && x.AddContactScene != nil {
		return *x.AddContactScene
	}
	return 0
}

func (x *ModContact) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *ModContact) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *ModContact) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *ModContact) GetPersonalCard() uint32 {
	if x != nil && x.PersonalCard != nil {
		return *x.PersonalCard
	}
	return 0
}

func (x *ModContact) GetHasWeiXinHdHeadImg() uint32 {
	if x != nil && x.HasWeiXinHdHeadImg != nil {
		return *x.HasWeiXinHdHeadImg
	}
	return 0
}

func (x *ModContact) GetVerifyFlag() uint32 {
	if x != nil && x.VerifyFlag != nil {
		return *x.VerifyFlag
	}
	return 0
}

func (x *ModContact) GetVerifyInfo() string {
	if x != nil && x.VerifyInfo != nil {
		return *x.VerifyInfo
	}
	return ""
}

func (x *ModContact) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *ModContact) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *ModContact) GetWeibo() string {
	if x != nil && x.Weibo != nil {
		return *x.Weibo
	}
	return ""
}

func (x *ModContact) GetVerifyContent() string {
	if x != nil && x.VerifyContent != nil {
		return *x.VerifyContent
	}
	return ""
}

func (x *ModContact) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *ModContact) GetChatRoomOwner() string {
	if x != nil && x.ChatRoomOwner != nil {
		return *x.ChatRoomOwner
	}
	return ""
}

func (x *ModContact) GetWeiboNickname() string {
	if x != nil && x.WeiboNickname != nil {
		return *x.WeiboNickname
	}
	return ""
}

func (x *ModContact) GetWeiboFlag() uint32 {
	if x != nil && x.WeiboFlag != nil {
		return *x.WeiboFlag
	}
	return 0
}

func (x *ModContact) GetAlbumStyle() int32 {
	if x != nil && x.AlbumStyle != nil {
		return *x.AlbumStyle
	}
	return 0
}

func (x *ModContact) GetAlbumFlag() int32 {
	if x != nil && x.AlbumFlag != nil {
		return *x.AlbumFlag
	}
	return 0
}

func (x *ModContact) GetAlbumBGImgID() string {
	if x != nil && x.AlbumBGImgID != nil {
		return *x.AlbumBGImgID
	}
	return ""
}

func (x *ModContact) GetSnsUserInfo() *SnsUserInfo {
	if x != nil {
		return x.SnsUserInfo
	}
	return nil
}

func (x *ModContact) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *ModContact) GetBigHeadImgUrl() string {
	if x != nil && x.BigHeadImgUrl != nil {
		return *x.BigHeadImgUrl
	}
	return ""
}

func (x *ModContact) GetSmallHeadImgUrl() string {
	if x != nil && x.SmallHeadImgUrl != nil {
		return *x.SmallHeadImgUrl
	}
	return ""
}

func (x *ModContact) GetMyBrandList() string {
	if x != nil && x.MyBrandList != nil {
		return *x.MyBrandList
	}
	return ""
}

func (x *ModContact) GetCustomizedInfo() *CustomizedInfo {
	if x != nil {
		return x.CustomizedInfo
	}
	return nil
}

func (x *ModContact) GetChatRoomData() string {
	if x != nil && x.ChatRoomData != nil {
		return *x.ChatRoomData
	}
	return ""
}

func (x *ModContact) GetHeadImgMd5() string {
	if x != nil && x.HeadImgMd5 != nil {
		return *x.HeadImgMd5
	}
	return ""
}

func (x *ModContact) GetEncryptUserName() string {
	if x != nil && x.EncryptUserName != nil {
		return *x.EncryptUserName
	}
	return ""
}

func (x *ModContact) GetIdcardNum() string {
	if x != nil && x.IdcardNum != nil {
		return *x.IdcardNum
	}
	return ""
}

func (x *ModContact) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *ModContact) GetMobileHash() string {
	if x != nil && x.MobileHash != nil {
		return *x.MobileHash
	}
	return ""
}

func (x *ModContact) GetMobileFullHash() string {
	if x != nil && x.MobileFullHash != nil {
		return *x.MobileFullHash
	}
	return ""
}

func (x *ModContact) GetAdditionalContactList() *AdditionalContactList {
	if x != nil {
		return x.AdditionalContactList
	}
	return nil
}

func (x *ModContact) GetChatroomVersion() uint32 {
	if x != nil && x.ChatroomVersion != nil {
		return *x.ChatroomVersion
	}
	return 0
}

func (x *ModContact) GetExtInfo() string {
	if x != nil && x.ExtInfo != nil {
		return *x.ExtInfo
	}
	return ""
}

func (x *ModContact) GetChatroomMaxCount() uint32 {
	if x != nil && x.ChatroomMaxCount != nil {
		return *x.ChatroomMaxCount
	}
	return 0
}

func (x *ModContact) GetChatroomAccessType() uint32 {
	if x != nil && x.ChatroomAccessType != nil {
		return *x.ChatroomAccessType
	}
	return 0
}

func (x *ModContact) GetNewChatroomData() *ChatRoomMemberData {
	if x != nil {
		return x.NewChatroomData
	}
	return nil
}

func (x *ModContact) GetDeleteFlag() int32 {
	if x != nil && x.DeleteFlag != nil {
		return *x.DeleteFlag
	}
	return 0
}

func (x *ModContact) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ModContact) GetCardImgUrl() string {
	if x != nil && x.CardImgUrl != nil {
		return *x.CardImgUrl
	}
	return ""
}

func (x *ModContact) GetLabelIdList() string {
	if x != nil && x.LabelIdList != nil {
		return *x.LabelIdList
	}
	return ""
}

func (x *ModContact) GetPhoneNumListInfo() *PhoneNumListInfo {
	if x != nil {
		return x.PhoneNumListInfo
	}
	return nil
}

func (x *ModContact) GetWeiDianInfo() string {
	if x != nil && x.WeiDianInfo != nil {
		return *x.WeiDianInfo
	}
	return ""
}

func (x *ModContact) GetChatroomInfoVersion() int32 {
	if x != nil && x.ChatroomInfoVersion != nil {
		return *x.ChatroomInfoVersion
	}
	return 0
}

func (x *ModContact) GetDeletecontactScene() int32 {
	if x != nil && x.DeletecontactScene != nil {
		return *x.DeletecontactScene
	}
	return 0
}

func (x *ModContact) GetChatroomStatus() int32 {
	if x != nil && x.ChatroomStatus != nil {
		return *x.ChatroomStatus
	}
	return 0
}

func (x *ModContact) GetExtflag() int32 {
	if x != nil && x.Extflag != nil {
		return *x.Extflag
	}
	return 0
}

func (x *ModContact) GetCourceExtInfo() string {
	if x != nil && x.CourceExtInfo != nil {
		return *x.CourceExtInfo
	}
	return ""
}

func (x *ModContact) GetChatRoomBusinessType() uint32 {
	if x != nil && x.ChatRoomBusinessType != nil {
		return *x.ChatRoomBusinessType
	}
	return 0
}

type RoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *SKBuiltinStringT `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	NickName *SKBuiltinStringT `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty"`
}

func (x *RoomInfo) Reset() {
	*x = RoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInfo) ProtoMessage() {}

func (x *RoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInfo.ProtoReflect.Descriptor instead.
func (*RoomInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{110}
}

func (x *RoomInfo) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *RoomInfo) GetNickName() *SKBuiltinStringT {
	if x != nil {
		return x.NickName
	}
	return nil
}

type CustomizedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrandFlag    *uint32 `protobuf:"varint,1,opt,name=BrandFlag" json:"BrandFlag,omitempty"`
	ExternalInfo *string `protobuf:"bytes,2,opt,name=ExternalInfo" json:"ExternalInfo,omitempty"`
	BrandInfo    *string `protobuf:"bytes,3,opt,name=BrandInfo" json:"BrandInfo,omitempty"`
	BrandIconURL *string `protobuf:"bytes,4,opt,name=BrandIconURL" json:"BrandIconURL,omitempty"`
}

func (x *CustomizedInfo) Reset() {
	*x = CustomizedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomizedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomizedInfo) ProtoMessage() {}

func (x *CustomizedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomizedInfo.ProtoReflect.Descriptor instead.
func (*CustomizedInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{111}
}

func (x *CustomizedInfo) GetBrandFlag() uint32 {
	if x != nil && x.BrandFlag != nil {
		return *x.BrandFlag
	}
	return 0
}

func (x *CustomizedInfo) GetExternalInfo() string {
	if x != nil && x.ExternalInfo != nil {
		return *x.ExternalInfo
	}
	return ""
}

func (x *CustomizedInfo) GetBrandInfo() string {
	if x != nil && x.BrandInfo != nil {
		return *x.BrandInfo
	}
	return ""
}

func (x *CustomizedInfo) GetBrandIconURL() string {
	if x != nil && x.BrandIconURL != nil {
		return *x.BrandIconURL
	}
	return ""
}

type AdditionalContactList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedinContactItem *LinkedinContactItem `protobuf:"bytes,1,opt,name=LinkedinContactItem" json:"LinkedinContactItem,omitempty"`
}

func (x *AdditionalContactList) Reset() {
	*x = AdditionalContactList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalContactList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalContactList) ProtoMessage() {}

func (x *AdditionalContactList) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalContactList.ProtoReflect.Descriptor instead.
func (*AdditionalContactList) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{112}
}

func (x *AdditionalContactList) GetLinkedinContactItem() *LinkedinContactItem {
	if x != nil {
		return x.LinkedinContactItem
	}
	return nil
}

type LinkedinContactItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedinName      *string `protobuf:"bytes,1,opt,name=LinkedinName" json:"LinkedinName,omitempty"`
	LinkedinMemberId  *string `protobuf:"bytes,2,opt,name=LinkedinMemberId" json:"LinkedinMemberId,omitempty"`
	LinkedinPublicUrl *string `protobuf:"bytes,3,opt,name=LinkedinPublicUrl" json:"LinkedinPublicUrl,omitempty"`
}

func (x *LinkedinContactItem) Reset() {
	*x = LinkedinContactItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedinContactItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedinContactItem) ProtoMessage() {}

func (x *LinkedinContactItem) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedinContactItem.ProtoReflect.Descriptor instead.
func (*LinkedinContactItem) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{113}
}

func (x *LinkedinContactItem) GetLinkedinName() string {
	if x != nil && x.LinkedinName != nil {
		return *x.LinkedinName
	}
	return ""
}

func (x *LinkedinContactItem) GetLinkedinMemberId() string {
	if x != nil && x.LinkedinMemberId != nil {
		return *x.LinkedinMemberId
	}
	return ""
}

func (x *LinkedinContactItem) GetLinkedinPublicUrl() string {
	if x != nil && x.LinkedinPublicUrl != nil {
		return *x.LinkedinPublicUrl
	}
	return ""
}

type ChatRoomMemberData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberCount    *uint32               `protobuf:"varint,1,opt,name=MemberCount" json:"MemberCount,omitempty"`
	ChatRoomMember []*ChatRoomMemberInfo `protobuf:"bytes,2,rep,name=ChatRoomMember" json:"ChatRoomMember,omitempty"`
	InfoMask       *uint32               `protobuf:"varint,3,opt,name=InfoMask" json:"InfoMask,omitempty"`
}

func (x *ChatRoomMemberData) Reset() {
	*x = ChatRoomMemberData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRoomMemberData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRoomMemberData) ProtoMessage() {}

func (x *ChatRoomMemberData) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRoomMemberData.ProtoReflect.Descriptor instead.
func (*ChatRoomMemberData) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{114}
}

func (x *ChatRoomMemberData) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *ChatRoomMemberData) GetChatRoomMember() []*ChatRoomMemberInfo {
	if x != nil {
		return x.ChatRoomMember
	}
	return nil
}

func (x *ChatRoomMemberData) GetInfoMask() uint32 {
	if x != nil && x.InfoMask != nil {
		return *x.InfoMask
	}
	return 0
}

type ChatRoomMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName           *string `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	NickName           *string `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty"`
	DisplayName        *string `protobuf:"bytes,3,opt,name=DisplayName" json:"DisplayName,omitempty"`
	BigHeadImgUrl      *string `protobuf:"bytes,4,opt,name=BigHeadImgUrl" json:"BigHeadImgUrl,omitempty"`
	SmallHeadImgUrl    *string `protobuf:"bytes,5,opt,name=SmallHeadImgUrl" json:"SmallHeadImgUrl,omitempty"`
	ChatroomMemberFlag *uint32 `protobuf:"varint,6,opt,name=ChatroomMemberFlag" json:"ChatroomMemberFlag,omitempty"`
	InviterUserName    *string `protobuf:"bytes,7,opt,name=InviterUserName" json:"InviterUserName,omitempty"`
}

func (x *ChatRoomMemberInfo) Reset() {
	*x = ChatRoomMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRoomMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRoomMemberInfo) ProtoMessage() {}

func (x *ChatRoomMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRoomMemberInfo.ProtoReflect.Descriptor instead.
func (*ChatRoomMemberInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{115}
}

func (x *ChatRoomMemberInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *ChatRoomMemberInfo) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *ChatRoomMemberInfo) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *ChatRoomMemberInfo) GetBigHeadImgUrl() string {
	if x != nil && x.BigHeadImgUrl != nil {
		return *x.BigHeadImgUrl
	}
	return ""
}

func (x *ChatRoomMemberInfo) GetSmallHeadImgUrl() string {
	if x != nil && x.SmallHeadImgUrl != nil {
		return *x.SmallHeadImgUrl
	}
	return ""
}

func (x *ChatRoomMemberInfo) GetChatroomMemberFlag() uint32 {
	if x != nil && x.ChatroomMemberFlag != nil {
		return *x.ChatroomMemberFlag
	}
	return 0
}

func (x *ChatRoomMemberInfo) GetInviterUserName() string {
	if x != nil && x.InviterUserName != nil {
		return *x.InviterUserName
	}
	return ""
}

type PhoneNumListInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count        *uint32  `protobuf:"varint,1,opt,name=Count" json:"Count,omitempty"`
	PhoneNumList []string `protobuf:"bytes,2,rep,name=PhoneNumList" json:"PhoneNumList,omitempty"`
}

func (x *PhoneNumListInfo) Reset() {
	*x = PhoneNumListInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneNumListInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneNumListInfo) ProtoMessage() {}

func (x *PhoneNumListInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneNumListInfo.ProtoReflect.Descriptor instead.
func (*PhoneNumListInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{116}
}

func (x *PhoneNumListInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *PhoneNumListInfo) GetPhoneNumList() []string {
	if x != nil {
		return x.PhoneNumList
	}
	return nil
}

// 发送图片
type UploadMsgImgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest       *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	ClientImgId       *SKBuiltinStringT `protobuf:"bytes,2,opt,name=ClientImgId" json:"ClientImgId,omitempty"`
	FromUserNam       *SKBuiltinStringT `protobuf:"bytes,3,opt,name=FromUserNam" json:"FromUserNam,omitempty"`
	ToUserNam         *SKBuiltinStringT `protobuf:"bytes,4,opt,name=ToUserNam" json:"ToUserNam,omitempty"`
	TotalLen          *uint32           `protobuf:"varint,5,opt,name=TotalLen" json:"TotalLen,omitempty"`
	StartPos          *uint32           `protobuf:"varint,6,opt,name=StartPos" json:"StartPos,omitempty"`
	DataLen           *uint32           `protobuf:"varint,7,opt,name=DataLen" json:"DataLen,omitempty"`
	Data              *SKBuiltinBufferT `protobuf:"bytes,8,opt,name=Data" json:"Data,omitempty"`
	MsgType           *uint32           `protobuf:"varint,9,opt,name=MsgType" json:"MsgType,omitempty"`
	MsgSource         *string           `protobuf:"bytes,10,opt,name=MsgSource" json:"MsgSource,omitempty"`
	CompressType      *uint32           `protobuf:"varint,11,opt,name=CompressType" json:"CompressType,omitempty"`
	NetType           *uint32           `protobuf:"varint,12,opt,name=NetType" json:"NetType,omitempty"`
	PhotoFrom         *int32            `protobuf:"varint,13,opt,name=PhotoFrom" json:"PhotoFrom,omitempty"`
	UICreateTime      *uint32           `protobuf:"varint,14,opt,name=UICreateTime" json:"UICreateTime,omitempty"`
	CDNBigImgUrl      *string           `protobuf:"bytes,15,opt,name=CDNBigImgUrl" json:"CDNBigImgUrl,omitempty"`
	CDNMidImgUrl      *string           `protobuf:"bytes,16,opt,name=CDNMidImgUrl" json:"CDNMidImgUrl,omitempty"`
	AESKey            *string           `protobuf:"bytes,17,opt,name=AESKey" json:"AESKey,omitempty"`
	EncryVer          *int32            `protobuf:"varint,18,opt,name=EncryVer" json:"EncryVer,omitempty"`
	CDNBigImgSize     *int32            `protobuf:"varint,19,opt,name=CDNBigImgSize" json:"CDNBigImgSize,omitempty"`
	CDNMidImgSize     *int32            `protobuf:"varint,20,opt,name=CDNMidImgSize" json:"CDNMidImgSize,omitempty"`
	CDNThumbImgUrl    *string           `protobuf:"bytes,21,opt,name=CDNThumbImgUrl" json:"CDNThumbImgUrl,omitempty"`
	CDNThumbImgSize   *int32            `protobuf:"varint,22,opt,name=CDNThumbImgSize" json:"CDNThumbImgSize,omitempty"`
	CDNThumbImgHeight *int32            `protobuf:"varint,23,opt,name=CDNThumbImgHeight" json:"CDNThumbImgHeight,omitempty"`
	CDNThumbImgWidth  *int32            `protobuf:"varint,24,opt,name=CDNThumbImgWidth" json:"CDNThumbImgWidth,omitempty"`
	CDNThumbAESKey    *string           `protobuf:"bytes,25,opt,name=CDNThumbAESKey" json:"CDNThumbAESKey,omitempty"`
	ReqTime           *uint32           `protobuf:"varint,26,opt,name=ReqTime" json:"ReqTime,omitempty"`
	Md5               *string           `protobuf:"bytes,27,opt,name=Md5" json:"Md5,omitempty"`
	Crc32             *uint32           `protobuf:"varint,28,opt,name=Crc32" json:"Crc32,omitempty"`
	Msgforwardtype    *uint32           `protobuf:"varint,29,opt,name=Msgforwardtype" json:"Msgforwardtype,omitempty"`
	HitMd5            *uint32           `protobuf:"varint,30,opt,name=HitMd5" json:"HitMd5,omitempty"`
	Appid             *string           `protobuf:"bytes,31,opt,name=Appid" json:"Appid,omitempty"`
	MessageAction     *string           `protobuf:"bytes,32,opt,name=MessageAction" json:"MessageAction,omitempty"`
	MessageExt        *string           `protobuf:"bytes,33,opt,name=MessageExt" json:"MessageExt,omitempty"`
	MediaTagName      *string           `protobuf:"bytes,34,opt,name=MediaTagName" json:"MediaTagName,omitempty"`
}

func (x *UploadMsgImgRequest) Reset() {
	*x = UploadMsgImgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadMsgImgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMsgImgRequest) ProtoMessage() {}

func (x *UploadMsgImgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMsgImgRequest.ProtoReflect.Descriptor instead.
func (*UploadMsgImgRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{117}
}

func (x *UploadMsgImgRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *UploadMsgImgRequest) GetClientImgId() *SKBuiltinStringT {
	if x != nil {
		return x.ClientImgId
	}
	return nil
}

func (x *UploadMsgImgRequest) GetFromUserNam() *SKBuiltinStringT {
	if x != nil {
		return x.FromUserNam
	}
	return nil
}

func (x *UploadMsgImgRequest) GetToUserNam() *SKBuiltinStringT {
	if x != nil {
		return x.ToUserNam
	}
	return nil
}

func (x *UploadMsgImgRequest) GetTotalLen() uint32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *UploadMsgImgRequest) GetStartPos() uint32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *UploadMsgImgRequest) GetDataLen() uint32 {
	if x != nil && x.DataLen != nil {
		return *x.DataLen
	}
	return 0
}

func (x *UploadMsgImgRequest) GetData() *SKBuiltinBufferT {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UploadMsgImgRequest) GetMsgType() uint32 {
	if x != nil && x.MsgType != nil {
		return *x.MsgType
	}
	return 0
}

func (x *UploadMsgImgRequest) GetMsgSource() string {
	if x != nil && x.MsgSource != nil {
		return *x.MsgSource
	}
	return ""
}

func (x *UploadMsgImgRequest) GetCompressType() uint32 {
	if x != nil && x.CompressType != nil {
		return *x.CompressType
	}
	return 0
}

func (x *UploadMsgImgRequest) GetNetType() uint32 {
	if x != nil && x.NetType != nil {
		return *x.NetType
	}
	return 0
}

func (x *UploadMsgImgRequest) GetPhotoFrom() int32 {
	if x != nil && x.PhotoFrom != nil {
		return *x.PhotoFrom
	}
	return 0
}

func (x *UploadMsgImgRequest) GetUICreateTime() uint32 {
	if x != nil && x.UICreateTime != nil {
		return *x.UICreateTime
	}
	return 0
}

func (x *UploadMsgImgRequest) GetCDNBigImgUrl() string {
	if x != nil && x.CDNBigImgUrl != nil {
		return *x.CDNBigImgUrl
	}
	return ""
}

func (x *UploadMsgImgRequest) GetCDNMidImgUrl() string {
	if x != nil && x.CDNMidImgUrl != nil {
		return *x.CDNMidImgUrl
	}
	return ""
}

func (x *UploadMsgImgRequest) GetAESKey() string {
	if x != nil && x.AESKey != nil {
		return *x.AESKey
	}
	return ""
}

func (x *UploadMsgImgRequest) GetEncryVer() int32 {
	if x != nil && x.EncryVer != nil {
		return *x.EncryVer
	}
	return 0
}

func (x *UploadMsgImgRequest) GetCDNBigImgSize() int32 {
	if x != nil && x.CDNBigImgSize != nil {
		return *x.CDNBigImgSize
	}
	return 0
}

func (x *UploadMsgImgRequest) GetCDNMidImgSize() int32 {
	if x != nil && x.CDNMidImgSize != nil {
		return *x.CDNMidImgSize
	}
	return 0
}

func (x *UploadMsgImgRequest) GetCDNThumbImgUrl() string {
	if x != nil && x.CDNThumbImgUrl != nil {
		return *x.CDNThumbImgUrl
	}
	return ""
}

func (x *UploadMsgImgRequest) GetCDNThumbImgSize() int32 {
	if x != nil && x.CDNThumbImgSize != nil {
		return *x.CDNThumbImgSize
	}
	return 0
}

func (x *UploadMsgImgRequest) GetCDNThumbImgHeight() int32 {
	if x != nil && x.CDNThumbImgHeight != nil {
		return *x.CDNThumbImgHeight
	}
	return 0
}

func (x *UploadMsgImgRequest) GetCDNThumbImgWidth() int32 {
	if x != nil && x.CDNThumbImgWidth != nil {
		return *x.CDNThumbImgWidth
	}
	return 0
}

func (x *UploadMsgImgRequest) GetCDNThumbAESKey() string {
	if x != nil && x.CDNThumbAESKey != nil {
		return *x.CDNThumbAESKey
	}
	return ""
}

func (x *UploadMsgImgRequest) GetReqTime() uint32 {
	if x != nil && x.ReqTime != nil {
		return *x.ReqTime
	}
	return 0
}

func (x *UploadMsgImgRequest) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

func (x *UploadMsgImgRequest) GetCrc32() uint32 {
	if x != nil && x.Crc32 != nil {
		return *x.Crc32
	}
	return 0
}

func (x *UploadMsgImgRequest) GetMsgforwardtype() uint32 {
	if x != nil && x.Msgforwardtype != nil {
		return *x.Msgforwardtype
	}
	return 0
}

func (x *UploadMsgImgRequest) GetHitMd5() uint32 {
	if x != nil && x.HitMd5 != nil {
		return *x.HitMd5
	}
	return 0
}

func (x *UploadMsgImgRequest) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *UploadMsgImgRequest) GetMessageAction() string {
	if x != nil && x.MessageAction != nil {
		return *x.MessageAction
	}
	return ""
}

func (x *UploadMsgImgRequest) GetMessageExt() string {
	if x != nil && x.MessageExt != nil {
		return *x.MessageExt
	}
	return ""
}

func (x *UploadMsgImgRequest) GetMediaTagName() string {
	if x != nil && x.MediaTagName != nil {
		return *x.MediaTagName
	}
	return ""
}

type UploadMsgImgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse     `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	Msgid        *uint32           `protobuf:"varint,2,opt,name=Msgid" json:"Msgid,omitempty"`
	ClientImgId  *SKBuiltinStringT `protobuf:"bytes,3,opt,name=ClientImgId" json:"ClientImgId,omitempty"`
	FromUserName *SKBuiltinStringT `protobuf:"bytes,4,opt,name=FromUserName" json:"FromUserName,omitempty"`
	ToUserName   *SKBuiltinStringT `protobuf:"bytes,5,opt,name=ToUserName" json:"ToUserName,omitempty"`
	TotalLen     *uint32           `protobuf:"varint,6,opt,name=TotalLen" json:"TotalLen,omitempty"`
	StartPos     *uint32           `protobuf:"varint,7,opt,name=StartPos" json:"StartPos,omitempty"`
	DataLen      *uint32           `protobuf:"varint,8,opt,name=DataLen" json:"DataLen,omitempty"`
	CreateTime   *uint32           `protobuf:"varint,9,opt,name=CreateTime" json:"CreateTime,omitempty"`
	Newmsgid     *uint64           `protobuf:"varint,10,opt,name=Newmsgid" json:"Newmsgid,omitempty"`
	Aeskey       *string           `protobuf:"bytes,11,opt,name=Aeskey" json:"Aeskey,omitempty"`
	Fileid       *string           `protobuf:"bytes,12,opt,name=Fileid" json:"Fileid,omitempty"`
	MsgSource    *string           `protobuf:"bytes,13,opt,name=MsgSource" json:"MsgSource,omitempty"`
}

func (x *UploadMsgImgResponse) Reset() {
	*x = UploadMsgImgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadMsgImgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMsgImgResponse) ProtoMessage() {}

func (x *UploadMsgImgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMsgImgResponse.ProtoReflect.Descriptor instead.
func (*UploadMsgImgResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{118}
}

func (x *UploadMsgImgResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *UploadMsgImgResponse) GetMsgid() uint32 {
	if x != nil && x.Msgid != nil {
		return *x.Msgid
	}
	return 0
}

func (x *UploadMsgImgResponse) GetClientImgId() *SKBuiltinStringT {
	if x != nil {
		return x.ClientImgId
	}
	return nil
}

func (x *UploadMsgImgResponse) GetFromUserName() *SKBuiltinStringT {
	if x != nil {
		return x.FromUserName
	}
	return nil
}

func (x *UploadMsgImgResponse) GetToUserName() *SKBuiltinStringT {
	if x != nil {
		return x.ToUserName
	}
	return nil
}

func (x *UploadMsgImgResponse) GetTotalLen() uint32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *UploadMsgImgResponse) GetStartPos() uint32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *UploadMsgImgResponse) GetDataLen() uint32 {
	if x != nil && x.DataLen != nil {
		return *x.DataLen
	}
	return 0
}

func (x *UploadMsgImgResponse) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *UploadMsgImgResponse) GetNewmsgid() uint64 {
	if x != nil && x.Newmsgid != nil {
		return *x.Newmsgid
	}
	return 0
}

func (x *UploadMsgImgResponse) GetAeskey() string {
	if x != nil && x.Aeskey != nil {
		return *x.Aeskey
	}
	return ""
}

func (x *UploadMsgImgResponse) GetFileid() string {
	if x != nil && x.Fileid != nil {
		return *x.Fileid
	}
	return ""
}

func (x *UploadMsgImgResponse) GetMsgSource() string {
	if x != nil && x.MsgSource != nil {
		return *x.MsgSource
	}
	return ""
}

type DisturbTimeSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginTime *uint32 `protobuf:"varint,1,opt,name=BeginTime" json:"BeginTime,omitempty"`
	EndTime   *uint32 `protobuf:"varint,2,opt,name=EndTime" json:"EndTime,omitempty"`
}

func (x *DisturbTimeSpan) Reset() {
	*x = DisturbTimeSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisturbTimeSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisturbTimeSpan) ProtoMessage() {}

func (x *DisturbTimeSpan) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisturbTimeSpan.ProtoReflect.Descriptor instead.
func (*DisturbTimeSpan) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{119}
}

func (x *DisturbTimeSpan) GetBeginTime() uint32 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *DisturbTimeSpan) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

type DisturbSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NightSetting  *uint32          `protobuf:"varint,1,opt,name=NightSetting" json:"NightSetting,omitempty"`
	NightTime     *DisturbTimeSpan `protobuf:"bytes,2,opt,name=NightTime" json:"NightTime,omitempty"`
	AllDaySetting *uint32          `protobuf:"varint,3,opt,name=AllDaySetting" json:"AllDaySetting,omitempty"`
	AllDayTim     *DisturbTimeSpan `protobuf:"bytes,4,opt,name=AllDayTim" json:"AllDayTim,omitempty"`
}

func (x *DisturbSetting) Reset() {
	*x = DisturbSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisturbSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisturbSetting) ProtoMessage() {}

func (x *DisturbSetting) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisturbSetting.ProtoReflect.Descriptor instead.
func (*DisturbSetting) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{120}
}

func (x *DisturbSetting) GetNightSetting() uint32 {
	if x != nil && x.NightSetting != nil {
		return *x.NightSetting
	}
	return 0
}

func (x *DisturbSetting) GetNightTime() *DisturbTimeSpan {
	if x != nil {
		return x.NightTime
	}
	return nil
}

func (x *DisturbSetting) GetAllDaySetting() uint32 {
	if x != nil && x.AllDaySetting != nil {
		return *x.AllDaySetting
	}
	return 0
}

func (x *DisturbSetting) GetAllDayTim() *DisturbTimeSpan {
	if x != nil {
		return x.AllDayTim
	}
	return nil
}

type GmailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GmailAcct    *string `protobuf:"bytes,1,opt,name=GmailAcct" json:"GmailAcct,omitempty"`
	GmailSwitch  *uint32 `protobuf:"varint,2,opt,name=GmailSwitch" json:"GmailSwitch,omitempty"`
	GmailErrCode *uint32 `protobuf:"varint,3,opt,name=GmailErrCode" json:"GmailErrCode,omitempty"`
}

func (x *GmailInfo) Reset() {
	*x = GmailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GmailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GmailInfo) ProtoMessage() {}

func (x *GmailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GmailInfo.ProtoReflect.Descriptor instead.
func (*GmailInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{121}
}

func (x *GmailInfo) GetGmailAcct() string {
	if x != nil && x.GmailAcct != nil {
		return *x.GmailAcct
	}
	return ""
}

func (x *GmailInfo) GetGmailSwitch() uint32 {
	if x != nil && x.GmailSwitch != nil {
		return *x.GmailSwitch
	}
	return 0
}

func (x *GmailInfo) GetGmailErrCode() uint32 {
	if x != nil && x.GmailErrCode != nil {
		return *x.GmailErrCode
	}
	return 0
}

type GmailList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *uint32      `protobuf:"varint,1,opt,name=Count" json:"Count,omitempty"`
	List  []*GmailInfo `protobuf:"bytes,2,rep,name=List" json:"List,omitempty"`
}

func (x *GmailList) Reset() {
	*x = GmailList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GmailList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GmailList) ProtoMessage() {}

func (x *GmailList) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GmailList.ProtoReflect.Descriptor instead.
func (*GmailList) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{122}
}

func (x *GmailList) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *GmailList) GetList() []*GmailInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type ModUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitFlag        *uint32           `protobuf:"varint,1,opt,name=BitFlag" json:"BitFlag,omitempty"`
	UserName       *SKBuiltinStringT `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
	NickName       *SKBuiltinStringT `protobuf:"bytes,3,opt,name=NickName" json:"NickName,omitempty"`
	BindUin        *uint32           `protobuf:"varint,4,opt,name=BindUin" json:"BindUin,omitempty"`
	BindEmail      *SKBuiltinStringT `protobuf:"bytes,5,opt,name=BindEmail" json:"BindEmail,omitempty"`
	BindMobile     *SKBuiltinStringT `protobuf:"bytes,6,opt,name=BindMobile" json:"BindMobile,omitempty"`
	Status         *uint32           `protobuf:"varint,7,opt,name=Status" json:"Status,omitempty"`
	ImgLen         *uint32           `protobuf:"varint,8,opt,name=ImgLen" json:"ImgLen,omitempty"`
	ImgBuf         []byte            `protobuf:"bytes,9,opt,name=ImgBuf" json:"ImgBuf,omitempty"`
	Sex            *int32            `protobuf:"varint,10,opt,name=Sex" json:"Sex,omitempty"`
	Province       *string           `protobuf:"bytes,11,opt,name=Province" json:"Province,omitempty"`
	City           *string           `protobuf:"bytes,12,opt,name=City" json:"City,omitempty"`
	Signature      *string           `protobuf:"bytes,13,opt,name=Signature" json:"Signature,omitempty"`
	PersonalCard   *uint32           `protobuf:"varint,14,opt,name=PersonalCard" json:"PersonalCard,omitempty"`
	DisturbSetting *DisturbSetting   `protobuf:"bytes,15,opt,name=DisturbSetting" json:"DisturbSetting,omitempty"`
	PluginFlag     *uint32           `protobuf:"varint,16,opt,name=PluginFlag" json:"PluginFlag,omitempty"`
	VerifyFlag     *uint32           `protobuf:"varint,17,opt,name=VerifyFlag" json:"VerifyFlag,omitempty"`
	VerifyInfo     *string           `protobuf:"bytes,18,opt,name=VerifyInfo" json:"VerifyInfo,omitempty"`
	Point          *uint32           `protobuf:"varint,19,opt,name=Point" json:"Point,omitempty"`
	Experience     *uint32           `protobuf:"varint,20,opt,name=Experience" json:"Experience,omitempty"`
	Level          *uint32           `protobuf:"varint,21,opt,name=Level" json:"Level,omitempty"`
	LevelLowExp    *uint32           `protobuf:"varint,22,opt,name=LevelLowExp" json:"LevelLowExp,omitempty"`
	LevelHighExp   *uint32           `protobuf:"varint,23,opt,name=LevelHighExp" json:"LevelHighExp,omitempty"`
	Weibo          *string           `protobuf:"bytes,24,opt,name=Weibo" json:"Weibo,omitempty"`
	PluginSwitch   *uint32           `protobuf:"varint,25,opt,name=PluginSwitch" json:"PluginSwitch,omitempty"`
	GmailList      *GmailList        `protobuf:"bytes,26,opt,name=GmailList" json:"GmailList,omitempty"`
	Alias          *string           `protobuf:"bytes,27,opt,name=Alias" json:"Alias,omitempty"`
	WeiboNickname  *string           `protobuf:"bytes,28,opt,name=WeiboNickname" json:"WeiboNickname,omitempty"`
	WeiboFlag      *uint32           `protobuf:"varint,29,opt,name=WeiboFlag" json:"WeiboFlag,omitempty"`
	FaceBookFlag   *uint32           `protobuf:"varint,30,opt,name=FaceBookFlag" json:"FaceBookFlag,omitempty"`
	FbuserId       *uint64           `protobuf:"varint,31,opt,name=FbuserId" json:"FbuserId,omitempty"`
	FbuserName     *string           `protobuf:"bytes,32,opt,name=FbuserName" json:"FbuserName,omitempty"`
	AlbumStyle     *int32            `protobuf:"varint,33,opt,name=AlbumStyle" json:"AlbumStyle,omitempty"`
	AlbumFlag      *int32            `protobuf:"varint,34,opt,name=AlbumFlag" json:"AlbumFlag,omitempty"`
	AlbumBgimgId   *string           `protobuf:"bytes,35,opt,name=AlbumBgimgId" json:"AlbumBgimgId,omitempty"`
	TxnewsCategory *uint32           `protobuf:"varint,36,opt,name=TxnewsCategory" json:"TxnewsCategory,omitempty"`
	Fbtoken        *string           `protobuf:"bytes,37,opt,name=Fbtoken" json:"Fbtoken,omitempty"`
	Country        *string           `protobuf:"bytes,38,opt,name=Country" json:"Country,omitempty"`
}

func (x *ModUserInfo) Reset() {
	*x = ModUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModUserInfo) ProtoMessage() {}

func (x *ModUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModUserInfo.ProtoReflect.Descriptor instead.
func (*ModUserInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{123}
}

func (x *ModUserInfo) GetBitFlag() uint32 {
	if x != nil && x.BitFlag != nil {
		return *x.BitFlag
	}
	return 0
}

func (x *ModUserInfo) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *ModUserInfo) GetNickName() *SKBuiltinStringT {
	if x != nil {
		return x.NickName
	}
	return nil
}

func (x *ModUserInfo) GetBindUin() uint32 {
	if x != nil && x.BindUin != nil {
		return *x.BindUin
	}
	return 0
}

func (x *ModUserInfo) GetBindEmail() *SKBuiltinStringT {
	if x != nil {
		return x.BindEmail
	}
	return nil
}

func (x *ModUserInfo) GetBindMobile() *SKBuiltinStringT {
	if x != nil {
		return x.BindMobile
	}
	return nil
}

func (x *ModUserInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *ModUserInfo) GetImgLen() uint32 {
	if x != nil && x.ImgLen != nil {
		return *x.ImgLen
	}
	return 0
}

func (x *ModUserInfo) GetImgBuf() []byte {
	if x != nil {
		return x.ImgBuf
	}
	return nil
}

func (x *ModUserInfo) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *ModUserInfo) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *ModUserInfo) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *ModUserInfo) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *ModUserInfo) GetPersonalCard() uint32 {
	if x != nil && x.PersonalCard != nil {
		return *x.PersonalCard
	}
	return 0
}

func (x *ModUserInfo) GetDisturbSetting() *DisturbSetting {
	if x != nil {
		return x.DisturbSetting
	}
	return nil
}

func (x *ModUserInfo) GetPluginFlag() uint32 {
	if x != nil && x.PluginFlag != nil {
		return *x.PluginFlag
	}
	return 0
}

func (x *ModUserInfo) GetVerifyFlag() uint32 {
	if x != nil && x.VerifyFlag != nil {
		return *x.VerifyFlag
	}
	return 0
}

func (x *ModUserInfo) GetVerifyInfo() string {
	if x != nil && x.VerifyInfo != nil {
		return *x.VerifyInfo
	}
	return ""
}

func (x *ModUserInfo) GetPoint() uint32 {
	if x != nil && x.Point != nil {
		return *x.Point
	}
	return 0
}

func (x *ModUserInfo) GetExperience() uint32 {
	if x != nil && x.Experience != nil {
		return *x.Experience
	}
	return 0
}

func (x *ModUserInfo) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *ModUserInfo) GetLevelLowExp() uint32 {
	if x != nil && x.LevelLowExp != nil {
		return *x.LevelLowExp
	}
	return 0
}

func (x *ModUserInfo) GetLevelHighExp() uint32 {
	if x != nil && x.LevelHighExp != nil {
		return *x.LevelHighExp
	}
	return 0
}

func (x *ModUserInfo) GetWeibo() string {
	if x != nil && x.Weibo != nil {
		return *x.Weibo
	}
	return ""
}

func (x *ModUserInfo) GetPluginSwitch() uint32 {
	if x != nil && x.PluginSwitch != nil {
		return *x.PluginSwitch
	}
	return 0
}

func (x *ModUserInfo) GetGmailList() *GmailList {
	if x != nil {
		return x.GmailList
	}
	return nil
}

func (x *ModUserInfo) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *ModUserInfo) GetWeiboNickname() string {
	if x != nil && x.WeiboNickname != nil {
		return *x.WeiboNickname
	}
	return ""
}

func (x *ModUserInfo) GetWeiboFlag() uint32 {
	if x != nil && x.WeiboFlag != nil {
		return *x.WeiboFlag
	}
	return 0
}

func (x *ModUserInfo) GetFaceBookFlag() uint32 {
	if x != nil && x.FaceBookFlag != nil {
		return *x.FaceBookFlag
	}
	return 0
}

func (x *ModUserInfo) GetFbuserId() uint64 {
	if x != nil && x.FbuserId != nil {
		return *x.FbuserId
	}
	return 0
}

func (x *ModUserInfo) GetFbuserName() string {
	if x != nil && x.FbuserName != nil {
		return *x.FbuserName
	}
	return ""
}

func (x *ModUserInfo) GetAlbumStyle() int32 {
	if x != nil && x.AlbumStyle != nil {
		return *x.AlbumStyle
	}
	return 0
}

func (x *ModUserInfo) GetAlbumFlag() int32 {
	if x != nil && x.AlbumFlag != nil {
		return *x.AlbumFlag
	}
	return 0
}

func (x *ModUserInfo) GetAlbumBgimgId() string {
	if x != nil && x.AlbumBgimgId != nil {
		return *x.AlbumBgimgId
	}
	return ""
}

func (x *ModUserInfo) GetTxnewsCategory() uint32 {
	if x != nil && x.TxnewsCategory != nil {
		return *x.TxnewsCategory
	}
	return 0
}

func (x *ModUserInfo) GetFbtoken() string {
	if x != nil && x.Fbtoken != nil {
		return *x.Fbtoken
	}
	return ""
}

func (x *ModUserInfo) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

type ModContacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName              *SKBuiltinStringT      `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	NickName              *SKBuiltinStringT      `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty"`
	Pyinitial             *SKBuiltinStringT      `protobuf:"bytes,3,opt,name=Pyinitial" json:"Pyinitial,omitempty"`
	QuanPin               *SKBuiltinStringT      `protobuf:"bytes,4,opt,name=QuanPin" json:"QuanPin,omitempty"`
	Sex                   *int32                 `protobuf:"varint,5,opt,name=Sex" json:"Sex,omitempty"`
	ImgBuf                *SKBuiltinBufferT      `protobuf:"bytes,6,opt,name=ImgBuf" json:"ImgBuf,omitempty"`
	BitMask               *uint32                `protobuf:"varint,7,opt,name=BitMask" json:"BitMask,omitempty"`
	BitVal                *uint32                `protobuf:"varint,8,opt,name=BitVal" json:"BitVal,omitempty"`
	ImgFlag               *uint32                `protobuf:"varint,9,opt,name=ImgFlag" json:"ImgFlag,omitempty"`
	Remark                *SKBuiltinStringT      `protobuf:"bytes,10,opt,name=Remark" json:"Remark,omitempty"`
	RemarkPyinitial       *SKBuiltinStringT      `protobuf:"bytes,11,opt,name=RemarkPyinitial" json:"RemarkPyinitial,omitempty"`
	RemarkQuanPin         *SKBuiltinStringT      `protobuf:"bytes,12,opt,name=RemarkQuanPin" json:"RemarkQuanPin,omitempty"`
	ContactType           *uint32                `protobuf:"varint,13,opt,name=ContactType" json:"ContactType,omitempty"`
	RoomInfoCount         *uint32                `protobuf:"varint,14,opt,name=RoomInfoCount" json:"RoomInfoCount,omitempty"`
	RoomInfoList          []*RoomInfo            `protobuf:"bytes,15,rep,name=RoomInfoList" json:"RoomInfoList,omitempty"`
	DomainList            *SKBuiltinStringT      `protobuf:"bytes,16,opt,name=DomainList" json:"DomainList,omitempty"`
	ChatRoomNotify        *uint32                `protobuf:"varint,17,opt,name=ChatRoomNotify" json:"ChatRoomNotify,omitempty"`
	AddContactScene       *uint32                `protobuf:"varint,18,opt,name=AddContactScene" json:"AddContactScene,omitempty"`
	Province              *string                `protobuf:"bytes,19,opt,name=Province" json:"Province,omitempty"`
	City                  *string                `protobuf:"bytes,20,opt,name=City" json:"City,omitempty"`
	Signature             *string                `protobuf:"bytes,21,opt,name=Signature" json:"Signature,omitempty"`
	PersonalCard          *uint32                `protobuf:"varint,22,opt,name=PersonalCard" json:"PersonalCard,omitempty"`
	HasWeiXinHdHeadImg    *uint32                `protobuf:"varint,23,opt,name=HasWeiXinHdHeadImg" json:"HasWeiXinHdHeadImg,omitempty"`
	VerifyFlag            *uint32                `protobuf:"varint,24,opt,name=VerifyFlag" json:"VerifyFlag,omitempty"`
	VerifyInfo            *string                `protobuf:"bytes,25,opt,name=VerifyInfo" json:"VerifyInfo,omitempty"`
	Level                 *int32                 `protobuf:"varint,26,opt,name=Level" json:"Level,omitempty"`
	Source                *uint32                `protobuf:"varint,27,opt,name=Source" json:"Source,omitempty"`
	Weibo                 *string                `protobuf:"bytes,28,opt,name=Weibo" json:"Weibo,omitempty"`
	VerifyContent         *string                `protobuf:"bytes,29,opt,name=VerifyContent" json:"VerifyContent,omitempty"`
	Alias                 *string                `protobuf:"bytes,30,opt,name=Alias" json:"Alias,omitempty"`
	ChatRoomOwner         *string                `protobuf:"bytes,31,opt,name=ChatRoomOwner" json:"ChatRoomOwner,omitempty"`
	WeiboNickname         *string                `protobuf:"bytes,32,opt,name=WeiboNickname" json:"WeiboNickname,omitempty"`
	WeiboFlag             *uint32                `protobuf:"varint,33,opt,name=WeiboFlag" json:"WeiboFlag,omitempty"`
	AlbumStyle            *int32                 `protobuf:"varint,34,opt,name=AlbumStyle" json:"AlbumStyle,omitempty"`
	AlbumFlag             *int32                 `protobuf:"varint,35,opt,name=AlbumFlag" json:"AlbumFlag,omitempty"`
	AlbumBgimgId          *string                `protobuf:"bytes,36,opt,name=AlbumBgimgId" json:"AlbumBgimgId,omitempty"`
	SnsUserInfo           *SnsUserInfo           `protobuf:"bytes,37,opt,name=SnsUserInfo" json:"SnsUserInfo,omitempty"`
	Country               *string                `protobuf:"bytes,38,opt,name=Country" json:"Country,omitempty"`
	BigHeadImgUrl         *string                `protobuf:"bytes,39,opt,name=BigHeadImgUrl" json:"BigHeadImgUrl,omitempty"`
	SmallHeadImgUrl       *string                `protobuf:"bytes,40,opt,name=SmallHeadImgUrl" json:"SmallHeadImgUrl,omitempty"`
	MyBrandList           *string                `protobuf:"bytes,41,opt,name=MyBrandList" json:"MyBrandList,omitempty"`
	CustomizedInfo        *CustomizedInfo        `protobuf:"bytes,42,opt,name=CustomizedInfo" json:"CustomizedInfo,omitempty"`
	ChatRoomData          *string                `protobuf:"bytes,43,opt,name=ChatRoomData" json:"ChatRoomData,omitempty"`
	HeadImgMd5            *string                `protobuf:"bytes,44,opt,name=HeadImgMd5" json:"HeadImgMd5,omitempty"`
	EncryptUserName       *string                `protobuf:"bytes,45,opt,name=EncryptUserName" json:"EncryptUserName,omitempty"`
	IdcardNum             *string                `protobuf:"bytes,46,opt,name=IdcardNum" json:"IdcardNum,omitempty"`
	RealName              *string                `protobuf:"bytes,47,opt,name=RealName" json:"RealName,omitempty"`
	MobileHash            *string                `protobuf:"bytes,48,opt,name=MobileHash" json:"MobileHash,omitempty"`
	MobileFullHash        *string                `protobuf:"bytes,49,opt,name=MobileFullHash" json:"MobileFullHash,omitempty"`
	AdditionalContactList *AdditionalContactList `protobuf:"bytes,50,opt,name=AdditionalContactList" json:"AdditionalContactList,omitempty"`
	ChatroomVersion       *uint32                `protobuf:"varint,53,opt,name=ChatroomVersion" json:"ChatroomVersion,omitempty"`
	ExtInfo               *string                `protobuf:"bytes,54,opt,name=ExtInfo" json:"ExtInfo,omitempty"`
	ChatroomMaxCount      *uint32                `protobuf:"varint,55,opt,name=ChatroomMaxCount" json:"ChatroomMaxCount,omitempty"`
	ChatroomAccessType    *uint32                `protobuf:"varint,56,opt,name=ChatroomAccessType" json:"ChatroomAccessType,omitempty"`
	NewChatroomData       *ChatRoomMemberData    `protobuf:"bytes,57,opt,name=NewChatroomData" json:"NewChatroomData,omitempty"`
	DeleteFlag            *int32                 `protobuf:"varint,58,opt,name=DeleteFlag" json:"DeleteFlag,omitempty"`
	Description           *string                `protobuf:"bytes,59,opt,name=Description" json:"Description,omitempty"`
	CardImgUrl            *string                `protobuf:"bytes,60,opt,name=CardImgUrl" json:"CardImgUrl,omitempty"`
	LabelIdlist           *string                `protobuf:"bytes,61,opt,name=LabelIdlist" json:"LabelIdlist,omitempty"`
	PhoneNumListInfo      *PhoneNumListInfo      `protobuf:"bytes,62,opt,name=PhoneNumListInfo" json:"PhoneNumListInfo,omitempty"`
	WeiDianInfo           *string                `protobuf:"bytes,63,opt,name=WeiDianInfo" json:"WeiDianInfo,omitempty"`
	ChatroomInfoVersion   *uint32                `protobuf:"varint,64,opt,name=ChatroomInfoVersion" json:"ChatroomInfoVersion,omitempty"`
	DeleteContactScene    *uint32                `protobuf:"varint,65,opt,name=DeleteContactScene" json:"DeleteContactScene,omitempty"`
	ChatroomStatus        *uint32                `protobuf:"varint,66,opt,name=ChatroomStatus" json:"ChatroomStatus,omitempty"`
	ExtFlag               *uint32                `protobuf:"varint,67,opt,name=ExtFlag" json:"ExtFlag,omitempty"`
	SourceExtInfo         *string                `protobuf:"bytes,70,opt,name=SourceExtInfo" json:"SourceExtInfo,omitempty"`
	ChatRoomBusinessType  *uint32                `protobuf:"varint,71,opt,name=chatRoomBusinessType" json:"chatRoomBusinessType,omitempty"`
}

func (x *ModContacts) Reset() {
	*x = ModContacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModContacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModContacts) ProtoMessage() {}

func (x *ModContacts) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModContacts.ProtoReflect.Descriptor instead.
func (*ModContacts) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{124}
}

func (x *ModContacts) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *ModContacts) GetNickName() *SKBuiltinStringT {
	if x != nil {
		return x.NickName
	}
	return nil
}

func (x *ModContacts) GetPyinitial() *SKBuiltinStringT {
	if x != nil {
		return x.Pyinitial
	}
	return nil
}

func (x *ModContacts) GetQuanPin() *SKBuiltinStringT {
	if x != nil {
		return x.QuanPin
	}
	return nil
}

func (x *ModContacts) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *ModContacts) GetImgBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.ImgBuf
	}
	return nil
}

func (x *ModContacts) GetBitMask() uint32 {
	if x != nil && x.BitMask != nil {
		return *x.BitMask
	}
	return 0
}

func (x *ModContacts) GetBitVal() uint32 {
	if x != nil && x.BitVal != nil {
		return *x.BitVal
	}
	return 0
}

func (x *ModContacts) GetImgFlag() uint32 {
	if x != nil && x.ImgFlag != nil {
		return *x.ImgFlag
	}
	return 0
}

func (x *ModContacts) GetRemark() *SKBuiltinStringT {
	if x != nil {
		return x.Remark
	}
	return nil
}

func (x *ModContacts) GetRemarkPyinitial() *SKBuiltinStringT {
	if x != nil {
		return x.RemarkPyinitial
	}
	return nil
}

func (x *ModContacts) GetRemarkQuanPin() *SKBuiltinStringT {
	if x != nil {
		return x.RemarkQuanPin
	}
	return nil
}

func (x *ModContacts) GetContactType() uint32 {
	if x != nil && x.ContactType != nil {
		return *x.ContactType
	}
	return 0
}

func (x *ModContacts) GetRoomInfoCount() uint32 {
	if x != nil && x.RoomInfoCount != nil {
		return *x.RoomInfoCount
	}
	return 0
}

func (x *ModContacts) GetRoomInfoList() []*RoomInfo {
	if x != nil {
		return x.RoomInfoList
	}
	return nil
}

func (x *ModContacts) GetDomainList() *SKBuiltinStringT {
	if x != nil {
		return x.DomainList
	}
	return nil
}

func (x *ModContacts) GetChatRoomNotify() uint32 {
	if x != nil && x.ChatRoomNotify != nil {
		return *x.ChatRoomNotify
	}
	return 0
}

func (x *ModContacts) GetAddContactScene() uint32 {
	if x != nil && x.AddContactScene != nil {
		return *x.AddContactScene
	}
	return 0
}

func (x *ModContacts) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *ModContacts) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *ModContacts) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *ModContacts) GetPersonalCard() uint32 {
	if x != nil && x.PersonalCard != nil {
		return *x.PersonalCard
	}
	return 0
}

func (x *ModContacts) GetHasWeiXinHdHeadImg() uint32 {
	if x != nil && x.HasWeiXinHdHeadImg != nil {
		return *x.HasWeiXinHdHeadImg
	}
	return 0
}

func (x *ModContacts) GetVerifyFlag() uint32 {
	if x != nil && x.VerifyFlag != nil {
		return *x.VerifyFlag
	}
	return 0
}

func (x *ModContacts) GetVerifyInfo() string {
	if x != nil && x.VerifyInfo != nil {
		return *x.VerifyInfo
	}
	return ""
}

func (x *ModContacts) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *ModContacts) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *ModContacts) GetWeibo() string {
	if x != nil && x.Weibo != nil {
		return *x.Weibo
	}
	return ""
}

func (x *ModContacts) GetVerifyContent() string {
	if x != nil && x.VerifyContent != nil {
		return *x.VerifyContent
	}
	return ""
}

func (x *ModContacts) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *ModContacts) GetChatRoomOwner() string {
	if x != nil && x.ChatRoomOwner != nil {
		return *x.ChatRoomOwner
	}
	return ""
}

func (x *ModContacts) GetWeiboNickname() string {
	if x != nil && x.WeiboNickname != nil {
		return *x.WeiboNickname
	}
	return ""
}

func (x *ModContacts) GetWeiboFlag() uint32 {
	if x != nil && x.WeiboFlag != nil {
		return *x.WeiboFlag
	}
	return 0
}

func (x *ModContacts) GetAlbumStyle() int32 {
	if x != nil && x.AlbumStyle != nil {
		return *x.AlbumStyle
	}
	return 0
}

func (x *ModContacts) GetAlbumFlag() int32 {
	if x != nil && x.AlbumFlag != nil {
		return *x.AlbumFlag
	}
	return 0
}

func (x *ModContacts) GetAlbumBgimgId() string {
	if x != nil && x.AlbumBgimgId != nil {
		return *x.AlbumBgimgId
	}
	return ""
}

func (x *ModContacts) GetSnsUserInfo() *SnsUserInfo {
	if x != nil {
		return x.SnsUserInfo
	}
	return nil
}

func (x *ModContacts) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *ModContacts) GetBigHeadImgUrl() string {
	if x != nil && x.BigHeadImgUrl != nil {
		return *x.BigHeadImgUrl
	}
	return ""
}

func (x *ModContacts) GetSmallHeadImgUrl() string {
	if x != nil && x.SmallHeadImgUrl != nil {
		return *x.SmallHeadImgUrl
	}
	return ""
}

func (x *ModContacts) GetMyBrandList() string {
	if x != nil && x.MyBrandList != nil {
		return *x.MyBrandList
	}
	return ""
}

func (x *ModContacts) GetCustomizedInfo() *CustomizedInfo {
	if x != nil {
		return x.CustomizedInfo
	}
	return nil
}

func (x *ModContacts) GetChatRoomData() string {
	if x != nil && x.ChatRoomData != nil {
		return *x.ChatRoomData
	}
	return ""
}

func (x *ModContacts) GetHeadImgMd5() string {
	if x != nil && x.HeadImgMd5 != nil {
		return *x.HeadImgMd5
	}
	return ""
}

func (x *ModContacts) GetEncryptUserName() string {
	if x != nil && x.EncryptUserName != nil {
		return *x.EncryptUserName
	}
	return ""
}

func (x *ModContacts) GetIdcardNum() string {
	if x != nil && x.IdcardNum != nil {
		return *x.IdcardNum
	}
	return ""
}

func (x *ModContacts) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *ModContacts) GetMobileHash() string {
	if x != nil && x.MobileHash != nil {
		return *x.MobileHash
	}
	return ""
}

func (x *ModContacts) GetMobileFullHash() string {
	if x != nil && x.MobileFullHash != nil {
		return *x.MobileFullHash
	}
	return ""
}

func (x *ModContacts) GetAdditionalContactList() *AdditionalContactList {
	if x != nil {
		return x.AdditionalContactList
	}
	return nil
}

func (x *ModContacts) GetChatroomVersion() uint32 {
	if x != nil && x.ChatroomVersion != nil {
		return *x.ChatroomVersion
	}
	return 0
}

func (x *ModContacts) GetExtInfo() string {
	if x != nil && x.ExtInfo != nil {
		return *x.ExtInfo
	}
	return ""
}

func (x *ModContacts) GetChatroomMaxCount() uint32 {
	if x != nil && x.ChatroomMaxCount != nil {
		return *x.ChatroomMaxCount
	}
	return 0
}

func (x *ModContacts) GetChatroomAccessType() uint32 {
	if x != nil && x.ChatroomAccessType != nil {
		return *x.ChatroomAccessType
	}
	return 0
}

func (x *ModContacts) GetNewChatroomData() *ChatRoomMemberData {
	if x != nil {
		return x.NewChatroomData
	}
	return nil
}

func (x *ModContacts) GetDeleteFlag() int32 {
	if x != nil && x.DeleteFlag != nil {
		return *x.DeleteFlag
	}
	return 0
}

func (x *ModContacts) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ModContacts) GetCardImgUrl() string {
	if x != nil && x.CardImgUrl != nil {
		return *x.CardImgUrl
	}
	return ""
}

func (x *ModContacts) GetLabelIdlist() string {
	if x != nil && x.LabelIdlist != nil {
		return *x.LabelIdlist
	}
	return ""
}

func (x *ModContacts) GetPhoneNumListInfo() *PhoneNumListInfo {
	if x != nil {
		return x.PhoneNumListInfo
	}
	return nil
}

func (x *ModContacts) GetWeiDianInfo() string {
	if x != nil && x.WeiDianInfo != nil {
		return *x.WeiDianInfo
	}
	return ""
}

func (x *ModContacts) GetChatroomInfoVersion() uint32 {
	if x != nil && x.ChatroomInfoVersion != nil {
		return *x.ChatroomInfoVersion
	}
	return 0
}

func (x *ModContacts) GetDeleteContactScene() uint32 {
	if x != nil && x.DeleteContactScene != nil {
		return *x.DeleteContactScene
	}
	return 0
}

func (x *ModContacts) GetChatroomStatus() uint32 {
	if x != nil && x.ChatroomStatus != nil {
		return *x.ChatroomStatus
	}
	return 0
}

func (x *ModContacts) GetExtFlag() uint32 {
	if x != nil && x.ExtFlag != nil {
		return *x.ExtFlag
	}
	return 0
}

func (x *ModContacts) GetSourceExtInfo() string {
	if x != nil && x.SourceExtInfo != nil {
		return *x.SourceExtInfo
	}
	return ""
}

func (x *ModContacts) GetChatRoomBusinessType() uint32 {
	if x != nil && x.ChatRoomBusinessType != nil {
		return *x.ChatRoomBusinessType
	}
	return 0
}

type DelContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName          *SKBuiltinStringT `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	DeleteContactScen *uint32           `protobuf:"varint,2,opt,name=DeleteContactScen" json:"DeleteContactScen,omitempty"`
}

func (x *DelContact) Reset() {
	*x = DelContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContact) ProtoMessage() {}

func (x *DelContact) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContact.ProtoReflect.Descriptor instead.
func (*DelContact) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{125}
}

func (x *DelContact) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *DelContact) GetDeleteContactScen() uint32 {
	if x != nil && x.DeleteContactScen != nil {
		return *x.DeleteContactScen
	}
	return 0
}

type AddMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId        *int32            `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
	FromUserName *SKBuiltinStringT `protobuf:"bytes,2,opt,name=FromUserName" json:"FromUserName,omitempty"`
	ToUserName   *SKBuiltinStringT `protobuf:"bytes,3,opt,name=ToUserName" json:"ToUserName,omitempty"`
	MsgType      *int32            `protobuf:"varint,4,opt,name=MsgType" json:"MsgType,omitempty"`
	Content      *SKBuiltinStringT `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty"`
	Status       *uint32           `protobuf:"varint,6,opt,name=Status" json:"Status,omitempty"`
	ImgStatus    *uint32           `protobuf:"varint,7,opt,name=ImgStatus" json:"ImgStatus,omitempty"`
	ImgBuf       *SKBuiltinBufferT `protobuf:"bytes,8,opt,name=ImgBuf" json:"ImgBuf,omitempty"`
	CreateTime   *uint32           `protobuf:"varint,9,opt,name=CreateTime" json:"CreateTime,omitempty"`
	MsgSource    *string           `protobuf:"bytes,10,opt,name=MsgSource" json:"MsgSource,omitempty"`
	PushContent  *string           `protobuf:"bytes,11,opt,name=PushContent" json:"PushContent,omitempty"`
	NewMsgId     *int64            `protobuf:"varint,12,opt,name=NewMsgId" json:"NewMsgId,omitempty"`
	MsgSeq       *uint32           `protobuf:"varint,13,opt,name=MsgSeq" json:"MsgSeq,omitempty"`
}

func (x *AddMsg) Reset() {
	*x = AddMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMsg) ProtoMessage() {}

func (x *AddMsg) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMsg.ProtoReflect.Descriptor instead.
func (*AddMsg) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{126}
}

func (x *AddMsg) GetMsgId() int32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *AddMsg) GetFromUserName() *SKBuiltinStringT {
	if x != nil {
		return x.FromUserName
	}
	return nil
}

func (x *AddMsg) GetToUserName() *SKBuiltinStringT {
	if x != nil {
		return x.ToUserName
	}
	return nil
}

func (x *AddMsg) GetMsgType() int32 {
	if x != nil && x.MsgType != nil {
		return *x.MsgType
	}
	return 0
}

func (x *AddMsg) GetContent() *SKBuiltinStringT {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *AddMsg) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *AddMsg) GetImgStatus() uint32 {
	if x != nil && x.ImgStatus != nil {
		return *x.ImgStatus
	}
	return 0
}

func (x *AddMsg) GetImgBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.ImgBuf
	}
	return nil
}

func (x *AddMsg) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *AddMsg) GetMsgSource() string {
	if x != nil && x.MsgSource != nil {
		return *x.MsgSource
	}
	return ""
}

func (x *AddMsg) GetPushContent() string {
	if x != nil && x.PushContent != nil {
		return *x.PushContent
	}
	return ""
}

func (x *AddMsg) GetNewMsgId() int64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

func (x *AddMsg) GetMsgSeq() uint32 {
	if x != nil && x.MsgSeq != nil {
		return *x.MsgSeq
	}
	return 0
}

type ModMsgStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId        *int32            `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
	FromUserName *SKBuiltinStringT `protobuf:"bytes,2,opt,name=FromUserName" json:"FromUserName,omitempty"`
	ToUserName   *SKBuiltinStringT `protobuf:"bytes,3,opt,name=ToUserName" json:"ToUserName,omitempty"`
	Status       *int32            `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty"`
	NewMsgId     *int64            `protobuf:"varint,5,opt,name=NewMsgId" json:"NewMsgId,omitempty"`
}

func (x *ModMsgStatus) Reset() {
	*x = ModMsgStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModMsgStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModMsgStatus) ProtoMessage() {}

func (x *ModMsgStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModMsgStatus.ProtoReflect.Descriptor instead.
func (*ModMsgStatus) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{127}
}

func (x *ModMsgStatus) GetMsgId() int32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *ModMsgStatus) GetFromUserName() *SKBuiltinStringT {
	if x != nil {
		return x.FromUserName
	}
	return nil
}

func (x *ModMsgStatus) GetToUserName() *SKBuiltinStringT {
	if x != nil {
		return x.ToUserName
	}
	return nil
}

func (x *ModMsgStatus) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *ModMsgStatus) GetNewMsgId() int64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

type DelChatContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *SKBuiltinStringT `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
}

func (x *DelChatContact) Reset() {
	*x = DelChatContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChatContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChatContact) ProtoMessage() {}

func (x *DelChatContact) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChatContact.ProtoReflect.Descriptor instead.
func (*DelChatContact) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{128}
}

func (x *DelChatContact) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

type DelContactMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *SKBuiltinStringT `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	MaxMsgId *int32            `protobuf:"varint,2,opt,name=MaxMsgId" json:"MaxMsgId,omitempty"`
	NewMsgId *int64            `protobuf:"varint,3,opt,name=NewMsgId" json:"NewMsgId,omitempty"`
}

func (x *DelContactMsg) Reset() {
	*x = DelContactMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelContactMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContactMsg) ProtoMessage() {}

func (x *DelContactMsg) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContactMsg.ProtoReflect.Descriptor instead.
func (*DelContactMsg) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{129}
}

func (x *DelContactMsg) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *DelContactMsg) GetMaxMsgId() int32 {
	if x != nil && x.MaxMsgId != nil {
		return *x.MaxMsgId
	}
	return 0
}

func (x *DelContactMsg) GetNewMsgId() int64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

type NewDelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserName *SKBuiltinStringT `protobuf:"bytes,1,opt,name=FromUserName" json:"FromUserName,omitempty"`
	ToUserName   *SKBuiltinStringT `protobuf:"bytes,2,opt,name=ToUserName" json:"ToUserName,omitempty"`
	MsgId        *uint64           `protobuf:"varint,3,opt,name=msgId" json:"msgId,omitempty"`
	MsgType      *uint32           `protobuf:"varint,4,opt,name=msgType" json:"msgType,omitempty"`
	NewMsgId     *uint64           `protobuf:"varint,5,opt,name=newMsgId" json:"newMsgId,omitempty"`
}

func (x *NewDelMsg) Reset() {
	*x = NewDelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDelMsg) ProtoMessage() {}

func (x *NewDelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDelMsg.ProtoReflect.Descriptor instead.
func (*NewDelMsg) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{130}
}

func (x *NewDelMsg) GetFromUserName() *SKBuiltinStringT {
	if x != nil {
		return x.FromUserName
	}
	return nil
}

func (x *NewDelMsg) GetToUserName() *SKBuiltinStringT {
	if x != nil {
		return x.ToUserName
	}
	return nil
}

func (x *NewDelMsg) GetMsgId() uint64 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *NewDelMsg) GetMsgType() uint32 {
	if x != nil && x.MsgType != nil {
		return *x.MsgType
	}
	return 0
}

func (x *NewDelMsg) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

type ModUserImg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImgType         *uint32 `protobuf:"varint,1,opt,name=ImgType" json:"ImgType,omitempty"`
	ImgLen          *uint32 `protobuf:"varint,2,opt,name=ImgLen" json:"ImgLen,omitempty"`
	ImgBuf          []byte  `protobuf:"bytes,3,opt,name=ImgBuf" json:"ImgBuf,omitempty"`
	ImgMd5          *string `protobuf:"bytes,4,opt,name=ImgMd5" json:"ImgMd5,omitempty"`
	BigHeadImgUrl   *string `protobuf:"bytes,5,opt,name=BigHeadImgUrl" json:"BigHeadImgUrl,omitempty"`
	SmallHeadImgUrl *string `protobuf:"bytes,6,opt,name=SmallHeadImgUrl" json:"SmallHeadImgUrl,omitempty"`
}

func (x *ModUserImg) Reset() {
	*x = ModUserImg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModUserImg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModUserImg) ProtoMessage() {}

func (x *ModUserImg) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModUserImg.ProtoReflect.Descriptor instead.
func (*ModUserImg) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{131}
}

func (x *ModUserImg) GetImgType() uint32 {
	if x != nil && x.ImgType != nil {
		return *x.ImgType
	}
	return 0
}

func (x *ModUserImg) GetImgLen() uint32 {
	if x != nil && x.ImgLen != nil {
		return *x.ImgLen
	}
	return 0
}

func (x *ModUserImg) GetImgBuf() []byte {
	if x != nil {
		return x.ImgBuf
	}
	return nil
}

func (x *ModUserImg) GetImgMd5() string {
	if x != nil && x.ImgMd5 != nil {
		return *x.ImgMd5
	}
	return ""
}

func (x *ModUserImg) GetBigHeadImgUrl() string {
	if x != nil && x.BigHeadImgUrl != nil {
		return *x.BigHeadImgUrl
	}
	return ""
}

func (x *ModUserImg) GetSmallHeadImgUrl() string {
	if x != nil && x.SmallHeadImgUrl != nil {
		return *x.SmallHeadImgUrl
	}
	return ""
}

type SafeDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Uuid       *string `protobuf:"bytes,2,opt,name=Uuid" json:"Uuid,omitempty"`
	DeviceType *string `protobuf:"bytes,3,opt,name=DeviceType" json:"DeviceType,omitempty"`
	CreateTime *uint32 `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty"`
}

func (x *SafeDevice) Reset() {
	*x = SafeDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafeDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafeDevice) ProtoMessage() {}

func (x *SafeDevice) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafeDevice.ProtoReflect.Descriptor instead.
func (*SafeDevice) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{132}
}

func (x *SafeDevice) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SafeDevice) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *SafeDevice) GetDeviceType() string {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return ""
}

func (x *SafeDevice) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

type SafeDeviceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *int32        `protobuf:"varint,1,opt,name=Count" json:"Count,omitempty"`
	List  []*SafeDevice `protobuf:"bytes,2,rep,name=List" json:"List,omitempty"`
}

func (x *SafeDeviceList) Reset() {
	*x = SafeDeviceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafeDeviceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafeDeviceList) ProtoMessage() {}

func (x *SafeDeviceList) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafeDeviceList.ProtoReflect.Descriptor instead.
func (*SafeDeviceList) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{133}
}

func (x *SafeDeviceList) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *SafeDeviceList) GetList() []*SafeDevice {
	if x != nil {
		return x.List
	}
	return nil
}

type PatternLockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatternVersion *uint32           `protobuf:"varint,1,opt,name=PatternVersion" json:"PatternVersion,omitempty"`
	Sign           *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=Sign" json:"Sign,omitempty"`
	LockStatus     *uint32           `protobuf:"varint,3,opt,name=LockStatus" json:"LockStatus,omitempty"`
}

func (x *PatternLockInfo) Reset() {
	*x = PatternLockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternLockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternLockInfo) ProtoMessage() {}

func (x *PatternLockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternLockInfo.ProtoReflect.Descriptor instead.
func (*PatternLockInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{134}
}

func (x *PatternLockInfo) GetPatternVersion() uint32 {
	if x != nil && x.PatternVersion != nil {
		return *x.PatternVersion
	}
	return 0
}

func (x *PatternLockInfo) GetSign() *SKBuiltinBufferT {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *PatternLockInfo) GetLockStatus() uint32 {
	if x != nil && x.LockStatus != nil {
		return *x.LockStatus
	}
	return 0
}

type UserInfoExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnsUserInfo         *SnsUserInfo         `protobuf:"bytes,1,opt,name=SnsUserInfo" json:"SnsUserInfo,omitempty"`
	MyBrandList         *string              `protobuf:"bytes,2,opt,name=MyBrandList" json:"MyBrandList,omitempty"`
	MsgPushSound        *string              `protobuf:"bytes,3,opt,name=MsgPushSound" json:"MsgPushSound,omitempty"`
	VoipPushSound       *string              `protobuf:"bytes,4,opt,name=VoipPushSound" json:"VoipPushSound,omitempty"`
	BigChatRoomSize     *uint32              `protobuf:"varint,5,opt,name=BigChatRoomSize" json:"BigChatRoomSize,omitempty"`
	BigChatRoomQuota    *uint32              `protobuf:"varint,6,opt,name=BigChatRoomQuota" json:"BigChatRoomQuota,omitempty"`
	BigChatRoomInvite   *uint32              `protobuf:"varint,7,opt,name=BigChatRoomInvite" json:"BigChatRoomInvite,omitempty"`
	SafeMobile          *string              `protobuf:"bytes,8,opt,name=SafeMobile" json:"SafeMobile,omitempty"`
	BigHeadImgUrl       *string              `protobuf:"bytes,9,opt,name=BigHeadImgUrl" json:"BigHeadImgUrl,omitempty"`
	SmallHeadImgUrl     *string              `protobuf:"bytes,10,opt,name=SmallHeadImgUrl" json:"SmallHeadImgUrl,omitempty"`
	MainAcctType        *uint32              `protobuf:"varint,11,opt,name=MainAcctType" json:"MainAcctType,omitempty"`
	ExtXml              *SKBuiltinStringT    `protobuf:"bytes,12,opt,name=ExtXml" json:"ExtXml,omitempty"`
	SafeDeviceList      *SafeDeviceList      `protobuf:"bytes,13,opt,name=SafeDeviceList" json:"SafeDeviceList,omitempty"`
	SafeDevice          *uint32              `protobuf:"varint,14,opt,name=SafeDevice" json:"SafeDevice,omitempty"`
	GrayscaleFlag       *uint32              `protobuf:"varint,15,opt,name=GrayscaleFlag" json:"GrayscaleFlag,omitempty"`
	GoogleContactName   *string              `protobuf:"bytes,16,opt,name=GoogleContactName" json:"GoogleContactName,omitempty"`
	IdcardNum           *string              `protobuf:"bytes,17,opt,name=IdcardNum" json:"IdcardNum,omitempty"`
	RealName            *string              `protobuf:"bytes,18,opt,name=RealName" json:"RealName,omitempty"`
	RegCountry          *string              `protobuf:"bytes,19,opt,name=RegCountry" json:"RegCountry,omitempty"`
	Bbppid              *string              `protobuf:"bytes,20,opt,name=Bbppid" json:"Bbppid,omitempty"`
	Bbpin               *string              `protobuf:"bytes,21,opt,name=Bbpin" json:"Bbpin,omitempty"`
	BbmnickName         *string              `protobuf:"bytes,22,opt,name=BbmnickName" json:"BbmnickName,omitempty"`
	LinkedinContactItem *LinkedinContactItem `protobuf:"bytes,23,opt,name=LinkedinContactItem" json:"LinkedinContactItem,omitempty"`
	Kfinfo              *string              `protobuf:"bytes,24,opt,name=Kfinfo" json:"Kfinfo,omitempty"`
	PatternLockInfo     *PatternLockInfo     `protobuf:"bytes,25,opt,name=PatternLockInfo" json:"PatternLockInfo,omitempty"`
	SecurityDeviceId    *string              `protobuf:"bytes,26,opt,name=SecurityDeviceId" json:"SecurityDeviceId,omitempty"`
	PayWalletType       *uint32              `protobuf:"varint,27,opt,name=PayWalletType" json:"PayWalletType,omitempty"`
	WeiDianInfo         *string              `protobuf:"bytes,28,opt,name=WeiDianInfo" json:"WeiDianInfo,omitempty"`
	WalletRegion        *uint32              `protobuf:"varint,29,opt,name=WalletRegion" json:"WalletRegion,omitempty"`
	ExtStatus           *uint64              `protobuf:"varint,30,opt,name=ExtStatus" json:"ExtStatus,omitempty"`
	F2FpushSound        *string              `protobuf:"bytes,31,opt,name=F2FpushSound" json:"F2FpushSound,omitempty"`
	UserStatus          *uint32              `protobuf:"varint,32,opt,name=UserStatus" json:"UserStatus,omitempty"`
	PaySetting          *uint64              `protobuf:"varint,33,opt,name=PaySetting" json:"PaySetting,omitempty"`
}

func (x *UserInfoExt) Reset() {
	*x = UserInfoExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoExt) ProtoMessage() {}

func (x *UserInfoExt) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoExt.ProtoReflect.Descriptor instead.
func (*UserInfoExt) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{135}
}

func (x *UserInfoExt) GetSnsUserInfo() *SnsUserInfo {
	if x != nil {
		return x.SnsUserInfo
	}
	return nil
}

func (x *UserInfoExt) GetMyBrandList() string {
	if x != nil && x.MyBrandList != nil {
		return *x.MyBrandList
	}
	return ""
}

func (x *UserInfoExt) GetMsgPushSound() string {
	if x != nil && x.MsgPushSound != nil {
		return *x.MsgPushSound
	}
	return ""
}

func (x *UserInfoExt) GetVoipPushSound() string {
	if x != nil && x.VoipPushSound != nil {
		return *x.VoipPushSound
	}
	return ""
}

func (x *UserInfoExt) GetBigChatRoomSize() uint32 {
	if x != nil && x.BigChatRoomSize != nil {
		return *x.BigChatRoomSize
	}
	return 0
}

func (x *UserInfoExt) GetBigChatRoomQuota() uint32 {
	if x != nil && x.BigChatRoomQuota != nil {
		return *x.BigChatRoomQuota
	}
	return 0
}

func (x *UserInfoExt) GetBigChatRoomInvite() uint32 {
	if x != nil && x.BigChatRoomInvite != nil {
		return *x.BigChatRoomInvite
	}
	return 0
}

func (x *UserInfoExt) GetSafeMobile() string {
	if x != nil && x.SafeMobile != nil {
		return *x.SafeMobile
	}
	return ""
}

func (x *UserInfoExt) GetBigHeadImgUrl() string {
	if x != nil && x.BigHeadImgUrl != nil {
		return *x.BigHeadImgUrl
	}
	return ""
}

func (x *UserInfoExt) GetSmallHeadImgUrl() string {
	if x != nil && x.SmallHeadImgUrl != nil {
		return *x.SmallHeadImgUrl
	}
	return ""
}

func (x *UserInfoExt) GetMainAcctType() uint32 {
	if x != nil && x.MainAcctType != nil {
		return *x.MainAcctType
	}
	return 0
}

func (x *UserInfoExt) GetExtXml() *SKBuiltinStringT {
	if x != nil {
		return x.ExtXml
	}
	return nil
}

func (x *UserInfoExt) GetSafeDeviceList() *SafeDeviceList {
	if x != nil {
		return x.SafeDeviceList
	}
	return nil
}

func (x *UserInfoExt) GetSafeDevice() uint32 {
	if x != nil && x.SafeDevice != nil {
		return *x.SafeDevice
	}
	return 0
}

func (x *UserInfoExt) GetGrayscaleFlag() uint32 {
	if x != nil && x.GrayscaleFlag != nil {
		return *x.GrayscaleFlag
	}
	return 0
}

func (x *UserInfoExt) GetGoogleContactName() string {
	if x != nil && x.GoogleContactName != nil {
		return *x.GoogleContactName
	}
	return ""
}

func (x *UserInfoExt) GetIdcardNum() string {
	if x != nil && x.IdcardNum != nil {
		return *x.IdcardNum
	}
	return ""
}

func (x *UserInfoExt) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *UserInfoExt) GetRegCountry() string {
	if x != nil && x.RegCountry != nil {
		return *x.RegCountry
	}
	return ""
}

func (x *UserInfoExt) GetBbppid() string {
	if x != nil && x.Bbppid != nil {
		return *x.Bbppid
	}
	return ""
}

func (x *UserInfoExt) GetBbpin() string {
	if x != nil && x.Bbpin != nil {
		return *x.Bbpin
	}
	return ""
}

func (x *UserInfoExt) GetBbmnickName() string {
	if x != nil && x.BbmnickName != nil {
		return *x.BbmnickName
	}
	return ""
}

func (x *UserInfoExt) GetLinkedinContactItem() *LinkedinContactItem {
	if x != nil {
		return x.LinkedinContactItem
	}
	return nil
}

func (x *UserInfoExt) GetKfinfo() string {
	if x != nil && x.Kfinfo != nil {
		return *x.Kfinfo
	}
	return ""
}

func (x *UserInfoExt) GetPatternLockInfo() *PatternLockInfo {
	if x != nil {
		return x.PatternLockInfo
	}
	return nil
}

func (x *UserInfoExt) GetSecurityDeviceId() string {
	if x != nil && x.SecurityDeviceId != nil {
		return *x.SecurityDeviceId
	}
	return ""
}

func (x *UserInfoExt) GetPayWalletType() uint32 {
	if x != nil && x.PayWalletType != nil {
		return *x.PayWalletType
	}
	return 0
}

func (x *UserInfoExt) GetWeiDianInfo() string {
	if x != nil && x.WeiDianInfo != nil {
		return *x.WeiDianInfo
	}
	return ""
}

func (x *UserInfoExt) GetWalletRegion() uint32 {
	if x != nil && x.WalletRegion != nil {
		return *x.WalletRegion
	}
	return 0
}

func (x *UserInfoExt) GetExtStatus() uint64 {
	if x != nil && x.ExtStatus != nil {
		return *x.ExtStatus
	}
	return 0
}

func (x *UserInfoExt) GetF2FpushSound() string {
	if x != nil && x.F2FpushSound != nil {
		return *x.F2FpushSound
	}
	return ""
}

func (x *UserInfoExt) GetUserStatus() uint32 {
	if x != nil && x.UserStatus != nil {
		return *x.UserStatus
	}
	return 0
}

func (x *UserInfoExt) GetPaySetting() uint64 {
	if x != nil && x.PaySetting != nil {
		return *x.PaySetting
	}
	return 0
}

type FunctionSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionId  *uint32 `protobuf:"varint,1,opt,name=FunctionId" json:"FunctionId,omitempty"`
	SwitchValue *uint32 `protobuf:"varint,2,opt,name=SwitchValue" json:"SwitchValue,omitempty"`
}

func (x *FunctionSwitch) Reset() {
	*x = FunctionSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionSwitch) ProtoMessage() {}

func (x *FunctionSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionSwitch.ProtoReflect.Descriptor instead.
func (*FunctionSwitch) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{136}
}

func (x *FunctionSwitch) GetFunctionId() uint32 {
	if x != nil && x.FunctionId != nil {
		return *x.FunctionId
	}
	return 0
}

func (x *FunctionSwitch) GetSwitchValue() uint32 {
	if x != nil && x.SwitchValue != nil {
		return *x.SwitchValue
	}
	return 0
}

// 心跳
type HeartBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest               *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	TimeStamp                 *uint32           `protobuf:"varint,2,opt,name=TimeStamp" json:"TimeStamp,omitempty"`
	KeyBuf                    *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=KeyBuf" json:"KeyBuf,omitempty"`
	BlueToothBroadCastContent *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=BlueToothBroadCastContent" json:"BlueToothBroadCastContent,omitempty"`
	Scene                     *uint32           `protobuf:"varint,5,opt,name=Scene" json:"Scene,omitempty"`
}

func (x *HeartBeatRequest) Reset() {
	*x = HeartBeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatRequest) ProtoMessage() {}

func (x *HeartBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatRequest.ProtoReflect.Descriptor instead.
func (*HeartBeatRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{137}
}

func (x *HeartBeatRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *HeartBeatRequest) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *HeartBeatRequest) GetKeyBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.KeyBuf
	}
	return nil
}

func (x *HeartBeatRequest) GetBlueToothBroadCastContent() *SKBuiltinBufferT {
	if x != nil {
		return x.BlueToothBroadCastContent
	}
	return nil
}

func (x *HeartBeatRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

type HeartBeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse              *BaseResponse     `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	NextTime                  *uint32           `protobuf:"varint,2,opt,name=NextTime" json:"NextTime,omitempty"`
	Selector                  *uint32           `protobuf:"varint,3,opt,name=Selector" json:"Selector,omitempty"`
	BlueToothBroadCastContent *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=BlueToothBroadCastContent" json:"BlueToothBroadCastContent,omitempty"`
}

func (x *HeartBeatResponse) Reset() {
	*x = HeartBeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatResponse) ProtoMessage() {}

func (x *HeartBeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatResponse.ProtoReflect.Descriptor instead.
func (*HeartBeatResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{138}
}

func (x *HeartBeatResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *HeartBeatResponse) GetNextTime() uint32 {
	if x != nil && x.NextTime != nil {
		return *x.NextTime
	}
	return 0
}

func (x *HeartBeatResponse) GetSelector() uint32 {
	if x != nil && x.Selector != nil {
		return *x.Selector
	}
	return 0
}

func (x *HeartBeatResponse) GetBlueToothBroadCastContent() *SKBuiltinBufferT {
	if x != nil {
		return x.BlueToothBroadCastContent
	}
	return nil
}

// 退出
type LogOutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Scene       *uint32      `protobuf:"varint,2,opt,name=Scene" json:"Scene,omitempty"`
}

func (x *LogOutRequest) Reset() {
	*x = LogOutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogOutRequest) ProtoMessage() {}

func (x *LogOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogOutRequest.ProtoReflect.Descriptor instead.
func (*LogOutRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{139}
}

func (x *LogOutRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *LogOutRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

type LogOutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse     *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	NoPwdLoginTicket *string       `protobuf:"bytes,2,opt,name=noPwdLoginTicket" json:"noPwdLoginTicket,omitempty"`
}

func (x *LogOutResponse) Reset() {
	*x = LogOutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogOutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogOutResponse) ProtoMessage() {}

func (x *LogOutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogOutResponse.ProtoReflect.Descriptor instead.
func (*LogOutResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{140}
}

func (x *LogOutResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *LogOutResponse) GetNoPwdLoginTicket() string {
	if x != nil && x.NoPwdLoginTicket != nil {
		return *x.NoPwdLoginTicket
	}
	return ""
}

// 收藏
type FavSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector *uint32           `protobuf:"varint,1,opt,name=Selector" json:"Selector,omitempty"`
	KeyBuf   *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=KeyBuf" json:"KeyBuf,omitempty"`
}

func (x *FavSyncRequest) Reset() {
	*x = FavSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavSyncRequest) ProtoMessage() {}

func (x *FavSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavSyncRequest.ProtoReflect.Descriptor instead.
func (*FavSyncRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{141}
}

func (x *FavSyncRequest) GetSelector() uint32 {
	if x != nil && x.Selector != nil {
		return *x.Selector
	}
	return 0
}

func (x *FavSyncRequest) GetKeyBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.KeyBuf
	}
	return nil
}

type FavSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32            `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	CmdList      *CmdList          `protobuf:"bytes,2,opt,name=CmdList" json:"CmdList,omitempty"`
	KeyBuf       *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=KeyBuf" json:"KeyBuf,omitempty"`
	ContinueFlag *uint32           `protobuf:"varint,4,opt,name=ContinueFlag" json:"ContinueFlag,omitempty"`
}

func (x *FavSyncResponse) Reset() {
	*x = FavSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavSyncResponse) ProtoMessage() {}

func (x *FavSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavSyncResponse.ProtoReflect.Descriptor instead.
func (*FavSyncResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{142}
}

func (x *FavSyncResponse) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *FavSyncResponse) GetCmdList() *CmdList {
	if x != nil {
		return x.CmdList
	}
	return nil
}

func (x *FavSyncResponse) GetKeyBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.KeyBuf
	}
	return nil
}

func (x *FavSyncResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

type AddFavItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FavId      *int32  `protobuf:"varint,1,opt,name=FavId" json:"FavId,omitempty"`
	Type       *int32  `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	Flag       *uint32 `protobuf:"varint,3,opt,name=Flag" json:"Flag,omitempty"`
	UpdateTime *uint32 `protobuf:"varint,4,opt,name=UpdateTime" json:"UpdateTime,omitempty"`
	UpdateSeq  *uint32 `protobuf:"varint,5,opt,name=UpdateSeq" json:"UpdateSeq,omitempty"`
}

func (x *AddFavItem) Reset() {
	*x = AddFavItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFavItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFavItem) ProtoMessage() {}

func (x *AddFavItem) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFavItem.ProtoReflect.Descriptor instead.
func (*AddFavItem) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{143}
}

func (x *AddFavItem) GetFavId() int32 {
	if x != nil && x.FavId != nil {
		return *x.FavId
	}
	return 0
}

func (x *AddFavItem) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *AddFavItem) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *AddFavItem) GetUpdateTime() uint32 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *AddFavItem) GetUpdateSeq() uint32 {
	if x != nil && x.UpdateSeq != nil {
		return *x.UpdateSeq
	}
	return 0
}

type BatchGetFavItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Count       *int32       `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
	FavIdList   []int32      `protobuf:"varint,3,rep,packed,name=FavIdList" json:"FavIdList,omitempty"`
}

func (x *BatchGetFavItemRequest) Reset() {
	*x = BatchGetFavItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetFavItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetFavItemRequest) ProtoMessage() {}

func (x *BatchGetFavItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetFavItemRequest.ProtoReflect.Descriptor instead.
func (*BatchGetFavItemRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{144}
}

func (x *BatchGetFavItemRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *BatchGetFavItemRequest) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *BatchGetFavItemRequest) GetFavIdList() []int32 {
	if x != nil {
		return x.FavIdList
	}
	return nil
}

type BatchGetFavItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	Count        *uint32       `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
	ObjectList   []*FavObject  `protobuf:"bytes,3,rep,name=ObjectList" json:"ObjectList,omitempty"`
}

func (x *BatchGetFavItemResponse) Reset() {
	*x = BatchGetFavItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetFavItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetFavItemResponse) ProtoMessage() {}

func (x *BatchGetFavItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetFavItemResponse.ProtoReflect.Descriptor instead.
func (*BatchGetFavItemResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{145}
}

func (x *BatchGetFavItemResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *BatchGetFavItemResponse) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *BatchGetFavItemResponse) GetObjectList() []*FavObject {
	if x != nil {
		return x.ObjectList
	}
	return nil
}

type FavObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FavId      *uint32 `protobuf:"varint,1,opt,name=FavId" json:"FavId,omitempty"`
	Status     *int32  `protobuf:"varint,2,opt,name=Status" json:"Status,omitempty"`
	Object     *string `protobuf:"bytes,3,opt,name=Object" json:"Object,omitempty"`
	Flag       *uint32 `protobuf:"varint,4,opt,name=Flag" json:"Flag,omitempty"`
	UpdateTime *uint32 `protobuf:"varint,5,opt,name=UpdateTime" json:"UpdateTime,omitempty"`
	UpdateSeq  *uint32 `protobuf:"varint,6,opt,name=UpdateSeq" json:"UpdateSeq,omitempty"`
}

func (x *FavObject) Reset() {
	*x = FavObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavObject) ProtoMessage() {}

func (x *FavObject) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavObject.ProtoReflect.Descriptor instead.
func (*FavObject) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{146}
}

func (x *FavObject) GetFavId() uint32 {
	if x != nil && x.FavId != nil {
		return *x.FavId
	}
	return 0
}

func (x *FavObject) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *FavObject) GetObject() string {
	if x != nil && x.Object != nil {
		return *x.Object
	}
	return ""
}

func (x *FavObject) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *FavObject) GetUpdateTime() uint32 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *FavObject) GetUpdateSeq() uint32 {
	if x != nil && x.UpdateSeq != nil {
		return *x.UpdateSeq
	}
	return 0
}

type BatchDelFavItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Count       *int32       `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
	FavIdList   []int32      `protobuf:"varint,3,rep,packed,name=FavIdList" json:"FavIdList,omitempty"`
}

func (x *BatchDelFavItemRequest) Reset() {
	*x = BatchDelFavItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDelFavItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDelFavItemRequest) ProtoMessage() {}

func (x *BatchDelFavItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDelFavItemRequest.ProtoReflect.Descriptor instead.
func (*BatchDelFavItemRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{147}
}

func (x *BatchDelFavItemRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *BatchDelFavItemRequest) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *BatchDelFavItemRequest) GetFavIdList() []int32 {
	if x != nil {
		return x.FavIdList
	}
	return nil
}

type BatchDelFavItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse    `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	Count        *uint32          `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
	List         []*DelFavItemRsp `protobuf:"bytes,3,rep,name=List" json:"List,omitempty"`
}

func (x *BatchDelFavItemResponse) Reset() {
	*x = BatchDelFavItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDelFavItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDelFavItemResponse) ProtoMessage() {}

func (x *BatchDelFavItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDelFavItemResponse.ProtoReflect.Descriptor instead.
func (*BatchDelFavItemResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{148}
}

func (x *BatchDelFavItemResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *BatchDelFavItemResponse) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *BatchDelFavItemResponse) GetList() []*DelFavItemRsp {
	if x != nil {
		return x.List
	}
	return nil
}

type DelFavItemRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *int32  `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	FavId *uint32 `protobuf:"varint,2,opt,name=FavId" json:"FavId,omitempty"`
}

func (x *DelFavItemRsp) Reset() {
	*x = DelFavItemRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelFavItemRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelFavItemRsp) ProtoMessage() {}

func (x *DelFavItemRsp) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelFavItemRsp.ProtoReflect.Descriptor instead.
func (*DelFavItemRsp) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{149}
}

func (x *DelFavItemRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *DelFavItemRsp) GetFavId() uint32 {
	if x != nil && x.FavId != nil {
		return *x.FavId
	}
	return 0
}

// 搜索好友
type SearchContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	UserName    *SKBuiltinStringT `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
	OpCode      *uint32           `protobuf:"varint,3,opt,name=OpCode" json:"OpCode,omitempty"`
	ReqBuf      *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=ReqBuf" json:"ReqBuf,omitempty"`
	FromScene   *uint32           `protobuf:"varint,5,opt,name=FromScene" json:"FromScene,omitempty"`
	SearchScene *uint32           `protobuf:"varint,6,opt,name=SearchScene" json:"SearchScene,omitempty"`
}

func (x *SearchContactRequest) Reset() {
	*x = SearchContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchContactRequest) ProtoMessage() {}

func (x *SearchContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchContactRequest.ProtoReflect.Descriptor instead.
func (*SearchContactRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{150}
}

func (x *SearchContactRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SearchContactRequest) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *SearchContactRequest) GetOpCode() uint32 {
	if x != nil && x.OpCode != nil {
		return *x.OpCode
	}
	return 0
}

func (x *SearchContactRequest) GetReqBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.ReqBuf
	}
	return nil
}

func (x *SearchContactRequest) GetFromScene() uint32 {
	if x != nil && x.FromScene != nil {
		return *x.FromScene
	}
	return 0
}

func (x *SearchContactRequest) GetSearchScene() uint32 {
	if x != nil && x.SearchScene != nil {
		return *x.SearchScene
	}
	return 0
}

type SearchContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse       *BaseResponse        `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	UserName           *SKBuiltinStringT    `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
	NickName           *SKBuiltinStringT    `protobuf:"bytes,3,opt,name=NickName" json:"NickName,omitempty"`
	Pyinitial          *SKBuiltinStringT    `protobuf:"bytes,4,opt,name=Pyinitial" json:"Pyinitial,omitempty"`
	QuanPin            *SKBuiltinStringT    `protobuf:"bytes,5,opt,name=QuanPin" json:"QuanPin,omitempty"`
	Sex                *int32               `protobuf:"varint,6,opt,name=Sex" json:"Sex,omitempty"`
	ImgBuf             *SKBuiltinBufferT    `protobuf:"bytes,7,opt,name=ImgBuf" json:"ImgBuf,omitempty"`
	Province           *string              `protobuf:"bytes,8,opt,name=Province" json:"Province,omitempty"`
	City               *string              `protobuf:"bytes,9,opt,name=City" json:"City,omitempty"`
	Signature          *string              `protobuf:"bytes,10,opt,name=Signature" json:"Signature,omitempty"`
	PersonalCard       *uint32              `protobuf:"varint,11,opt,name=PersonalCard" json:"PersonalCard,omitempty"`
	VerifyFlag         *int32               `protobuf:"varint,12,opt,name=VerifyFlag" json:"VerifyFlag,omitempty"`
	VerifyInfo         *string              `protobuf:"bytes,13,opt,name=VerifyInfo" json:"VerifyInfo,omitempty"`
	Weibo              *string              `protobuf:"bytes,14,opt,name=Weibo" json:"Weibo,omitempty"`
	Alias              *string              `protobuf:"bytes,15,opt,name=Alias" json:"Alias,omitempty"`
	WeiboNickname      *string              `protobuf:"bytes,16,opt,name=WeiboNickname" json:"WeiboNickname,omitempty"`
	WeiboFlag          *int32               `protobuf:"varint,17,opt,name=WeiboFlag" json:"WeiboFlag,omitempty"`
	AlbumStyle         *int32               `protobuf:"varint,18,opt,name=AlbumStyle" json:"AlbumStyle,omitempty"`
	AlbumFlag          *int32               `protobuf:"varint,19,opt,name=AlbumFlag" json:"AlbumFlag,omitempty"`
	AlbumBgimgId       *string              `protobuf:"bytes,20,opt,name=AlbumBgimgId" json:"AlbumBgimgId,omitempty"`
	SnsUserInfo        *SnsUserInfo         `protobuf:"bytes,21,opt,name=SnsUserInfo" json:"SnsUserInfo,omitempty"`
	Country            *string              `protobuf:"bytes,22,opt,name=Country" json:"Country,omitempty"`
	MyBrandList        *string              `protobuf:"bytes,23,opt,name=MyBrandList" json:"MyBrandList,omitempty"`
	CustomizedInfo     *CustomizedInfo      `protobuf:"bytes,24,opt,name=CustomizedInfo" json:"CustomizedInfo,omitempty"`
	ContactCount       *uint32              `protobuf:"varint,25,opt,name=ContactCount" json:"ContactCount,omitempty"`
	Contactlist        []*SearchContactItem `protobuf:"bytes,26,rep,name=Contactlist" json:"Contactlist,omitempty"`
	BigHeadImgUrl      *string              `protobuf:"bytes,27,opt,name=BigHeadImgUrl" json:"BigHeadImgUrl,omitempty"`
	SmallHeadImgUrl    *string              `protobuf:"bytes,28,opt,name=SmallHeadImgUrl" json:"SmallHeadImgUrl,omitempty"`
	ResBuf             *SKBuiltinBufferT    `protobuf:"bytes,29,opt,name=ResBuf" json:"ResBuf,omitempty"`
	AntispamTicket     *string              `protobuf:"bytes,30,opt,name=AntispamTicket" json:"AntispamTicket,omitempty"`
	KfworkerId         *string              `protobuf:"bytes,31,opt,name=KfworkerId" json:"KfworkerId,omitempty"`
	MatchType          *uint32              `protobuf:"varint,32,opt,name=MatchType" json:"MatchType,omitempty"`
	PopupInfoMsg       *string              `protobuf:"bytes,33,opt,name=PopupInfoMsg" json:"PopupInfoMsg,omitempty"`
	OpenImcontactCount *uint32              `protobuf:"varint,34,opt,name=OpenImcontactCount" json:"OpenImcontactCount,omitempty"`
	OpenImcontactList  []*OpenIMContact     `protobuf:"bytes,35,rep,name=OpenImcontactList" json:"OpenImcontactList,omitempty"`
}

func (x *SearchContactResponse) Reset() {
	*x = SearchContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchContactResponse) ProtoMessage() {}

func (x *SearchContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchContactResponse.ProtoReflect.Descriptor instead.
func (*SearchContactResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{151}
}

func (x *SearchContactResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *SearchContactResponse) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *SearchContactResponse) GetNickName() *SKBuiltinStringT {
	if x != nil {
		return x.NickName
	}
	return nil
}

func (x *SearchContactResponse) GetPyinitial() *SKBuiltinStringT {
	if x != nil {
		return x.Pyinitial
	}
	return nil
}

func (x *SearchContactResponse) GetQuanPin() *SKBuiltinStringT {
	if x != nil {
		return x.QuanPin
	}
	return nil
}

func (x *SearchContactResponse) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *SearchContactResponse) GetImgBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.ImgBuf
	}
	return nil
}

func (x *SearchContactResponse) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *SearchContactResponse) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *SearchContactResponse) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *SearchContactResponse) GetPersonalCard() uint32 {
	if x != nil && x.PersonalCard != nil {
		return *x.PersonalCard
	}
	return 0
}

func (x *SearchContactResponse) GetVerifyFlag() int32 {
	if x != nil && x.VerifyFlag != nil {
		return *x.VerifyFlag
	}
	return 0
}

func (x *SearchContactResponse) GetVerifyInfo() string {
	if x != nil && x.VerifyInfo != nil {
		return *x.VerifyInfo
	}
	return ""
}

func (x *SearchContactResponse) GetWeibo() string {
	if x != nil && x.Weibo != nil {
		return *x.Weibo
	}
	return ""
}

func (x *SearchContactResponse) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *SearchContactResponse) GetWeiboNickname() string {
	if x != nil && x.WeiboNickname != nil {
		return *x.WeiboNickname
	}
	return ""
}

func (x *SearchContactResponse) GetWeiboFlag() int32 {
	if x != nil && x.WeiboFlag != nil {
		return *x.WeiboFlag
	}
	return 0
}

func (x *SearchContactResponse) GetAlbumStyle() int32 {
	if x != nil && x.AlbumStyle != nil {
		return *x.AlbumStyle
	}
	return 0
}

func (x *SearchContactResponse) GetAlbumFlag() int32 {
	if x != nil && x.AlbumFlag != nil {
		return *x.AlbumFlag
	}
	return 0
}

func (x *SearchContactResponse) GetAlbumBgimgId() string {
	if x != nil && x.AlbumBgimgId != nil {
		return *x.AlbumBgimgId
	}
	return ""
}

func (x *SearchContactResponse) GetSnsUserInfo() *SnsUserInfo {
	if x != nil {
		return x.SnsUserInfo
	}
	return nil
}

func (x *SearchContactResponse) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *SearchContactResponse) GetMyBrandList() string {
	if x != nil && x.MyBrandList != nil {
		return *x.MyBrandList
	}
	return ""
}

func (x *SearchContactResponse) GetCustomizedInfo() *CustomizedInfo {
	if x != nil {
		return x.CustomizedInfo
	}
	return nil
}

func (x *SearchContactResponse) GetContactCount() uint32 {
	if x != nil && x.ContactCount != nil {
		return *x.ContactCount
	}
	return 0
}

func (x *SearchContactResponse) GetContactlist() []*SearchContactItem {
	if x != nil {
		return x.Contactlist
	}
	return nil
}

func (x *SearchContactResponse) GetBigHeadImgUrl() string {
	if x != nil && x.BigHeadImgUrl != nil {
		return *x.BigHeadImgUrl
	}
	return ""
}

func (x *SearchContactResponse) GetSmallHeadImgUrl() string {
	if x != nil && x.SmallHeadImgUrl != nil {
		return *x.SmallHeadImgUrl
	}
	return ""
}

func (x *SearchContactResponse) GetResBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.ResBuf
	}
	return nil
}

func (x *SearchContactResponse) GetAntispamTicket() string {
	if x != nil && x.AntispamTicket != nil {
		return *x.AntispamTicket
	}
	return ""
}

func (x *SearchContactResponse) GetKfworkerId() string {
	if x != nil && x.KfworkerId != nil {
		return *x.KfworkerId
	}
	return ""
}

func (x *SearchContactResponse) GetMatchType() uint32 {
	if x != nil && x.MatchType != nil {
		return *x.MatchType
	}
	return 0
}

func (x *SearchContactResponse) GetPopupInfoMsg() string {
	if x != nil && x.PopupInfoMsg != nil {
		return *x.PopupInfoMsg
	}
	return ""
}

func (x *SearchContactResponse) GetOpenImcontactCount() uint32 {
	if x != nil && x.OpenImcontactCount != nil {
		return *x.OpenImcontactCount
	}
	return 0
}

func (x *SearchContactResponse) GetOpenImcontactList() []*OpenIMContact {
	if x != nil {
		return x.OpenImcontactList
	}
	return nil
}

type SearchContactItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName        *SKBuiltinStringT `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	NickName        *SKBuiltinStringT `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty"`
	Pyinitial       *SKBuiltinStringT `protobuf:"bytes,3,opt,name=Pyinitial" json:"Pyinitial,omitempty"`
	QuanPin         *SKBuiltinStringT `protobuf:"bytes,4,opt,name=QuanPin" json:"QuanPin,omitempty"`
	Sex             *int32            `protobuf:"varint,5,opt,name=sex" json:"sex,omitempty"`
	ImgBuf          *SKBuiltinBufferT `protobuf:"bytes,6,opt,name=imgBuf" json:"imgBuf,omitempty"`
	Province        *string           `protobuf:"bytes,7,opt,name=province" json:"province,omitempty"`
	City            *string           `protobuf:"bytes,8,opt,name=city" json:"city,omitempty"`
	Signature       *string           `protobuf:"bytes,9,opt,name=signature" json:"signature,omitempty"`
	PersonalCard    *uint32           `protobuf:"varint,10,opt,name=personalCard" json:"personalCard,omitempty"`
	VerifyFlag      *uint32           `protobuf:"varint,11,opt,name=verifyFlag" json:"verifyFlag,omitempty"`
	VerifyInfo      *string           `protobuf:"bytes,12,opt,name=verifyInfo" json:"verifyInfo,omitempty"`
	Weibo           *string           `protobuf:"bytes,13,opt,name=weibo" json:"weibo,omitempty"`
	Alias           *string           `protobuf:"bytes,14,opt,name=alias" json:"alias,omitempty"`
	WeiboNickname   *string           `protobuf:"bytes,15,opt,name=weiboNickname" json:"weiboNickname,omitempty"`
	WeiboFlag       *uint32           `protobuf:"varint,16,opt,name=weiboFlag" json:"weiboFlag,omitempty"`
	AlbumStyle      *int32            `protobuf:"varint,17,opt,name=albumStyle" json:"albumStyle,omitempty"`
	AlbumFlag       *int32            `protobuf:"varint,18,opt,name=albumFlag" json:"albumFlag,omitempty"`
	AlbumBgimgId    *string           `protobuf:"bytes,19,opt,name=albumBgimgId" json:"albumBgimgId,omitempty"`
	SnsUserInfo     *SnsUserInfo      `protobuf:"bytes,20,opt,name=snsUserInfo" json:"snsUserInfo,omitempty"`
	Country         *string           `protobuf:"bytes,21,opt,name=country" json:"country,omitempty"`
	MyBrandList     *string           `protobuf:"bytes,22,opt,name=myBrandList" json:"myBrandList,omitempty"`
	CustomizedInfo  *CustomizedInfo   `protobuf:"bytes,23,opt,name=customizedInfo" json:"customizedInfo,omitempty"`
	BigHeadImgUrl   *string           `protobuf:"bytes,24,opt,name=bigHeadImgUrl" json:"bigHeadImgUrl,omitempty"`
	SmallHeadImgUrl *string           `protobuf:"bytes,25,opt,name=smallHeadImgUrl" json:"smallHeadImgUrl,omitempty"`
	AntispamTicket  *string           `protobuf:"bytes,26,opt,name=antispamTicket" json:"antispamTicket,omitempty"`
	MatchType       *uint32           `protobuf:"varint,27,opt,name=matchType" json:"matchType,omitempty"`
}

func (x *SearchContactItem) Reset() {
	*x = SearchContactItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchContactItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchContactItem) ProtoMessage() {}

func (x *SearchContactItem) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchContactItem.ProtoReflect.Descriptor instead.
func (*SearchContactItem) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{152}
}

func (x *SearchContactItem) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *SearchContactItem) GetNickName() *SKBuiltinStringT {
	if x != nil {
		return x.NickName
	}
	return nil
}

func (x *SearchContactItem) GetPyinitial() *SKBuiltinStringT {
	if x != nil {
		return x.Pyinitial
	}
	return nil
}

func (x *SearchContactItem) GetQuanPin() *SKBuiltinStringT {
	if x != nil {
		return x.QuanPin
	}
	return nil
}

func (x *SearchContactItem) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *SearchContactItem) GetImgBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.ImgBuf
	}
	return nil
}

func (x *SearchContactItem) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *SearchContactItem) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *SearchContactItem) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *SearchContactItem) GetPersonalCard() uint32 {
	if x != nil && x.PersonalCard != nil {
		return *x.PersonalCard
	}
	return 0
}

func (x *SearchContactItem) GetVerifyFlag() uint32 {
	if x != nil && x.VerifyFlag != nil {
		return *x.VerifyFlag
	}
	return 0
}

func (x *SearchContactItem) GetVerifyInfo() string {
	if x != nil && x.VerifyInfo != nil {
		return *x.VerifyInfo
	}
	return ""
}

func (x *SearchContactItem) GetWeibo() string {
	if x != nil && x.Weibo != nil {
		return *x.Weibo
	}
	return ""
}

func (x *SearchContactItem) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *SearchContactItem) GetWeiboNickname() string {
	if x != nil && x.WeiboNickname != nil {
		return *x.WeiboNickname
	}
	return ""
}

func (x *SearchContactItem) GetWeiboFlag() uint32 {
	if x != nil && x.WeiboFlag != nil {
		return *x.WeiboFlag
	}
	return 0
}

func (x *SearchContactItem) GetAlbumStyle() int32 {
	if x != nil && x.AlbumStyle != nil {
		return *x.AlbumStyle
	}
	return 0
}

func (x *SearchContactItem) GetAlbumFlag() int32 {
	if x != nil && x.AlbumFlag != nil {
		return *x.AlbumFlag
	}
	return 0
}

func (x *SearchContactItem) GetAlbumBgimgId() string {
	if x != nil && x.AlbumBgimgId != nil {
		return *x.AlbumBgimgId
	}
	return ""
}

func (x *SearchContactItem) GetSnsUserInfo() *SnsUserInfo {
	if x != nil {
		return x.SnsUserInfo
	}
	return nil
}

func (x *SearchContactItem) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *SearchContactItem) GetMyBrandList() string {
	if x != nil && x.MyBrandList != nil {
		return *x.MyBrandList
	}
	return ""
}

func (x *SearchContactItem) GetCustomizedInfo() *CustomizedInfo {
	if x != nil {
		return x.CustomizedInfo
	}
	return nil
}

func (x *SearchContactItem) GetBigHeadImgUrl() string {
	if x != nil && x.BigHeadImgUrl != nil {
		return *x.BigHeadImgUrl
	}
	return ""
}

func (x *SearchContactItem) GetSmallHeadImgUrl() string {
	if x != nil && x.SmallHeadImgUrl != nil {
		return *x.SmallHeadImgUrl
	}
	return ""
}

func (x *SearchContactItem) GetAntispamTicket() string {
	if x != nil && x.AntispamTicket != nil {
		return *x.AntispamTicket
	}
	return ""
}

func (x *SearchContactItem) GetMatchType() uint32 {
	if x != nil && x.MatchType != nil {
		return *x.MatchType
	}
	return 0
}

type OpenIMContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TpUserName      *string                  `protobuf:"bytes,1,opt,name=tpUserName" json:"tpUserName,omitempty"`
	Nickname        *string                  `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	Type            *uint32                  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Remark          *string                  `protobuf:"bytes,4,opt,name=remark" json:"remark,omitempty"`
	BigHeadimg      *string                  `protobuf:"bytes,5,opt,name=bigHeadimg" json:"bigHeadimg,omitempty"`
	SmallHeadimg    *string                  `protobuf:"bytes,6,opt,name=smallHeadimg" json:"smallHeadimg,omitempty"`
	Source          *uint32                  `protobuf:"varint,7,opt,name=source" json:"source,omitempty"`
	NicknamePyinit  *string                  `protobuf:"bytes,8,opt,name=nicknamePyinit" json:"nicknamePyinit,omitempty"`
	NicknameQuanpin *string                  `protobuf:"bytes,9,opt,name=nicknameQuanpin" json:"nicknameQuanpin,omitempty"`
	RemarkPyinit    *string                  `protobuf:"bytes,10,opt,name=remarkPyinit" json:"remarkPyinit,omitempty"`
	RemarkQuanpin   *string                  `protobuf:"bytes,11,opt,name=remarkQuanpin" json:"remarkQuanpin,omitempty"`
	CustomInfo      *OpenIMContactCustomInfo `protobuf:"bytes,12,opt,name=customInfo" json:"customInfo,omitempty"`
	AntispamTicket  *string                  `protobuf:"bytes,13,opt,name=antispamTicket" json:"antispamTicket,omitempty"`
	AppId           *string                  `protobuf:"bytes,14,opt,name=appId" json:"appId,omitempty"`
	Sex             *uint32                  `protobuf:"varint,15,opt,name=sex" json:"sex,omitempty"`
	DescWordingId   *string                  `protobuf:"bytes,16,opt,name=descWordingId" json:"descWordingId,omitempty"`
}

func (x *OpenIMContact) Reset() {
	*x = OpenIMContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenIMContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIMContact) ProtoMessage() {}

func (x *OpenIMContact) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIMContact.ProtoReflect.Descriptor instead.
func (*OpenIMContact) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{153}
}

func (x *OpenIMContact) GetTpUserName() string {
	if x != nil && x.TpUserName != nil {
		return *x.TpUserName
	}
	return ""
}

func (x *OpenIMContact) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *OpenIMContact) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *OpenIMContact) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *OpenIMContact) GetBigHeadimg() string {
	if x != nil && x.BigHeadimg != nil {
		return *x.BigHeadimg
	}
	return ""
}

func (x *OpenIMContact) GetSmallHeadimg() string {
	if x != nil && x.SmallHeadimg != nil {
		return *x.SmallHeadimg
	}
	return ""
}

func (x *OpenIMContact) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *OpenIMContact) GetNicknamePyinit() string {
	if x != nil && x.NicknamePyinit != nil {
		return *x.NicknamePyinit
	}
	return ""
}

func (x *OpenIMContact) GetNicknameQuanpin() string {
	if x != nil && x.NicknameQuanpin != nil {
		return *x.NicknameQuanpin
	}
	return ""
}

func (x *OpenIMContact) GetRemarkPyinit() string {
	if x != nil && x.RemarkPyinit != nil {
		return *x.RemarkPyinit
	}
	return ""
}

func (x *OpenIMContact) GetRemarkQuanpin() string {
	if x != nil && x.RemarkQuanpin != nil {
		return *x.RemarkQuanpin
	}
	return ""
}

func (x *OpenIMContact) GetCustomInfo() *OpenIMContactCustomInfo {
	if x != nil {
		return x.CustomInfo
	}
	return nil
}

func (x *OpenIMContact) GetAntispamTicket() string {
	if x != nil && x.AntispamTicket != nil {
		return *x.AntispamTicket
	}
	return ""
}

func (x *OpenIMContact) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *OpenIMContact) GetSex() uint32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *OpenIMContact) GetDescWordingId() string {
	if x != nil && x.DescWordingId != nil {
		return *x.DescWordingId
	}
	return ""
}

type OpenIMContactCustomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetailVisible *uint32 `protobuf:"varint,1,opt,name=detailVisible" json:"detailVisible,omitempty"`
	Tdetail       *string `protobuf:"bytes,2,opt,name=tdetail" json:"tdetail,omitempty"`
}

func (x *OpenIMContactCustomInfo) Reset() {
	*x = OpenIMContactCustomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenIMContactCustomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIMContactCustomInfo) ProtoMessage() {}

func (x *OpenIMContactCustomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIMContactCustomInfo.ProtoReflect.Descriptor instead.
func (*OpenIMContactCustomInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{154}
}

func (x *OpenIMContactCustomInfo) GetDetailVisible() uint32 {
	if x != nil && x.DetailVisible != nil {
		return *x.DetailVisible
	}
	return 0
}

func (x *OpenIMContactCustomInfo) GetTdetail() string {
	if x != nil && x.Tdetail != nil {
		return *x.Tdetail
	}
	return ""
}

// 上传通讯录
type UploadMContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest        `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	UserName       *string             `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
	Opcode         *int32              `protobuf:"varint,3,opt,name=opcode" json:"opcode,omitempty"`
	Mobile         *string             `protobuf:"bytes,4,opt,name=mobile" json:"mobile,omitempty"`
	MobileListSize *int32              `protobuf:"varint,5,opt,name=mobileListSize" json:"mobileListSize,omitempty"`
	MobileList     []*SKBuiltinStringT `protobuf:"bytes,6,rep,name=mobileList" json:"mobileList,omitempty"`
	EmailListSize  *int32              `protobuf:"varint,7,opt,name=emailListSize" json:"emailListSize,omitempty"`
	EmailList      []*SKBuiltinStringT `protobuf:"bytes,8,rep,name=emailList" json:"emailList,omitempty"`
}

func (x *UploadMContactRequest) Reset() {
	*x = UploadMContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadMContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMContactRequest) ProtoMessage() {}

func (x *UploadMContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMContactRequest.ProtoReflect.Descriptor instead.
func (*UploadMContactRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{155}
}

func (x *UploadMContactRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *UploadMContactRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *UploadMContactRequest) GetOpcode() int32 {
	if x != nil && x.Opcode != nil {
		return *x.Opcode
	}
	return 0
}

func (x *UploadMContactRequest) GetMobile() string {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return ""
}

func (x *UploadMContactRequest) GetMobileListSize() int32 {
	if x != nil && x.MobileListSize != nil {
		return *x.MobileListSize
	}
	return 0
}

func (x *UploadMContactRequest) GetMobileList() []*SKBuiltinStringT {
	if x != nil {
		return x.MobileList
	}
	return nil
}

func (x *UploadMContactRequest) GetEmailListSize() int32 {
	if x != nil && x.EmailListSize != nil {
		return *x.EmailListSize
	}
	return 0
}

func (x *UploadMContactRequest) GetEmailList() []*SKBuiltinStringT {
	if x != nil {
		return x.EmailList
	}
	return nil
}

type UploadMContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
}

func (x *UploadMContactResponse) Reset() {
	*x = UploadMContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadMContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMContactResponse) ProtoMessage() {}

func (x *UploadMContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMContactResponse.ProtoReflect.Descriptor instead.
func (*UploadMContactResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{156}
}

func (x *UploadMContactResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

// V1 V2操作
type VerifyUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest         *BaseRequest        `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Opcode              *int32              `protobuf:"varint,2,opt,name=Opcode" json:"Opcode,omitempty"`
	VerifyUserListSize  *uint32             `protobuf:"varint,3,opt,name=VerifyUserListSize" json:"VerifyUserListSize,omitempty"`
	VerifyUserList      []*VerifyUser       `protobuf:"bytes,4,rep,name=VerifyUserList" json:"VerifyUserList,omitempty"`
	VerifyContent       *string             `protobuf:"bytes,5,opt,name=VerifyContent" json:"VerifyContent,omitempty"`
	SceneListCount      *uint32             `protobuf:"varint,6,opt,name=SceneListCount" json:"SceneListCount,omitempty"`
	SceneList           []byte              `protobuf:"bytes,7,opt,name=SceneList" json:"SceneList,omitempty"`
	VerifyInfoListCount *uint32             `protobuf:"varint,8,opt,name=VerifyInfoListCount" json:"VerifyInfoListCount,omitempty"`
	VerifyInfoList      []*SKBuiltinBufferT `protobuf:"bytes,9,rep,name=VerifyInfoList" json:"VerifyInfoList,omitempty"`
	ClientCheckData     *SKBuiltinBufferT   `protobuf:"bytes,10,opt,name=ClientCheckData" json:"ClientCheckData,omitempty"`
	ExtSpamInfo         *SKBuiltinBufferT   `protobuf:"bytes,11,opt,name=extSpamInfo" json:"extSpamInfo,omitempty"`
	NeedConfirm         *uint32             `protobuf:"varint,12,opt,name=needConfirm" json:"needConfirm,omitempty"`
}

func (x *VerifyUserRequest) Reset() {
	*x = VerifyUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyUserRequest) ProtoMessage() {}

func (x *VerifyUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyUserRequest.ProtoReflect.Descriptor instead.
func (*VerifyUserRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{157}
}

func (x *VerifyUserRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *VerifyUserRequest) GetOpcode() int32 {
	if x != nil && x.Opcode != nil {
		return *x.Opcode
	}
	return 0
}

func (x *VerifyUserRequest) GetVerifyUserListSize() uint32 {
	if x != nil && x.VerifyUserListSize != nil {
		return *x.VerifyUserListSize
	}
	return 0
}

func (x *VerifyUserRequest) GetVerifyUserList() []*VerifyUser {
	if x != nil {
		return x.VerifyUserList
	}
	return nil
}

func (x *VerifyUserRequest) GetVerifyContent() string {
	if x != nil && x.VerifyContent != nil {
		return *x.VerifyContent
	}
	return ""
}

func (x *VerifyUserRequest) GetSceneListCount() uint32 {
	if x != nil && x.SceneListCount != nil {
		return *x.SceneListCount
	}
	return 0
}

func (x *VerifyUserRequest) GetSceneList() []byte {
	if x != nil {
		return x.SceneList
	}
	return nil
}

func (x *VerifyUserRequest) GetVerifyInfoListCount() uint32 {
	if x != nil && x.VerifyInfoListCount != nil {
		return *x.VerifyInfoListCount
	}
	return 0
}

func (x *VerifyUserRequest) GetVerifyInfoList() []*SKBuiltinBufferT {
	if x != nil {
		return x.VerifyInfoList
	}
	return nil
}

func (x *VerifyUserRequest) GetClientCheckData() *SKBuiltinBufferT {
	if x != nil {
		return x.ClientCheckData
	}
	return nil
}

func (x *VerifyUserRequest) GetExtSpamInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.ExtSpamInfo
	}
	return nil
}

func (x *VerifyUserRequest) GetNeedConfirm() uint32 {
	if x != nil && x.NeedConfirm != nil {
		return *x.NeedConfirm
	}
	return 0
}

type VerifyUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value                 *string           `protobuf:"bytes,1,opt,name=Value" json:"Value,omitempty"`
	VerifyUserTicket      *string           `protobuf:"bytes,2,opt,name=VerifyUserTicket" json:"VerifyUserTicket,omitempty"`
	AntispamTicket        *string           `protobuf:"bytes,3,opt,name=AntispamTicket" json:"AntispamTicket,omitempty"`
	FriendFlag            *uint32           `protobuf:"varint,4,opt,name=FriendFlag" json:"FriendFlag,omitempty"`
	ChatRoomUserName      *string           `protobuf:"bytes,5,opt,name=ChatRoomUserName" json:"ChatRoomUserName,omitempty"`
	SourceUserName        *string           `protobuf:"bytes,6,opt,name=SourceUserName" json:"SourceUserName,omitempty"`
	SourceNickName        *string           `protobuf:"bytes,7,opt,name=SourceNickName" json:"SourceNickName,omitempty"`
	ScanQrcodeFromScene   *uint32           `protobuf:"varint,8,opt,name=ScanQrcodeFromScene" json:"ScanQrcodeFromScene,omitempty"`
	ReportInfo            *string           `protobuf:"bytes,9,opt,name=ReportInfo" json:"ReportInfo,omitempty"`
	ShareCardForwardLevel *uint32           `protobuf:"varint,10,opt,name=ShareCardForwardLevel" json:"ShareCardForwardLevel,omitempty"`
	ShareCardForwardInfo  *SKBuiltinBufferT `protobuf:"bytes,11,opt,name=ShareCardForwardInfo" json:"ShareCardForwardInfo,omitempty"`
	OuterUrl              *string           `protobuf:"bytes,12,opt,name=OuterUrl" json:"OuterUrl,omitempty"`
	SubScene              *int32            `protobuf:"varint,13,opt,name=SubScene" json:"SubScene,omitempty"`
	BizReportInfo         *SKBuiltinBufferT `protobuf:"bytes,14,opt,name=bizReportInfo" json:"bizReportInfo,omitempty"`
}

func (x *VerifyUser) Reset() {
	*x = VerifyUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyUser) ProtoMessage() {}

func (x *VerifyUser) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyUser.ProtoReflect.Descriptor instead.
func (*VerifyUser) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{158}
}

func (x *VerifyUser) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *VerifyUser) GetVerifyUserTicket() string {
	if x != nil && x.VerifyUserTicket != nil {
		return *x.VerifyUserTicket
	}
	return ""
}

func (x *VerifyUser) GetAntispamTicket() string {
	if x != nil && x.AntispamTicket != nil {
		return *x.AntispamTicket
	}
	return ""
}

func (x *VerifyUser) GetFriendFlag() uint32 {
	if x != nil && x.FriendFlag != nil {
		return *x.FriendFlag
	}
	return 0
}

func (x *VerifyUser) GetChatRoomUserName() string {
	if x != nil && x.ChatRoomUserName != nil {
		return *x.ChatRoomUserName
	}
	return ""
}

func (x *VerifyUser) GetSourceUserName() string {
	if x != nil && x.SourceUserName != nil {
		return *x.SourceUserName
	}
	return ""
}

func (x *VerifyUser) GetSourceNickName() string {
	if x != nil && x.SourceNickName != nil {
		return *x.SourceNickName
	}
	return ""
}

func (x *VerifyUser) GetScanQrcodeFromScene() uint32 {
	if x != nil && x.ScanQrcodeFromScene != nil {
		return *x.ScanQrcodeFromScene
	}
	return 0
}

func (x *VerifyUser) GetReportInfo() string {
	if x != nil && x.ReportInfo != nil {
		return *x.ReportInfo
	}
	return ""
}

func (x *VerifyUser) GetShareCardForwardLevel() uint32 {
	if x != nil && x.ShareCardForwardLevel != nil {
		return *x.ShareCardForwardLevel
	}
	return 0
}

func (x *VerifyUser) GetShareCardForwardInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.ShareCardForwardInfo
	}
	return nil
}

func (x *VerifyUser) GetOuterUrl() string {
	if x != nil && x.OuterUrl != nil {
		return *x.OuterUrl
	}
	return ""
}

func (x *VerifyUser) GetSubScene() int32 {
	if x != nil && x.SubScene != nil {
		return *x.SubScene
	}
	return 0
}

func (x *VerifyUser) GetBizReportInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.BizReportInfo
	}
	return nil
}

type VerifyUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	Username     *string       `protobuf:"bytes,2,opt,name=Username" json:"Username,omitempty"`
}

func (x *VerifyUserResponse) Reset() {
	*x = VerifyUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyUserResponse) ProtoMessage() {}

func (x *VerifyUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyUserResponse.ProtoReflect.Descriptor instead.
func (*VerifyUserResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{159}
}

func (x *VerifyUserResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *VerifyUserResponse) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

// 标签
type GetContactLabelListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
}

func (x *GetContactLabelListRequest) Reset() {
	*x = GetContactLabelListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactLabelListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactLabelListRequest) ProtoMessage() {}

func (x *GetContactLabelListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactLabelListRequest.ProtoReflect.Descriptor instead.
func (*GetContactLabelListRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{160}
}

func (x *GetContactLabelListRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

type GetContactLabelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse  *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	LabelCount    *uint32       `protobuf:"varint,2,opt,name=labelCount" json:"labelCount,omitempty"`
	LabelPairList []*LabelPair  `protobuf:"bytes,3,rep,name=labelPairList" json:"labelPairList,omitempty"`
}

func (x *GetContactLabelListResponse) Reset() {
	*x = GetContactLabelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactLabelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactLabelListResponse) ProtoMessage() {}

func (x *GetContactLabelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactLabelListResponse.ProtoReflect.Descriptor instead.
func (*GetContactLabelListResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{161}
}

func (x *GetContactLabelListResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetContactLabelListResponse) GetLabelCount() uint32 {
	if x != nil && x.LabelCount != nil {
		return *x.LabelCount
	}
	return 0
}

func (x *GetContactLabelListResponse) GetLabelPairList() []*LabelPair {
	if x != nil {
		return x.LabelPairList
	}
	return nil
}

type LabelPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelName *string `protobuf:"bytes,1,opt,name=labelName" json:"labelName,omitempty"`
	LabelID   *uint32 `protobuf:"varint,2,opt,name=labelID" json:"labelID,omitempty"`
}

func (x *LabelPair) Reset() {
	*x = LabelPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelPair) ProtoMessage() {}

func (x *LabelPair) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelPair.ProtoReflect.Descriptor instead.
func (*LabelPair) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{162}
}

func (x *LabelPair) GetLabelName() string {
	if x != nil && x.LabelName != nil {
		return *x.LabelName
	}
	return ""
}

func (x *LabelPair) GetLabelID() uint32 {
	if x != nil && x.LabelID != nil {
		return *x.LabelID
	}
	return 0
}

type AddContactLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	LabelCount    *uint32      `protobuf:"varint,2,opt,name=LabelCount" json:"LabelCount,omitempty"`
	LabelPairList []*LabelPair `protobuf:"bytes,3,rep,name=LabelPairList" json:"LabelPairList,omitempty"`
}

func (x *AddContactLabelRequest) Reset() {
	*x = AddContactLabelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddContactLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContactLabelRequest) ProtoMessage() {}

func (x *AddContactLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContactLabelRequest.ProtoReflect.Descriptor instead.
func (*AddContactLabelRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{163}
}

func (x *AddContactLabelRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *AddContactLabelRequest) GetLabelCount() uint32 {
	if x != nil && x.LabelCount != nil {
		return *x.LabelCount
	}
	return 0
}

func (x *AddContactLabelRequest) GetLabelPairList() []*LabelPair {
	if x != nil {
		return x.LabelPairList
	}
	return nil
}

type AddContactLabelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse  *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	LabelCount    *uint32       `protobuf:"varint,2,opt,name=LabelCount" json:"LabelCount,omitempty"`
	LabelPairList *LabelPair    `protobuf:"bytes,3,opt,name=LabelPairList" json:"LabelPairList,omitempty"`
}

func (x *AddContactLabelResponse) Reset() {
	*x = AddContactLabelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddContactLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContactLabelResponse) ProtoMessage() {}

func (x *AddContactLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContactLabelResponse.ProtoReflect.Descriptor instead.
func (*AddContactLabelResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{164}
}

func (x *AddContactLabelResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *AddContactLabelResponse) GetLabelCount() uint32 {
	if x != nil && x.LabelCount != nil {
		return *x.LabelCount
	}
	return 0
}

func (x *AddContactLabelResponse) GetLabelPairList() *LabelPair {
	if x != nil {
		return x.LabelPairList
	}
	return nil
}

type ModifyContactLabelListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest       *BaseRequest     `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	UserCount         *uint32          `protobuf:"varint,2,opt,name=UserCount" json:"UserCount,omitempty"`
	UserLabelInfoList []*UserLabelInfo `protobuf:"bytes,3,rep,name=UserLabelInfoList" json:"UserLabelInfoList,omitempty"`
}

func (x *ModifyContactLabelListRequest) Reset() {
	*x = ModifyContactLabelListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyContactLabelListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyContactLabelListRequest) ProtoMessage() {}

func (x *ModifyContactLabelListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyContactLabelListRequest.ProtoReflect.Descriptor instead.
func (*ModifyContactLabelListRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{165}
}

func (x *ModifyContactLabelListRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *ModifyContactLabelListRequest) GetUserCount() uint32 {
	if x != nil && x.UserCount != nil {
		return *x.UserCount
	}
	return 0
}

func (x *ModifyContactLabelListRequest) GetUserLabelInfoList() []*UserLabelInfo {
	if x != nil {
		return x.UserLabelInfoList
	}
	return nil
}

type ModifyContactLabelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
}

func (x *ModifyContactLabelListResponse) Reset() {
	*x = ModifyContactLabelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyContactLabelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyContactLabelListResponse) ProtoMessage() {}

func (x *ModifyContactLabelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyContactLabelListResponse.ProtoReflect.Descriptor instead.
func (*ModifyContactLabelListResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{166}
}

func (x *ModifyContactLabelListResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type UserLabelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName    *string `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	LabelIDList *string `protobuf:"bytes,2,opt,name=LabelIDList" json:"LabelIDList,omitempty"`
}

func (x *UserLabelInfo) Reset() {
	*x = UserLabelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLabelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLabelInfo) ProtoMessage() {}

func (x *UserLabelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLabelInfo.ProtoReflect.Descriptor instead.
func (*UserLabelInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{167}
}

func (x *UserLabelInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *UserLabelInfo) GetLabelIDList() string {
	if x != nil && x.LabelIDList != nil {
		return *x.LabelIDList
	}
	return ""
}

type DelContactLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	LabelIDList *string      `protobuf:"bytes,2,opt,name=LabelIDList" json:"LabelIDList,omitempty"`
}

func (x *DelContactLabelRequest) Reset() {
	*x = DelContactLabelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelContactLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContactLabelRequest) ProtoMessage() {}

func (x *DelContactLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContactLabelRequest.ProtoReflect.Descriptor instead.
func (*DelContactLabelRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{168}
}

func (x *DelContactLabelRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *DelContactLabelRequest) GetLabelIDList() string {
	if x != nil && x.LabelIDList != nil {
		return *x.LabelIDList
	}
	return ""
}

type DelContactLabelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
}

func (x *DelContactLabelResponse) Reset() {
	*x = DelContactLabelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelContactLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContactLabelResponse) ProtoMessage() {}

func (x *DelContactLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContactLabelResponse.ProtoReflect.Descriptor instead.
func (*DelContactLabelResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{169}
}

func (x *DelContactLabelResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type UpdateContactLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	LabelPairList *LabelPair   `protobuf:"bytes,2,opt,name=LabelPairList" json:"LabelPairList,omitempty"`
}

func (x *UpdateContactLabelRequest) Reset() {
	*x = UpdateContactLabelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContactLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContactLabelRequest) ProtoMessage() {}

func (x *UpdateContactLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContactLabelRequest.ProtoReflect.Descriptor instead.
func (*UpdateContactLabelRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{170}
}

func (x *UpdateContactLabelRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *UpdateContactLabelRequest) GetLabelPairList() *LabelPair {
	if x != nil {
		return x.LabelPairList
	}
	return nil
}

type UpdateContactLabelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
}

func (x *UpdateContactLabelResponse) Reset() {
	*x = UpdateContactLabelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContactLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContactLabelResponse) ProtoMessage() {}

func (x *UpdateContactLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContactLabelResponse.ProtoReflect.Descriptor instead.
func (*UpdateContactLabelResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{171}
}

func (x *UpdateContactLabelResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

// OpLog
type OpLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd *CmdList `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
}

func (x *OpLogRequest) Reset() {
	*x = OpLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpLogRequest) ProtoMessage() {}

func (x *OpLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpLogRequest.ProtoReflect.Descriptor instead.
func (*OpLogRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{172}
}

func (x *OpLogRequest) GetCmd() *CmdList {
	if x != nil {
		return x.Cmd
	}
	return nil
}

type OplogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32    `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	OplogRet *OplogRet `protobuf:"bytes,2,opt,name=oplogRet" json:"oplogRet,omitempty"`
}

func (x *OplogResponse) Reset() {
	*x = OplogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OplogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OplogResponse) ProtoMessage() {}

func (x *OplogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OplogResponse.ProtoReflect.Descriptor instead.
func (*OplogResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{173}
}

func (x *OplogResponse) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *OplogResponse) GetOplogRet() *OplogRet {
	if x != nil {
		return x.OplogRet
	}
	return nil
}

type OplogRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count  *uint32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Ret    []byte  `protobuf:"bytes,2,opt,name=ret" json:"ret,omitempty"`
	ErrMsg []byte  `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (x *OplogRet) Reset() {
	*x = OplogRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OplogRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OplogRet) ProtoMessage() {}

func (x *OplogRet) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OplogRet.ProtoReflect.Descriptor instead.
func (*OplogRet) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{174}
}

func (x *OplogRet) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *OplogRet) GetRet() []byte {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *OplogRet) GetErrMsg() []byte {
	if x != nil {
		return x.ErrMsg
	}
	return nil
}

type SnsObjectDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Id          *uint64      `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	GroupDetail *uint32      `protobuf:"varint,3,opt,name=groupDetail" json:"groupDetail,omitempty"`
}

func (x *SnsObjectDetailRequest) Reset() {
	*x = SnsObjectDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsObjectDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsObjectDetailRequest) ProtoMessage() {}

func (x *SnsObjectDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsObjectDetailRequest.ProtoReflect.Descriptor instead.
func (*SnsObjectDetailRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{175}
}

func (x *SnsObjectDetailRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SnsObjectDetailRequest) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SnsObjectDetailRequest) GetGroupDetail() uint32 {
	if x != nil && x.GroupDetail != nil {
		return *x.GroupDetail
	}
	return 0
}

type SnsObjectDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Object       *SnsObject    `protobuf:"bytes,2,opt,name=object" json:"object,omitempty"`
}

func (x *SnsObjectDetailResponse) Reset() {
	*x = SnsObjectDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsObjectDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsObjectDetailResponse) ProtoMessage() {}

func (x *SnsObjectDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsObjectDetailResponse.ProtoReflect.Descriptor instead.
func (*SnsObjectDetailResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{176}
}

func (x *SnsObjectDetailResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *SnsObjectDetailResponse) GetObject() *SnsObject {
	if x != nil {
		return x.Object
	}
	return nil
}

// 安卓
type TrustDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *string `protobuf:"bytes,1,req,name=Key" json:"Key,omitempty"`
	Val *string `protobuf:"bytes,2,req,name=val" json:"val,omitempty"`
}

func (x *TrustDeviceInfo) Reset() {
	*x = TrustDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustDeviceInfo) ProtoMessage() {}

func (x *TrustDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustDeviceInfo.ProtoReflect.Descriptor instead.
func (*TrustDeviceInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{177}
}

func (x *TrustDeviceInfo) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *TrustDeviceInfo) GetVal() string {
	if x != nil && x.Val != nil {
		return *x.Val
	}
	return ""
}

type TrustData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tdi []*TrustDeviceInfo `protobuf:"bytes,1,rep,name=tdi" json:"tdi,omitempty"`
}

func (x *TrustData) Reset() {
	*x = TrustData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustData) ProtoMessage() {}

func (x *TrustData) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustData.ProtoReflect.Descriptor instead.
func (*TrustData) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{178}
}

func (x *TrustData) GetTdi() []*TrustDeviceInfo {
	if x != nil {
		return x.Tdi
	}
	return nil
}

type TrustReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Td *TrustData `protobuf:"bytes,1,req,name=td" json:"td,omitempty"`
	Md *string    `protobuf:"bytes,2,opt,name=md" json:"md,omitempty"`
}

func (x *TrustReq) Reset() {
	*x = TrustReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustReq) ProtoMessage() {}

func (x *TrustReq) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustReq.ProtoReflect.Descriptor instead.
func (*TrustReq) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{179}
}

func (x *TrustReq) GetTd() *TrustData {
	if x != nil {
		return x.Td
	}
	return nil
}

func (x *TrustReq) GetMd() string {
	if x != nil && x.Md != nil {
		return *x.Md
	}
	return ""
}

type TrustSoftData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftConfig *string `protobuf:"bytes,1,req,name=softConfig" json:"softConfig,omitempty"`
	SoftData   []byte  `protobuf:"bytes,2,req,name=softData" json:"softData,omitempty"`
}

func (x *TrustSoftData) Reset() {
	*x = TrustSoftData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustSoftData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustSoftData) ProtoMessage() {}

func (x *TrustSoftData) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustSoftData.ProtoReflect.Descriptor instead.
func (*TrustSoftData) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{180}
}

func (x *TrustSoftData) GetSoftConfig() string {
	if x != nil && x.SoftConfig != nil {
		return *x.SoftConfig
	}
	return ""
}

func (x *TrustSoftData) GetSoftData() []byte {
	if x != nil {
		return x.SoftData
	}
	return nil
}

type TrustResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftData    *TrustSoftData `protobuf:"bytes,2,req,name=softData" json:"softData,omitempty"`
	DeviceToken *string        `protobuf:"bytes,3,req,name=deviceToken" json:"deviceToken,omitempty"`
	TimeStamp   *uint32        `protobuf:"varint,4,req,name=timeStamp" json:"timeStamp,omitempty"`
}

func (x *TrustResponseData) Reset() {
	*x = TrustResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustResponseData) ProtoMessage() {}

func (x *TrustResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustResponseData.ProtoReflect.Descriptor instead.
func (*TrustResponseData) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{181}
}

func (x *TrustResponseData) GetSoftData() *TrustSoftData {
	if x != nil {
		return x.SoftData
	}
	return nil
}

func (x *TrustResponseData) GetDeviceToken() string {
	if x != nil && x.DeviceToken != nil {
		return *x.DeviceToken
	}
	return ""
}

func (x *TrustResponseData) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

type TrustResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse      *BaseResponse      `protobuf:"bytes,1,req,name=BaseResponse" json:"BaseResponse,omitempty"`
	TrustResponseData *TrustResponseData `protobuf:"bytes,2,req,name=TrustResponseData" json:"TrustResponseData,omitempty"`
}

func (x *TrustResponse) Reset() {
	*x = TrustResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustResponse) ProtoMessage() {}

func (x *TrustResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustResponse.ProtoReflect.Descriptor instead.
func (*TrustResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{182}
}

func (x *TrustResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *TrustResponse) GetTrustResponseData() *TrustResponseData {
	if x != nil {
		return x.TrustResponseData
	}
	return nil
}

type FPFresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	SessKey     []byte       `protobuf:"bytes,2,opt,name=SessKey" json:"SessKey,omitempty"`
	Ztdata      *ZTData      `protobuf:"bytes,3,opt,name=Ztdata" json:"Ztdata,omitempty"`
}

func (x *FPFresh) Reset() {
	*x = FPFresh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FPFresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FPFresh) ProtoMessage() {}

func (x *FPFresh) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FPFresh.ProtoReflect.Descriptor instead.
func (*FPFresh) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{183}
}

func (x *FPFresh) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FPFresh) GetSessKey() []byte {
	if x != nil {
		return x.SessKey
	}
	return nil
}

func (x *FPFresh) GetZtdata() *ZTData {
	if x != nil {
		return x.Ztdata
	}
	return nil
}

type ZTData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   *string `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
	Encrypted *uint32 `protobuf:"varint,2,opt,name=Encrypted" json:"Encrypted,omitempty"`
	Data      []byte  `protobuf:"bytes,3,opt,name=Data" json:"Data,omitempty"`
	TimeStamp *uint32 `protobuf:"varint,4,opt,name=TimeStamp" json:"TimeStamp,omitempty"`
	Optype    *uint32 `protobuf:"varint,5,opt,name=Optype" json:"Optype,omitempty"`
	Uin       *uint32 `protobuf:"varint,6,opt,name=Uin" json:"Uin,omitempty"`
}

func (x *ZTData) Reset() {
	*x = ZTData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZTData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZTData) ProtoMessage() {}

func (x *ZTData) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZTData.ProtoReflect.Descriptor instead.
func (*ZTData) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{184}
}

func (x *ZTData) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *ZTData) GetEncrypted() uint32 {
	if x != nil && x.Encrypted != nil {
		return *x.Encrypted
	}
	return 0
}

func (x *ZTData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ZTData) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *ZTData) GetOptype() uint32 {
	if x != nil && x.Optype != nil {
		return *x.Optype
	}
	return 0
}

func (x *ZTData) GetUin() uint32 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

type SaeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ver       *string `protobuf:"bytes,1,opt,name=Ver" json:"Ver,omitempty"`
	InitKey   []byte  `protobuf:"bytes,2,opt,name=InitKey" json:"InitKey,omitempty"`
	TotalSize *int32  `protobuf:"varint,3,opt,name=TotalSize" json:"TotalSize,omitempty"`
	XorKey1   []byte  `protobuf:"bytes,9,opt,name=XorKey1" json:"XorKey1,omitempty"`
	Key1      []byte  `protobuf:"bytes,10,opt,name=Key1" json:"Key1,omitempty"`
	XorKey2   []byte  `protobuf:"bytes,11,opt,name=XorKey2" json:"XorKey2,omitempty"`
	Key2      []byte  `protobuf:"bytes,12,opt,name=Key2" json:"Key2,omitempty"`
	Key3      []byte  `protobuf:"bytes,18,opt,name=Key3" json:"Key3,omitempty"`
}

func (x *SaeInfo) Reset() {
	*x = SaeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaeInfo) ProtoMessage() {}

func (x *SaeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaeInfo.ProtoReflect.Descriptor instead.
func (*SaeInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{185}
}

func (x *SaeInfo) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *SaeInfo) GetInitKey() []byte {
	if x != nil {
		return x.InitKey
	}
	return nil
}

func (x *SaeInfo) GetTotalSize() int32 {
	if x != nil && x.TotalSize != nil {
		return *x.TotalSize
	}
	return 0
}

func (x *SaeInfo) GetXorKey1() []byte {
	if x != nil {
		return x.XorKey1
	}
	return nil
}

func (x *SaeInfo) GetKey1() []byte {
	if x != nil {
		return x.Key1
	}
	return nil
}

func (x *SaeInfo) GetXorKey2() []byte {
	if x != nil {
		return x.XorKey2
	}
	return nil
}

func (x *SaeInfo) GetKey2() []byte {
	if x != nil {
		return x.Key2
	}
	return nil
}

func (x *SaeInfo) GetKey3() []byte {
	if x != nil {
		return x.Key3
	}
	return nil
}

type GetProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	UserName    *string      `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
}

func (x *GetProfileRequest) Reset() {
	*x = GetProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileRequest) ProtoMessage() {}

func (x *GetProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileRequest.ProtoReflect.Descriptor instead.
func (*GetProfileRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{186}
}

func (x *GetProfileRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GetProfileRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

type GetProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	UserInfo     *ModUserInfo  `protobuf:"bytes,2,opt,name=userInfo" json:"userInfo,omitempty"`
	UserInfoExt  *UserInfoExt  `protobuf:"bytes,3,opt,name=userInfoExt" json:"userInfoExt,omitempty"`
}

func (x *GetProfileResponse) Reset() {
	*x = GetProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileResponse) ProtoMessage() {}

func (x *GetProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileResponse.ProtoReflect.Descriptor instead.
func (*GetProfileResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{187}
}

func (x *GetProfileResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetProfileResponse) GetUserInfo() *ModUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *GetProfileResponse) GetUserInfoExt() *UserInfoExt {
	if x != nil {
		return x.UserInfoExt
	}
	return nil
}

type UploadVoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserName *string           `protobuf:"bytes,1,opt,name=FromUserName" json:"FromUserName,omitempty"`
	ToUserName   *string           `protobuf:"bytes,2,opt,name=ToUserName" json:"ToUserName,omitempty"`
	Offset       *uint32           `protobuf:"varint,3,opt,name=Offset" json:"Offset,omitempty"`
	Length       *int32            `protobuf:"varint,4,opt,name=Length" json:"Length,omitempty"`
	ClientMsgId  *string           `protobuf:"bytes,5,opt,name=ClientMsgId" json:"ClientMsgId,omitempty"`
	MsgId        *uint32           `protobuf:"varint,6,opt,name=MsgId" json:"MsgId,omitempty"`
	VoiceLength  *int32            `protobuf:"varint,7,opt,name=VoiceLength" json:"VoiceLength,omitempty"`
	Data         *SKBuiltinBufferT `protobuf:"bytes,8,opt,name=Data" json:"Data,omitempty"`
	EndFlag      *uint32           `protobuf:"varint,9,opt,name=EndFlag" json:"EndFlag,omitempty"`
	BaseRequest  *BaseRequest      `protobuf:"bytes,10,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	CancelFlag   *uint32           `protobuf:"varint,11,opt,name=CancelFlag" json:"CancelFlag,omitempty"`
	Msgsource    *string           `protobuf:"bytes,12,opt,name=Msgsource" json:"Msgsource,omitempty"`
	VoiceFormat  *int32            `protobuf:"varint,13,opt,name=VoiceFormat" json:"VoiceFormat,omitempty"`
	UicreateTime *uint32           `protobuf:"varint,14,opt,name=UicreateTime" json:"UicreateTime,omitempty"`
	ForwardFlag  *uint32           `protobuf:"varint,15,opt,name=ForwardFlag" json:"ForwardFlag,omitempty"`
	NewMsgId     *uint64           `protobuf:"varint,16,opt,name=NewMsgId" json:"NewMsgId,omitempty"`
	ReqTime      *int32            `protobuf:"varint,17,opt,name=ReqTime" json:"ReqTime,omitempty"`
	VoiceId      *SKBuiltinBufferT `protobuf:"bytes,18,opt,name=VoiceId" json:"VoiceId,omitempty"`
	Offst        *uint32           `protobuf:"varint,19,opt,name=Offst" json:"Offst,omitempty"`
}

func (x *UploadVoiceRequest) Reset() {
	*x = UploadVoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadVoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadVoiceRequest) ProtoMessage() {}

func (x *UploadVoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadVoiceRequest.ProtoReflect.Descriptor instead.
func (*UploadVoiceRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{188}
}

func (x *UploadVoiceRequest) GetFromUserName() string {
	if x != nil && x.FromUserName != nil {
		return *x.FromUserName
	}
	return ""
}

func (x *UploadVoiceRequest) GetToUserName() string {
	if x != nil && x.ToUserName != nil {
		return *x.ToUserName
	}
	return ""
}

func (x *UploadVoiceRequest) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *UploadVoiceRequest) GetLength() int32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *UploadVoiceRequest) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *UploadVoiceRequest) GetMsgId() uint32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *UploadVoiceRequest) GetVoiceLength() int32 {
	if x != nil && x.VoiceLength != nil {
		return *x.VoiceLength
	}
	return 0
}

func (x *UploadVoiceRequest) GetData() *SKBuiltinBufferT {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UploadVoiceRequest) GetEndFlag() uint32 {
	if x != nil && x.EndFlag != nil {
		return *x.EndFlag
	}
	return 0
}

func (x *UploadVoiceRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *UploadVoiceRequest) GetCancelFlag() uint32 {
	if x != nil && x.CancelFlag != nil {
		return *x.CancelFlag
	}
	return 0
}

func (x *UploadVoiceRequest) GetMsgsource() string {
	if x != nil && x.Msgsource != nil {
		return *x.Msgsource
	}
	return ""
}

func (x *UploadVoiceRequest) GetVoiceFormat() int32 {
	if x != nil && x.VoiceFormat != nil {
		return *x.VoiceFormat
	}
	return 0
}

func (x *UploadVoiceRequest) GetUicreateTime() uint32 {
	if x != nil && x.UicreateTime != nil {
		return *x.UicreateTime
	}
	return 0
}

func (x *UploadVoiceRequest) GetForwardFlag() uint32 {
	if x != nil && x.ForwardFlag != nil {
		return *x.ForwardFlag
	}
	return 0
}

func (x *UploadVoiceRequest) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

func (x *UploadVoiceRequest) GetReqTime() int32 {
	if x != nil && x.ReqTime != nil {
		return *x.ReqTime
	}
	return 0
}

func (x *UploadVoiceRequest) GetVoiceId() *SKBuiltinBufferT {
	if x != nil {
		return x.VoiceId
	}
	return nil
}

func (x *UploadVoiceRequest) GetOffst() uint32 {
	if x != nil && x.Offst != nil {
		return *x.Offst
	}
	return 0
}

type UploadVoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserName *string       `protobuf:"bytes,1,opt,name=FromUserName" json:"FromUserName,omitempty"`
	ToUserName   *string       `protobuf:"bytes,2,opt,name=ToUserName" json:"ToUserName,omitempty"`
	Offset       *uint32       `protobuf:"varint,3,opt,name=Offset" json:"Offset,omitempty"`
	Length       *int32        `protobuf:"varint,4,opt,name=Length" json:"Length,omitempty"`
	CreateTime   *uint32       `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty"`
	ClientMsgId  *string       `protobuf:"bytes,6,opt,name=ClientMsgId" json:"ClientMsgId,omitempty"`
	MsgId        *uint32       `protobuf:"varint,7,opt,name=MsgId" json:"MsgId,omitempty"`
	VoiceLength  *uint32       `protobuf:"varint,8,opt,name=VoiceLength" json:"VoiceLength,omitempty"`
	EndFlag      *uint32       `protobuf:"varint,9,opt,name=EndFlag" json:"EndFlag,omitempty"`
	BaseResponse *BaseResponse `protobuf:"bytes,10,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	CancelFlag   *uint32       `protobuf:"varint,11,opt,name=CancelFlag" json:"CancelFlag,omitempty"`
	NewMsgId     *uint64       `protobuf:"varint,12,opt,name=NewMsgId" json:"NewMsgId,omitempty"`
}

func (x *UploadVoiceResponse) Reset() {
	*x = UploadVoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadVoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadVoiceResponse) ProtoMessage() {}

func (x *UploadVoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadVoiceResponse.ProtoReflect.Descriptor instead.
func (*UploadVoiceResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{189}
}

func (x *UploadVoiceResponse) GetFromUserName() string {
	if x != nil && x.FromUserName != nil {
		return *x.FromUserName
	}
	return ""
}

func (x *UploadVoiceResponse) GetToUserName() string {
	if x != nil && x.ToUserName != nil {
		return *x.ToUserName
	}
	return ""
}

func (x *UploadVoiceResponse) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *UploadVoiceResponse) GetLength() int32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *UploadVoiceResponse) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *UploadVoiceResponse) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *UploadVoiceResponse) GetMsgId() uint32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *UploadVoiceResponse) GetVoiceLength() uint32 {
	if x != nil && x.VoiceLength != nil {
		return *x.VoiceLength
	}
	return 0
}

func (x *UploadVoiceResponse) GetEndFlag() uint32 {
	if x != nil && x.EndFlag != nil {
		return *x.EndFlag
	}
	return 0
}

func (x *UploadVoiceResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *UploadVoiceResponse) GetCancelFlag() uint32 {
	if x != nil && x.CancelFlag != nil {
		return *x.CancelFlag
	}
	return 0
}

func (x *UploadVoiceResponse) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

type QuitChatRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatRoomName *SKBuiltinStringT `protobuf:"bytes,1,opt,name=ChatRoomName" json:"ChatRoomName,omitempty"`
	UserName     *SKBuiltinStringT `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
}

func (x *QuitChatRoom) Reset() {
	*x = QuitChatRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitChatRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitChatRoom) ProtoMessage() {}

func (x *QuitChatRoom) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitChatRoom.ProtoReflect.Descriptor instead.
func (*QuitChatRoom) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{190}
}

func (x *QuitChatRoom) GetChatRoomName() *SKBuiltinStringT {
	if x != nil {
		return x.ChatRoomName
	}
	return nil
}

func (x *QuitChatRoom) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

type UploadHDHeadImgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	TotalLen    *uint32           `protobuf:"varint,2,opt,name=TotalLen" json:"TotalLen,omitempty"`
	StartPos    *uint32           `protobuf:"varint,3,opt,name=StartPos" json:"StartPos,omitempty"`
	HeadImgType *uint32           `protobuf:"varint,4,opt,name=HeadImgType" json:"HeadImgType,omitempty"`
	Data        *SKBuiltinBufferT `protobuf:"bytes,5,opt,name=Data" json:"Data,omitempty"`
	ImgHash     *string           `protobuf:"bytes,6,opt,name=ImgHash" json:"ImgHash,omitempty"`
	UserName    *string           `protobuf:"bytes,7,opt,name=UserName" json:"UserName,omitempty"`
}

func (x *UploadHDHeadImgRequest) Reset() {
	*x = UploadHDHeadImgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadHDHeadImgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadHDHeadImgRequest) ProtoMessage() {}

func (x *UploadHDHeadImgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadHDHeadImgRequest.ProtoReflect.Descriptor instead.
func (*UploadHDHeadImgRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{191}
}

func (x *UploadHDHeadImgRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *UploadHDHeadImgRequest) GetTotalLen() uint32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *UploadHDHeadImgRequest) GetStartPos() uint32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *UploadHDHeadImgRequest) GetHeadImgType() uint32 {
	if x != nil && x.HeadImgType != nil {
		return *x.HeadImgType
	}
	return 0
}

func (x *UploadHDHeadImgRequest) GetData() *SKBuiltinBufferT {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UploadHDHeadImgRequest) GetImgHash() string {
	if x != nil && x.ImgHash != nil {
		return *x.ImgHash
	}
	return ""
}

func (x *UploadHDHeadImgRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

type UploadHDHeadImgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse    *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	TotalLen        *uint32       `protobuf:"varint,2,opt,name=TotalLen" json:"TotalLen,omitempty"`
	StartPos        *uint32       `protobuf:"varint,3,opt,name=StartPos" json:"StartPos,omitempty"`
	FinalImgMd5Sum  *string       `protobuf:"bytes,4,opt,name=FinalImgMd5sum" json:"FinalImgMd5sum,omitempty"`
	BigHeadImgUrl   *string       `protobuf:"bytes,5,opt,name=BigHeadImgUrl" json:"BigHeadImgUrl,omitempty"`
	SmallHeadImgUrl *string       `protobuf:"bytes,6,opt,name=SmallHeadImgUrl" json:"SmallHeadImgUrl,omitempty"`
}

func (x *UploadHDHeadImgResponse) Reset() {
	*x = UploadHDHeadImgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadHDHeadImgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadHDHeadImgResponse) ProtoMessage() {}

func (x *UploadHDHeadImgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadHDHeadImgResponse.ProtoReflect.Descriptor instead.
func (*UploadHDHeadImgResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{192}
}

func (x *UploadHDHeadImgResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *UploadHDHeadImgResponse) GetTotalLen() uint32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *UploadHDHeadImgResponse) GetStartPos() uint32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *UploadHDHeadImgResponse) GetFinalImgMd5Sum() string {
	if x != nil && x.FinalImgMd5Sum != nil {
		return *x.FinalImgMd5Sum
	}
	return ""
}

func (x *UploadHDHeadImgResponse) GetBigHeadImgUrl() string {
	if x != nil && x.BigHeadImgUrl != nil {
		return *x.BigHeadImgUrl
	}
	return ""
}

func (x *UploadHDHeadImgResponse) GetSmallHeadImgUrl() string {
	if x != nil && x.SmallHeadImgUrl != nil {
		return *x.SmallHeadImgUrl
	}
	return ""
}

type VerifyPswdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	OpCode         *int32            `protobuf:"varint,2,opt,name=opCode" json:"opCode,omitempty"`
	Pwd1           *string           `protobuf:"bytes,3,opt,name=pwd1" json:"pwd1,omitempty"`
	Pwd2           *string           `protobuf:"bytes,4,opt,name=pwd2" json:"pwd2,omitempty"`
	ImgSid         *SKBuiltinStringT `protobuf:"bytes,5,opt,name=imgSid" json:"imgSid,omitempty"`
	ImgCode        *SKBuiltinStringT `protobuf:"bytes,6,opt,name=imgCode" json:"imgCode,omitempty"`
	ImgEncryptKey  *SKBuiltinStringT `protobuf:"bytes,7,opt,name=imgEncryptKey" json:"imgEncryptKey,omitempty"`
	Ksid           *SKBuiltinBufferT `protobuf:"bytes,8,opt,name=ksid" json:"ksid,omitempty"`
	Scence         *uint32           `protobuf:"varint,9,opt,name=scence" json:"scence,omitempty"`
	WtloginRspBuff *SKBuiltinBufferT `protobuf:"bytes,10,opt,name=wtloginRspBuff" json:"wtloginRspBuff,omitempty"`
}

func (x *VerifyPswdRequest) Reset() {
	*x = VerifyPswdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyPswdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPswdRequest) ProtoMessage() {}

func (x *VerifyPswdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPswdRequest.ProtoReflect.Descriptor instead.
func (*VerifyPswdRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{193}
}

func (x *VerifyPswdRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *VerifyPswdRequest) GetOpCode() int32 {
	if x != nil && x.OpCode != nil {
		return *x.OpCode
	}
	return 0
}

func (x *VerifyPswdRequest) GetPwd1() string {
	if x != nil && x.Pwd1 != nil {
		return *x.Pwd1
	}
	return ""
}

func (x *VerifyPswdRequest) GetPwd2() string {
	if x != nil && x.Pwd2 != nil {
		return *x.Pwd2
	}
	return ""
}

func (x *VerifyPswdRequest) GetImgSid() *SKBuiltinStringT {
	if x != nil {
		return x.ImgSid
	}
	return nil
}

func (x *VerifyPswdRequest) GetImgCode() *SKBuiltinStringT {
	if x != nil {
		return x.ImgCode
	}
	return nil
}

func (x *VerifyPswdRequest) GetImgEncryptKey() *SKBuiltinStringT {
	if x != nil {
		return x.ImgEncryptKey
	}
	return nil
}

func (x *VerifyPswdRequest) GetKsid() *SKBuiltinBufferT {
	if x != nil {
		return x.Ksid
	}
	return nil
}

func (x *VerifyPswdRequest) GetScence() uint32 {
	if x != nil && x.Scence != nil {
		return *x.Scence
	}
	return 0
}

func (x *VerifyPswdRequest) GetWtloginRspBuff() *SKBuiltinBufferT {
	if x != nil {
		return x.WtloginRspBuff
	}
	return nil
}

type VerifyPswdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse   *BaseResponse     `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	ImgSid         *SKBuiltinStringT `protobuf:"bytes,2,opt,name=imgSid" json:"imgSid,omitempty"`
	ImgBuf         *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=imgBuf" json:"imgBuf,omitempty"`
	Ticket         *string           `protobuf:"bytes,4,opt,name=ticket" json:"ticket,omitempty"`
	ImgEncryptKey  *SKBuiltinStringT `protobuf:"bytes,5,opt,name=imgEncryptKey" json:"imgEncryptKey,omitempty"`
	A2Key          *SKBuiltinBufferT `protobuf:"bytes,6,opt,name=a2Key" json:"a2Key,omitempty"`
	Ksid           *SKBuiltinBufferT `protobuf:"bytes,7,opt,name=ksid" json:"ksid,omitempty"`
	AuthKey        *string           `protobuf:"bytes,8,opt,name=authKey" json:"authKey,omitempty"`
	WtloginRspBuff *SKBuiltinBufferT `protobuf:"bytes,9,opt,name=wtloginRspBuff" json:"wtloginRspBuff,omitempty"`
}

func (x *VerifyPswdResponse) Reset() {
	*x = VerifyPswdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyPswdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPswdResponse) ProtoMessage() {}

func (x *VerifyPswdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPswdResponse.ProtoReflect.Descriptor instead.
func (*VerifyPswdResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{194}
}

func (x *VerifyPswdResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *VerifyPswdResponse) GetImgSid() *SKBuiltinStringT {
	if x != nil {
		return x.ImgSid
	}
	return nil
}

func (x *VerifyPswdResponse) GetImgBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.ImgBuf
	}
	return nil
}

func (x *VerifyPswdResponse) GetTicket() string {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return ""
}

func (x *VerifyPswdResponse) GetImgEncryptKey() *SKBuiltinStringT {
	if x != nil {
		return x.ImgEncryptKey
	}
	return nil
}

func (x *VerifyPswdResponse) GetA2Key() *SKBuiltinBufferT {
	if x != nil {
		return x.A2Key
	}
	return nil
}

func (x *VerifyPswdResponse) GetKsid() *SKBuiltinBufferT {
	if x != nil {
		return x.Ksid
	}
	return nil
}

func (x *VerifyPswdResponse) GetAuthKey() string {
	if x != nil && x.AuthKey != nil {
		return *x.AuthKey
	}
	return ""
}

func (x *VerifyPswdResponse) GetWtloginRspBuff() *SKBuiltinBufferT {
	if x != nil {
		return x.WtloginRspBuff
	}
	return nil
}

type SetPwdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Password    *string           `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Ticket      *string           `protobuf:"bytes,3,opt,name=ticket" json:"ticket,omitempty"`
	AutoAuthKey *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=autoAuthKey" json:"autoAuthKey,omitempty"`
	TicketType  *uint32           `protobuf:"varint,5,opt,name=ticketType" json:"ticketType,omitempty"`
}

func (x *SetPwdRequest) Reset() {
	*x = SetPwdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPwdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPwdRequest) ProtoMessage() {}

func (x *SetPwdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPwdRequest.ProtoReflect.Descriptor instead.
func (*SetPwdRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{195}
}

func (x *SetPwdRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SetPwdRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *SetPwdRequest) GetTicket() string {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return ""
}

func (x *SetPwdRequest) GetAutoAuthKey() *SKBuiltinBufferT {
	if x != nil {
		return x.AutoAuthKey
	}
	return nil
}

func (x *SetPwdRequest) GetTicketType() uint32 {
	if x != nil && x.TicketType != nil {
		return *x.TicketType
	}
	return 0
}

type SetPwdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse     `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	AutoAuthKey  *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=autoAuthKey" json:"autoAuthKey,omitempty"`
}

func (x *SetPwdResponse) Reset() {
	*x = SetPwdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPwdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPwdResponse) ProtoMessage() {}

func (x *SetPwdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPwdResponse.ProtoReflect.Descriptor instead.
func (*SetPwdResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{196}
}

func (x *SetPwdResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *SetPwdResponse) GetAutoAuthKey() *SKBuiltinBufferT {
	if x != nil {
		return x.AutoAuthKey
	}
	return nil
}

type CreateChatRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Topic       *SKBuiltinStringT `protobuf:"bytes,2,opt,name=Topic" json:"Topic,omitempty"`
	MemberCount *uint32           `protobuf:"varint,3,opt,name=MemberCount" json:"MemberCount,omitempty"`
	MemberList  []*MemberReq      `protobuf:"bytes,4,rep,name=MemberList" json:"MemberList,omitempty"`
	Scene       *uint32           `protobuf:"varint,5,opt,name=Scene" json:"Scene,omitempty"`
	ExtBuffer   *SKBuiltinBufferT `protobuf:"bytes,6,opt,name=ExtBuffer" json:"ExtBuffer,omitempty"`
}

func (x *CreateChatRoomRequest) Reset() {
	*x = CreateChatRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatRoomRequest) ProtoMessage() {}

func (x *CreateChatRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatRoomRequest.ProtoReflect.Descriptor instead.
func (*CreateChatRoomRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{197}
}

func (x *CreateChatRoomRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *CreateChatRoomRequest) GetTopic() *SKBuiltinStringT {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *CreateChatRoomRequest) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *CreateChatRoomRequest) GetMemberList() []*MemberReq {
	if x != nil {
		return x.MemberList
	}
	return nil
}

func (x *CreateChatRoomRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *CreateChatRoomRequest) GetExtBuffer() *SKBuiltinBufferT {
	if x != nil {
		return x.ExtBuffer
	}
	return nil
}

type FacingCreateChatRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest      *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	OpCode           *uint32      `protobuf:"varint,2,opt,name=opCode" json:"opCode,omitempty"`
	ChatroomPassword *string      `protobuf:"bytes,3,opt,name=chatroomPassword" json:"chatroomPassword,omitempty"`
	Longitude        *float32     `protobuf:"fixed32,4,opt,name=longitude" json:"longitude,omitempty"`
	Latitude         *float32     `protobuf:"fixed32,5,opt,name=latitude" json:"latitude,omitempty"`
	Tag6             *uint32      `protobuf:"varint,6,opt,name=tag6" json:"tag6,omitempty"`
	Tag9             *uint32      `protobuf:"varint,9,opt,name=tag9" json:"tag9,omitempty"`
	Tag10            *uint32      `protobuf:"varint,10,opt,name=tag10" json:"tag10,omitempty"`
}

func (x *FacingCreateChatRoomRequest) Reset() {
	*x = FacingCreateChatRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacingCreateChatRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacingCreateChatRoomRequest) ProtoMessage() {}

func (x *FacingCreateChatRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacingCreateChatRoomRequest.ProtoReflect.Descriptor instead.
func (*FacingCreateChatRoomRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{198}
}

func (x *FacingCreateChatRoomRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FacingCreateChatRoomRequest) GetOpCode() uint32 {
	if x != nil && x.OpCode != nil {
		return *x.OpCode
	}
	return 0
}

func (x *FacingCreateChatRoomRequest) GetChatroomPassword() string {
	if x != nil && x.ChatroomPassword != nil {
		return *x.ChatroomPassword
	}
	return ""
}

func (x *FacingCreateChatRoomRequest) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FacingCreateChatRoomRequest) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *FacingCreateChatRoomRequest) GetTag6() uint32 {
	if x != nil && x.Tag6 != nil {
		return *x.Tag6
	}
	return 0
}

func (x *FacingCreateChatRoomRequest) GetTag9() uint32 {
	if x != nil && x.Tag9 != nil {
		return *x.Tag9
	}
	return 0
}

func (x *FacingCreateChatRoomRequest) GetTag10() uint32 {
	if x != nil && x.Tag10 != nil {
		return *x.Tag10
	}
	return 0
}

type FacingCreateChatRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse    *BaseResponse               `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	MemberCount     *uint32                     `protobuf:"varint,3,opt,name=memberCount" json:"memberCount,omitempty"`
	ChatRoomMembers []*ChatRoomMemberInfoSimple `protobuf:"bytes,4,rep,name=chatRoomMembers" json:"chatRoomMembers,omitempty"`
	ChatroomWxid    *string                     `protobuf:"bytes,5,opt,name=chatroomWxid" json:"chatroomWxid,omitempty"`
}

func (x *FacingCreateChatRoomResponse) Reset() {
	*x = FacingCreateChatRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacingCreateChatRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacingCreateChatRoomResponse) ProtoMessage() {}

func (x *FacingCreateChatRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacingCreateChatRoomResponse.ProtoReflect.Descriptor instead.
func (*FacingCreateChatRoomResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{199}
}

func (x *FacingCreateChatRoomResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FacingCreateChatRoomResponse) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *FacingCreateChatRoomResponse) GetChatRoomMembers() []*ChatRoomMemberInfoSimple {
	if x != nil {
		return x.ChatRoomMembers
	}
	return nil
}

func (x *FacingCreateChatRoomResponse) GetChatroomWxid() string {
	if x != nil && x.ChatroomWxid != nil {
		return *x.ChatroomWxid
	}
	return ""
}

type ChatRoomMemberInfoSimple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName           *string `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
	NickName           *string `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	DisplayName        *string `protobuf:"bytes,3,opt,name=displayName" json:"displayName,omitempty"`
	HeadImgUrl         *string `protobuf:"bytes,4,opt,name=headImgUrl" json:"headImgUrl,omitempty"`
	ChatroomMemberFlag *uint32 `protobuf:"varint,5,opt,name=chatroomMemberFlag" json:"chatroomMemberFlag,omitempty"`
}

func (x *ChatRoomMemberInfoSimple) Reset() {
	*x = ChatRoomMemberInfoSimple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRoomMemberInfoSimple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRoomMemberInfoSimple) ProtoMessage() {}

func (x *ChatRoomMemberInfoSimple) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRoomMemberInfoSimple.ProtoReflect.Descriptor instead.
func (*ChatRoomMemberInfoSimple) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{200}
}

func (x *ChatRoomMemberInfoSimple) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *ChatRoomMemberInfoSimple) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *ChatRoomMemberInfoSimple) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *ChatRoomMemberInfoSimple) GetHeadImgUrl() string {
	if x != nil && x.HeadImgUrl != nil {
		return *x.HeadImgUrl
	}
	return ""
}

func (x *ChatRoomMemberInfoSimple) GetChatroomMemberFlag() uint32 {
	if x != nil && x.ChatroomMemberFlag != nil {
		return *x.ChatroomMemberFlag
	}
	return 0
}

type MemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberName *SKBuiltinStringT `protobuf:"bytes,1,opt,name=MemberName" json:"MemberName,omitempty"`
}

func (x *MemberReq) Reset() {
	*x = MemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberReq) ProtoMessage() {}

func (x *MemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberReq.ProtoReflect.Descriptor instead.
func (*MemberReq) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{201}
}

func (x *MemberReq) GetMemberName() *SKBuiltinStringT {
	if x != nil {
		return x.MemberName
	}
	return nil
}

type CreateChatRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse    *BaseResponse     `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Topic           *SKBuiltinStringT `protobuf:"bytes,2,opt,name=Topic" json:"Topic,omitempty"`
	Pyinitial       *SKBuiltinStringT `protobuf:"bytes,3,opt,name=Pyinitial" json:"Pyinitial,omitempty"`
	QuanPin         *SKBuiltinStringT `protobuf:"bytes,4,opt,name=QuanPin" json:"QuanPin,omitempty"`
	MemberCount     *uint32           `protobuf:"varint,5,opt,name=MemberCount" json:"MemberCount,omitempty"`
	MemberLis       []*MemberResp     `protobuf:"bytes,6,rep,name=MemberLis" json:"MemberLis,omitempty"`
	ChatRoomName    *SKBuiltinStringT `protobuf:"bytes,7,opt,name=ChatRoomName" json:"ChatRoomName,omitempty"`
	ImgBuf          *SKBuiltinBufferT `protobuf:"bytes,8,opt,name=ImgBuf" json:"ImgBuf,omitempty"`
	BigHeadImgUrl   *string           `protobuf:"bytes,9,opt,name=BigHeadImgUrl" json:"BigHeadImgUrl,omitempty"`
	SmallHeadImgUrl *string           `protobuf:"bytes,10,opt,name=SmallHeadImgUrl" json:"SmallHeadImgUrl,omitempty"`
}

func (x *CreateChatRoomResponse) Reset() {
	*x = CreateChatRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatRoomResponse) ProtoMessage() {}

func (x *CreateChatRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatRoomResponse.ProtoReflect.Descriptor instead.
func (*CreateChatRoomResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{202}
}

func (x *CreateChatRoomResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *CreateChatRoomResponse) GetTopic() *SKBuiltinStringT {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *CreateChatRoomResponse) GetPyinitial() *SKBuiltinStringT {
	if x != nil {
		return x.Pyinitial
	}
	return nil
}

func (x *CreateChatRoomResponse) GetQuanPin() *SKBuiltinStringT {
	if x != nil {
		return x.QuanPin
	}
	return nil
}

func (x *CreateChatRoomResponse) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *CreateChatRoomResponse) GetMemberLis() []*MemberResp {
	if x != nil {
		return x.MemberLis
	}
	return nil
}

func (x *CreateChatRoomResponse) GetChatRoomName() *SKBuiltinStringT {
	if x != nil {
		return x.ChatRoomName
	}
	return nil
}

func (x *CreateChatRoomResponse) GetImgBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.ImgBuf
	}
	return nil
}

func (x *CreateChatRoomResponse) GetBigHeadImgUrl() string {
	if x != nil && x.BigHeadImgUrl != nil {
		return *x.BigHeadImgUrl
	}
	return ""
}

func (x *CreateChatRoomResponse) GetSmallHeadImgUrl() string {
	if x != nil && x.SmallHeadImgUrl != nil {
		return *x.SmallHeadImgUrl
	}
	return ""
}

type MemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberName      *SKBuiltinStringT `protobuf:"bytes,1,opt,name=MemberName" json:"MemberName,omitempty"`
	MemberStatus    *uint32           `protobuf:"varint,2,opt,name=MemberStatus" json:"MemberStatus,omitempty"`
	NickName        *SKBuiltinStringT `protobuf:"bytes,3,opt,name=NickName" json:"NickName,omitempty"`
	PYInitial       *SKBuiltinStringT `protobuf:"bytes,4,opt,name=PYInitial" json:"PYInitial,omitempty"`
	QuanPin         *SKBuiltinStringT `protobuf:"bytes,5,opt,name=QuanPin" json:"QuanPin,omitempty"`
	Sex             *int32            `protobuf:"varint,6,opt,name=Sex" json:"Sex,omitempty"`
	Remark          *SKBuiltinStringT `protobuf:"bytes,9,opt,name=Remark" json:"Remark,omitempty"`
	RemarkPyinitial *SKBuiltinStringT `protobuf:"bytes,10,opt,name=RemarkPyinitial" json:"RemarkPyinitial,omitempty"`
	RemarkQuanPin   *SKBuiltinStringT `protobuf:"bytes,11,opt,name=RemarkQuanPin" json:"RemarkQuanPin,omitempty"`
	ContactType     *uint32           `protobuf:"varint,12,opt,name=ContactType" json:"ContactType,omitempty"`
	Province        *string           `protobuf:"bytes,13,opt,name=Province" json:"Province,omitempty"`
	City            *string           `protobuf:"bytes,14,opt,name=City" json:"City,omitempty"`
	Signature       *string           `protobuf:"bytes,15,opt,name=Signature" json:"Signature,omitempty"`
	PersonalCard    *uint32           `protobuf:"varint,16,opt,name=PersonalCard" json:"PersonalCard,omitempty"`
	VerifyFlag      *uint32           `protobuf:"varint,17,opt,name=VerifyFlag" json:"VerifyFlag,omitempty"`
	VerifyInfo      *string           `protobuf:"bytes,18,opt,name=VerifyInfo" json:"VerifyInfo,omitempty"`
	Country         *string           `protobuf:"bytes,19,opt,name=Country" json:"Country,omitempty"`
}

func (x *MemberResp) Reset() {
	*x = MemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberResp) ProtoMessage() {}

func (x *MemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberResp.ProtoReflect.Descriptor instead.
func (*MemberResp) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{203}
}

func (x *MemberResp) GetMemberName() *SKBuiltinStringT {
	if x != nil {
		return x.MemberName
	}
	return nil
}

func (x *MemberResp) GetMemberStatus() uint32 {
	if x != nil && x.MemberStatus != nil {
		return *x.MemberStatus
	}
	return 0
}

func (x *MemberResp) GetNickName() *SKBuiltinStringT {
	if x != nil {
		return x.NickName
	}
	return nil
}

func (x *MemberResp) GetPYInitial() *SKBuiltinStringT {
	if x != nil {
		return x.PYInitial
	}
	return nil
}

func (x *MemberResp) GetQuanPin() *SKBuiltinStringT {
	if x != nil {
		return x.QuanPin
	}
	return nil
}

func (x *MemberResp) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *MemberResp) GetRemark() *SKBuiltinStringT {
	if x != nil {
		return x.Remark
	}
	return nil
}

func (x *MemberResp) GetRemarkPyinitial() *SKBuiltinStringT {
	if x != nil {
		return x.RemarkPyinitial
	}
	return nil
}

func (x *MemberResp) GetRemarkQuanPin() *SKBuiltinStringT {
	if x != nil {
		return x.RemarkQuanPin
	}
	return nil
}

func (x *MemberResp) GetContactType() uint32 {
	if x != nil && x.ContactType != nil {
		return *x.ContactType
	}
	return 0
}

func (x *MemberResp) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *MemberResp) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *MemberResp) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *MemberResp) GetPersonalCard() uint32 {
	if x != nil && x.PersonalCard != nil {
		return *x.PersonalCard
	}
	return 0
}

func (x *MemberResp) GetVerifyFlag() uint32 {
	if x != nil && x.VerifyFlag != nil {
		return *x.VerifyFlag
	}
	return 0
}

func (x *MemberResp) GetVerifyInfo() string {
	if x != nil && x.VerifyInfo != nil {
		return *x.VerifyInfo
	}
	return ""
}

func (x *MemberResp) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

type AddChatRoomMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest           *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	MemberCount           *uint32           `protobuf:"varint,2,opt,name=MemberCount" json:"MemberCount,omitempty"`
	MemberList            []*MemberReq      `protobuf:"bytes,3,rep,name=MemberList" json:"MemberList,omitempty"`
	ChatRoomName          *SKBuiltinStringT `protobuf:"bytes,4,opt,name=ChatRoomName" json:"ChatRoomName,omitempty"`
	LastRoomMsgTimeStamp  *uint32           `protobuf:"varint,5,opt,name=LastRoomMsgTimeStamp" json:"LastRoomMsgTimeStamp,omitempty"`
	AccessApplicationDesp *string           `protobuf:"bytes,6,opt,name=AccessApplicationDesp" json:"AccessApplicationDesp,omitempty"`
}

func (x *AddChatRoomMemberRequest) Reset() {
	*x = AddChatRoomMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddChatRoomMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddChatRoomMemberRequest) ProtoMessage() {}

func (x *AddChatRoomMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddChatRoomMemberRequest.ProtoReflect.Descriptor instead.
func (*AddChatRoomMemberRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{204}
}

func (x *AddChatRoomMemberRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *AddChatRoomMemberRequest) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *AddChatRoomMemberRequest) GetMemberList() []*MemberReq {
	if x != nil {
		return x.MemberList
	}
	return nil
}

func (x *AddChatRoomMemberRequest) GetChatRoomName() *SKBuiltinStringT {
	if x != nil {
		return x.ChatRoomName
	}
	return nil
}

func (x *AddChatRoomMemberRequest) GetLastRoomMsgTimeStamp() uint32 {
	if x != nil && x.LastRoomMsgTimeStamp != nil {
		return *x.LastRoomMsgTimeStamp
	}
	return 0
}

func (x *AddChatRoomMemberRequest) GetAccessApplicationDesp() string {
	if x != nil && x.AccessApplicationDesp != nil {
		return *x.AccessApplicationDesp
	}
	return ""
}

type AddChatRoomMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	MemberCount  *uint32       `protobuf:"varint,2,opt,name=MemberCount" json:"MemberCount,omitempty"`
	MemberList   []*MemberResp `protobuf:"bytes,3,rep,name=MemberList" json:"MemberList,omitempty"`
}

func (x *AddChatRoomMemberResponse) Reset() {
	*x = AddChatRoomMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddChatRoomMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddChatRoomMemberResponse) ProtoMessage() {}

func (x *AddChatRoomMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddChatRoomMemberResponse.ProtoReflect.Descriptor instead.
func (*AddChatRoomMemberResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{205}
}

func (x *AddChatRoomMemberResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *AddChatRoomMemberResponse) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *AddChatRoomMemberResponse) GetMemberList() []*MemberResp {
	if x != nil {
		return x.MemberList
	}
	return nil
}

type DelChatRoomMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest  *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	MemberCount  *uint32      `protobuf:"varint,2,opt,name=MemberCount" json:"MemberCount,omitempty"`
	MemberList   []*MemberReq `protobuf:"bytes,3,rep,name=MemberList" json:"MemberList,omitempty"`
	ChatRoomName *string      `protobuf:"bytes,4,opt,name=ChatRoomName" json:"ChatRoomName,omitempty"`
	Scene        *uint32      `protobuf:"varint,5,opt,name=Scene" json:"Scene,omitempty"`
}

func (x *DelChatRoomMemberRequest) Reset() {
	*x = DelChatRoomMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChatRoomMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChatRoomMemberRequest) ProtoMessage() {}

func (x *DelChatRoomMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChatRoomMemberRequest.ProtoReflect.Descriptor instead.
func (*DelChatRoomMemberRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{206}
}

func (x *DelChatRoomMemberRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *DelChatRoomMemberRequest) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *DelChatRoomMemberRequest) GetMemberList() []*MemberReq {
	if x != nil {
		return x.MemberList
	}
	return nil
}

func (x *DelChatRoomMemberRequest) GetChatRoomName() string {
	if x != nil && x.ChatRoomName != nil {
		return *x.ChatRoomName
	}
	return ""
}

func (x *DelChatRoomMemberRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

type DelChatRoomMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse    `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	MemberCount  *uint32          `protobuf:"varint,2,opt,name=MemberCount" json:"MemberCount,omitempty"`
	MemberList   []*DelMemberResp `protobuf:"bytes,3,rep,name=MemberList" json:"MemberList,omitempty"`
}

func (x *DelChatRoomMemberResponse) Reset() {
	*x = DelChatRoomMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChatRoomMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChatRoomMemberResponse) ProtoMessage() {}

func (x *DelChatRoomMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChatRoomMemberResponse.ProtoReflect.Descriptor instead.
func (*DelChatRoomMemberResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{207}
}

func (x *DelChatRoomMemberResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *DelChatRoomMemberResponse) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *DelChatRoomMemberResponse) GetMemberList() []*DelMemberResp {
	if x != nil {
		return x.MemberList
	}
	return nil
}

type DelMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberName *SKBuiltinStringT `protobuf:"bytes,1,opt,name=MemberName" json:"MemberName,omitempty"`
}

func (x *DelMemberResp) Reset() {
	*x = DelMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelMemberResp) ProtoMessage() {}

func (x *DelMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelMemberResp.ProtoReflect.Descriptor instead.
func (*DelMemberResp) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{208}
}

func (x *DelMemberResp) GetMemberName() *SKBuiltinStringT {
	if x != nil {
		return x.MemberName
	}
	return nil
}

type GetMFriendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Count        *uint32       `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
	FriendList   []*FriendList `protobuf:"bytes,3,rep,name=FriendList" json:"FriendList,omitempty"`
	Md5          *string       `protobuf:"bytes,4,opt,name=Md5" json:"Md5,omitempty"`
}

func (x *GetMFriendResponse) Reset() {
	*x = GetMFriendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMFriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMFriendResponse) ProtoMessage() {}

func (x *GetMFriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMFriendResponse.ProtoReflect.Descriptor instead.
func (*GetMFriendResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{209}
}

func (x *GetMFriendResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetMFriendResponse) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *GetMFriendResponse) GetFriendList() []*FriendList {
	if x != nil {
		return x.FriendList
	}
	return nil
}

func (x *GetMFriendResponse) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

type FriendList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName        *string         `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	Nickname        *string         `protobuf:"bytes,2,opt,name=Nickname" json:"Nickname,omitempty"`
	MobileMD5       *string         `protobuf:"bytes,3,opt,name=MobileMD5" json:"MobileMD5,omitempty"`
	Sex             *int32          `protobuf:"varint,4,opt,name=Sex" json:"Sex,omitempty"`
	Province        *string         `protobuf:"bytes,5,opt,name=Province" json:"Province,omitempty"`
	City            *string         `protobuf:"bytes,6,opt,name=City" json:"City,omitempty"`
	Signature       *string         `protobuf:"bytes,7,opt,name=Signature" json:"Signature,omitempty"`
	PersonalCard    *uint32         `protobuf:"varint,8,opt,name=PersonalCard" json:"PersonalCard,omitempty"`
	Alias           *string         `protobuf:"bytes,9,opt,name=Alias" json:"Alias,omitempty"`
	FBInfo          *FBFriend       `protobuf:"bytes,10,opt,name=FBInfo" json:"FBInfo,omitempty"`
	AlbumFlag       *uint32         `protobuf:"varint,11,opt,name=AlbumFlag" json:"AlbumFlag,omitempty"`
	AlbumStyle      *uint32         `protobuf:"varint,12,opt,name=AlbumStyle" json:"AlbumStyle,omitempty"`
	AlbumBGImgID    *string         `protobuf:"bytes,13,opt,name=AlbumBGImgID" json:"AlbumBGImgID,omitempty"`
	SnsUserInfo     *SnsUserInfo    `protobuf:"bytes,14,opt,name=SnsUserInfo" json:"SnsUserInfo,omitempty"`
	Country         *string         `protobuf:"bytes,15,opt,name=Country" json:"Country,omitempty"`
	MyBrandList     *string         `protobuf:"bytes,16,opt,name=MyBrandList" json:"MyBrandList,omitempty"`
	CustomizedInfo  *CustomizedInfo `protobuf:"bytes,17,opt,name=CustomizedInfo" json:"CustomizedInfo,omitempty"`
	BigHeadImgUrl   *string         `protobuf:"bytes,20,opt,name=BigHeadImgUrl" json:"BigHeadImgUrl,omitempty"`
	SmallHeadImgUrl *string         `protobuf:"bytes,21,opt,name=SmallHeadImgUrl" json:"SmallHeadImgUrl,omitempty"`
	AntispamTicket  *string         `protobuf:"bytes,22,opt,name=AntispamTicket" json:"AntispamTicket,omitempty"`
}

func (x *FriendList) Reset() {
	*x = FriendList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendList) ProtoMessage() {}

func (x *FriendList) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendList.ProtoReflect.Descriptor instead.
func (*FriendList) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{210}
}

func (x *FriendList) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *FriendList) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FriendList) GetMobileMD5() string {
	if x != nil && x.MobileMD5 != nil {
		return *x.MobileMD5
	}
	return ""
}

func (x *FriendList) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *FriendList) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *FriendList) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *FriendList) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *FriendList) GetPersonalCard() uint32 {
	if x != nil && x.PersonalCard != nil {
		return *x.PersonalCard
	}
	return 0
}

func (x *FriendList) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *FriendList) GetFBInfo() *FBFriend {
	if x != nil {
		return x.FBInfo
	}
	return nil
}

func (x *FriendList) GetAlbumFlag() uint32 {
	if x != nil && x.AlbumFlag != nil {
		return *x.AlbumFlag
	}
	return 0
}

func (x *FriendList) GetAlbumStyle() uint32 {
	if x != nil && x.AlbumStyle != nil {
		return *x.AlbumStyle
	}
	return 0
}

func (x *FriendList) GetAlbumBGImgID() string {
	if x != nil && x.AlbumBGImgID != nil {
		return *x.AlbumBGImgID
	}
	return ""
}

func (x *FriendList) GetSnsUserInfo() *SnsUserInfo {
	if x != nil {
		return x.SnsUserInfo
	}
	return nil
}

func (x *FriendList) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *FriendList) GetMyBrandList() string {
	if x != nil && x.MyBrandList != nil {
		return *x.MyBrandList
	}
	return ""
}

func (x *FriendList) GetCustomizedInfo() *CustomizedInfo {
	if x != nil {
		return x.CustomizedInfo
	}
	return nil
}

func (x *FriendList) GetBigHeadImgUrl() string {
	if x != nil && x.BigHeadImgUrl != nil {
		return *x.BigHeadImgUrl
	}
	return ""
}

func (x *FriendList) GetSmallHeadImgUrl() string {
	if x != nil && x.SmallHeadImgUrl != nil {
		return *x.SmallHeadImgUrl
	}
	return ""
}

func (x *FriendList) GetAntispamTicket() string {
	if x != nil && x.AntispamTicket != nil {
		return *x.AntispamTicket
	}
	return ""
}

type FBFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name   *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ImgKey *uint64 `protobuf:"varint,3,opt,name=imgKey" json:"imgKey,omitempty"`
}

func (x *FBFriend) Reset() {
	*x = FBFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FBFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FBFriend) ProtoMessage() {}

func (x *FBFriend) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FBFriend.ProtoReflect.Descriptor instead.
func (*FBFriend) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{211}
}

func (x *FBFriend) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FBFriend) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FBFriend) GetImgKey() uint64 {
	if x != nil && x.ImgKey != nil {
		return *x.ImgKey
	}
	return 0
}

type PrivacySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function *int32 `protobuf:"varint,1,opt,name=Function" json:"Function,omitempty"`
	Value    *int32 `protobuf:"varint,2,opt,name=Value" json:"Value,omitempty"`
}

func (x *PrivacySettings) Reset() {
	*x = PrivacySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivacySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivacySettings) ProtoMessage() {}

func (x *PrivacySettings) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivacySettings.ProtoReflect.Descriptor instead.
func (*PrivacySettings) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{212}
}

func (x *PrivacySettings) GetFunction() int32 {
	if x != nil && x.Function != nil {
		return *x.Function
	}
	return 0
}

func (x *PrivacySettings) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type FriendCirclePrivacySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Open     *int32  `protobuf:"varint,1,opt,name=Open" json:"Open,omitempty"`
	Img      *string `protobuf:"bytes,2,opt,name=img" json:"img,omitempty"`
	State    *uint32 `protobuf:"varint,3,opt,name=state" json:"state,omitempty"`
	Function *int32  `protobuf:"varint,4,opt,name=Function" json:"Function,omitempty"`
	Value    *uint32 `protobuf:"varint,5,opt,name=Value" json:"Value,omitempty"`
}

func (x *FriendCirclePrivacySettings) Reset() {
	*x = FriendCirclePrivacySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendCirclePrivacySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendCirclePrivacySettings) ProtoMessage() {}

func (x *FriendCirclePrivacySettings) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendCirclePrivacySettings.ProtoReflect.Descriptor instead.
func (*FriendCirclePrivacySettings) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{213}
}

func (x *FriendCirclePrivacySettings) GetOpen() int32 {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return 0
}

func (x *FriendCirclePrivacySettings) GetImg() string {
	if x != nil && x.Img != nil {
		return *x.Img
	}
	return ""
}

func (x *FriendCirclePrivacySettings) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *FriendCirclePrivacySettings) GetFunction() int32 {
	if x != nil && x.Function != nil {
		return *x.Function
	}
	return 0
}

func (x *FriendCirclePrivacySettings) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type GetFavInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
}

func (x *GetFavInfoRequest) Reset() {
	*x = GetFavInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavInfoRequest) ProtoMessage() {}

func (x *GetFavInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavInfoRequest.ProtoReflect.Descriptor instead.
func (*GetFavInfoRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{214}
}

func (x *GetFavInfoRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

type GetFavInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse       *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	UsedSize           *uint64       `protobuf:"varint,2,opt,name=usedSize" json:"usedSize,omitempty"`
	TotalSize          *uint64       `protobuf:"varint,3,opt,name=totalSize" json:"totalSize,omitempty"`
	MxFavFileSize      *uint64       `protobuf:"varint,4,opt,name=mxFavFileSize" json:"mxFavFileSize,omitempty"`
	MxAutoUploadSize   *int32        `protobuf:"varint,5,opt,name=mxAutoUploadSize" json:"mxAutoUploadSize,omitempty"`
	MxAutoDownloadSize *int32        `protobuf:"varint,6,opt,name=mxAutoDownloadSize" json:"mxAutoDownloadSize,omitempty"`
}

func (x *GetFavInfoResponse) Reset() {
	*x = GetFavInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavInfoResponse) ProtoMessage() {}

func (x *GetFavInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavInfoResponse.ProtoReflect.Descriptor instead.
func (*GetFavInfoResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{215}
}

func (x *GetFavInfoResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetFavInfoResponse) GetUsedSize() uint64 {
	if x != nil && x.UsedSize != nil {
		return *x.UsedSize
	}
	return 0
}

func (x *GetFavInfoResponse) GetTotalSize() uint64 {
	if x != nil && x.TotalSize != nil {
		return *x.TotalSize
	}
	return 0
}

func (x *GetFavInfoResponse) GetMxFavFileSize() uint64 {
	if x != nil && x.MxFavFileSize != nil {
		return *x.MxFavFileSize
	}
	return 0
}

func (x *GetFavInfoResponse) GetMxAutoUploadSize() int32 {
	if x != nil && x.MxAutoUploadSize != nil {
		return *x.MxAutoUploadSize
	}
	return 0
}

func (x *GetFavInfoResponse) GetMxAutoDownloadSize() int32 {
	if x != nil && x.MxAutoDownloadSize != nil {
		return *x.MxAutoDownloadSize
	}
	return 0
}

type SnsSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Selector    *uint32           `protobuf:"varint,2,opt,name=selector" json:"selector,omitempty"`
	KeyBuf      *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=keyBuf" json:"keyBuf,omitempty"`
}

func (x *SnsSyncRequest) Reset() {
	*x = SnsSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsSyncRequest) ProtoMessage() {}

func (x *SnsSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsSyncRequest.ProtoReflect.Descriptor instead.
func (*SnsSyncRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{216}
}

func (x *SnsSyncRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SnsSyncRequest) GetSelector() uint32 {
	if x != nil && x.Selector != nil {
		return *x.Selector
	}
	return 0
}

func (x *SnsSyncRequest) GetKeyBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.KeyBuf
	}
	return nil
}

type SnsSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse     `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	CmdList      *CmdList          `protobuf:"bytes,2,opt,name=cmdList" json:"cmdList,omitempty"`
	ContinueFlag *uint32           `protobuf:"varint,3,opt,name=continueFlag" json:"continueFlag,omitempty"`
	KeyBuf       *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=keyBuf" json:"keyBuf,omitempty"`
}

func (x *SnsSyncResponse) Reset() {
	*x = SnsSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsSyncResponse) ProtoMessage() {}

func (x *SnsSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsSyncResponse.ProtoReflect.Descriptor instead.
func (*SnsSyncResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{217}
}

func (x *SnsSyncResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *SnsSyncResponse) GetCmdList() *CmdList {
	if x != nil {
		return x.CmdList
	}
	return nil
}

func (x *SnsSyncResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *SnsSyncResponse) GetKeyBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.KeyBuf
	}
	return nil
}

// 视频号
type FinderBaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userver     *int32 `protobuf:"varint,1,opt,name=userver" json:"userver,omitempty"`
	Scene       *int32 `protobuf:"varint,2,opt,name=scene" json:"scene,omitempty"`
	ExtSpamInfo []byte `protobuf:"bytes,3,opt,name=extSpamInfo" json:"extSpamInfo,omitempty"`
}

func (x *FinderBaseRequest) Reset() {
	*x = FinderBaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderBaseRequest) ProtoMessage() {}

func (x *FinderBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderBaseRequest.ProtoReflect.Descriptor instead.
func (*FinderBaseRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{218}
}

func (x *FinderBaseRequest) GetUserver() int32 {
	if x != nil && x.Userver != nil {
		return *x.Userver
	}
	return 0
}

func (x *FinderBaseRequest) GetScene() int32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderBaseRequest) GetExtSpamInfo() []byte {
	if x != nil {
		return x.ExtSpamInfo
	}
	return nil
}

// 视频号用户首页
type FinderUserPrepareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Scene         *int32             `protobuf:"varint,2,opt,name=scene" json:"scene,omitempty"`
	FinderBasereq *FinderBaseRequest `protobuf:"bytes,3,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	Longitude     *float32           `protobuf:"fixed32,4,opt,name=longitude" json:"longitude,omitempty"`
	Latitude      *float32           `protobuf:"fixed32,5,opt,name=latitude" json:"latitude,omitempty"`
}

func (x *FinderUserPrepareRequest) Reset() {
	*x = FinderUserPrepareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUserPrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUserPrepareRequest) ProtoMessage() {}

func (x *FinderUserPrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUserPrepareRequest.ProtoReflect.Descriptor instead.
func (*FinderUserPrepareRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{219}
}

func (x *FinderUserPrepareRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderUserPrepareRequest) GetScene() int32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderUserPrepareRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderUserPrepareRequest) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FinderUserPrepareRequest) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

type FinderUserPrepareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse                    *BaseResponse             `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	ActionType                      *int32                    `protobuf:"varint,2,opt,name=actionType" json:"actionType,omitempty"`
	VerifyInfo                      *FinderNicknameVerifyInfo `protobuf:"bytes,3,opt,name=verifyInfo" json:"verifyInfo,omitempty"`
	SelfContact                     *FinderContact            `protobuf:"bytes,4,opt,name=selfContact" json:"selfContact,omitempty"`
	UserFlag                        *int32                    `protobuf:"varint,5,opt,name=userFlag" json:"userFlag,omitempty"`
	NicknameModifyWording           *string                   `protobuf:"bytes,6,opt,name=nicknameModifyWording" json:"nicknameModifyWording,omitempty"`
	IsNonresidentRealtimeLocation   *bool                     `protobuf:"varint,7,opt,name=isNonresidentRealtimeLocation" json:"isNonresidentRealtimeLocation,omitempty"`
	IsNonresidentWxacctLocation     *bool                     `protobuf:"varint,8,opt,name=isNonresidentWxacctLocation" json:"isNonresidentWxacctLocation,omitempty"`
	IsNonresidentFinderacctLocation *bool                     `protobuf:"varint,9,opt,name=isNonresidentFinderacctLocation" json:"isNonresidentFinderacctLocation,omitempty"`
}

func (x *FinderUserPrepareResponse) Reset() {
	*x = FinderUserPrepareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUserPrepareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUserPrepareResponse) ProtoMessage() {}

func (x *FinderUserPrepareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUserPrepareResponse.ProtoReflect.Descriptor instead.
func (*FinderUserPrepareResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{220}
}

func (x *FinderUserPrepareResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetActionType() int32 {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetVerifyInfo() *FinderNicknameVerifyInfo {
	if x != nil {
		return x.VerifyInfo
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetSelfContact() *FinderContact {
	if x != nil {
		return x.SelfContact
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetUserFlag() int32 {
	if x != nil && x.UserFlag != nil {
		return *x.UserFlag
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetNicknameModifyWording() string {
	if x != nil && x.NicknameModifyWording != nil {
		return *x.NicknameModifyWording
	}
	return ""
}

func (x *FinderUserPrepareResponse) GetIsNonresidentRealtimeLocation() bool {
	if x != nil && x.IsNonresidentRealtimeLocation != nil {
		return *x.IsNonresidentRealtimeLocation
	}
	return false
}

func (x *FinderUserPrepareResponse) GetIsNonresidentWxacctLocation() bool {
	if x != nil && x.IsNonresidentWxacctLocation != nil {
		return *x.IsNonresidentWxacctLocation
	}
	return false
}

func (x *FinderUserPrepareResponse) GetIsNonresidentFinderacctLocation() bool {
	if x != nil && x.IsNonresidentFinderacctLocation != nil {
		return *x.IsNonresidentFinderacctLocation
	}
	return false
}

type FinderNicknameVerifyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifyPrefix   *string `protobuf:"bytes,1,opt,name=verifyPrefix" json:"verifyPrefix,omitempty"`
	BannerWording  *string `protobuf:"bytes,2,opt,name=bannerWording" json:"bannerWording,omitempty"`
	VerifyLink     *string `protobuf:"bytes,3,opt,name=verifyLink" json:"verifyLink,omitempty"`
	Appname        *string `protobuf:"bytes,4,opt,name=appname" json:"appname,omitempty"`
	VerifyNickname *string `protobuf:"bytes,5,opt,name=verifyNickname" json:"verifyNickname,omitempty"`
	HeadImgUrl     *string `protobuf:"bytes,6,opt,name=headImgUrl" json:"headImgUrl,omitempty"`
	ErrScene       *int32  `protobuf:"varint,7,opt,name=errScene" json:"errScene,omitempty"`
}

func (x *FinderNicknameVerifyInfo) Reset() {
	*x = FinderNicknameVerifyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderNicknameVerifyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderNicknameVerifyInfo) ProtoMessage() {}

func (x *FinderNicknameVerifyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderNicknameVerifyInfo.ProtoReflect.Descriptor instead.
func (*FinderNicknameVerifyInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{221}
}

func (x *FinderNicknameVerifyInfo) GetVerifyPrefix() string {
	if x != nil && x.VerifyPrefix != nil {
		return *x.VerifyPrefix
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetBannerWording() string {
	if x != nil && x.BannerWording != nil {
		return *x.BannerWording
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetVerifyLink() string {
	if x != nil && x.VerifyLink != nil {
		return *x.VerifyLink
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetAppname() string {
	if x != nil && x.Appname != nil {
		return *x.Appname
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetVerifyNickname() string {
	if x != nil && x.VerifyNickname != nil {
		return *x.VerifyNickname
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetHeadImgUrl() string {
	if x != nil && x.HeadImgUrl != nil {
		return *x.HeadImgUrl
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetErrScene() int32 {
	if x != nil && x.ErrScene != nil {
		return *x.ErrScene
	}
	return 0
}

type FinderContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     *string               `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Nickname     *string               `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	HeadUrl      *string               `protobuf:"bytes,3,opt,name=headUrl" json:"headUrl,omitempty"`
	Seq          *uint64               `protobuf:"varint,4,opt,name=seq" json:"seq,omitempty"`
	Signature    *string               `protobuf:"bytes,5,opt,name=signature" json:"signature,omitempty"`
	FollowFlag   *int32                `protobuf:"varint,6,opt,name=followFlag" json:"followFlag,omitempty"`
	FollowTime   *int32                `protobuf:"varint,7,opt,name=followTime" json:"followTime,omitempty"`
	AuthInfo     *FinderAuthInfo       `protobuf:"bytes,8,opt,name=authInfo" json:"authInfo,omitempty"`
	CoverImgUrl  *string               `protobuf:"bytes,9,opt,name=coverImgUrl" json:"coverImgUrl,omitempty"`
	SpamStatus   *int32                `protobuf:"varint,10,opt,name=spamStatus" json:"spamStatus,omitempty"`
	ExtFlag      *int32                `protobuf:"varint,11,opt,name=extFlag" json:"extFlag,omitempty"`
	ExtInfo      *FinderContactExtInfo `protobuf:"bytes,12,opt,name=extInfo" json:"extInfo,omitempty"`
	OriginalFlag *int32                `protobuf:"varint,13,opt,name=originalFlag" json:"originalFlag,omitempty"`
}

func (x *FinderContact) Reset() {
	*x = FinderContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderContact) ProtoMessage() {}

func (x *FinderContact) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderContact.ProtoReflect.Descriptor instead.
func (*FinderContact) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{222}
}

func (x *FinderContact) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderContact) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FinderContact) GetHeadUrl() string {
	if x != nil && x.HeadUrl != nil {
		return *x.HeadUrl
	}
	return ""
}

func (x *FinderContact) GetSeq() uint64 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *FinderContact) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *FinderContact) GetFollowFlag() int32 {
	if x != nil && x.FollowFlag != nil {
		return *x.FollowFlag
	}
	return 0
}

func (x *FinderContact) GetFollowTime() int32 {
	if x != nil && x.FollowTime != nil {
		return *x.FollowTime
	}
	return 0
}

func (x *FinderContact) GetAuthInfo() *FinderAuthInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *FinderContact) GetCoverImgUrl() string {
	if x != nil && x.CoverImgUrl != nil {
		return *x.CoverImgUrl
	}
	return ""
}

func (x *FinderContact) GetSpamStatus() int32 {
	if x != nil && x.SpamStatus != nil {
		return *x.SpamStatus
	}
	return 0
}

func (x *FinderContact) GetExtFlag() int32 {
	if x != nil && x.ExtFlag != nil {
		return *x.ExtFlag
	}
	return 0
}

func (x *FinderContact) GetExtInfo() *FinderContactExtInfo {
	if x != nil {
		return x.ExtInfo
	}
	return nil
}

func (x *FinderContact) GetOriginalFlag() int32 {
	if x != nil && x.OriginalFlag != nil {
		return *x.OriginalFlag
	}
	return 0
}

type FinderContactExtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country    *string `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
	Province   *string `protobuf:"bytes,2,opt,name=province" json:"province,omitempty"`
	City       *string `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	Sex        *int32  `protobuf:"varint,4,opt,name=sex" json:"sex,omitempty"`
	BirthYear  *int32  `protobuf:"varint,5,opt,name=birthYear" json:"birthYear,omitempty"`
	BirthMonth *int32  `protobuf:"varint,6,opt,name=birthMonth" json:"birthMonth,omitempty"`
	BirthDay   *int32  `protobuf:"varint,7,opt,name=birthDay" json:"birthDay,omitempty"`
}

func (x *FinderContactExtInfo) Reset() {
	*x = FinderContactExtInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderContactExtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderContactExtInfo) ProtoMessage() {}

func (x *FinderContactExtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderContactExtInfo.ProtoReflect.Descriptor instead.
func (*FinderContactExtInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{223}
}

func (x *FinderContactExtInfo) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *FinderContactExtInfo) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *FinderContactExtInfo) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *FinderContactExtInfo) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *FinderContactExtInfo) GetBirthYear() int32 {
	if x != nil && x.BirthYear != nil {
		return *x.BirthYear
	}
	return 0
}

func (x *FinderContactExtInfo) GetBirthMonth() int32 {
	if x != nil && x.BirthMonth != nil {
		return *x.BirthMonth
	}
	return 0
}

func (x *FinderContactExtInfo) GetBirthDay() int32 {
	if x != nil && x.BirthDay != nil {
		return *x.BirthDay
	}
	return 0
}

type FinderAuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealName       *string        `protobuf:"bytes,1,opt,name=realName" json:"realName,omitempty"`
	AuthIconType   *int32         `protobuf:"varint,2,opt,name=authIconType" json:"authIconType,omitempty"`
	AuthProfession *string        `protobuf:"bytes,3,opt,name=authProfession" json:"authProfession,omitempty"`
	AuthGuarantor  *FinderContact `protobuf:"bytes,4,opt,name=authGuarantor" json:"authGuarantor,omitempty"`
	DetailLink     *string        `protobuf:"bytes,5,opt,name=detailLink" json:"detailLink,omitempty"`
	AppName        *string        `protobuf:"bytes,6,opt,name=appName" json:"appName,omitempty"`
}

func (x *FinderAuthInfo) Reset() {
	*x = FinderAuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderAuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderAuthInfo) ProtoMessage() {}

func (x *FinderAuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderAuthInfo.ProtoReflect.Descriptor instead.
func (*FinderAuthInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{224}
}

func (x *FinderAuthInfo) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *FinderAuthInfo) GetAuthIconType() int32 {
	if x != nil && x.AuthIconType != nil {
		return *x.AuthIconType
	}
	return 0
}

func (x *FinderAuthInfo) GetAuthProfession() string {
	if x != nil && x.AuthProfession != nil {
		return *x.AuthProfession
	}
	return ""
}

func (x *FinderAuthInfo) GetAuthGuarantor() *FinderContact {
	if x != nil {
		return x.AuthGuarantor
	}
	return nil
}

func (x *FinderAuthInfo) GetDetailLink() string {
	if x != nil && x.DetailLink != nil {
		return *x.DetailLink
	}
	return ""
}

func (x *FinderAuthInfo) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

type FinderUserPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Username       *string            `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	MaxId          *uint64            `protobuf:"varint,3,opt,name=maxId" json:"maxId,omitempty"`
	FirstPageMd5   *string            `protobuf:"bytes,4,opt,name=firstPageMd5" json:"firstPageMd5,omitempty"`
	FinderUsername *string            `protobuf:"bytes,5,opt,name=finderUsername" json:"finderUsername,omitempty"`
	NeedFansCount  *int32             `protobuf:"varint,6,opt,name=needFansCount" json:"needFansCount,omitempty"`
	FinderBasereq  *FinderBaseRequest `protobuf:"bytes,7,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	LastBuffer     []byte             `protobuf:"bytes,8,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
}

func (x *FinderUserPageRequest) Reset() {
	*x = FinderUserPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUserPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUserPageRequest) ProtoMessage() {}

func (x *FinderUserPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUserPageRequest.ProtoReflect.Descriptor instead.
func (*FinderUserPageRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{225}
}

func (x *FinderUserPageRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderUserPageRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderUserPageRequest) GetMaxId() uint64 {
	if x != nil && x.MaxId != nil {
		return *x.MaxId
	}
	return 0
}

func (x *FinderUserPageRequest) GetFirstPageMd5() string {
	if x != nil && x.FirstPageMd5 != nil {
		return *x.FirstPageMd5
	}
	return ""
}

func (x *FinderUserPageRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderUserPageRequest) GetNeedFansCount() int32 {
	if x != nil && x.NeedFansCount != nil {
		return *x.NeedFansCount
	}
	return 0
}

func (x *FinderUserPageRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderUserPageRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

type FinderUserPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse          *BaseResponse             `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Object                []*FinderObject           `protobuf:"bytes,2,rep,name=object" json:"object,omitempty"`
	FirstPageMd5          *string                   `protobuf:"bytes,3,opt,name=firstPageMd5" json:"firstPageMd5,omitempty"`
	FinderUserInfo        *FinderUserInfo           `protobuf:"bytes,4,opt,name=finderUserInfo" json:"finderUserInfo,omitempty"`
	Contact               *FinderContact            `protobuf:"bytes,5,opt,name=contact" json:"contact,omitempty"`
	FeedsCount            *int32                    `protobuf:"varint,6,opt,name=feedsCount" json:"feedsCount,omitempty"`
	ContinueFlag          *int32                    `protobuf:"varint,7,opt,name=continueFlag" json:"continueFlag,omitempty"`
	VerifyInfo            *FinderNicknameVerifyInfo `protobuf:"bytes,8,opt,name=verifyInfo" json:"verifyInfo,omitempty"`
	FansCount             *int32                    `protobuf:"varint,9,opt,name=fansCount" json:"fansCount,omitempty"`
	LastBuffer            []byte                    `protobuf:"bytes,10,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	FriendFollowCount     *int32                    `protobuf:"varint,11,opt,name=friendFollowCount" json:"friendFollowCount,omitempty"`
	UserTags              [][]byte                  `protobuf:"bytes,12,rep,name=userTags" json:"userTags,omitempty"` //未找到相关PB
	OriginalEnctranceFlag *int32                    `protobuf:"varint,13,opt,name=originalEnctranceFlag" json:"originalEnctranceFlag,omitempty"`
}

func (x *FinderUserPageResponse) Reset() {
	*x = FinderUserPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUserPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUserPageResponse) ProtoMessage() {}

func (x *FinderUserPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUserPageResponse.ProtoReflect.Descriptor instead.
func (*FinderUserPageResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{226}
}

func (x *FinderUserPageResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderUserPageResponse) GetObject() []*FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderUserPageResponse) GetFirstPageMd5() string {
	if x != nil && x.FirstPageMd5 != nil {
		return *x.FirstPageMd5
	}
	return ""
}

func (x *FinderUserPageResponse) GetFinderUserInfo() *FinderUserInfo {
	if x != nil {
		return x.FinderUserInfo
	}
	return nil
}

func (x *FinderUserPageResponse) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *FinderUserPageResponse) GetFeedsCount() int32 {
	if x != nil && x.FeedsCount != nil {
		return *x.FeedsCount
	}
	return 0
}

func (x *FinderUserPageResponse) GetContinueFlag() int32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderUserPageResponse) GetVerifyInfo() *FinderNicknameVerifyInfo {
	if x != nil {
		return x.VerifyInfo
	}
	return nil
}

func (x *FinderUserPageResponse) GetFansCount() int32 {
	if x != nil && x.FansCount != nil {
		return *x.FansCount
	}
	return 0
}

func (x *FinderUserPageResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderUserPageResponse) GetFriendFollowCount() int32 {
	if x != nil && x.FriendFollowCount != nil {
		return *x.FriendFollowCount
	}
	return 0
}

func (x *FinderUserPageResponse) GetUserTags() [][]byte {
	if x != nil {
		return x.UserTags
	}
	return nil
}

func (x *FinderUserPageResponse) GetOriginalEnctranceFlag() int32 {
	if x != nil && x.OriginalEnctranceFlag != nil {
		return *x.OriginalEnctranceFlag
	}
	return 0
}

type FinderUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoverImgUrl    *string         `protobuf:"bytes,1,opt,name=coverImgUrl" json:"coverImgUrl,omitempty"`
	AuthIconType   *int32          `protobuf:"varint,2,opt,name=authIconType" json:"authIconType,omitempty"`
	AuthProfession *string         `protobuf:"bytes,3,opt,name=authProfession" json:"authProfession,omitempty"`
	AuthInfo       *FinderAuthInfo `protobuf:"bytes,4,opt,name=authInfo" json:"authInfo,omitempty"`
}

func (x *FinderUserInfo) Reset() {
	*x = FinderUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUserInfo) ProtoMessage() {}

func (x *FinderUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUserInfo.ProtoReflect.Descriptor instead.
func (*FinderUserInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{227}
}

func (x *FinderUserInfo) GetCoverImgUrl() string {
	if x != nil && x.CoverImgUrl != nil {
		return *x.CoverImgUrl
	}
	return ""
}

func (x *FinderUserInfo) GetAuthIconType() int32 {
	if x != nil && x.AuthIconType != nil {
		return *x.AuthIconType
	}
	return 0
}

func (x *FinderUserInfo) GetAuthProfession() string {
	if x != nil && x.AuthProfession != nil {
		return *x.AuthProfession
	}
	return ""
}

func (x *FinderUserInfo) GetAuthInfo() *FinderAuthInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

type FinderObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *uint64                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Nickname            *string                `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	Username            *string                `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	ObjectDesc          *FinderObjectDesc      `protobuf:"bytes,4,opt,name=objectDesc" json:"objectDesc,omitempty"`
	Createtime          *int32                 `protobuf:"varint,5,opt,name=createtime" json:"createtime,omitempty"`
	LikeFlag            *int32                 `protobuf:"varint,6,opt,name=likeFlag" json:"likeFlag,omitempty"`
	LikeList            [][]byte               `protobuf:"bytes,7,rep,name=likeList" json:"likeList,omitempty"` //未找到相关PB
	CommentList         []*FinderCommentInfo   `protobuf:"bytes,8,rep,name=commentList" json:"commentList,omitempty"`
	ForwardCount        *int32                 `protobuf:"varint,9,opt,name=forwardCount" json:"forwardCount,omitempty"`
	Contact             *FinderContact         `protobuf:"bytes,10,opt,name=contact" json:"contact,omitempty"`
	DisplayidDiscarded  *string                `protobuf:"bytes,11,opt,name=displayidDiscarded" json:"displayidDiscarded,omitempty"`
	RecommenderList     []*FinderRecommendInfo `protobuf:"bytes,12,rep,name=recommenderList" json:"recommenderList,omitempty"` //疑似PB不对
	Displayid           *uint64                `protobuf:"varint,13,opt,name=displayid" json:"displayid,omitempty"`
	LikeCount           *int32                 `protobuf:"varint,14,opt,name=likeCount" json:"likeCount,omitempty"`
	CommentCount        *int32                 `protobuf:"varint,15,opt,name=commentCount" json:"commentCount,omitempty"`
	RecommendReason     *string                `protobuf:"bytes,16,opt,name=recommendReason" json:"recommendReason,omitempty"`
	ReadCount           *int32                 `protobuf:"varint,17,opt,name=readCount" json:"readCount,omitempty"`
	Deletetime          *int32                 `protobuf:"varint,18,opt,name=deletetime" json:"deletetime,omitempty"`
	CommentClose        *int32                 `protobuf:"varint,19,opt,name=commentClose" json:"commentClose,omitempty"`
	RefObjectFlag       *uint32                `protobuf:"varint,20,opt,name=refObjectFlag" json:"refObjectFlag,omitempty"`
	RefObjectid         *uint32                `protobuf:"varint,21,opt,name=refObjectid" json:"refObjectid,omitempty"`
	RefObjectContact    *FinderContact         `protobuf:"bytes,22,opt,name=refObjectContact" json:"refObjectContact,omitempty"`
	RecommendType       *int32                 `protobuf:"varint,23,opt,name=recommendType" json:"recommendType,omitempty"`
	FriendLikeCount     *int32                 `protobuf:"varint,24,opt,name=friendLikeCount" json:"friendLikeCount,omitempty"`
	ObjectNonceId       *string                `protobuf:"bytes,25,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	RefObjectNonceId    *string                `protobuf:"bytes,26,opt,name=refObjectNonceId" json:"refObjectNonceId,omitempty"`
	ObjectStatus        *int32                 `protobuf:"varint,27,opt,name=objectStatus" json:"objectStatus,omitempty"`
	SendShareFavWording *string                `protobuf:"bytes,28,opt,name=sendShareFavWording" json:"sendShareFavWording,omitempty"`
	OriginalFlag        *int32                 `protobuf:"varint,29,opt,name=originalFlag" json:"originalFlag,omitempty"`
	SecondaryShowFlag   *int32                 `protobuf:"varint,30,opt,name=secondaryShowFlag" json:"secondaryShowFlag,omitempty"`
	TipsWording         *string                `protobuf:"bytes,31,opt,name=tipsWording" json:"tipsWording,omitempty"`
	OrgRecommendType    *int32                 `protobuf:"varint,32,opt,name=orgRecommendType" json:"orgRecommendType,omitempty"`
}

func (x *FinderObject) Reset() {
	*x = FinderObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObject) ProtoMessage() {}

func (x *FinderObject) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObject.ProtoReflect.Descriptor instead.
func (*FinderObject) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{228}
}

func (x *FinderObject) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FinderObject) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FinderObject) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderObject) GetObjectDesc() *FinderObjectDesc {
	if x != nil {
		return x.ObjectDesc
	}
	return nil
}

func (x *FinderObject) GetCreatetime() int32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return 0
}

func (x *FinderObject) GetLikeFlag() int32 {
	if x != nil && x.LikeFlag != nil {
		return *x.LikeFlag
	}
	return 0
}

func (x *FinderObject) GetLikeList() [][]byte {
	if x != nil {
		return x.LikeList
	}
	return nil
}

func (x *FinderObject) GetCommentList() []*FinderCommentInfo {
	if x != nil {
		return x.CommentList
	}
	return nil
}

func (x *FinderObject) GetForwardCount() int32 {
	if x != nil && x.ForwardCount != nil {
		return *x.ForwardCount
	}
	return 0
}

func (x *FinderObject) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *FinderObject) GetDisplayidDiscarded() string {
	if x != nil && x.DisplayidDiscarded != nil {
		return *x.DisplayidDiscarded
	}
	return ""
}

func (x *FinderObject) GetRecommenderList() []*FinderRecommendInfo {
	if x != nil {
		return x.RecommenderList
	}
	return nil
}

func (x *FinderObject) GetDisplayid() uint64 {
	if x != nil && x.Displayid != nil {
		return *x.Displayid
	}
	return 0
}

func (x *FinderObject) GetLikeCount() int32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *FinderObject) GetCommentCount() int32 {
	if x != nil && x.CommentCount != nil {
		return *x.CommentCount
	}
	return 0
}

func (x *FinderObject) GetRecommendReason() string {
	if x != nil && x.RecommendReason != nil {
		return *x.RecommendReason
	}
	return ""
}

func (x *FinderObject) GetReadCount() int32 {
	if x != nil && x.ReadCount != nil {
		return *x.ReadCount
	}
	return 0
}

func (x *FinderObject) GetDeletetime() int32 {
	if x != nil && x.Deletetime != nil {
		return *x.Deletetime
	}
	return 0
}

func (x *FinderObject) GetCommentClose() int32 {
	if x != nil && x.CommentClose != nil {
		return *x.CommentClose
	}
	return 0
}

func (x *FinderObject) GetRefObjectFlag() uint32 {
	if x != nil && x.RefObjectFlag != nil {
		return *x.RefObjectFlag
	}
	return 0
}

func (x *FinderObject) GetRefObjectid() uint32 {
	if x != nil && x.RefObjectid != nil {
		return *x.RefObjectid
	}
	return 0
}

func (x *FinderObject) GetRefObjectContact() *FinderContact {
	if x != nil {
		return x.RefObjectContact
	}
	return nil
}

func (x *FinderObject) GetRecommendType() int32 {
	if x != nil && x.RecommendType != nil {
		return *x.RecommendType
	}
	return 0
}

func (x *FinderObject) GetFriendLikeCount() int32 {
	if x != nil && x.FriendLikeCount != nil {
		return *x.FriendLikeCount
	}
	return 0
}

func (x *FinderObject) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderObject) GetRefObjectNonceId() string {
	if x != nil && x.RefObjectNonceId != nil {
		return *x.RefObjectNonceId
	}
	return ""
}

func (x *FinderObject) GetObjectStatus() int32 {
	if x != nil && x.ObjectStatus != nil {
		return *x.ObjectStatus
	}
	return 0
}

func (x *FinderObject) GetSendShareFavWording() string {
	if x != nil && x.SendShareFavWording != nil {
		return *x.SendShareFavWording
	}
	return ""
}

func (x *FinderObject) GetOriginalFlag() int32 {
	if x != nil && x.OriginalFlag != nil {
		return *x.OriginalFlag
	}
	return 0
}

func (x *FinderObject) GetSecondaryShowFlag() int32 {
	if x != nil && x.SecondaryShowFlag != nil {
		return *x.SecondaryShowFlag
	}
	return 0
}

func (x *FinderObject) GetTipsWording() string {
	if x != nil && x.TipsWording != nil {
		return *x.TipsWording
	}
	return ""
}

func (x *FinderObject) GetOrgRecommendType() int32 {
	if x != nil && x.OrgRecommendType != nil {
		return *x.OrgRecommendType
	}
	return 0
}

type FinderObjectDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *string                `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Media       []*FinderMedia         `protobuf:"bytes,2,rep,name=media" json:"media,omitempty"` //疑似PB不对
	MediaType   *int32                 `protobuf:"varint,3,opt,name=mediaType" json:"mediaType,omitempty"`
	Extra       *FinderMediaExtra      `protobuf:"bytes,4,opt,name=extra" json:"extra,omitempty"`
	Location    *FinderLocation        `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	ExtReading  *FinderExtendedReading `protobuf:"bytes,6,opt,name=extReading" json:"extReading,omitempty"`
	Topic       *FinderTopic           `protobuf:"bytes,7,opt,name=topic" json:"topic,omitempty"`
}

func (x *FinderObjectDesc) Reset() {
	*x = FinderObjectDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectDesc) ProtoMessage() {}

func (x *FinderObjectDesc) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectDesc.ProtoReflect.Descriptor instead.
func (*FinderObjectDesc) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{229}
}

func (x *FinderObjectDesc) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FinderObjectDesc) GetMedia() []*FinderMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *FinderObjectDesc) GetMediaType() int32 {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return 0
}

func (x *FinderObjectDesc) GetExtra() *FinderMediaExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *FinderObjectDesc) GetLocation() *FinderLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *FinderObjectDesc) GetExtReading() *FinderExtendedReading {
	if x != nil {
		return x.ExtReading
	}
	return nil
}

func (x *FinderObjectDesc) GetTopic() *FinderTopic {
	if x != nil {
		return x.Topic
	}
	return nil
}

type FinderMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url          *string            `protobuf:"bytes,1,opt,name=Url" json:"Url,omitempty"`
	ThumbUrl     *string            `protobuf:"bytes,2,opt,name=ThumbUrl" json:"ThumbUrl,omitempty"`
	MediaType    *int32             `protobuf:"varint,3,opt,name=MediaType" json:"MediaType,omitempty"`
	VideoPlayLen *int32             `protobuf:"varint,4,opt,name=VideoPlayLen" json:"VideoPlayLen,omitempty"`
	Width        *float32           `protobuf:"fixed32,5,opt,name=Width" json:"Width,omitempty"`
	Height       *float32           `protobuf:"fixed32,6,opt,name=Height" json:"Height,omitempty"`
	Md5Sum       *string            `protobuf:"bytes,7,opt,name=Md5Sum" json:"Md5Sum,omitempty"`
	FileSize     *int32             `protobuf:"varint,8,opt,name=FileSize" json:"FileSize,omitempty"`
	Bitrate      *int32             `protobuf:"varint,9,opt,name=Bitrate" json:"Bitrate,omitempty"`
	Spec         []*FinderMediaSpec `protobuf:"bytes,10,rep,name=Spec" json:"Spec,omitempty"`
}

func (x *FinderMedia) Reset() {
	*x = FinderMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMedia) ProtoMessage() {}

func (x *FinderMedia) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMedia.ProtoReflect.Descriptor instead.
func (*FinderMedia) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{230}
}

func (x *FinderMedia) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *FinderMedia) GetThumbUrl() string {
	if x != nil && x.ThumbUrl != nil {
		return *x.ThumbUrl
	}
	return ""
}

func (x *FinderMedia) GetMediaType() int32 {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return 0
}

func (x *FinderMedia) GetVideoPlayLen() int32 {
	if x != nil && x.VideoPlayLen != nil {
		return *x.VideoPlayLen
	}
	return 0
}

func (x *FinderMedia) GetWidth() float32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *FinderMedia) GetHeight() float32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *FinderMedia) GetMd5Sum() string {
	if x != nil && x.Md5Sum != nil {
		return *x.Md5Sum
	}
	return ""
}

func (x *FinderMedia) GetFileSize() int32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *FinderMedia) GetBitrate() int32 {
	if x != nil && x.Bitrate != nil {
		return *x.Bitrate
	}
	return 0
}

func (x *FinderMedia) GetSpec() []*FinderMediaSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type FinderMediaSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileFormat     *string `protobuf:"bytes,1,opt,name=fileFormat" json:"fileFormat,omitempty"`
	FirstLoadBytes *int32  `protobuf:"varint,2,opt,name=firstLoadBytes" json:"firstLoadBytes,omitempty"`
	BitRate        *int32  `protobuf:"varint,3,opt,name=bitRate" json:"bitRate,omitempty"`
	CodingFormat   *string `protobuf:"bytes,4,opt,name=codingFormat" json:"codingFormat,omitempty"`
}

func (x *FinderMediaSpec) Reset() {
	*x = FinderMediaSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMediaSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMediaSpec) ProtoMessage() {}

func (x *FinderMediaSpec) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMediaSpec.ProtoReflect.Descriptor instead.
func (*FinderMediaSpec) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{231}
}

func (x *FinderMediaSpec) GetFileFormat() string {
	if x != nil && x.FileFormat != nil {
		return *x.FileFormat
	}
	return ""
}

func (x *FinderMediaSpec) GetFirstLoadBytes() int32 {
	if x != nil && x.FirstLoadBytes != nil {
		return *x.FirstLoadBytes
	}
	return 0
}

func (x *FinderMediaSpec) GetBitRate() int32 {
	if x != nil && x.BitRate != nil {
		return *x.BitRate
	}
	return 0
}

func (x *FinderMediaSpec) GetCodingFormat() string {
	if x != nil && x.CodingFormat != nil {
		return *x.CodingFormat
	}
	return ""
}

type FinderMediaExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (x *FinderMediaExtra) Reset() {
	*x = FinderMediaExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMediaExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMediaExtra) ProtoMessage() {}

func (x *FinderMediaExtra) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMediaExtra.ProtoReflect.Descriptor instead.
func (*FinderMediaExtra) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{232}
}

func (x *FinderMediaExtra) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type FinderLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longitude       *float32 `protobuf:"fixed32,1,opt,name=longitude" json:"longitude,omitempty"`
	Latitude        *float32 `protobuf:"fixed32,2,opt,name=latitude" json:"latitude,omitempty"`
	City            *string  `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	PoiName         *string  `protobuf:"bytes,4,opt,name=poiName" json:"poiName,omitempty"`
	PoiAddress      *string  `protobuf:"bytes,5,opt,name=poiAddress" json:"poiAddress,omitempty"`
	PoiClassifyId   *string  `protobuf:"bytes,6,opt,name=poiClassifyId" json:"poiClassifyId,omitempty"`
	PoiClassifyType *int32   `protobuf:"varint,7,opt,name=poiClassifyType" json:"poiClassifyType,omitempty"`
}

func (x *FinderLocation) Reset() {
	*x = FinderLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLocation) ProtoMessage() {}

func (x *FinderLocation) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLocation.ProtoReflect.Descriptor instead.
func (*FinderLocation) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{233}
}

func (x *FinderLocation) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FinderLocation) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *FinderLocation) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *FinderLocation) GetPoiName() string {
	if x != nil && x.PoiName != nil {
		return *x.PoiName
	}
	return ""
}

func (x *FinderLocation) GetPoiAddress() string {
	if x != nil && x.PoiAddress != nil {
		return *x.PoiAddress
	}
	return ""
}

func (x *FinderLocation) GetPoiClassifyId() string {
	if x != nil && x.PoiClassifyId != nil {
		return *x.PoiClassifyId
	}
	return ""
}

func (x *FinderLocation) GetPoiClassifyType() int32 {
	if x != nil && x.PoiClassifyType != nil {
		return *x.PoiClassifyType
	}
	return 0
}

type FinderExtendedReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link  *string `protobuf:"bytes,1,opt,name=link" json:"link,omitempty"`
	Title *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (x *FinderExtendedReading) Reset() {
	*x = FinderExtendedReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderExtendedReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderExtendedReading) ProtoMessage() {}

func (x *FinderExtendedReading) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderExtendedReading.ProtoReflect.Descriptor instead.
func (*FinderExtendedReading) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{234}
}

func (x *FinderExtendedReading) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *FinderExtendedReading) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type FinderTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinderTopicInfo *string `protobuf:"bytes,1,opt,name=finderTopicInfo" json:"finderTopicInfo,omitempty"`
}

func (x *FinderTopic) Reset() {
	*x = FinderTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTopic) ProtoMessage() {}

func (x *FinderTopic) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTopic.ProtoReflect.Descriptor instead.
func (*FinderTopic) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{235}
}

func (x *FinderTopic) GetFinderTopicInfo() string {
	if x != nil && x.FinderTopicInfo != nil {
		return *x.FinderTopicInfo
	}
	return ""
}

type FinderCommentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username           *string  `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Nickname           *string  `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	Content            *string  `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	CommentId          *uint32  `protobuf:"varint,4,opt,name=commentId" json:"commentId,omitempty"`
	ReplyCommentId     *uint32  `protobuf:"varint,5,opt,name=replyCommentId" json:"replyCommentId,omitempty"`
	DeleteFlag         *int32   `protobuf:"varint,6,opt,name=deleteFlag" json:"deleteFlag,omitempty"`
	HeadUrl            *string  `protobuf:"bytes,7,opt,name=headUrl" json:"headUrl,omitempty"`
	LevelTwoComment    []string `protobuf:"bytes,8,rep,name=levelTwoComment" json:"levelTwoComment,omitempty"` //未找到相关PB
	Createtime         *uint32  `protobuf:"varint,9,opt,name=createtime" json:"createtime,omitempty"`
	ReplyNickname      *string  `protobuf:"bytes,10,opt,name=replyNickname" json:"replyNickname,omitempty"`
	DisplayidDiscarded *string  `protobuf:"bytes,11,opt,name=displayidDiscarded" json:"displayidDiscarded,omitempty"`
	LikeFlag           *int32   `protobuf:"varint,12,opt,name=likeFlag" json:"likeFlag,omitempty"`
	LikeCount          *int32   `protobuf:"varint,13,opt,name=likeCount" json:"likeCount,omitempty"`
	Displayid          *uint32  `protobuf:"varint,14,opt,name=displayid" json:"displayid,omitempty"`
	ExpandCommentCount *int32   `protobuf:"varint,15,opt,name=expandCommentCount" json:"expandCommentCount,omitempty"`
	LastBuffer         []byte   `protobuf:"bytes,16,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ContinueFlag       *int32   `protobuf:"varint,17,opt,name=continueFlag" json:"continueFlag,omitempty"`
	DisplayFlag        *int32   `protobuf:"varint,18,opt,name=displayFlag" json:"displayFlag,omitempty"`
	BlacklistFlag      *int32   `protobuf:"varint,19,opt,name=blacklistFlag" json:"blacklistFlag,omitempty"`
	ReplyContent       *string  `protobuf:"bytes,20,opt,name=replyContent" json:"replyContent,omitempty"`
	ReplyUsername      *string  `protobuf:"bytes,21,opt,name=replyUsername" json:"replyUsername,omitempty"`
	ClientId           *string  `protobuf:"bytes,22,opt,name=clientId" json:"clientId,omitempty"`
	UpContinueFlag     *int32   `protobuf:"varint,23,opt,name=upContinueFlag" json:"upContinueFlag,omitempty"`
}

func (x *FinderCommentInfo) Reset() {
	*x = FinderCommentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCommentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCommentInfo) ProtoMessage() {}

func (x *FinderCommentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCommentInfo.ProtoReflect.Descriptor instead.
func (*FinderCommentInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{236}
}

func (x *FinderCommentInfo) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderCommentInfo) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FinderCommentInfo) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *FinderCommentInfo) GetCommentId() uint32 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *FinderCommentInfo) GetReplyCommentId() uint32 {
	if x != nil && x.ReplyCommentId != nil {
		return *x.ReplyCommentId
	}
	return 0
}

func (x *FinderCommentInfo) GetDeleteFlag() int32 {
	if x != nil && x.DeleteFlag != nil {
		return *x.DeleteFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetHeadUrl() string {
	if x != nil && x.HeadUrl != nil {
		return *x.HeadUrl
	}
	return ""
}

func (x *FinderCommentInfo) GetLevelTwoComment() []string {
	if x != nil {
		return x.LevelTwoComment
	}
	return nil
}

func (x *FinderCommentInfo) GetCreatetime() uint32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return 0
}

func (x *FinderCommentInfo) GetReplyNickname() string {
	if x != nil && x.ReplyNickname != nil {
		return *x.ReplyNickname
	}
	return ""
}

func (x *FinderCommentInfo) GetDisplayidDiscarded() string {
	if x != nil && x.DisplayidDiscarded != nil {
		return *x.DisplayidDiscarded
	}
	return ""
}

func (x *FinderCommentInfo) GetLikeFlag() int32 {
	if x != nil && x.LikeFlag != nil {
		return *x.LikeFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetLikeCount() int32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *FinderCommentInfo) GetDisplayid() uint32 {
	if x != nil && x.Displayid != nil {
		return *x.Displayid
	}
	return 0
}

func (x *FinderCommentInfo) GetExpandCommentCount() int32 {
	if x != nil && x.ExpandCommentCount != nil {
		return *x.ExpandCommentCount
	}
	return 0
}

func (x *FinderCommentInfo) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderCommentInfo) GetContinueFlag() int32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetDisplayFlag() int32 {
	if x != nil && x.DisplayFlag != nil {
		return *x.DisplayFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetBlacklistFlag() int32 {
	if x != nil && x.BlacklistFlag != nil {
		return *x.BlacklistFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetReplyContent() string {
	if x != nil && x.ReplyContent != nil {
		return *x.ReplyContent
	}
	return ""
}

func (x *FinderCommentInfo) GetReplyUsername() string {
	if x != nil && x.ReplyUsername != nil {
		return *x.ReplyUsername
	}
	return ""
}

func (x *FinderCommentInfo) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *FinderCommentInfo) GetUpContinueFlag() int32 {
	if x != nil && x.UpContinueFlag != nil {
		return *x.UpContinueFlag
	}
	return 0
}

// 疑似不对
type FinderRecommendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid               *string `protobuf:"bytes,1,opt,name=tid" json:"tid,omitempty"`
	RecommendType     *uint32 `protobuf:"varint,2,opt,name=recommendType" json:"recommendType,omitempty"`
	RecommendReason   *string `protobuf:"bytes,3,opt,name=recommendReason" json:"recommendReason,omitempty"`
	OrgRecommendType  *uint32 `protobuf:"varint,4,opt,name=orgRecommendType" json:"orgRecommendType,omitempty"`
	LastInsertedRowID *uint32 `protobuf:"varint,5,opt,name=lastInsertedRowID" json:"lastInsertedRowID,omitempty"`
	IsAutoIncrement   *bool   `protobuf:"varint,6,opt,name=isAutoIncrement" json:"isAutoIncrement,omitempty"`
}

func (x *FinderRecommendInfo) Reset() {
	*x = FinderRecommendInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderRecommendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderRecommendInfo) ProtoMessage() {}

func (x *FinderRecommendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderRecommendInfo.ProtoReflect.Descriptor instead.
func (*FinderRecommendInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{237}
}

func (x *FinderRecommendInfo) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *FinderRecommendInfo) GetRecommendType() uint32 {
	if x != nil && x.RecommendType != nil {
		return *x.RecommendType
	}
	return 0
}

func (x *FinderRecommendInfo) GetRecommendReason() string {
	if x != nil && x.RecommendReason != nil {
		return *x.RecommendReason
	}
	return ""
}

func (x *FinderRecommendInfo) GetOrgRecommendType() uint32 {
	if x != nil && x.OrgRecommendType != nil {
		return *x.OrgRecommendType
	}
	return 0
}

func (x *FinderRecommendInfo) GetLastInsertedRowID() uint32 {
	if x != nil && x.LastInsertedRowID != nil {
		return *x.LastInsertedRowID
	}
	return 0
}

func (x *FinderRecommendInfo) GetIsAutoIncrement() bool {
	if x != nil && x.IsAutoIncrement != nil {
		return *x.IsAutoIncrement
	}
	return false
}

// 群相关
type GetContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest                *BaseRequest        `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	UserCount                  *int32              `protobuf:"varint,2,opt,name=UserCount" json:"UserCount,omitempty"`
	UserNameList               []*SKBuiltinStringT `protobuf:"bytes,3,rep,name=UserNameList" json:"UserNameList,omitempty"`
	AntispamTicketCount        *int32              `protobuf:"varint,4,opt,name=AntispamTicketCount" json:"AntispamTicketCount,omitempty"`
	AntispamTicket             []*SKBuiltinStringT `protobuf:"bytes,5,rep,name=AntispamTicket" json:"AntispamTicket,omitempty"`
	FromChatRoomCount          *int32              `protobuf:"varint,6,opt,name=FromChatRoomCount" json:"FromChatRoomCount,omitempty"`
	FromChatRoom               *SKBuiltinStringT   `protobuf:"bytes,7,opt,name=FromChatRoom" json:"FromChatRoom,omitempty"`
	GetContactScene            *int32              `protobuf:"varint,8,opt,name=GetContactScene" json:"GetContactScene,omitempty"`
	ChatRoomAccessVerifyTicket *SKBuiltinBufferT   `protobuf:"bytes,9,opt,name=ChatRoomAccessVerifyTicket" json:"ChatRoomAccessVerifyTicket,omitempty"`
}

func (x *GetContactRequest) Reset() {
	*x = GetContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactRequest) ProtoMessage() {}

func (x *GetContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactRequest.ProtoReflect.Descriptor instead.
func (*GetContactRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{238}
}

func (x *GetContactRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GetContactRequest) GetUserCount() int32 {
	if x != nil && x.UserCount != nil {
		return *x.UserCount
	}
	return 0
}

func (x *GetContactRequest) GetUserNameList() []*SKBuiltinStringT {
	if x != nil {
		return x.UserNameList
	}
	return nil
}

func (x *GetContactRequest) GetAntispamTicketCount() int32 {
	if x != nil && x.AntispamTicketCount != nil {
		return *x.AntispamTicketCount
	}
	return 0
}

func (x *GetContactRequest) GetAntispamTicket() []*SKBuiltinStringT {
	if x != nil {
		return x.AntispamTicket
	}
	return nil
}

func (x *GetContactRequest) GetFromChatRoomCount() int32 {
	if x != nil && x.FromChatRoomCount != nil {
		return *x.FromChatRoomCount
	}
	return 0
}

func (x *GetContactRequest) GetFromChatRoom() *SKBuiltinStringT {
	if x != nil {
		return x.FromChatRoom
	}
	return nil
}

func (x *GetContactRequest) GetGetContactScene() int32 {
	if x != nil && x.GetContactScene != nil {
		return *x.GetContactScene
	}
	return 0
}

func (x *GetContactRequest) GetChatRoomAccessVerifyTicket() *SKBuiltinBufferT {
	if x != nil {
		return x.ChatRoomAccessVerifyTicket
	}
	return nil
}

type GetContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse      *BaseResponse            `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	ContactCount      *int32                   `protobuf:"varint,2,opt,name=ContactCount" json:"ContactCount,omitempty"`
	ContactList       []*ModContacts           `protobuf:"bytes,3,rep,name=ContactList" json:"ContactList,omitempty"`
	Ret               []int32                  `protobuf:"varint,4,rep,name=Ret" json:"Ret,omitempty"`
	Ticket            []*VerifyUserValidTicket `protobuf:"bytes,5,rep,name=Ticket" json:"Ticket,omitempty"`
	SendMsgTicketList [][]byte                 `protobuf:"bytes,6,rep,name=sendMsgTicketList" json:"sendMsgTicketList,omitempty"` //未找到相关PB
}

func (x *GetContactResponse) Reset() {
	*x = GetContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactResponse) ProtoMessage() {}

func (x *GetContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactResponse.ProtoReflect.Descriptor instead.
func (*GetContactResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{239}
}

func (x *GetContactResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetContactResponse) GetContactCount() int32 {
	if x != nil && x.ContactCount != nil {
		return *x.ContactCount
	}
	return 0
}

func (x *GetContactResponse) GetContactList() []*ModContacts {
	if x != nil {
		return x.ContactList
	}
	return nil
}

func (x *GetContactResponse) GetRet() []int32 {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *GetContactResponse) GetTicket() []*VerifyUserValidTicket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *GetContactResponse) GetSendMsgTicketList() [][]byte {
	if x != nil {
		return x.SendMsgTicketList
	}
	return nil
}

type VerifyUserValidTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username       *string `protobuf:"bytes,1,opt,name=Username" json:"Username,omitempty"`
	Antispamticket *string `protobuf:"bytes,2,opt,name=Antispamticket" json:"Antispamticket,omitempty"`
}

func (x *VerifyUserValidTicket) Reset() {
	*x = VerifyUserValidTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyUserValidTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyUserValidTicket) ProtoMessage() {}

func (x *VerifyUserValidTicket) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyUserValidTicket.ProtoReflect.Descriptor instead.
func (*VerifyUserValidTicket) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{240}
}

func (x *VerifyUserValidTicket) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *VerifyUserValidTicket) GetAntispamticket() string {
	if x != nil && x.Antispamticket != nil {
		return *x.Antispamticket
	}
	return ""
}

type GetChatroomMemberDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest      *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	ChatroomUserName *string      `protobuf:"bytes,2,opt,name=ChatroomUserName" json:"ChatroomUserName,omitempty"`
	ClientVersion    *int32       `protobuf:"varint,3,opt,name=clientVersion" json:"clientVersion,omitempty"`
}

func (x *GetChatroomMemberDetailRequest) Reset() {
	*x = GetChatroomMemberDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatroomMemberDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatroomMemberDetailRequest) ProtoMessage() {}

func (x *GetChatroomMemberDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatroomMemberDetailRequest.ProtoReflect.Descriptor instead.
func (*GetChatroomMemberDetailRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{241}
}

func (x *GetChatroomMemberDetailRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GetChatroomMemberDetailRequest) GetChatroomUserName() string {
	if x != nil && x.ChatroomUserName != nil {
		return *x.ChatroomUserName
	}
	return ""
}

func (x *GetChatroomMemberDetailRequest) GetClientVersion() int32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type GetChatroomMemberDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse     *BaseResponse       `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	ChatroomUserName *string             `protobuf:"bytes,2,opt,name=ChatroomUserName" json:"ChatroomUserName,omitempty"`
	ServerVersion    *int32              `protobuf:"varint,3,opt,name=ServerVersion" json:"ServerVersion,omitempty"`
	NewChatroomData  *ChatRoomMemberData `protobuf:"bytes,4,opt,name=NewChatroomData" json:"NewChatroomData,omitempty"`
}

func (x *GetChatroomMemberDetailResponse) Reset() {
	*x = GetChatroomMemberDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatroomMemberDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatroomMemberDetailResponse) ProtoMessage() {}

func (x *GetChatroomMemberDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatroomMemberDetailResponse.ProtoReflect.Descriptor instead.
func (*GetChatroomMemberDetailResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{242}
}

func (x *GetChatroomMemberDetailResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetChatroomMemberDetailResponse) GetChatroomUserName() string {
	if x != nil && x.ChatroomUserName != nil {
		return *x.ChatroomUserName
	}
	return ""
}

func (x *GetChatroomMemberDetailResponse) GetServerVersion() int32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *GetChatroomMemberDetailResponse) GetNewChatroomData() *ChatRoomMemberData {
	if x != nil {
		return x.NewChatroomData
	}
	return nil
}

type GetChatRoomInfoDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest      *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	ChatroomUserName *string      `protobuf:"bytes,2,opt,name=ChatroomUserName" json:"ChatroomUserName,omitempty"`
}

func (x *GetChatRoomInfoDetailRequest) Reset() {
	*x = GetChatRoomInfoDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatRoomInfoDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatRoomInfoDetailRequest) ProtoMessage() {}

func (x *GetChatRoomInfoDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatRoomInfoDetailRequest.ProtoReflect.Descriptor instead.
func (*GetChatRoomInfoDetailRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{243}
}

func (x *GetChatRoomInfoDetailRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GetChatRoomInfoDetailRequest) GetChatroomUserName() string {
	if x != nil && x.ChatroomUserName != nil {
		return *x.ChatroomUserName
	}
	return ""
}

type GetChatRoomInfoDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse            *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	Announcement            *string       `protobuf:"bytes,2,opt,name=Announcement" json:"Announcement,omitempty"`
	ChatRoomInfoVersion     *int32        `protobuf:"varint,3,opt,name=ChatRoomInfoVersion" json:"ChatRoomInfoVersion,omitempty"`
	AnnouncementEditor      *string       `protobuf:"bytes,4,opt,name=AnnouncementEditor" json:"AnnouncementEditor,omitempty"`
	AnnouncementPublishTime *int32        `protobuf:"varint,5,opt,name=AnnouncementPublishTime" json:"AnnouncementPublishTime,omitempty"`
	ChatRoomStatus          *int32        `protobuf:"varint,6,opt,name=ChatRoomStatus" json:"ChatRoomStatus,omitempty"`
	ChatRoomBusinessType    *int32        `protobuf:"varint,7,opt,name=ChatRoomBusinessType" json:"ChatRoomBusinessType,omitempty"`
	RoomTools               *RoomTools    `protobuf:"bytes,8,opt,name=RoomTools" json:"RoomTools,omitempty"`
}

func (x *GetChatRoomInfoDetailResponse) Reset() {
	*x = GetChatRoomInfoDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatRoomInfoDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatRoomInfoDetailResponse) ProtoMessage() {}

func (x *GetChatRoomInfoDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatRoomInfoDetailResponse.ProtoReflect.Descriptor instead.
func (*GetChatRoomInfoDetailResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{244}
}

func (x *GetChatRoomInfoDetailResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetChatRoomInfoDetailResponse) GetAnnouncement() string {
	if x != nil && x.Announcement != nil {
		return *x.Announcement
	}
	return ""
}

func (x *GetChatRoomInfoDetailResponse) GetChatRoomInfoVersion() int32 {
	if x != nil && x.ChatRoomInfoVersion != nil {
		return *x.ChatRoomInfoVersion
	}
	return 0
}

func (x *GetChatRoomInfoDetailResponse) GetAnnouncementEditor() string {
	if x != nil && x.AnnouncementEditor != nil {
		return *x.AnnouncementEditor
	}
	return ""
}

func (x *GetChatRoomInfoDetailResponse) GetAnnouncementPublishTime() int32 {
	if x != nil && x.AnnouncementPublishTime != nil {
		return *x.AnnouncementPublishTime
	}
	return 0
}

func (x *GetChatRoomInfoDetailResponse) GetChatRoomStatus() int32 {
	if x != nil && x.ChatRoomStatus != nil {
		return *x.ChatRoomStatus
	}
	return 0
}

func (x *GetChatRoomInfoDetailResponse) GetChatRoomBusinessType() int32 {
	if x != nil && x.ChatRoomBusinessType != nil {
		return *x.ChatRoomBusinessType
	}
	return 0
}

func (x *GetChatRoomInfoDetailResponse) GetRoomTools() *RoomTools {
	if x != nil {
		return x.RoomTools
	}
	return nil
}

type RoomTools struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomToolsWxAppCount *int32           `protobuf:"varint,1,opt,name=RoomToolsWxAppCount" json:"RoomToolsWxAppCount,omitempty"`
	RoomToolsWxApps     []*RoomToolsTodo `protobuf:"bytes,2,rep,name=RoomToolsWxApps" json:"RoomToolsWxApps,omitempty"`
}

func (x *RoomTools) Reset() {
	*x = RoomTools{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomTools) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomTools) ProtoMessage() {}

func (x *RoomTools) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomTools.ProtoReflect.Descriptor instead.
func (*RoomTools) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{245}
}

func (x *RoomTools) GetRoomToolsWxAppCount() int32 {
	if x != nil && x.RoomToolsWxAppCount != nil {
		return *x.RoomToolsWxAppCount
	}
	return 0
}

func (x *RoomTools) GetRoomToolsWxApps() []*RoomToolsTodo {
	if x != nil {
		return x.RoomToolsWxApps
	}
	return nil
}

type RoomToolsTodo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TodoId       *string `protobuf:"bytes,1,opt,name=TodoId" json:"TodoId,omitempty"`
	UserName     *string `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
	Path         *string `protobuf:"bytes,3,opt,name=Path" json:"Path,omitempty"`
	Time         *int32  `protobuf:"varint,4,opt,name=Time" json:"Time,omitempty"`
	CustomInfo   []byte  `protobuf:"bytes,5,opt,name=CustomInfo" json:"CustomInfo,omitempty"`
	Title        *string `protobuf:"bytes,6,opt,name=Title" json:"Title,omitempty"`
	Tcreator     *string `protobuf:"bytes,7,opt,name=Tcreator" json:"Tcreator,omitempty"`
	RelatedMsgId *uint64 `protobuf:"varint,8,opt,name=relatedMsgId" json:"relatedMsgId,omitempty"`
	Manager      *string `protobuf:"bytes,9,opt,name=manager" json:"manager,omitempty"`
}

func (x *RoomToolsTodo) Reset() {
	*x = RoomToolsTodo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomToolsTodo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomToolsTodo) ProtoMessage() {}

func (x *RoomToolsTodo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomToolsTodo.ProtoReflect.Descriptor instead.
func (*RoomToolsTodo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{246}
}

func (x *RoomToolsTodo) GetTodoId() string {
	if x != nil && x.TodoId != nil {
		return *x.TodoId
	}
	return ""
}

func (x *RoomToolsTodo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *RoomToolsTodo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *RoomToolsTodo) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *RoomToolsTodo) GetCustomInfo() []byte {
	if x != nil {
		return x.CustomInfo
	}
	return nil
}

func (x *RoomToolsTodo) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *RoomToolsTodo) GetTcreator() string {
	if x != nil && x.Tcreator != nil {
		return *x.Tcreator
	}
	return ""
}

func (x *RoomToolsTodo) GetRelatedMsgId() uint64 {
	if x != nil && x.RelatedMsgId != nil {
		return *x.RelatedMsgId
	}
	return 0
}

func (x *RoomToolsTodo) GetManager() string {
	if x != nil && x.Manager != nil {
		return *x.Manager
	}
	return ""
}

type SetChatRoomAnnouncementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest         *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	ChatRoomName        *string      `protobuf:"bytes,2,opt,name=chatRoomName" json:"chatRoomName,omitempty"`
	Announcement        *string      `protobuf:"bytes,3,opt,name=announcement" json:"announcement,omitempty"`
	SetAnnouncementFlag *int32       `protobuf:"varint,4,opt,name=setAnnouncementFlag" json:"setAnnouncementFlag,omitempty"`
}

func (x *SetChatRoomAnnouncementRequest) Reset() {
	*x = SetChatRoomAnnouncementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatRoomAnnouncementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatRoomAnnouncementRequest) ProtoMessage() {}

func (x *SetChatRoomAnnouncementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatRoomAnnouncementRequest.ProtoReflect.Descriptor instead.
func (*SetChatRoomAnnouncementRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{247}
}

func (x *SetChatRoomAnnouncementRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SetChatRoomAnnouncementRequest) GetChatRoomName() string {
	if x != nil && x.ChatRoomName != nil {
		return *x.ChatRoomName
	}
	return ""
}

func (x *SetChatRoomAnnouncementRequest) GetAnnouncement() string {
	if x != nil && x.Announcement != nil {
		return *x.Announcement
	}
	return ""
}

func (x *SetChatRoomAnnouncementRequest) GetSetAnnouncementFlag() int32 {
	if x != nil && x.SetAnnouncementFlag != nil {
		return *x.SetAnnouncementFlag
	}
	return 0
}

type SetChatRoomAnnouncementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
}

func (x *SetChatRoomAnnouncementResponse) Reset() {
	*x = SetChatRoomAnnouncementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatRoomAnnouncementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatRoomAnnouncementResponse) ProtoMessage() {}

func (x *SetChatRoomAnnouncementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatRoomAnnouncementResponse.ProtoReflect.Descriptor instead.
func (*SetChatRoomAnnouncementResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{248}
}

func (x *SetChatRoomAnnouncementResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type ChatRoomAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest  *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	ChatRoomName *string      `protobuf:"bytes,2,opt,name=chatRoomName" json:"chatRoomName,omitempty"`
	UserNameList []string     `protobuf:"bytes,3,rep,name=userNameList" json:"userNameList,omitempty"`
}

func (x *ChatRoomAdminRequest) Reset() {
	*x = ChatRoomAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRoomAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRoomAdminRequest) ProtoMessage() {}

func (x *ChatRoomAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRoomAdminRequest.ProtoReflect.Descriptor instead.
func (*ChatRoomAdminRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{249}
}

func (x *ChatRoomAdminRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *ChatRoomAdminRequest) GetChatRoomName() string {
	if x != nil && x.ChatRoomName != nil {
		return *x.ChatRoomName
	}
	return ""
}

func (x *ChatRoomAdminRequest) GetUserNameList() []string {
	if x != nil {
		return x.UserNameList
	}
	return nil
}

type ChatRoomAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
}

func (x *ChatRoomAdminResponse) Reset() {
	*x = ChatRoomAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRoomAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRoomAdminResponse) ProtoMessage() {}

func (x *ChatRoomAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRoomAdminResponse.ProtoReflect.Descriptor instead.
func (*ChatRoomAdminResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{250}
}

func (x *ChatRoomAdminResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type GetVoiceTransResRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	VoiceId     *string      `protobuf:"bytes,2,opt,name=voiceId" json:"voiceId,omitempty"`
}

func (x *GetVoiceTransResRequest) Reset() {
	*x = GetVoiceTransResRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVoiceTransResRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVoiceTransResRequest) ProtoMessage() {}

func (x *GetVoiceTransResRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVoiceTransResRequest.ProtoReflect.Descriptor instead.
func (*GetVoiceTransResRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{251}
}

func (x *GetVoiceTransResRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GetVoiceTransResRequest) GetVoiceId() string {
	if x != nil && x.VoiceId != nil {
		return *x.VoiceId
	}
	return ""
}

type GetVoiceTransResResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse  `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	TransRes     *VoiceTransRes `protobuf:"bytes,2,opt,name=transRes" json:"transRes,omitempty"`
	QueryCtx     *QueryResCtx   `protobuf:"bytes,3,opt,name=queryCtx" json:"queryCtx,omitempty"`
}

func (x *GetVoiceTransResResponse) Reset() {
	*x = GetVoiceTransResResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVoiceTransResResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVoiceTransResResponse) ProtoMessage() {}

func (x *GetVoiceTransResResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVoiceTransResResponse.ProtoReflect.Descriptor instead.
func (*GetVoiceTransResResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{252}
}

func (x *GetVoiceTransResResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetVoiceTransResResponse) GetTransRes() *VoiceTransRes {
	if x != nil {
		return x.TransRes
	}
	return nil
}

func (x *GetVoiceTransResResponse) GetQueryCtx() *QueryResCtx {
	if x != nil {
		return x.QueryCtx
	}
	return nil
}

type VoiceTransRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence *int32  `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	EndFlag  *int32  `protobuf:"varint,2,opt,name=endFlag" json:"endFlag,omitempty"`
	Result   *string `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (x *VoiceTransRes) Reset() {
	*x = VoiceTransRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceTransRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceTransRes) ProtoMessage() {}

func (x *VoiceTransRes) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceTransRes.ProtoReflect.Descriptor instead.
func (*VoiceTransRes) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{253}
}

func (x *VoiceTransRes) GetSequence() int32 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *VoiceTransRes) GetEndFlag() int32 {
	if x != nil && x.EndFlag != nil {
		return *x.EndFlag
	}
	return 0
}

func (x *VoiceTransRes) GetResult() string {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ""
}

type QueryResCtx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval *int32 `protobuf:"varint,1,opt,name=interval" json:"interval,omitempty"`
}

func (x *QueryResCtx) Reset() {
	*x = QueryResCtx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResCtx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResCtx) ProtoMessage() {}

func (x *QueryResCtx) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResCtx.ProtoReflect.Descriptor instead.
func (*QueryResCtx) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{254}
}

func (x *QueryResCtx) GetInterval() int32 {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return 0
}

type UploadVoiceForTransRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest  *BaseRequest      `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	VoiceId      *string           `protobuf:"bytes,2,opt,name=voiceId" json:"voiceId,omitempty"`
	VoiceAttr    *VoiceAttr        `protobuf:"bytes,3,opt,name=voiceAttr" json:"voiceAttr,omitempty"`
	UploadCtx    *UploadVoiceCtx   `protobuf:"bytes,4,opt,name=uploadCtx" json:"uploadCtx,omitempty"`
	Data         *SKBuiltinBufferT `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
	Scene        *int32            `protobuf:"varint,6,opt,name=scene" json:"scene,omitempty"`
	FromUserName *string           `protobuf:"bytes,7,opt,name=fromUserName" json:"fromUserName,omitempty"`
	ToUserName   *string           `protobuf:"bytes,8,opt,name=toUserName" json:"toUserName,omitempty"`
}

func (x *UploadVoiceForTransRequest) Reset() {
	*x = UploadVoiceForTransRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadVoiceForTransRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadVoiceForTransRequest) ProtoMessage() {}

func (x *UploadVoiceForTransRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadVoiceForTransRequest.ProtoReflect.Descriptor instead.
func (*UploadVoiceForTransRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{255}
}

func (x *UploadVoiceForTransRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *UploadVoiceForTransRequest) GetVoiceId() string {
	if x != nil && x.VoiceId != nil {
		return *x.VoiceId
	}
	return ""
}

func (x *UploadVoiceForTransRequest) GetVoiceAttr() *VoiceAttr {
	if x != nil {
		return x.VoiceAttr
	}
	return nil
}

func (x *UploadVoiceForTransRequest) GetUploadCtx() *UploadVoiceCtx {
	if x != nil {
		return x.UploadCtx
	}
	return nil
}

func (x *UploadVoiceForTransRequest) GetData() *SKBuiltinBufferT {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UploadVoiceForTransRequest) GetScene() int32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *UploadVoiceForTransRequest) GetFromUserName() string {
	if x != nil && x.FromUserName != nil {
		return *x.FromUserName
	}
	return ""
}

func (x *UploadVoiceForTransRequest) GetToUserName() string {
	if x != nil && x.ToUserName != nil {
		return *x.ToUserName
	}
	return ""
}

type UploadVoiceForTransResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse   `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	UploadCtx    *UploadVoiceCtx `protobuf:"bytes,2,opt,name=uploadCtx" json:"uploadCtx,omitempty"`
}

func (x *UploadVoiceForTransResponse) Reset() {
	*x = UploadVoiceForTransResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadVoiceForTransResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadVoiceForTransResponse) ProtoMessage() {}

func (x *UploadVoiceForTransResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadVoiceForTransResponse.ProtoReflect.Descriptor instead.
func (*UploadVoiceForTransResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{256}
}

func (x *UploadVoiceForTransResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *UploadVoiceForTransResponse) GetUploadCtx() *UploadVoiceCtx {
	if x != nil {
		return x.UploadCtx
	}
	return nil
}

type VoiceAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType      *int32 `protobuf:"varint,1,opt,name=fileType" json:"fileType,omitempty"`
	EncodeType    *int32 `protobuf:"varint,2,opt,name=encodeType" json:"encodeType,omitempty"`
	SampleRate    *int32 `protobuf:"varint,3,opt,name=sampleRate" json:"sampleRate,omitempty"`
	BitsPerSample *int32 `protobuf:"varint,4,opt,name=bitsPerSample" json:"bitsPerSample,omitempty"`
}

func (x *VoiceAttr) Reset() {
	*x = VoiceAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceAttr) ProtoMessage() {}

func (x *VoiceAttr) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceAttr.ProtoReflect.Descriptor instead.
func (*VoiceAttr) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{257}
}

func (x *VoiceAttr) GetFileType() int32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *VoiceAttr) GetEncodeType() int32 {
	if x != nil && x.EncodeType != nil {
		return *x.EncodeType
	}
	return 0
}

func (x *VoiceAttr) GetSampleRate() int32 {
	if x != nil && x.SampleRate != nil {
		return *x.SampleRate
	}
	return 0
}

func (x *VoiceAttr) GetBitsPerSample() int32 {
	if x != nil && x.BitsPerSample != nil {
		return *x.BitsPerSample
	}
	return 0
}

type UploadVoiceCtx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalLen *int32 `protobuf:"varint,1,opt,name=totalLen" json:"totalLen,omitempty"`
	StartPos *int32 `protobuf:"varint,2,opt,name=startPos" json:"startPos,omitempty"`
	DataLen  *int32 `protobuf:"varint,3,opt,name=dataLen" json:"dataLen,omitempty"`
}

func (x *UploadVoiceCtx) Reset() {
	*x = UploadVoiceCtx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadVoiceCtx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadVoiceCtx) ProtoMessage() {}

func (x *UploadVoiceCtx) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadVoiceCtx.ProtoReflect.Descriptor instead.
func (*UploadVoiceCtx) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{258}
}

func (x *UploadVoiceCtx) GetTotalLen() int32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *UploadVoiceCtx) GetStartPos() int32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *UploadVoiceCtx) GetDataLen() int32 {
	if x != nil && x.DataLen != nil {
		return *x.DataLen
	}
	return 0
}

type DownloadVoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId        *uint32      `protobuf:"varint,1,opt,name=msgId" json:"msgId,omitempty"`
	Offset       *uint32      `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Length       *uint32      `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	ClientMsgId  *string      `protobuf:"bytes,4,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	BaseRequest  *BaseRequest `protobuf:"bytes,5,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	NewMsgId     *int64       `protobuf:"varint,6,opt,name=newMsgId" json:"newMsgId,omitempty"`
	ChatRoomName *string      `protobuf:"bytes,7,opt,name=chatRoomName" json:"chatRoomName,omitempty"`
	MasterBufId  *int64       `protobuf:"varint,8,opt,name=masterBufId" json:"masterBufId,omitempty"`
}

func (x *DownloadVoiceRequest) Reset() {
	*x = DownloadVoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadVoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadVoiceRequest) ProtoMessage() {}

func (x *DownloadVoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadVoiceRequest.ProtoReflect.Descriptor instead.
func (*DownloadVoiceRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{259}
}

func (x *DownloadVoiceRequest) GetMsgId() uint32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *DownloadVoiceRequest) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *DownloadVoiceRequest) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *DownloadVoiceRequest) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *DownloadVoiceRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *DownloadVoiceRequest) GetNewMsgId() int64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

func (x *DownloadVoiceRequest) GetChatRoomName() string {
	if x != nil && x.ChatRoomName != nil {
		return *x.ChatRoomName
	}
	return ""
}

func (x *DownloadVoiceRequest) GetMasterBufId() int64 {
	if x != nil && x.MasterBufId != nil {
		return *x.MasterBufId
	}
	return 0
}

type DownloadVoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId        *uint32           `protobuf:"varint,1,opt,name=msgId" json:"msgId,omitempty"`
	Offset       *uint32           `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Length       *uint32           `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	VoiceLength  *uint32           `protobuf:"varint,5,opt,name=voiceLength" json:"voiceLength,omitempty"`
	ClientMsgId  *string           `protobuf:"bytes,6,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	Data         *SKBuiltinBufferT `protobuf:"bytes,7,opt,name=data" json:"data,omitempty"`
	EndFlag      *uint32           `protobuf:"varint,8,opt,name=endFlag" json:"endFlag,omitempty"`
	BaseResponse *BaseResponse     `protobuf:"bytes,9,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	CancelFlag   *uint32           `protobuf:"varint,10,opt,name=cancelFlag" json:"cancelFlag,omitempty"`
	NewMsgId     *uint64           `protobuf:"varint,11,opt,name=newMsgId" json:"newMsgId,omitempty"`
}

func (x *DownloadVoiceResponse) Reset() {
	*x = DownloadVoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadVoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadVoiceResponse) ProtoMessage() {}

func (x *DownloadVoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadVoiceResponse.ProtoReflect.Descriptor instead.
func (*DownloadVoiceResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{260}
}

func (x *DownloadVoiceResponse) GetMsgId() uint32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *DownloadVoiceResponse) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *DownloadVoiceResponse) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *DownloadVoiceResponse) GetVoiceLength() uint32 {
	if x != nil && x.VoiceLength != nil {
		return *x.VoiceLength
	}
	return 0
}

func (x *DownloadVoiceResponse) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *DownloadVoiceResponse) GetData() *SKBuiltinBufferT {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DownloadVoiceResponse) GetEndFlag() uint32 {
	if x != nil && x.EndFlag != nil {
		return *x.EndFlag
	}
	return 0
}

func (x *DownloadVoiceResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *DownloadVoiceResponse) GetCancelFlag() uint32 {
	if x != nil && x.CancelFlag != nil {
		return *x.CancelFlag
	}
	return 0
}

func (x *DownloadVoiceResponse) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

type SendAppMsgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	Msg            *AppMsg      `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	CommentUrl     *string      `protobuf:"bytes,3,opt,name=commentUrl" json:"commentUrl,omitempty"`
	ReqTime        *int32       `protobuf:"varint,4,opt,name=reqTime" json:"reqTime,omitempty"`
	Md5            *string      `protobuf:"bytes,5,opt,name=md5" json:"md5,omitempty"`
	FileType       *int32       `protobuf:"varint,6,opt,name=fileType" json:"fileType,omitempty"`
	Signature      *string      `protobuf:"bytes,7,opt,name=signature" json:"signature,omitempty"`
	FromSence      *string      `protobuf:"bytes,8,opt,name=fromSence" json:"fromSence,omitempty"`
	HitMd5         *int32       `protobuf:"varint,9,opt,name=hitMd5" json:"hitMd5,omitempty"`
	Crc32          *int32       `protobuf:"varint,10,opt,name=crc32" json:"crc32,omitempty"`
	MsgForwardType *int32       `protobuf:"varint,11,opt,name=msgForwardType" json:"msgForwardType,omitempty"`
	DirectShare    *int32       `protobuf:"varint,12,opt,name=directShare" json:"directShare,omitempty"`
	SendMsgTicket  *string      `protobuf:"bytes,13,opt,name=sendMsgTicket" json:"sendMsgTicket,omitempty"`
}

func (x *SendAppMsgRequest) Reset() {
	*x = SendAppMsgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendAppMsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAppMsgRequest) ProtoMessage() {}

func (x *SendAppMsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAppMsgRequest.ProtoReflect.Descriptor instead.
func (*SendAppMsgRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{261}
}

func (x *SendAppMsgRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SendAppMsgRequest) GetMsg() *AppMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *SendAppMsgRequest) GetCommentUrl() string {
	if x != nil && x.CommentUrl != nil {
		return *x.CommentUrl
	}
	return ""
}

func (x *SendAppMsgRequest) GetReqTime() int32 {
	if x != nil && x.ReqTime != nil {
		return *x.ReqTime
	}
	return 0
}

func (x *SendAppMsgRequest) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

func (x *SendAppMsgRequest) GetFileType() int32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *SendAppMsgRequest) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *SendAppMsgRequest) GetFromSence() string {
	if x != nil && x.FromSence != nil {
		return *x.FromSence
	}
	return ""
}

func (x *SendAppMsgRequest) GetHitMd5() int32 {
	if x != nil && x.HitMd5 != nil {
		return *x.HitMd5
	}
	return 0
}

func (x *SendAppMsgRequest) GetCrc32() int32 {
	if x != nil && x.Crc32 != nil {
		return *x.Crc32
	}
	return 0
}

func (x *SendAppMsgRequest) GetMsgForwardType() int32 {
	if x != nil && x.MsgForwardType != nil {
		return *x.MsgForwardType
	}
	return 0
}

func (x *SendAppMsgRequest) GetDirectShare() int32 {
	if x != nil && x.DirectShare != nil {
		return *x.DirectShare
	}
	return 0
}

func (x *SendAppMsgRequest) GetSendMsgTicket() string {
	if x != nil && x.SendMsgTicket != nil {
		return *x.SendMsgTicket
	}
	return ""
}

type SendAppMsgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	AppId        *string       `protobuf:"bytes,2,opt,name=appId" json:"appId,omitempty"`
	FromUserName *string       `protobuf:"bytes,3,opt,name=fromUserName" json:"fromUserName,omitempty"`
	ToUserName   *string       `protobuf:"bytes,4,opt,name=toUserName" json:"toUserName,omitempty"`
	MsgId        *int32        `protobuf:"varint,5,opt,name=msgId" json:"msgId,omitempty"`
	ClientMsgId  *string       `protobuf:"bytes,6,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	CreateTime   *int32        `protobuf:"varint,7,opt,name=createTime" json:"createTime,omitempty"`
	Type         *int32        `protobuf:"varint,8,opt,name=type" json:"type,omitempty"`
	NewMsgId     *int64        `protobuf:"varint,9,opt,name=newMsgId" json:"newMsgId,omitempty"`
	Aeskey       *string       `protobuf:"bytes,10,opt,name=aeskey" json:"aeskey,omitempty"`
	MsgSource    *string       `protobuf:"bytes,11,opt,name=msgSource" json:"msgSource,omitempty"`
	ActionFlag   *int32        `protobuf:"varint,12,opt,name=actionFlag" json:"actionFlag,omitempty"`
}

func (x *SendAppMsgResponse) Reset() {
	*x = SendAppMsgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendAppMsgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAppMsgResponse) ProtoMessage() {}

func (x *SendAppMsgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAppMsgResponse.ProtoReflect.Descriptor instead.
func (*SendAppMsgResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{262}
}

func (x *SendAppMsgResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *SendAppMsgResponse) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *SendAppMsgResponse) GetFromUserName() string {
	if x != nil && x.FromUserName != nil {
		return *x.FromUserName
	}
	return ""
}

func (x *SendAppMsgResponse) GetToUserName() string {
	if x != nil && x.ToUserName != nil {
		return *x.ToUserName
	}
	return ""
}

func (x *SendAppMsgResponse) GetMsgId() int32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *SendAppMsgResponse) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *SendAppMsgResponse) GetCreateTime() int32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *SendAppMsgResponse) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *SendAppMsgResponse) GetNewMsgId() int64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

func (x *SendAppMsgResponse) GetAeskey() string {
	if x != nil && x.Aeskey != nil {
		return *x.Aeskey
	}
	return ""
}

func (x *SendAppMsgResponse) GetMsgSource() string {
	if x != nil && x.MsgSource != nil {
		return *x.MsgSource
	}
	return ""
}

func (x *SendAppMsgResponse) GetActionFlag() int32 {
	if x != nil && x.ActionFlag != nil {
		return *x.ActionFlag
	}
	return 0
}

type AppMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserName     *string           `protobuf:"bytes,1,opt,name=fromUserName" json:"fromUserName,omitempty"`
	AppId            *string           `protobuf:"bytes,2,opt,name=appId" json:"appId,omitempty"`
	SdkVersion       *int32            `protobuf:"varint,3,opt,name=sdkVersion" json:"sdkVersion,omitempty"`
	ToUserName       *string           `protobuf:"bytes,4,opt,name=toUserName" json:"toUserName,omitempty"`
	Type             *int32            `protobuf:"varint,5,opt,name=type" json:"type,omitempty"`
	Content          *string           `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	CreateTime       *int64            `protobuf:"varint,7,opt,name=createTime" json:"createTime,omitempty"`
	ClientMsgId      *string           `protobuf:"bytes,8,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	Thumb            *SKBuiltinBufferT `protobuf:"bytes,9,opt,name=thumb" json:"thumb,omitempty"`
	Source           *int32            `protobuf:"varint,10,opt,name=source" json:"source,omitempty"`
	RemindId         *int32            `protobuf:"varint,11,opt,name=remindId" json:"remindId,omitempty"`
	MsgSource        *string           `protobuf:"bytes,12,opt,name=msgSource" json:"msgSource,omitempty"`
	ShareUrlOriginal *string           `protobuf:"bytes,13,opt,name=shareUrlOriginal" json:"shareUrlOriginal,omitempty"`
	ShareUrlOpen     *string           `protobuf:"bytes,14,opt,name=shareUrlOpen" json:"shareUrlOpen,omitempty"`
	JsAppId          *string           `protobuf:"bytes,15,opt,name=jsAppId" json:"jsAppId,omitempty"`
}

func (x *AppMsg) Reset() {
	*x = AppMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppMsg) ProtoMessage() {}

func (x *AppMsg) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppMsg.ProtoReflect.Descriptor instead.
func (*AppMsg) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{263}
}

func (x *AppMsg) GetFromUserName() string {
	if x != nil && x.FromUserName != nil {
		return *x.FromUserName
	}
	return ""
}

func (x *AppMsg) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *AppMsg) GetSdkVersion() int32 {
	if x != nil && x.SdkVersion != nil {
		return *x.SdkVersion
	}
	return 0
}

func (x *AppMsg) GetToUserName() string {
	if x != nil && x.ToUserName != nil {
		return *x.ToUserName
	}
	return ""
}

func (x *AppMsg) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *AppMsg) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *AppMsg) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *AppMsg) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *AppMsg) GetThumb() *SKBuiltinBufferT {
	if x != nil {
		return x.Thumb
	}
	return nil
}

func (x *AppMsg) GetSource() int32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *AppMsg) GetRemindId() int32 {
	if x != nil && x.RemindId != nil {
		return *x.RemindId
	}
	return 0
}

func (x *AppMsg) GetMsgSource() string {
	if x != nil && x.MsgSource != nil {
		return *x.MsgSource
	}
	return ""
}

func (x *AppMsg) GetShareUrlOriginal() string {
	if x != nil && x.ShareUrlOriginal != nil {
		return *x.ShareUrlOriginal
	}
	return ""
}

func (x *AppMsg) GetShareUrlOpen() string {
	if x != nil && x.ShareUrlOpen != nil {
		return *x.ShareUrlOpen
	}
	return ""
}

func (x *AppMsg) GetJsAppId() string {
	if x != nil && x.JsAppId != nil {
		return *x.JsAppId
	}
	return ""
}

type HongBaoReqPlus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest      `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	CgiCmd      *int32            `protobuf:"varint,2,opt,name=cgiCmd" json:"cgiCmd,omitempty"`
	OutPutTyp   *int32            `protobuf:"varint,3,opt,name=outPutTyp" json:"outPutTyp,omitempty"`
	ReqText     *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=reqText" json:"reqText,omitempty"`
	ReqTextWx   *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=reqText" json:"reqText,omitempty"`
}

func (x *HongBaoReqPlus) Reset() {
	*x = HongBaoReqPlus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HongBaoReqPlus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HongBaoReqPlus) ProtoMessage() {}

func (x *HongBaoReqPlus) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HongBaoReq.ProtoReflect.Descriptor instead.
func (*HongBaoReqPlus) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{264}
}

func (x *HongBaoReqPlus) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *HongBaoReqPlus) GetCgiCmd() int32 {
	if x != nil && x.CgiCmd != nil {
		return *x.CgiCmd
	}
	return 0
}

func (x *HongBaoReqPlus) GetOutPutTyp() int32 {
	if x != nil && x.OutPutTyp != nil {
		return *x.OutPutTyp
	}
	return 0
}

func (x *HongBaoReqPlus) GetReqText() *SKBuiltinBufferT {
	if x != nil {
		return x.ReqText
	}
	return nil
}

type HongBaoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest      `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	CgiCmd      *int32            `protobuf:"varint,2,opt,name=cgiCmd" json:"cgiCmd,omitempty"`
	OutPutTyp   *int32            `protobuf:"varint,3,opt,name=outPutTyp" json:"outPutTyp,omitempty"`
	ReqText     *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=reqText" json:"reqText,omitempty"`
}

func (x *HongBaoReq) Reset() {
	*x = HongBaoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HongBaoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HongBaoReq) ProtoMessage() {}

func (x *HongBaoReq) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HongBaoReq.ProtoReflect.Descriptor instead.
func (*HongBaoReq) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{264}
}

func (x *HongBaoReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *HongBaoReq) GetCgiCmd() int32 {
	if x != nil && x.CgiCmd != nil {
		return *x.CgiCmd
	}
	return 0
}

func (x *HongBaoReq) GetOutPutTyp() int32 {
	if x != nil && x.OutPutTyp != nil {
		return *x.OutPutTyp
	}
	return 0
}

func (x *HongBaoReq) GetReqText() *SKBuiltinBufferT {
	if x != nil {
		return x.ReqText
	}
	return nil
}

type HongBaoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse     `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	RetText      *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=retText" json:"retText,omitempty"`
	PlatRet      *int32            `protobuf:"varint,3,opt,name=platRet" json:"platRet,omitempty"`
	PlatMsg      *string           `protobuf:"bytes,4,opt,name=platMsg" json:"platMsg,omitempty"`
	CgiCmdid     *int32            `protobuf:"varint,5,opt,name=cgiCmdid" json:"cgiCmdid,omitempty"`
	ErrorType    *int32            `protobuf:"varint,6,opt,name=errorType" json:"errorType,omitempty"`
	ErrorMsg     *string           `protobuf:"bytes,7,opt,name=errorMsg" json:"errorMsg,omitempty"`
}

func (x *HongBaoRes) Reset() {
	*x = HongBaoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HongBaoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HongBaoRes) ProtoMessage() {}

func (x *HongBaoRes) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HongBaoRes.ProtoReflect.Descriptor instead.
func (*HongBaoRes) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{265}
}

func (x *HongBaoRes) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *HongBaoRes) GetRetText() *SKBuiltinBufferT {
	if x != nil {
		return x.RetText
	}
	return nil
}

func (x *HongBaoRes) GetPlatRet() int32 {
	if x != nil && x.PlatRet != nil {
		return *x.PlatRet
	}
	return 0
}

func (x *HongBaoRes) GetPlatMsg() string {
	if x != nil && x.PlatMsg != nil {
		return *x.PlatMsg
	}
	return ""
}

func (x *HongBaoRes) GetCgiCmdid() int32 {
	if x != nil && x.CgiCmdid != nil {
		return *x.CgiCmdid
	}
	return 0
}

func (x *HongBaoRes) GetErrorType() int32 {
	if x != nil && x.ErrorType != nil {
		return *x.ErrorType
	}
	return 0
}

func (x *HongBaoRes) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

type Wcstf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *uint64  `protobuf:"varint,1,opt,name=StartTime" json:"StartTime,omitempty"`
	CheckTime *uint64  `protobuf:"varint,2,opt,name=CheckTime" json:"CheckTime,omitempty"`
	Count     *uint32  `protobuf:"varint,3,opt,name=Count" json:"Count,omitempty"`
	EndTime   []uint64 `protobuf:"varint,4,rep,name=EndTime" json:"EndTime,omitempty"`
}

func (x *Wcstf) Reset() {
	*x = Wcstf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wcstf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wcstf) ProtoMessage() {}

func (x *Wcstf) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wcstf.ProtoReflect.Descriptor instead.
func (*Wcstf) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{266}
}

func (x *Wcstf) GetStartTime() uint64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *Wcstf) GetCheckTime() uint64 {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return 0
}

func (x *Wcstf) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *Wcstf) GetEndTime() []uint64 {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type Wcste struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checkid   *string `protobuf:"bytes,1,opt,name=Checkid" json:"Checkid,omitempty"`
	StartTime *uint32 `protobuf:"varint,2,opt,name=StartTime" json:"StartTime,omitempty"`
	CheckTime *uint32 `protobuf:"varint,3,opt,name=CheckTime" json:"CheckTime,omitempty"`
	Count1    *uint32 `protobuf:"varint,4,opt,name=Count1" json:"Count1,omitempty"`
	Count2    *uint32 `protobuf:"varint,5,opt,name=Count2" json:"Count2,omitempty"`
	Count3    *uint32 `protobuf:"varint,6,opt,name=Count3" json:"Count3,omitempty"`
	Const1    *uint64 `protobuf:"varint,7,opt,name=Const1" json:"Const1,omitempty"`
	Const2    *uint64 `protobuf:"varint,8,opt,name=Const2" json:"Const2,omitempty"`
	Const3    *uint64 `protobuf:"varint,9,opt,name=Const3" json:"Const3,omitempty"`
	Const4    *uint64 `protobuf:"varint,10,opt,name=Const4" json:"Const4,omitempty"`
	Const5    *uint64 `protobuf:"varint,11,opt,name=Const5" json:"Const5,omitempty"`
	Const6    *uint64 `protobuf:"varint,12,opt,name=Const6" json:"Const6,omitempty"`
}

func (x *Wcste) Reset() {
	*x = Wcste{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wcste) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wcste) ProtoMessage() {}

func (x *Wcste) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wcste.ProtoReflect.Descriptor instead.
func (*Wcste) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{267}
}

func (x *Wcste) GetCheckid() string {
	if x != nil && x.Checkid != nil {
		return *x.Checkid
	}
	return ""
}

func (x *Wcste) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *Wcste) GetCheckTime() uint32 {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return 0
}

func (x *Wcste) GetCount1() uint32 {
	if x != nil && x.Count1 != nil {
		return *x.Count1
	}
	return 0
}

func (x *Wcste) GetCount2() uint32 {
	if x != nil && x.Count2 != nil {
		return *x.Count2
	}
	return 0
}

func (x *Wcste) GetCount3() uint32 {
	if x != nil && x.Count3 != nil {
		return *x.Count3
	}
	return 0
}

func (x *Wcste) GetConst1() uint64 {
	if x != nil && x.Const1 != nil {
		return *x.Const1
	}
	return 0
}

func (x *Wcste) GetConst2() uint64 {
	if x != nil && x.Const2 != nil {
		return *x.Const2
	}
	return 0
}

func (x *Wcste) GetConst3() uint64 {
	if x != nil && x.Const3 != nil {
		return *x.Const3
	}
	return 0
}

func (x *Wcste) GetConst4() uint64 {
	if x != nil && x.Const4 != nil {
		return *x.Const4
	}
	return 0
}

func (x *Wcste) GetConst5() uint64 {
	if x != nil && x.Const5 != nil {
		return *x.Const5
	}
	return 0
}

func (x *Wcste) GetConst6() uint64 {
	if x != nil && x.Const6 != nil {
		return *x.Const6
	}
	return 0
}

type JSLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest     `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	Appid       *string          `protobuf:"bytes,2,opt,name=appid" json:"appid,omitempty"`
	Scope       *string          `protobuf:"bytes,3,opt,name=scope" json:"scope,omitempty"`
	LoginType   *int32           `protobuf:"varint,4,opt,name=loginType" json:"loginType,omitempty"`
	Url         *string          `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	State       *string          `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
	VersionType *int32           `protobuf:"varint,7,opt,name=versionType" json:"versionType,omitempty"`
	ExtInfo     *WxaExternalInfo `protobuf:"bytes,8,opt,name=extInfo" json:"extInfo,omitempty"`
}
type UpdateWxaUsageRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields    protoimpl.UnknownFields
	BaseRequest      *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	Username         *string      `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Scope            *string      `protobuf:"bytes,3,opt,name=scope" json:"scope,omitempty"`
	LoginType        *int32           `protobuf:"varint,4,opt,name=loginType" json:"loginType,omitempty"`
	Url              *string          `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	State            *string          `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
	VersionType      *int32           `protobuf:"varint,7,opt,name=versionType" json:"versionType,omitempty"`
	ExtInfo          *WxaExternalInfo `protobuf:"bytes,8,opt,name=extInfo" json:"extInfo,omitempty"`
	IsFromBackground *int32           `protobuf:"varint,9,opt,name=isFromBackground" json:"isFromBackground,omitempty"`
	RecordType       *int32    `protobuf:"varint,10,opt,name=recordType" json:"recordType,omitempty"`
	OpType *int32 `protobuf:"varint,11,opt,name=opType" json:"opType,omitempty"`
	Rea    *int32 `protobuf:"varint,12,opt,name=rea" json:"rea,omitempty"`
}

func (u UpdateWxaUsageRecordRequest) Reset() {
	//TODO implement me
	panic("implement me")
}

func (u UpdateWxaUsageRecordRequest) String() string {
	//TODO implement me
	panic("implement me")
}

func (u UpdateWxaUsageRecordRequest) ProtoMessage() {
	//TODO implement me
	panic("implement me")
}

func (x *JSLoginRequest) Reset() {
	*x = JSLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSLoginRequest) ProtoMessage() {}

func (x *JSLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSLoginRequest.ProtoReflect.Descriptor instead.
func (*JSLoginRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{268}
}

func (x *JSLoginRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *JSLoginRequest) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *JSLoginRequest) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *JSLoginRequest) GetLoginType() int32 {
	if x != nil && x.LoginType != nil {
		return *x.LoginType
	}
	return 0
}

func (x *JSLoginRequest) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *JSLoginRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *JSLoginRequest) GetVersionType() int32 {
	if x != nil && x.VersionType != nil {
		return *x.VersionType
	}
	return 0
}

func (x *JSLoginRequest) GetExtInfo() *WxaExternalInfo {
	if x != nil {
		return x.ExtInfo
	}
	return nil
}

type JSLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse      *BaseResponse      `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	JsapiBaseresponse *JSAPIBaseResponse `protobuf:"bytes,2,opt,name=jsapiBaseresponse" json:"jsapiBaseresponse,omitempty"`
	Code              *string            `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
	ScopeList         *ScopeInfo         `protobuf:"bytes,4,opt,name=scopeList" json:"scopeList,omitempty"`
	Appname           *string            `protobuf:"bytes,5,opt,name=appname" json:"appname,omitempty"`
	AppiconUrl        *string            `protobuf:"bytes,6,opt,name=appiconUrl" json:"appiconUrl,omitempty"`
	Openid            *string            `protobuf:"bytes,7,opt,name=openid" json:"openid,omitempty"`
	SessionKey        *string            `protobuf:"bytes,8,opt,name=sessionKey" json:"sessionKey,omitempty"`
	SessionTicket     *string            `protobuf:"bytes,9,opt,name=sessionTicket" json:"sessionTicket,omitempty"`
	Lifespan          *int32             `protobuf:"varint,10,opt,name=lifespan" json:"lifespan,omitempty"`
	State             *string            `protobuf:"bytes,11,opt,name=state" json:"state,omitempty"`
	Signature         *string            `protobuf:"bytes,12,opt,name=signature" json:"signature,omitempty"`
}

func (x *JSLoginResponse) Reset() {
	*x = JSLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSLoginResponse) ProtoMessage() {}

func (x *JSLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSLoginResponse.ProtoReflect.Descriptor instead.
func (*JSLoginResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{269}
}

func (x *JSLoginResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *JSLoginResponse) GetJsapiBaseresponse() *JSAPIBaseResponse {
	if x != nil {
		return x.JsapiBaseresponse
	}
	return nil
}

func (x *JSLoginResponse) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *JSLoginResponse) GetScopeList() *ScopeInfo {
	if x != nil {
		return x.ScopeList
	}
	return nil
}

func (x *JSLoginResponse) GetAppname() string {
	if x != nil && x.Appname != nil {
		return *x.Appname
	}
	return ""
}

func (x *JSLoginResponse) GetAppiconUrl() string {
	if x != nil && x.AppiconUrl != nil {
		return *x.AppiconUrl
	}
	return ""
}

func (x *JSLoginResponse) GetOpenid() string {
	if x != nil && x.Openid != nil {
		return *x.Openid
	}
	return ""
}

func (x *JSLoginResponse) GetSessionKey() string {
	if x != nil && x.SessionKey != nil {
		return *x.SessionKey
	}
	return ""
}

func (x *JSLoginResponse) GetSessionTicket() string {
	if x != nil && x.SessionTicket != nil {
		return *x.SessionTicket
	}
	return ""
}

func (x *JSLoginResponse) GetLifespan() int32 {
	if x != nil && x.Lifespan != nil {
		return *x.Lifespan
	}
	return 0
}

func (x *JSLoginResponse) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *JSLoginResponse) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

type JSAPIBaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errcode *int32  `protobuf:"varint,1,opt,name=errcode" json:"errcode,omitempty"`
	Errmsg  *string `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
}

func (x *JSAPIBaseResponse) Reset() {
	*x = JSAPIBaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSAPIBaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSAPIBaseResponse) ProtoMessage() {}

func (x *JSAPIBaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSAPIBaseResponse.ProtoReflect.Descriptor instead.
func (*JSAPIBaseResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{270}
}

func (x *JSAPIBaseResponse) GetErrcode() int32 {
	if x != nil && x.Errcode != nil {
		return *x.Errcode
	}
	return 0
}

func (x *JSAPIBaseResponse) GetErrmsg() string {
	if x != nil && x.Errmsg != nil {
		return *x.Errmsg
	}
	return ""
}

type ScopeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope     *string `protobuf:"bytes,1,opt,name=scope" json:"scope,omitempty"`
	Desc      *string `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
	AuthState *int32  `protobuf:"varint,3,opt,name=authState" json:"authState,omitempty"`
	ExtDesc   *string `protobuf:"bytes,4,opt,name=extDesc" json:"extDesc,omitempty"`
	AuthDesc  *string `protobuf:"bytes,5,opt,name=authDesc" json:"authDesc,omitempty"`
}

func (x *ScopeInfo) Reset() {
	*x = ScopeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeInfo) ProtoMessage() {}

func (x *ScopeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeInfo.ProtoReflect.Descriptor instead.
func (*ScopeInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{271}
}

func (x *ScopeInfo) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *ScopeInfo) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *ScopeInfo) GetAuthState() int32 {
	if x != nil && x.AuthState != nil {
		return *x.AuthState
	}
	return 0
}

func (x *ScopeInfo) GetExtDesc() string {
	if x != nil && x.ExtDesc != nil {
		return *x.ExtDesc
	}
	return ""
}

func (x *ScopeInfo) GetAuthDesc() string {
	if x != nil && x.AuthDesc != nil {
		return *x.AuthDesc
	}
	return ""
}

type WxaExternalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostAppid *string `protobuf:"bytes,1,opt,name=hostAppid" json:"hostAppid,omitempty"`
	Scene     *int32  `protobuf:"varint,2,opt,name=scene" json:"scene,omitempty"`
	SourceEnv *int32  `protobuf:"varint,3,opt,name=sourceEnv" json:"sourceEnv,omitempty"`
}

func (x *WxaExternalInfo) Reset() {
	*x = WxaExternalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaExternalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaExternalInfo) ProtoMessage() {}

func (x *WxaExternalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaExternalInfo.ProtoReflect.Descriptor instead.
func (*WxaExternalInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{272}
}

func (x *WxaExternalInfo) GetHostAppid() string {
	if x != nil && x.HostAppid != nil {
		return *x.HostAppid
	}
	return ""
}

func (x *WxaExternalInfo) GetScene() int32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *WxaExternalInfo) GetSourceEnv() int32 {
	if x != nil && x.SourceEnv != nil {
		return *x.SourceEnv
	}
	return 0
}

type BindEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	OpCode      *uint32      `protobuf:"varint,2,opt,name=opCode" json:"opCode,omitempty"`
	Email       *string      `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
}

func (x *BindEmailRequest) Reset() {
	*x = BindEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindEmailRequest) ProtoMessage() {}

func (x *BindEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindEmailRequest.ProtoReflect.Descriptor instead.
func (*BindEmailRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{273}
}

func (x *BindEmailRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *BindEmailRequest) GetOpCode() uint32 {
	if x != nil && x.OpCode != nil {
		return *x.OpCode
	}
	return 0
}

func (x *BindEmailRequest) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

type BindEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
}

func (x *BindEmailResponse) Reset() {
	*x = BindEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindEmailResponse) ProtoMessage() {}

func (x *BindEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindEmailResponse.ProtoReflect.Descriptor instead.
func (*BindEmailResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{274}
}

func (x *BindEmailResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type SendVerifyEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest      `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	UserName    *SKBuiltinStringT `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
}

func (x *SendVerifyEmailRequest) Reset() {
	*x = SendVerifyEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendVerifyEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendVerifyEmailRequest) ProtoMessage() {}

func (x *SendVerifyEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendVerifyEmailRequest.ProtoReflect.Descriptor instead.
func (*SendVerifyEmailRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{275}
}

func (x *SendVerifyEmailRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SendVerifyEmailRequest) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

type SendVerifyEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
}

func (x *SendVerifyEmailResponse) Reset() {
	*x = SendVerifyEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendVerifyEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendVerifyEmailResponse) ProtoMessage() {}

func (x *SendVerifyEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendVerifyEmailResponse.ProtoReflect.Descriptor instead.
func (*SendVerifyEmailResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{276}
}

func (x *SendVerifyEmailResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type GeneralSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	SetType     *int32       `protobuf:"varint,2,opt,name=setType" json:"setType,omitempty"`
	SetValue    *string      `protobuf:"bytes,3,opt,name=setValue" json:"setValue,omitempty"`
}

func (x *GeneralSetRequest) Reset() {
	*x = GeneralSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSetRequest) ProtoMessage() {}

func (x *GeneralSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSetRequest.ProtoReflect.Descriptor instead.
func (*GeneralSetRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{277}
}

func (x *GeneralSetRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GeneralSetRequest) GetSetType() int32 {
	if x != nil && x.SetType != nil {
		return *x.SetType
	}
	return 0
}

func (x *GeneralSetRequest) GetSetValue() string {
	if x != nil && x.SetValue != nil {
		return *x.SetValue
	}
	return ""
}

type GeneralSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
}

func (x *GeneralSetResponse) Reset() {
	*x = GeneralSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSetResponse) ProtoMessage() {}

func (x *GeneralSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSetResponse.ProtoReflect.Descriptor instead.
func (*GeneralSetResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{278}
}

func (x *GeneralSetResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type BindOpMobileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest        *BaseRequest       `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	UserName           *string            `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
	Mobile             *string            `protobuf:"bytes,3,opt,name=mobile" json:"mobile,omitempty"`
	Opcode             *uint32            `protobuf:"varint,4,opt,name=opcode" json:"opcode,omitempty"`
	Verifycode         *string            `protobuf:"bytes,5,opt,name=verifycode" json:"verifycode,omitempty"`
	DialFlag           *uint32            `protobuf:"varint,6,opt,name=dialFlag" json:"dialFlag,omitempty"`
	DialLang           *string            `protobuf:"bytes,7,opt,name=dialLang" json:"dialLang,omitempty"`
	AuthTicket         *string            `protobuf:"bytes,8,opt,name=authTicket" json:"authTicket,omitempty"`
	ForceReg           *uint32            `protobuf:"varint,9,opt,name=forceReg" json:"forceReg,omitempty"`
	SafeDeviceName     *string            `protobuf:"bytes,10,opt,name=safeDeviceName" json:"safeDeviceName,omitempty"`
	SafeDeviceType     *string            `protobuf:"bytes,11,opt,name=safeDeviceType" json:"safeDeviceType,omitempty"`
	RandomEncryKey     *SKBuiltinBufferT  `protobuf:"bytes,12,opt,name=randomEncryKey" json:"randomEncryKey,omitempty"`
	Language           *string            `protobuf:"bytes,13,opt,name=language" json:"language,omitempty"`
	InputMobileRetrys  *uint32            `protobuf:"varint,14,opt,name=inputMobileRetrys" json:"inputMobileRetrys,omitempty"`
	AdjustRet          *uint32            `protobuf:"varint,15,opt,name=adjustRet" json:"adjustRet,omitempty"`
	ClientSeqId        *string            `protobuf:"bytes,16,opt,name=clientSeqId" json:"clientSeqId,omitempty"`
	MobileCheckType    *uint32            `protobuf:"varint,17,opt,name=mobileCheckType" json:"mobileCheckType,omitempty"`
	RegSessionId       *string            `protobuf:"bytes,18,opt,name=regSessionId" json:"regSessionId,omitempty"`
	SpamBuffer         *SKBuiltinBufferT  `protobuf:"bytes,19,opt,name=spamBuffer" json:"spamBuffer,omitempty"`
	ExtSpamInfo        *SKBuiltinBufferT  `protobuf:"bytes,20,opt,name=extSpamInfo" json:"extSpamInfo,omitempty"`
	ThirdAppAuthTicket *string            `protobuf:"bytes,21,opt,name=thirdAppAuthTicket" json:"thirdAppAuthTicket,omitempty"`
	SmsUpCheckExtInfo  *SmsUpCheckExtInfo `protobuf:"bytes,22,opt,name=smsUpCheckExtInfo" json:"smsUpCheckExtInfo,omitempty"`
}

func (x *BindOpMobileRequest) Reset() {
	*x = BindOpMobileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindOpMobileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindOpMobileRequest) ProtoMessage() {}

func (x *BindOpMobileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindOpMobileRequest.ProtoReflect.Descriptor instead.
func (*BindOpMobileRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{279}
}

func (x *BindOpMobileRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *BindOpMobileRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *BindOpMobileRequest) GetMobile() string {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return ""
}

func (x *BindOpMobileRequest) GetOpcode() uint32 {
	if x != nil && x.Opcode != nil {
		return *x.Opcode
	}
	return 0
}

func (x *BindOpMobileRequest) GetVerifycode() string {
	if x != nil && x.Verifycode != nil {
		return *x.Verifycode
	}
	return ""
}

func (x *BindOpMobileRequest) GetDialFlag() uint32 {
	if x != nil && x.DialFlag != nil {
		return *x.DialFlag
	}
	return 0
}

func (x *BindOpMobileRequest) GetDialLang() string {
	if x != nil && x.DialLang != nil {
		return *x.DialLang
	}
	return ""
}

func (x *BindOpMobileRequest) GetAuthTicket() string {
	if x != nil && x.AuthTicket != nil {
		return *x.AuthTicket
	}
	return ""
}

func (x *BindOpMobileRequest) GetForceReg() uint32 {
	if x != nil && x.ForceReg != nil {
		return *x.ForceReg
	}
	return 0
}

func (x *BindOpMobileRequest) GetSafeDeviceName() string {
	if x != nil && x.SafeDeviceName != nil {
		return *x.SafeDeviceName
	}
	return ""
}

func (x *BindOpMobileRequest) GetSafeDeviceType() string {
	if x != nil && x.SafeDeviceType != nil {
		return *x.SafeDeviceType
	}
	return ""
}

func (x *BindOpMobileRequest) GetRandomEncryKey() *SKBuiltinBufferT {
	if x != nil {
		return x.RandomEncryKey
	}
	return nil
}

func (x *BindOpMobileRequest) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *BindOpMobileRequest) GetInputMobileRetrys() uint32 {
	if x != nil && x.InputMobileRetrys != nil {
		return *x.InputMobileRetrys
	}
	return 0
}

func (x *BindOpMobileRequest) GetAdjustRet() uint32 {
	if x != nil && x.AdjustRet != nil {
		return *x.AdjustRet
	}
	return 0
}

func (x *BindOpMobileRequest) GetClientSeqId() string {
	if x != nil && x.ClientSeqId != nil {
		return *x.ClientSeqId
	}
	return ""
}

func (x *BindOpMobileRequest) GetMobileCheckType() uint32 {
	if x != nil && x.MobileCheckType != nil {
		return *x.MobileCheckType
	}
	return 0
}

func (x *BindOpMobileRequest) GetRegSessionId() string {
	if x != nil && x.RegSessionId != nil {
		return *x.RegSessionId
	}
	return ""
}

func (x *BindOpMobileRequest) GetSpamBuffer() *SKBuiltinBufferT {
	if x != nil {
		return x.SpamBuffer
	}
	return nil
}

func (x *BindOpMobileRequest) GetExtSpamInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.ExtSpamInfo
	}
	return nil
}

func (x *BindOpMobileRequest) GetThirdAppAuthTicket() string {
	if x != nil && x.ThirdAppAuthTicket != nil {
		return *x.ThirdAppAuthTicket
	}
	return ""
}

func (x *BindOpMobileRequest) GetSmsUpCheckExtInfo() *SmsUpCheckExtInfo {
	if x != nil {
		return x.SmsUpCheckExtInfo
	}
	return nil
}

type BindOpMobileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse        *BaseResponse   `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	Ticket              *string         `protobuf:"bytes,2,opt,name=ticket" json:"ticket,omitempty"`
	SmsNo               *string         `protobuf:"bytes,3,opt,name=smsNo" json:"smsNo,omitempty"`
	NeedSetPwd          *uint32         `protobuf:"varint,4,opt,name=needSetPwd" json:"needSetPwd,omitempty"`
	Pwd                 *string         `protobuf:"bytes,5,opt,name=pwd" json:"pwd,omitempty"`
	Username            *string         `protobuf:"bytes,6,opt,name=username" json:"username,omitempty"`
	NewHostList         *HostLists      `protobuf:"bytes,7,opt,name=newHostList" json:"newHostList,omitempty"`
	BuiltinIplist       *BuiltinIPList  `protobuf:"bytes,8,opt,name=builtinIplist" json:"builtinIplist,omitempty"`
	NetworkControl      *NetworkControl `protobuf:"bytes,9,opt,name=networkControl" json:"networkControl,omitempty"`
	AuthTicket          *string         `protobuf:"bytes,10,opt,name=authTicket" json:"authTicket,omitempty"`
	SafeDevice          *uint32         `protobuf:"varint,11,opt,name=safeDevice" json:"safeDevice,omitempty"`
	Cc                  *string         `protobuf:"bytes,12,opt,name=cc" json:"cc,omitempty"`
	ObsoleteItem1       *uint32         `protobuf:"varint,13,opt,name=obsoleteItem1" json:"obsoleteItem1,omitempty"`
	SafeDeviceList      *SafeDeviceList `protobuf:"bytes,14,opt,name=safeDeviceList" json:"safeDeviceList,omitempty"`
	PureMobile          *string         `protobuf:"bytes,15,opt,name=pureMobile" json:"pureMobile,omitempty"`
	FormatedMobile      *string         `protobuf:"bytes,16,opt,name=formatedMobile" json:"formatedMobile,omitempty"`
	ShowStyle           *ShowStyleKey   `protobuf:"bytes,17,opt,name=showStyle" json:"showStyle,omitempty"`
	MmtlsControlBitFlag *uint32         `protobuf:"varint,18,opt,name=mmtlsControlBitFlag" json:"mmtlsControlBitFlag,omitempty"`
	SmsUpCode           *string         `protobuf:"bytes,19,opt,name=smsUpCode" json:"smsUpCode,omitempty"`
	SmsUpMobile         *string         `protobuf:"bytes,20,opt,name=smsUpMobile" json:"smsUpMobile,omitempty"`
	MobileCheckType     *uint32         `protobuf:"varint,21,opt,name=mobileCheckType" json:"mobileCheckType,omitempty"`
	RegSessionId        *string         `protobuf:"bytes,22,opt,name=regSessionId" json:"regSessionId,omitempty"`
	Restart             *uint32         `protobuf:"varint,23,opt,name=restart" json:"restart,omitempty"`
}

func (x *BindOpMobileResponse) Reset() {
	*x = BindOpMobileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindOpMobileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindOpMobileResponse) ProtoMessage() {}

func (x *BindOpMobileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindOpMobileResponse.ProtoReflect.Descriptor instead.
func (*BindOpMobileResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{280}
}

func (x *BindOpMobileResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *BindOpMobileResponse) GetTicket() string {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return ""
}

func (x *BindOpMobileResponse) GetSmsNo() string {
	if x != nil && x.SmsNo != nil {
		return *x.SmsNo
	}
	return ""
}

func (x *BindOpMobileResponse) GetNeedSetPwd() uint32 {
	if x != nil && x.NeedSetPwd != nil {
		return *x.NeedSetPwd
	}
	return 0
}

func (x *BindOpMobileResponse) GetPwd() string {
	if x != nil && x.Pwd != nil {
		return *x.Pwd
	}
	return ""
}

func (x *BindOpMobileResponse) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *BindOpMobileResponse) GetNewHostList() *HostLists {
	if x != nil {
		return x.NewHostList
	}
	return nil
}

func (x *BindOpMobileResponse) GetBuiltinIplist() *BuiltinIPList {
	if x != nil {
		return x.BuiltinIplist
	}
	return nil
}

func (x *BindOpMobileResponse) GetNetworkControl() *NetworkControl {
	if x != nil {
		return x.NetworkControl
	}
	return nil
}

func (x *BindOpMobileResponse) GetAuthTicket() string {
	if x != nil && x.AuthTicket != nil {
		return *x.AuthTicket
	}
	return ""
}

func (x *BindOpMobileResponse) GetSafeDevice() uint32 {
	if x != nil && x.SafeDevice != nil {
		return *x.SafeDevice
	}
	return 0
}

func (x *BindOpMobileResponse) GetCc() string {
	if x != nil && x.Cc != nil {
		return *x.Cc
	}
	return ""
}

func (x *BindOpMobileResponse) GetObsoleteItem1() uint32 {
	if x != nil && x.ObsoleteItem1 != nil {
		return *x.ObsoleteItem1
	}
	return 0
}

func (x *BindOpMobileResponse) GetSafeDeviceList() *SafeDeviceList {
	if x != nil {
		return x.SafeDeviceList
	}
	return nil
}

func (x *BindOpMobileResponse) GetPureMobile() string {
	if x != nil && x.PureMobile != nil {
		return *x.PureMobile
	}
	return ""
}

func (x *BindOpMobileResponse) GetFormatedMobile() string {
	if x != nil && x.FormatedMobile != nil {
		return *x.FormatedMobile
	}
	return ""
}

func (x *BindOpMobileResponse) GetShowStyle() *ShowStyleKey {
	if x != nil {
		return x.ShowStyle
	}
	return nil
}

func (x *BindOpMobileResponse) GetMmtlsControlBitFlag() uint32 {
	if x != nil && x.MmtlsControlBitFlag != nil {
		return *x.MmtlsControlBitFlag
	}
	return 0
}

func (x *BindOpMobileResponse) GetSmsUpCode() string {
	if x != nil && x.SmsUpCode != nil {
		return *x.SmsUpCode
	}
	return ""
}

func (x *BindOpMobileResponse) GetSmsUpMobile() string {
	if x != nil && x.SmsUpMobile != nil {
		return *x.SmsUpMobile
	}
	return ""
}

func (x *BindOpMobileResponse) GetMobileCheckType() uint32 {
	if x != nil && x.MobileCheckType != nil {
		return *x.MobileCheckType
	}
	return 0
}

func (x *BindOpMobileResponse) GetRegSessionId() string {
	if x != nil && x.RegSessionId != nil {
		return *x.RegSessionId
	}
	return ""
}

func (x *BindOpMobileResponse) GetRestart() uint32 {
	if x != nil && x.Restart != nil {
		return *x.Restart
	}
	return 0
}

type SmsUpCheckExtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckCount   *uint32 `protobuf:"varint,1,opt,name=checkCount" json:"checkCount,omitempty"`
	IsFinalCheck *uint32 `protobuf:"varint,2,opt,name=isFinalCheck" json:"isFinalCheck,omitempty"`
}

func (x *SmsUpCheckExtInfo) Reset() {
	*x = SmsUpCheckExtInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmsUpCheckExtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsUpCheckExtInfo) ProtoMessage() {}

func (x *SmsUpCheckExtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsUpCheckExtInfo.ProtoReflect.Descriptor instead.
func (*SmsUpCheckExtInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{281}
}

func (x *SmsUpCheckExtInfo) GetCheckCount() uint32 {
	if x != nil && x.CheckCount != nil {
		return *x.CheckCount
	}
	return 0
}

func (x *SmsUpCheckExtInfo) GetIsFinalCheck() uint32 {
	if x != nil && x.IsFinalCheck != nil {
		return *x.IsFinalCheck
	}
	return 0
}

type HostLists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *uint32 `protobuf:"varint,1,opt,name=Count" json:"Count,omitempty"`
	List  []*Host `protobuf:"bytes,2,rep,name=List" json:"List,omitempty"`
}

func (x *HostLists) Reset() {
	*x = HostLists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostLists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostLists) ProtoMessage() {}

func (x *HostLists) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostLists.ProtoReflect.Descriptor instead.
func (*HostLists) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{282}
}

func (x *HostLists) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *HostLists) GetList() []*Host {
	if x != nil {
		return x.List
	}
	return nil
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin     *string `protobuf:"bytes,1,opt,name=Origin" json:"Origin,omitempty"`
	Substitute *string `protobuf:"bytes,2,opt,name=Substitute" json:"Substitute,omitempty"`
	Priority   *uint32 `protobuf:"varint,3,opt,name=Priority" json:"Priority,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{283}
}

func (x *Host) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *Host) GetSubstitute() string {
	if x != nil && x.Substitute != nil {
		return *x.Substitute
	}
	return ""
}

func (x *Host) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

type GetQRCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest      `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	UserName    *SKBuiltinStringT `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
	Style       *uint32           `protobuf:"varint,3,opt,name=style" json:"style,omitempty"`
	OpCode      *uint32           `protobuf:"varint,4,opt,name=opCode" json:"opCode,omitempty"`
}

func (x *GetQRCodeRequest) Reset() {
	*x = GetQRCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQRCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQRCodeRequest) ProtoMessage() {}

func (x *GetQRCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQRCodeRequest.ProtoReflect.Descriptor instead.
func (*GetQRCodeRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{284}
}

func (x *GetQRCodeRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GetQRCodeRequest) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *GetQRCodeRequest) GetStyle() uint32 {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return 0
}

func (x *GetQRCodeRequest) GetOpCode() uint32 {
	if x != nil && x.OpCode != nil {
		return *x.OpCode
	}
	return 0
}

type GetQRCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse        *BaseResponse     `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	Qrcode              *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=qrcode" json:"qrcode,omitempty"`
	Style               *uint32           `protobuf:"varint,3,opt,name=style" json:"style,omitempty"`
	FooterWording       *string           `protobuf:"bytes,4,opt,name=footerWording" json:"footerWording,omitempty"`
	RevokeQrcodeId      *string           `protobuf:"bytes,5,opt,name=revokeQrcodeId" json:"revokeQrcodeId,omitempty"`
	RevokeQrcodeWording *string           `protobuf:"bytes,6,opt,name=revokeQrcodeWording" json:"revokeQrcodeWording,omitempty"`
}

func (x *GetQRCodeResponse) Reset() {
	*x = GetQRCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQRCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQRCodeResponse) ProtoMessage() {}

func (x *GetQRCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQRCodeResponse.ProtoReflect.Descriptor instead.
func (*GetQRCodeResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{285}
}

func (x *GetQRCodeResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetQRCodeResponse) GetQrcode() *SKBuiltinBufferT {
	if x != nil {
		return x.Qrcode
	}
	return nil
}

func (x *GetQRCodeResponse) GetStyle() uint32 {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return 0
}

func (x *GetQRCodeResponse) GetFooterWording() string {
	if x != nil && x.FooterWording != nil {
		return *x.FooterWording
	}
	return ""
}

func (x *GetQRCodeResponse) GetRevokeQrcodeId() string {
	if x != nil && x.RevokeQrcodeId != nil {
		return *x.RevokeQrcodeId
	}
	return ""
}

func (x *GetQRCodeResponse) GetRevokeQrcodeWording() string {
	if x != nil && x.RevokeQrcodeWording != nil {
		return *x.RevokeQrcodeWording
	}
	return ""
}

type ClickCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest     *BaseRequest     `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	ClickTyp        *uint32          `protobuf:"varint,2,opt,name=clickTyp" json:"clickTyp,omitempty"`
	ClickInfo       *string          `protobuf:"bytes,3,opt,name=clickInfo" json:"clickInfo,omitempty"`
	BizUserName     *string          `protobuf:"bytes,4,opt,name=bizUserName" json:"bizUserName,omitempty"`
	MsgSource       *string          `protobuf:"bytes,5,opt,name=msgSource" json:"msgSource,omitempty"`
	Scene           *uint32          `protobuf:"varint,7,opt,name=scene" json:"scene,omitempty"`
	Sessionid       *uint32          `protobuf:"varint,8,opt,name=sessionid" json:"sessionid,omitempty"`
	SessionStat     *SessionStat     `protobuf:"bytes,9,opt,name=sessionStat" json:"sessionStat,omitempty"`
	SettingPageInfo *SettingPageInfo `protobuf:"bytes,10,opt,name=settingPageInfo" json:"settingPageInfo,omitempty"`
}

func (x *ClickCommandRequest) Reset() {
	*x = ClickCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickCommandRequest) ProtoMessage() {}

func (x *ClickCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickCommandRequest.ProtoReflect.Descriptor instead.
func (*ClickCommandRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{286}
}

func (x *ClickCommandRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *ClickCommandRequest) GetClickTyp() uint32 {
	if x != nil && x.ClickTyp != nil {
		return *x.ClickTyp
	}
	return 0
}

func (x *ClickCommandRequest) GetClickInfo() string {
	if x != nil && x.ClickInfo != nil {
		return *x.ClickInfo
	}
	return ""
}

func (x *ClickCommandRequest) GetBizUserName() string {
	if x != nil && x.BizUserName != nil {
		return *x.BizUserName
	}
	return ""
}

func (x *ClickCommandRequest) GetMsgSource() string {
	if x != nil && x.MsgSource != nil {
		return *x.MsgSource
	}
	return ""
}

func (x *ClickCommandRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *ClickCommandRequest) GetSessionid() uint32 {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return 0
}

func (x *ClickCommandRequest) GetSessionStat() *SessionStat {
	if x != nil {
		return x.SessionStat
	}
	return nil
}

func (x *ClickCommandRequest) GetSettingPageInfo() *SettingPageInfo {
	if x != nil {
		return x.SettingPageInfo
	}
	return nil
}

type ClickCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	WuRaoTips    *WuRaoTips    `protobuf:"bytes,2,opt,name=wuRaoTips" json:"wuRaoTips,omitempty"`
}

func (x *ClickCommandResponse) Reset() {
	*x = ClickCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickCommandResponse) ProtoMessage() {}

func (x *ClickCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickCommandResponse.ProtoReflect.Descriptor instead.
func (*ClickCommandResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{287}
}

func (x *ClickCommandResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *ClickCommandResponse) GetWuRaoTips() *WuRaoTips {
	if x != nil {
		return x.WuRaoTips
	}
	return nil
}

type WuRaoTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendWuRaoTips      *uint32 `protobuf:"varint,1,opt,name=sendWuRaoTips" json:"sendWuRaoTips,omitempty"`
	WuRaoWording       *string `protobuf:"bytes,2,opt,name=wuRaoWording" json:"wuRaoWording,omitempty"`
	WuRaoActionWording *string `protobuf:"bytes,3,opt,name=wuRaoActionWording" json:"wuRaoActionWording,omitempty"`
}

func (x *WuRaoTips) Reset() {
	*x = WuRaoTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WuRaoTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WuRaoTips) ProtoMessage() {}

func (x *WuRaoTips) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WuRaoTips.ProtoReflect.Descriptor instead.
func (*WuRaoTips) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{288}
}

func (x *WuRaoTips) GetSendWuRaoTips() uint32 {
	if x != nil && x.SendWuRaoTips != nil {
		return *x.SendWuRaoTips
	}
	return 0
}

func (x *WuRaoTips) GetWuRaoWording() string {
	if x != nil && x.WuRaoWording != nil {
		return *x.WuRaoWording
	}
	return ""
}

func (x *WuRaoTips) GetWuRaoActionWording() string {
	if x != nil && x.WuRaoActionWording != nil {
		return *x.WuRaoActionWording
	}
	return ""
}

type SessionStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StayDuration        *uint32 `protobuf:"varint,1,opt,name=stayDuration" json:"stayDuration,omitempty"`
	UnreadDuration      *uint32 `protobuf:"varint,2,opt,name=unreadDuration" json:"unreadDuration,omitempty"`
	TotalUnreadCount    *uint32 `protobuf:"varint,3,opt,name=totalUnreadCount" json:"totalUnreadCount,omitempty"`
	LatestMsgType       *uint32 `protobuf:"varint,4,opt,name=latestMsgType" json:"latestMsgType,omitempty"`
	IndexInSessionList  *uint32 `protobuf:"varint,5,opt,name=indexInSessionList" json:"indexInSessionList,omitempty"`
	MassSendUnreadCount *uint32 `protobuf:"varint,6,opt,name=massSendUnreadCount" json:"massSendUnreadCount,omitempty"`
	TemplateUnreadCount *uint32 `protobuf:"varint,7,opt,name=templateUnreadCount" json:"templateUnreadCount,omitempty"`
}

func (x *SessionStat) Reset() {
	*x = SessionStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStat) ProtoMessage() {}

func (x *SessionStat) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStat.ProtoReflect.Descriptor instead.
func (*SessionStat) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{289}
}

func (x *SessionStat) GetStayDuration() uint32 {
	if x != nil && x.StayDuration != nil {
		return *x.StayDuration
	}
	return 0
}

func (x *SessionStat) GetUnreadDuration() uint32 {
	if x != nil && x.UnreadDuration != nil {
		return *x.UnreadDuration
	}
	return 0
}

func (x *SessionStat) GetTotalUnreadCount() uint32 {
	if x != nil && x.TotalUnreadCount != nil {
		return *x.TotalUnreadCount
	}
	return 0
}

func (x *SessionStat) GetLatestMsgType() uint32 {
	if x != nil && x.LatestMsgType != nil {
		return *x.LatestMsgType
	}
	return 0
}

func (x *SessionStat) GetIndexInSessionList() uint32 {
	if x != nil && x.IndexInSessionList != nil {
		return *x.IndexInSessionList
	}
	return 0
}

func (x *SessionStat) GetMassSendUnreadCount() uint32 {
	if x != nil && x.MassSendUnreadCount != nil {
		return *x.MassSendUnreadCount
	}
	return 0
}

func (x *SessionStat) GetTemplateUnreadCount() uint32 {
	if x != nil && x.TemplateUnreadCount != nil {
		return *x.TemplateUnreadCount
	}
	return 0
}

type SettingPageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scene              *uint32 `protobuf:"varint,1,opt,name=scene" json:"scene,omitempty"`
	IsServiceWuRaoOpen *uint32 `protobuf:"varint,2,opt,name=isServiceWuRaoOpen" json:"isServiceWuRaoOpen,omitempty"`
}

func (x *SettingPageInfo) Reset() {
	*x = SettingPageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingPageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingPageInfo) ProtoMessage() {}

func (x *SettingPageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingPageInfo.ProtoReflect.Descriptor instead.
func (*SettingPageInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{290}
}

func (x *SettingPageInfo) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *SettingPageInfo) GetIsServiceWuRaoOpen() uint32 {
	if x != nil && x.IsServiceWuRaoOpen != nil {
		return *x.IsServiceWuRaoOpen
	}
	return 0
}

type BizProfileV2Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest     *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	BizUserName     *string      `protobuf:"bytes,2,opt,name=bizUserName" json:"bizUserName,omitempty"`
	ActionType      *uint32      `protobuf:"varint,3,opt,name=actionType" json:"actionType,omitempty"`
	Offset          []byte       `protobuf:"bytes,4,opt,name=offset" json:"offset,omitempty"`
	PageSize        *uint32      `protobuf:"varint,5,opt,name=pageSize" json:"pageSize,omitempty"`
	TmplControlFlag *uint64      `protobuf:"varint,6,opt,name=tmplControlFlag" json:"tmplControlFlag,omitempty"`
	BizSessionId    *uint32      `protobuf:"varint,7,opt,name=bizSessionId" json:"bizSessionId,omitempty"`
	Scene           *uint32      `protobuf:"varint,8,opt,name=scene" json:"scene,omitempty"`
}

func (x *BizProfileV2Req) Reset() {
	*x = BizProfileV2Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizProfileV2Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizProfileV2Req) ProtoMessage() {}

func (x *BizProfileV2Req) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizProfileV2Req.ProtoReflect.Descriptor instead.
func (*BizProfileV2Req) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{291}
}

func (x *BizProfileV2Req) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *BizProfileV2Req) GetBizUserName() string {
	if x != nil && x.BizUserName != nil {
		return *x.BizUserName
	}
	return ""
}

func (x *BizProfileV2Req) GetActionType() uint32 {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return 0
}

func (x *BizProfileV2Req) GetOffset() []byte {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *BizProfileV2Req) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *BizProfileV2Req) GetTmplControlFlag() uint64 {
	if x != nil && x.TmplControlFlag != nil {
		return *x.TmplControlFlag
	}
	return 0
}

func (x *BizProfileV2Req) GetBizSessionId() uint32 {
	if x != nil && x.BizSessionId != nil {
		return *x.BizSessionId
	}
	return 0
}

func (x *BizProfileV2Req) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

type BizProfileV2Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse           *BaseResponse                       `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	AccountInfo            *BizAccountInfo                     `protobuf:"bytes,2,opt,name=accountInfo" json:"accountInfo,omitempty"`
	BaseInfo               *BizBaseInfo                        `protobuf:"bytes,3,opt,name=baseInfo" json:"baseInfo,omitempty"`
	MsgList                *BizMessageList                     `protobuf:"bytes,4,opt,name=msgList" json:"msgList,omitempty"`
	BrandInfo              *BizBrandInfo                       `protobuf:"bytes,5,opt,name=brandInfo" json:"brandInfo,omitempty"`
	VideoList              *BizMessageList                     `protobuf:"bytes,6,opt,name=videoList" json:"videoList,omitempty"`
	ServiceInfo            *BizServiceInfo                     `protobuf:"bytes,7,opt,name=serviceInfo" json:"serviceInfo,omitempty"`
	FuncFlag               *uint32                             `protobuf:"varint,8,opt,name=funcFlag" json:"funcFlag,omitempty"`
	FuncFlagWording        []*BizProfileV2Resp_FuncFlagDesc    `protobuf:"bytes,9,rep,name=funcFlagWording" json:"funcFlagWording,omitempty"`
	VideochannelNotifyInfo *BizProfileV2Resp_ProfileNotifyInfo `protobuf:"bytes,10,opt,name=videochannelNotifyInfo" json:"videochannelNotifyInfo,omitempty"`
}

func (x *BizProfileV2Resp) Reset() {
	*x = BizProfileV2Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizProfileV2Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizProfileV2Resp) ProtoMessage() {}

func (x *BizProfileV2Resp) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizProfileV2Resp.ProtoReflect.Descriptor instead.
func (*BizProfileV2Resp) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{292}
}

func (x *BizProfileV2Resp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *BizProfileV2Resp) GetAccountInfo() *BizAccountInfo {
	if x != nil {
		return x.AccountInfo
	}
	return nil
}

func (x *BizProfileV2Resp) GetBaseInfo() *BizBaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *BizProfileV2Resp) GetMsgList() *BizMessageList {
	if x != nil {
		return x.MsgList
	}
	return nil
}

func (x *BizProfileV2Resp) GetBrandInfo() *BizBrandInfo {
	if x != nil {
		return x.BrandInfo
	}
	return nil
}

func (x *BizProfileV2Resp) GetVideoList() *BizMessageList {
	if x != nil {
		return x.VideoList
	}
	return nil
}

func (x *BizProfileV2Resp) GetServiceInfo() *BizServiceInfo {
	if x != nil {
		return x.ServiceInfo
	}
	return nil
}

func (x *BizProfileV2Resp) GetFuncFlag() uint32 {
	if x != nil && x.FuncFlag != nil {
		return *x.FuncFlag
	}
	return 0
}

func (x *BizProfileV2Resp) GetFuncFlagWording() []*BizProfileV2Resp_FuncFlagDesc {
	if x != nil {
		return x.FuncFlagWording
	}
	return nil
}

func (x *BizProfileV2Resp) GetVideochannelNotifyInfo() *BizProfileV2Resp_ProfileNotifyInfo {
	if x != nil {
		return x.VideochannelNotifyInfo
	}
	return nil
}

type BizProfileV2Resp_FuncFlagDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FuncFlag *uint32 `protobuf:"varint,1,opt,name=funcFlag" json:"funcFlag,omitempty"`
	Wording  *string `protobuf:"bytes,2,opt,name=wording" json:"wording,omitempty"`
}

func (x *BizProfileV2Resp_FuncFlagDesc) Reset() {
	*x = BizProfileV2Resp_FuncFlagDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizProfileV2Resp_FuncFlagDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizProfileV2Resp_FuncFlagDesc) ProtoMessage() {}

func (x *BizProfileV2Resp_FuncFlagDesc) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizProfileV2Resp_FuncFlagDesc.ProtoReflect.Descriptor instead.
func (*BizProfileV2Resp_FuncFlagDesc) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{293}
}

func (x *BizProfileV2Resp_FuncFlagDesc) GetFuncFlag() uint32 {
	if x != nil && x.FuncFlag != nil {
		return *x.FuncFlag
	}
	return 0
}

func (x *BizProfileV2Resp_FuncFlagDesc) GetWording() string {
	if x != nil && x.Wording != nil {
		return *x.Wording
	}
	return ""
}

type BizAccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName    *string `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
	BanType     *uint32 `protobuf:"varint,2,opt,name=banType" json:"banType,omitempty"`
	BanReason   *string `protobuf:"bytes,3,opt,name=banReason" json:"banReason,omitempty"`
	UserRole    *uint32 `protobuf:"varint,4,opt,name=userRole" json:"userRole,omitempty"`
	ServiceType *uint32 `protobuf:"varint,5,opt,name=serviceType" json:"serviceType,omitempty"`
}

func (x *BizAccountInfo) Reset() {
	*x = BizAccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizAccountInfo) ProtoMessage() {}

func (x *BizAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizAccountInfo.ProtoReflect.Descriptor instead.
func (*BizAccountInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{294}
}

func (x *BizAccountInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *BizAccountInfo) GetBanType() uint32 {
	if x != nil && x.BanType != nil {
		return *x.BanType
	}
	return 0
}

func (x *BizAccountInfo) GetBanReason() string {
	if x != nil && x.BanReason != nil {
		return *x.BanReason
	}
	return ""
}

func (x *BizAccountInfo) GetUserRole() uint32 {
	if x != nil && x.UserRole != nil {
		return *x.UserRole
	}
	return 0
}

func (x *BizAccountInfo) GetServiceType() uint32 {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return 0
}

type BizBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalArticleCount *uint32 `protobuf:"varint,1,opt,name=originalArticleCount" json:"originalArticleCount,omitempty"`
	FriendSubscribeCount *uint32 `protobuf:"varint,2,opt,name=friendSubscribeCount" json:"friendSubscribeCount,omitempty"`
	IsSubscribed         *uint32 `protobuf:"varint,3,opt,name=isSubscribed" json:"isSubscribed,omitempty"`
	OriginalContentStr   *string `protobuf:"bytes,4,opt,name=originalContentStr" json:"originalContentStr,omitempty"`
	FriendSubscribeStr   *string `protobuf:"bytes,5,opt,name=friendSubscribeStr" json:"friendSubscribeStr,omitempty"`
}

func (x *BizBaseInfo) Reset() {
	*x = BizBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizBaseInfo) ProtoMessage() {}

func (x *BizBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizBaseInfo.ProtoReflect.Descriptor instead.
func (*BizBaseInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{295}
}

func (x *BizBaseInfo) GetOriginalArticleCount() uint32 {
	if x != nil && x.OriginalArticleCount != nil {
		return *x.OriginalArticleCount
	}
	return 0
}

func (x *BizBaseInfo) GetFriendSubscribeCount() uint32 {
	if x != nil && x.FriendSubscribeCount != nil {
		return *x.FriendSubscribeCount
	}
	return 0
}

func (x *BizBaseInfo) GetIsSubscribed() uint32 {
	if x != nil && x.IsSubscribed != nil {
		return *x.IsSubscribed
	}
	return 0
}

func (x *BizBaseInfo) GetOriginalContentStr() string {
	if x != nil && x.OriginalContentStr != nil {
		return *x.OriginalContentStr
	}
	return ""
}

func (x *BizBaseInfo) GetFriendSubscribeStr() string {
	if x != nil && x.FriendSubscribeStr != nil {
		return *x.FriendSubscribeStr
	}
	return ""
}

type BizMessageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg        [][]byte                `protobuf:"bytes,1,rep,name=msg" json:"msg,omitempty"`
	PagingInfo *BizProfileV2PagingInfo `protobuf:"bytes,2,opt,name=pagingInfo" json:"pagingInfo,omitempty"`
}

func (x *BizMessageList) Reset() {
	*x = BizMessageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizMessageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizMessageList) ProtoMessage() {}

func (x *BizMessageList) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizMessageList.ProtoReflect.Descriptor instead.
func (*BizMessageList) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{296}
}

func (x *BizMessageList) GetMsg() [][]byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *BizMessageList) GetPagingInfo() *BizProfileV2PagingInfo {
	if x != nil {
		return x.PagingInfo
	}
	return nil
}

type BizProfileV2PagingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset []byte  `protobuf:"bytes,1,opt,name=offset" json:"offset,omitempty"`
	IsEnd  *uint32 `protobuf:"varint,2,opt,name=isEnd" json:"isEnd,omitempty"`
}

func (x *BizProfileV2PagingInfo) Reset() {
	*x = BizProfileV2PagingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizProfileV2PagingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizProfileV2PagingInfo) ProtoMessage() {}

func (x *BizProfileV2PagingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizProfileV2PagingInfo.ProtoReflect.Descriptor instead.
func (*BizProfileV2PagingInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{297}
}

func (x *BizProfileV2PagingInfo) GetOffset() []byte {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *BizProfileV2PagingInfo) GetIsEnd() uint32 {
	if x != nil && x.IsEnd != nil {
		return *x.IsEnd
	}
	return 0
}

type BizBrandInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrandBlock [][]byte `protobuf:"bytes,1,rep,name=brandBlock" json:"brandBlock,omitempty"`
}

func (x *BizBrandInfo) Reset() {
	*x = BizBrandInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizBrandInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizBrandInfo) ProtoMessage() {}

func (x *BizBrandInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizBrandInfo.ProtoReflect.Descriptor instead.
func (*BizBrandInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{298}
}

func (x *BizBrandInfo) GetBrandBlock() [][]byte {
	if x != nil {
		return x.BrandBlock
	}
	return nil
}

type BizServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuInfo *BizServiceMenu `protobuf:"bytes,1,opt,name=menuInfo" json:"menuInfo,omitempty"`
}

func (x *BizServiceInfo) Reset() {
	*x = BizServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizServiceInfo) ProtoMessage() {}

func (x *BizServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizServiceInfo.ProtoReflect.Descriptor instead.
func (*BizServiceInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{299}
}

func (x *BizServiceInfo) GetMenuInfo() *BizServiceMenu {
	if x != nil {
		return x.MenuInfo
	}
	return nil
}

type BizServiceMenu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin             *uint32                 `protobuf:"varint,1,opt,name=uin" json:"uin,omitempty"`
	InteractiveMode *uint32                 `protobuf:"varint,2,opt,name=interactiveMode" json:"interactiveMode,omitempty"`
	UpdateTime      *uint32                 `protobuf:"varint,3,opt,name=updateTime" json:"updateTime,omitempty"`
	ButtonList      []*BizServiceMenuButton `protobuf:"bytes,4,rep,name=buttonList" json:"buttonList,omitempty"`
	Version         *uint32                 `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	Type            *uint32                 `protobuf:"varint,6,opt,name=type" json:"type,omitempty"`
}

func (x *BizServiceMenu) Reset() {
	*x = BizServiceMenu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizServiceMenu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizServiceMenu) ProtoMessage() {}

func (x *BizServiceMenu) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizServiceMenu.ProtoReflect.Descriptor instead.
func (*BizServiceMenu) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{300}
}

func (x *BizServiceMenu) GetUin() uint32 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *BizServiceMenu) GetInteractiveMode() uint32 {
	if x != nil && x.InteractiveMode != nil {
		return *x.InteractiveMode
	}
	return 0
}

func (x *BizServiceMenu) GetUpdateTime() uint32 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *BizServiceMenu) GetButtonList() []*BizServiceMenuButton {
	if x != nil {
		return x.ButtonList
	}
	return nil
}

func (x *BizServiceMenu) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *BizServiceMenu) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type BizServiceMenuButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type          *uint32  `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Name          *string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Key           *string  `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	Value         *string  `protobuf:"bytes,5,opt,name=value" json:"value,omitempty"`
	SubButtonList [][]byte `protobuf:"bytes,6,rep,name=subButtonList" json:"subButtonList,omitempty"`
	Acttype       *uint32  `protobuf:"varint,7,opt,name=acttype" json:"acttype,omitempty"`
	NativeUrl     *string  `protobuf:"bytes,8,opt,name=nativeUrl" json:"nativeUrl,omitempty"`
}

func (x *BizServiceMenuButton) Reset() {
	*x = BizServiceMenuButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizServiceMenuButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizServiceMenuButton) ProtoMessage() {}

func (x *BizServiceMenuButton) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizServiceMenuButton.ProtoReflect.Descriptor instead.
func (*BizServiceMenuButton) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{301}
}

func (x *BizServiceMenuButton) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BizServiceMenuButton) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *BizServiceMenuButton) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BizServiceMenuButton) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *BizServiceMenuButton) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *BizServiceMenuButton) GetSubButtonList() [][]byte {
	if x != nil {
		return x.SubButtonList
	}
	return nil
}

func (x *BizServiceMenuButton) GetActtype() uint32 {
	if x != nil && x.Acttype != nil {
		return *x.Acttype
	}
	return 0
}

func (x *BizServiceMenuButton) GetNativeUrl() string {
	if x != nil && x.NativeUrl != nil {
		return *x.NativeUrl
	}
	return ""
}

type BizProfileV2Resp_ProfileNotifyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyList  [][]byte `protobuf:"bytes,1,rep,name=notifyList" json:"notifyList,omitempty"`
	NSString    *string  `protobuf:"bytes,2,opt,name=NSString" json:"NSString,omitempty"`
	EntryTitle  *string  `protobuf:"bytes,3,opt,name=entryTitle" json:"entryTitle,omitempty"`
	JumpUrl     *string  `protobuf:"bytes,4,opt,name=jumpUrl" json:"jumpUrl,omitempty"`
	IsEntryOpen *uint32  `protobuf:"varint,5,opt,name=isEntryOpen" json:"isEntryOpen,omitempty"`
}

func (x *BizProfileV2Resp_ProfileNotifyInfo) Reset() {
	*x = BizProfileV2Resp_ProfileNotifyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizProfileV2Resp_ProfileNotifyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizProfileV2Resp_ProfileNotifyInfo) ProtoMessage() {}

func (x *BizProfileV2Resp_ProfileNotifyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizProfileV2Resp_ProfileNotifyInfo.ProtoReflect.Descriptor instead.
func (*BizProfileV2Resp_ProfileNotifyInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{302}
}

func (x *BizProfileV2Resp_ProfileNotifyInfo) GetNotifyList() [][]byte {
	if x != nil {
		return x.NotifyList
	}
	return nil
}

func (x *BizProfileV2Resp_ProfileNotifyInfo) GetNSString() string {
	if x != nil && x.NSString != nil {
		return *x.NSString
	}
	return ""
}

func (x *BizProfileV2Resp_ProfileNotifyInfo) GetEntryTitle() string {
	if x != nil && x.EntryTitle != nil {
		return *x.EntryTitle
	}
	return ""
}

func (x *BizProfileV2Resp_ProfileNotifyInfo) GetJumpUrl() string {
	if x != nil && x.JumpUrl != nil {
		return *x.JumpUrl
	}
	return ""
}

func (x *BizProfileV2Resp_ProfileNotifyInfo) GetIsEntryOpen() uint32 {
	if x != nil && x.IsEntryOpen != nil {
		return *x.IsEntryOpen
	}
	return 0
}

type ExtDeviceLoginConfirmGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginUrl   *string `protobuf:"bytes,1,opt,name=loginUrl" json:"loginUrl,omitempty"`
	DeviceName *string `protobuf:"bytes,2,opt,name=deviceName" json:"deviceName,omitempty"`
}

func (x *ExtDeviceLoginConfirmGetRequest) Reset() {
	*x = ExtDeviceLoginConfirmGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtDeviceLoginConfirmGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtDeviceLoginConfirmGetRequest) ProtoMessage() {}

func (x *ExtDeviceLoginConfirmGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtDeviceLoginConfirmGetRequest.ProtoReflect.Descriptor instead.
func (*ExtDeviceLoginConfirmGetRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{303}
}

func (x *ExtDeviceLoginConfirmGetRequest) GetLoginUrl() string {
	if x != nil && x.LoginUrl != nil {
		return *x.LoginUrl
	}
	return ""
}

func (x *ExtDeviceLoginConfirmGetRequest) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

type ExtDeviceLoginConfirmGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse       *BaseResponse                    `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	Okret              *ExtDeviceLoginConfirmOKRet      `protobuf:"bytes,2,opt,name=okret" json:"okret,omitempty"`
	ErrorRet           *ExtDeviceLoginConfirmErrorRet   `protobuf:"bytes,3,opt,name=errorRet" json:"errorRet,omitempty"`
	ExpiredRet         *ExtDeviceLoginConfirmExpiredRet `protobuf:"bytes,4,opt,name=expiredRet" json:"expiredRet,omitempty"`
	DeviceNameStr      *string                          `protobuf:"bytes,5,opt,name=deviceNameStr" json:"deviceNameStr,omitempty"`
	LoginClientVersion *uint32                          `protobuf:"varint,6,opt,name=loginClientVersion" json:"loginClientVersion,omitempty"`
	FuncCtrl           *uint32                          `protobuf:"varint,7,opt,name=funcCtrl" json:"funcCtrl,omitempty"`
}

func (x *ExtDeviceLoginConfirmGetResponse) Reset() {
	*x = ExtDeviceLoginConfirmGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtDeviceLoginConfirmGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtDeviceLoginConfirmGetResponse) ProtoMessage() {}

func (x *ExtDeviceLoginConfirmGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtDeviceLoginConfirmGetResponse.ProtoReflect.Descriptor instead.
func (*ExtDeviceLoginConfirmGetResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{304}
}

func (x *ExtDeviceLoginConfirmGetResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *ExtDeviceLoginConfirmGetResponse) GetOkret() *ExtDeviceLoginConfirmOKRet {
	if x != nil {
		return x.Okret
	}
	return nil
}

func (x *ExtDeviceLoginConfirmGetResponse) GetErrorRet() *ExtDeviceLoginConfirmErrorRet {
	if x != nil {
		return x.ErrorRet
	}
	return nil
}

func (x *ExtDeviceLoginConfirmGetResponse) GetExpiredRet() *ExtDeviceLoginConfirmExpiredRet {
	if x != nil {
		return x.ExpiredRet
	}
	return nil
}

func (x *ExtDeviceLoginConfirmGetResponse) GetDeviceNameStr() string {
	if x != nil && x.DeviceNameStr != nil {
		return *x.DeviceNameStr
	}
	return ""
}

func (x *ExtDeviceLoginConfirmGetResponse) GetLoginClientVersion() uint32 {
	if x != nil && x.LoginClientVersion != nil {
		return *x.LoginClientVersion
	}
	return 0
}

func (x *ExtDeviceLoginConfirmGetResponse) GetFuncCtrl() uint32 {
	if x != nil && x.FuncCtrl != nil {
		return *x.FuncCtrl
	}
	return 0
}

type ExtDeviceLoginConfirmOKRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconType        *uint32 `protobuf:"varint,1,opt,name=iconType" json:"iconType,omitempty"`
	ContentStr      *string `protobuf:"bytes,2,opt,name=contentStr" json:"contentStr,omitempty"`
	ButtonOkStr     *string `protobuf:"bytes,3,opt,name=buttonOkStr" json:"buttonOkStr,omitempty"`
	ButtonCancelStr *string `protobuf:"bytes,4,opt,name=buttonCancelStr" json:"buttonCancelStr,omitempty"`
	ReqSessionLimit *uint32 `protobuf:"varint,5,opt,name=reqSessionLimit" json:"reqSessionLimit,omitempty"`
	ConfirmTimeOut  *uint32 `protobuf:"varint,6,opt,name=confirmTimeOut" json:"confirmTimeOut,omitempty"`
	LoginedDevTip   *string `protobuf:"bytes,7,opt,name=loginedDevTip" json:"loginedDevTip,omitempty"`
	TitleStr        *string `protobuf:"bytes,8,opt,name=titleStr" json:"titleStr,omitempty"`
	WarningStr      *string `protobuf:"bytes,9,opt,name=warningStr" json:"warningStr,omitempty"`
	UsageLink       *string `protobuf:"bytes,10,opt,name=usageLink" json:"usageLink,omitempty"`
}

func (x *ExtDeviceLoginConfirmOKRet) Reset() {
	*x = ExtDeviceLoginConfirmOKRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtDeviceLoginConfirmOKRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtDeviceLoginConfirmOKRet) ProtoMessage() {}

func (x *ExtDeviceLoginConfirmOKRet) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtDeviceLoginConfirmOKRet.ProtoReflect.Descriptor instead.
func (*ExtDeviceLoginConfirmOKRet) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{305}
}

func (x *ExtDeviceLoginConfirmOKRet) GetIconType() uint32 {
	if x != nil && x.IconType != nil {
		return *x.IconType
	}
	return 0
}

func (x *ExtDeviceLoginConfirmOKRet) GetContentStr() string {
	if x != nil && x.ContentStr != nil {
		return *x.ContentStr
	}
	return ""
}

func (x *ExtDeviceLoginConfirmOKRet) GetButtonOkStr() string {
	if x != nil && x.ButtonOkStr != nil {
		return *x.ButtonOkStr
	}
	return ""
}

func (x *ExtDeviceLoginConfirmOKRet) GetButtonCancelStr() string {
	if x != nil && x.ButtonCancelStr != nil {
		return *x.ButtonCancelStr
	}
	return ""
}

func (x *ExtDeviceLoginConfirmOKRet) GetReqSessionLimit() uint32 {
	if x != nil && x.ReqSessionLimit != nil {
		return *x.ReqSessionLimit
	}
	return 0
}

func (x *ExtDeviceLoginConfirmOKRet) GetConfirmTimeOut() uint32 {
	if x != nil && x.ConfirmTimeOut != nil {
		return *x.ConfirmTimeOut
	}
	return 0
}

func (x *ExtDeviceLoginConfirmOKRet) GetLoginedDevTip() string {
	if x != nil && x.LoginedDevTip != nil {
		return *x.LoginedDevTip
	}
	return ""
}

func (x *ExtDeviceLoginConfirmOKRet) GetTitleStr() string {
	if x != nil && x.TitleStr != nil {
		return *x.TitleStr
	}
	return ""
}

func (x *ExtDeviceLoginConfirmOKRet) GetWarningStr() string {
	if x != nil && x.WarningStr != nil {
		return *x.WarningStr
	}
	return ""
}

func (x *ExtDeviceLoginConfirmOKRet) GetUsageLink() string {
	if x != nil && x.UsageLink != nil {
		return *x.UsageLink
	}
	return ""
}

type ExtDeviceLoginConfirmErrorRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconType   *uint32 `protobuf:"varint,1,opt,name=iconType" json:"iconType,omitempty"`
	ContentStr *string `protobuf:"bytes,2,opt,name=contentStr" json:"contentStr,omitempty"`
}

func (x *ExtDeviceLoginConfirmErrorRet) Reset() {
	*x = ExtDeviceLoginConfirmErrorRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtDeviceLoginConfirmErrorRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtDeviceLoginConfirmErrorRet) ProtoMessage() {}

func (x *ExtDeviceLoginConfirmErrorRet) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtDeviceLoginConfirmErrorRet.ProtoReflect.Descriptor instead.
func (*ExtDeviceLoginConfirmErrorRet) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{306}
}

func (x *ExtDeviceLoginConfirmErrorRet) GetIconType() uint32 {
	if x != nil && x.IconType != nil {
		return *x.IconType
	}
	return 0
}

func (x *ExtDeviceLoginConfirmErrorRet) GetContentStr() string {
	if x != nil && x.ContentStr != nil {
		return *x.ContentStr
	}
	return ""
}

type ExtDeviceLoginConfirmExpiredRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconType   *uint32 `protobuf:"varint,1,opt,name=iconType" json:"iconType,omitempty"`
	ContentStr *string `protobuf:"bytes,2,opt,name=contentStr" json:"contentStr,omitempty"`
	ButtonStr  *string `protobuf:"bytes,3,opt,name=buttonStr" json:"buttonStr,omitempty"`
}

func (x *ExtDeviceLoginConfirmExpiredRet) Reset() {
	*x = ExtDeviceLoginConfirmExpiredRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtDeviceLoginConfirmExpiredRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtDeviceLoginConfirmExpiredRet) ProtoMessage() {}

func (x *ExtDeviceLoginConfirmExpiredRet) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtDeviceLoginConfirmExpiredRet.ProtoReflect.Descriptor instead.
func (*ExtDeviceLoginConfirmExpiredRet) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{307}
}

func (x *ExtDeviceLoginConfirmExpiredRet) GetIconType() uint32 {
	if x != nil && x.IconType != nil {
		return *x.IconType
	}
	return 0
}

func (x *ExtDeviceLoginConfirmExpiredRet) GetContentStr() string {
	if x != nil && x.ContentStr != nil {
		return *x.ContentStr
	}
	return ""
}

func (x *ExtDeviceLoginConfirmExpiredRet) GetButtonStr() string {
	if x != nil && x.ButtonStr != nil {
		return *x.ButtonStr
	}
	return ""
}

type ExtDeviceLoginConfirmOKRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginUrl              *string  `protobuf:"bytes,1,opt,name=loginUrl" json:"loginUrl,omitempty"`
	SessionList           *string  `protobuf:"bytes,2,opt,name=sessionList" json:"sessionList,omitempty"`
	UnReadChatContactList []string `protobuf:"bytes,3,rep,name=unReadChatContactList" json:"unReadChatContactList,omitempty"`
	SyncMsg               *uint64  `protobuf:"varint,4,opt,name=syncMsg" json:"syncMsg,omitempty"`
}

func (x *ExtDeviceLoginConfirmOKRequest) Reset() {
	*x = ExtDeviceLoginConfirmOKRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtDeviceLoginConfirmOKRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtDeviceLoginConfirmOKRequest) ProtoMessage() {}

func (x *ExtDeviceLoginConfirmOKRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtDeviceLoginConfirmOKRequest.ProtoReflect.Descriptor instead.
func (*ExtDeviceLoginConfirmOKRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{308}
}

func (x *ExtDeviceLoginConfirmOKRequest) GetLoginUrl() string {
	if x != nil && x.LoginUrl != nil {
		return *x.LoginUrl
	}
	return ""
}

func (x *ExtDeviceLoginConfirmOKRequest) GetSessionList() string {
	if x != nil && x.SessionList != nil {
		return *x.SessionList
	}
	return ""
}

func (x *ExtDeviceLoginConfirmOKRequest) GetUnReadChatContactList() []string {
	if x != nil {
		return x.UnReadChatContactList
	}
	return nil
}

func (x *ExtDeviceLoginConfirmOKRequest) GetSyncMsg() uint64 {
	if x != nil && x.SyncMsg != nil {
		return *x.SyncMsg
	}
	return 0
}

type ExtDeviceLoginConfirmOKResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse     *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	MsgContextPubKey []byte        `protobuf:"bytes,2,opt,name=msgContextPubKey" json:"msgContextPubKey,omitempty"`
}

func (x *ExtDeviceLoginConfirmOKResponse) Reset() {
	*x = ExtDeviceLoginConfirmOKResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtDeviceLoginConfirmOKResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtDeviceLoginConfirmOKResponse) ProtoMessage() {}

func (x *ExtDeviceLoginConfirmOKResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtDeviceLoginConfirmOKResponse.ProtoReflect.Descriptor instead.
func (*ExtDeviceLoginConfirmOKResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{309}
}

func (x *ExtDeviceLoginConfirmOKResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *ExtDeviceLoginConfirmOKResponse) GetMsgContextPubKey() []byte {
	if x != nil {
		return x.MsgContextPubKey
	}
	return nil
}

type UploadVideoReques struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest          *BaseRequest      `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	ClientMsgId          *string           `protobuf:"bytes,2,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	FromUserName         *string           `protobuf:"bytes,3,opt,name=fromUserName" json:"fromUserName,omitempty"`
	ToUserName           *string           `protobuf:"bytes,4,opt,name=toUserName" json:"toUserName,omitempty"`
	ThumbTotalLen        *uint32           `protobuf:"varint,5,opt,name=thumbTotalLen" json:"thumbTotalLen,omitempty"`
	ThumbStartPos        *uint32           `protobuf:"varint,6,opt,name=thumbStartPos" json:"thumbStartPos,omitempty"`
	ThumbData            *SKBuiltinBufferT `protobuf:"bytes,7,opt,name=thumbData" json:"thumbData,omitempty"`
	VideoTotalLen        *uint32           `protobuf:"varint,8,opt,name=videoTotalLen" json:"videoTotalLen,omitempty"`
	VideoStartPos        *uint32           `protobuf:"varint,9,opt,name=videoStartPos" json:"videoStartPos,omitempty"`
	VideoData            *SKBuiltinBufferT `protobuf:"bytes,10,opt,name=videoData" json:"videoData,omitempty"`
	PlayLength           *uint32           `protobuf:"varint,11,opt,name=playLength" json:"playLength,omitempty"`
	NetworkEnv           *uint32           `protobuf:"varint,12,opt,name=networkEnv" json:"networkEnv,omitempty"`
	CameraType           *uint32           `protobuf:"varint,13,opt,name=cameraType" json:"cameraType,omitempty"`
	FuncFlag             *uint32           `protobuf:"varint,14,opt,name=funcFlag" json:"funcFlag,omitempty"`
	MsgSource            *string           `protobuf:"bytes,15,opt,name=msgSource" json:"msgSource,omitempty"`
	CdnvideoUrl          *string           `protobuf:"bytes,16,opt,name=cdnvideoUrl" json:"cdnvideoUrl,omitempty"`
	Aeskey               *string           `protobuf:"bytes,17,opt,name=aeskey" json:"aeskey,omitempty"`
	EncryVer             *uint32           `protobuf:"varint,18,opt,name=encryVer" json:"encryVer,omitempty"`
	CdnthumbUrl          *string           `protobuf:"bytes,19,opt,name=cdnthumbUrl" json:"cdnthumbUrl,omitempty"`
	CdnthumbImgSize      *uint32           `protobuf:"varint,20,opt,name=cdnthumbImgSize" json:"cdnthumbImgSize,omitempty"`
	CdnthumbImgHeight    *uint32           `protobuf:"varint,21,opt,name=cdnthumbImgHeight" json:"cdnthumbImgHeight,omitempty"`
	CdnthumbImgWidth     *uint32           `protobuf:"varint,22,opt,name=cdnthumbImgWidth" json:"cdnthumbImgWidth,omitempty"`
	CdnthumbAeskey       *string           `protobuf:"bytes,23,opt,name=cdnthumbAeskey" json:"cdnthumbAeskey,omitempty"`
	VideoFrom            *int32            `protobuf:"varint,24,opt,name=videoFrom" json:"videoFrom,omitempty"`
	ReqTime              *int64            `protobuf:"varint,25,opt,name=reqTime" json:"reqTime,omitempty"`
	VideoMd5             *string           `protobuf:"bytes,26,opt,name=videoMd5" json:"videoMd5,omitempty"`
	StreamVideoUrl       *string           `protobuf:"bytes,27,opt,name=streamVideoUrl" json:"streamVideoUrl,omitempty"`
	StreamVideoTotalTime *int64            `protobuf:"varint,28,opt,name=streamVideoTotalTime" json:"streamVideoTotalTime,omitempty"`
	StreamVideoTitle     *string           `protobuf:"bytes,29,opt,name=streamVideoTitle" json:"streamVideoTitle,omitempty"`
	StreamVideoWording   *string           `protobuf:"bytes,30,opt,name=streamVideoWording" json:"streamVideoWording,omitempty"`
	StreamVideoWebUrl    *string           `protobuf:"bytes,31,opt,name=streamVideoWebUrl" json:"streamVideoWebUrl,omitempty"`
	StreamVideoThumbUrl  *string           `protobuf:"bytes,32,opt,name=streamVideoThumbUrl" json:"streamVideoThumbUrl,omitempty"`
	StreamVideoPublishId *string           `protobuf:"bytes,33,opt,name=streamVideoPublishId" json:"streamVideoPublishId,omitempty"`
	StreamVideoAdUxInfo  *string           `protobuf:"bytes,34,opt,name=streamVideoAdUxInfo" json:"streamVideoAdUxInfo,omitempty"`
	StatExtStr           *string           `protobuf:"bytes,35,opt,name=statExtStr" json:"statExtStr,omitempty"`
	HitMd5               *uint32           `protobuf:"varint,36,opt,name=hitMd5" json:"hitMd5,omitempty"`
	VideoNewMd5          *string           `protobuf:"bytes,37,opt,name=videoNewMd5" json:"videoNewMd5,omitempty"`
	Crc32                *int64            `protobuf:"varint,38,opt,name=crc32" json:"crc32,omitempty"`
	MsgForwardType       *int64            `protobuf:"varint,39,opt,name=msgForwardType" json:"msgForwardType,omitempty"`
	Source               *int64            `protobuf:"varint,40,opt,name=source" json:"source,omitempty"`
	SendMsgTicket        *string           `protobuf:"bytes,41,opt,name=sendMsgTicket" json:"sendMsgTicket,omitempty"`
}

func (x *UploadVideoReques) Reset() {
	*x = UploadVideoReques{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadVideoReques) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadVideoReques) ProtoMessage() {}

func (x *UploadVideoReques) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadVideoReques.ProtoReflect.Descriptor instead.
func (*UploadVideoReques) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{310}
}

func (x *UploadVideoReques) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *UploadVideoReques) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *UploadVideoReques) GetFromUserName() string {
	if x != nil && x.FromUserName != nil {
		return *x.FromUserName
	}
	return ""
}

func (x *UploadVideoReques) GetToUserName() string {
	if x != nil && x.ToUserName != nil {
		return *x.ToUserName
	}
	return ""
}

func (x *UploadVideoReques) GetThumbTotalLen() uint32 {
	if x != nil && x.ThumbTotalLen != nil {
		return *x.ThumbTotalLen
	}
	return 0
}

func (x *UploadVideoReques) GetThumbStartPos() uint32 {
	if x != nil && x.ThumbStartPos != nil {
		return *x.ThumbStartPos
	}
	return 0
}

func (x *UploadVideoReques) GetThumbData() *SKBuiltinBufferT {
	if x != nil {
		return x.ThumbData
	}
	return nil
}

func (x *UploadVideoReques) GetVideoTotalLen() uint32 {
	if x != nil && x.VideoTotalLen != nil {
		return *x.VideoTotalLen
	}
	return 0
}

func (x *UploadVideoReques) GetVideoStartPos() uint32 {
	if x != nil && x.VideoStartPos != nil {
		return *x.VideoStartPos
	}
	return 0
}

func (x *UploadVideoReques) GetVideoData() *SKBuiltinBufferT {
	if x != nil {
		return x.VideoData
	}
	return nil
}

func (x *UploadVideoReques) GetPlayLength() uint32 {
	if x != nil && x.PlayLength != nil {
		return *x.PlayLength
	}
	return 0
}

func (x *UploadVideoReques) GetNetworkEnv() uint32 {
	if x != nil && x.NetworkEnv != nil {
		return *x.NetworkEnv
	}
	return 0
}

func (x *UploadVideoReques) GetCameraType() uint32 {
	if x != nil && x.CameraType != nil {
		return *x.CameraType
	}
	return 0
}

func (x *UploadVideoReques) GetFuncFlag() uint32 {
	if x != nil && x.FuncFlag != nil {
		return *x.FuncFlag
	}
	return 0
}

func (x *UploadVideoReques) GetMsgSource() string {
	if x != nil && x.MsgSource != nil {
		return *x.MsgSource
	}
	return ""
}

func (x *UploadVideoReques) GetCdnvideoUrl() string {
	if x != nil && x.CdnvideoUrl != nil {
		return *x.CdnvideoUrl
	}
	return ""
}

func (x *UploadVideoReques) GetAeskey() string {
	if x != nil && x.Aeskey != nil {
		return *x.Aeskey
	}
	return ""
}

func (x *UploadVideoReques) GetEncryVer() uint32 {
	if x != nil && x.EncryVer != nil {
		return *x.EncryVer
	}
	return 0
}

func (x *UploadVideoReques) GetCdnthumbUrl() string {
	if x != nil && x.CdnthumbUrl != nil {
		return *x.CdnthumbUrl
	}
	return ""
}

func (x *UploadVideoReques) GetCdnthumbImgSize() uint32 {
	if x != nil && x.CdnthumbImgSize != nil {
		return *x.CdnthumbImgSize
	}
	return 0
}

func (x *UploadVideoReques) GetCdnthumbImgHeight() uint32 {
	if x != nil && x.CdnthumbImgHeight != nil {
		return *x.CdnthumbImgHeight
	}
	return 0
}

func (x *UploadVideoReques) GetCdnthumbImgWidth() uint32 {
	if x != nil && x.CdnthumbImgWidth != nil {
		return *x.CdnthumbImgWidth
	}
	return 0
}

func (x *UploadVideoReques) GetCdnthumbAeskey() string {
	if x != nil && x.CdnthumbAeskey != nil {
		return *x.CdnthumbAeskey
	}
	return ""
}

func (x *UploadVideoReques) GetVideoFrom() int32 {
	if x != nil && x.VideoFrom != nil {
		return *x.VideoFrom
	}
	return 0
}

func (x *UploadVideoReques) GetReqTime() int64 {
	if x != nil && x.ReqTime != nil {
		return *x.ReqTime
	}
	return 0
}

func (x *UploadVideoReques) GetVideoMd5() string {
	if x != nil && x.VideoMd5 != nil {
		return *x.VideoMd5
	}
	return ""
}

func (x *UploadVideoReques) GetStreamVideoUrl() string {
	if x != nil && x.StreamVideoUrl != nil {
		return *x.StreamVideoUrl
	}
	return ""
}

func (x *UploadVideoReques) GetStreamVideoTotalTime() int64 {
	if x != nil && x.StreamVideoTotalTime != nil {
		return *x.StreamVideoTotalTime
	}
	return 0
}

func (x *UploadVideoReques) GetStreamVideoTitle() string {
	if x != nil && x.StreamVideoTitle != nil {
		return *x.StreamVideoTitle
	}
	return ""
}

func (x *UploadVideoReques) GetStreamVideoWording() string {
	if x != nil && x.StreamVideoWording != nil {
		return *x.StreamVideoWording
	}
	return ""
}

func (x *UploadVideoReques) GetStreamVideoWebUrl() string {
	if x != nil && x.StreamVideoWebUrl != nil {
		return *x.StreamVideoWebUrl
	}
	return ""
}

func (x *UploadVideoReques) GetStreamVideoThumbUrl() string {
	if x != nil && x.StreamVideoThumbUrl != nil {
		return *x.StreamVideoThumbUrl
	}
	return ""
}

func (x *UploadVideoReques) GetStreamVideoPublishId() string {
	if x != nil && x.StreamVideoPublishId != nil {
		return *x.StreamVideoPublishId
	}
	return ""
}

func (x *UploadVideoReques) GetStreamVideoAdUxInfo() string {
	if x != nil && x.StreamVideoAdUxInfo != nil {
		return *x.StreamVideoAdUxInfo
	}
	return ""
}

func (x *UploadVideoReques) GetStatExtStr() string {
	if x != nil && x.StatExtStr != nil {
		return *x.StatExtStr
	}
	return ""
}

func (x *UploadVideoReques) GetHitMd5() uint32 {
	if x != nil && x.HitMd5 != nil {
		return *x.HitMd5
	}
	return 0
}

func (x *UploadVideoReques) GetVideoNewMd5() string {
	if x != nil && x.VideoNewMd5 != nil {
		return *x.VideoNewMd5
	}
	return ""
}

func (x *UploadVideoReques) GetCrc32() int64 {
	if x != nil && x.Crc32 != nil {
		return *x.Crc32
	}
	return 0
}

func (x *UploadVideoReques) GetMsgForwardType() int64 {
	if x != nil && x.MsgForwardType != nil {
		return *x.MsgForwardType
	}
	return 0
}

func (x *UploadVideoReques) GetSource() int64 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *UploadVideoReques) GetSendMsgTicket() string {
	if x != nil && x.SendMsgTicket != nil {
		return *x.SendMsgTicket
	}
	return ""
}

type UploadVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse  *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	ClientMsgId   *string       `protobuf:"bytes,2,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	MsgId         *int64        `protobuf:"varint,3,opt,name=msgId" json:"msgId,omitempty"`
	ThumbStartPos *int64        `protobuf:"varint,4,opt,name=thumbStartPos" json:"thumbStartPos,omitempty"`
	VideoStartPos *int64        `protobuf:"varint,5,opt,name=videoStartPos" json:"videoStartPos,omitempty"`
	NewMsgId      *uint64       `protobuf:"varint,6,opt,name=newMsgId" json:"newMsgId,omitempty"`
	Aeskey        *string       `protobuf:"bytes,7,opt,name=aeskey" json:"aeskey,omitempty"`
	MsgSource     *string       `protobuf:"bytes,8,opt,name=msgSource" json:"msgSource,omitempty"`
	ActionFlag    *int64        `protobuf:"varint,9,opt,name=actionFlag" json:"actionFlag,omitempty"`
}

func (x *UploadVideoResponse) Reset() {
	*x = UploadVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadVideoResponse) ProtoMessage() {}

func (x *UploadVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadVideoResponse.ProtoReflect.Descriptor instead.
func (*UploadVideoResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{311}
}

func (x *UploadVideoResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *UploadVideoResponse) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *UploadVideoResponse) GetMsgId() int64 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *UploadVideoResponse) GetThumbStartPos() int64 {
	if x != nil && x.ThumbStartPos != nil {
		return *x.ThumbStartPos
	}
	return 0
}

func (x *UploadVideoResponse) GetVideoStartPos() int64 {
	if x != nil && x.VideoStartPos != nil {
		return *x.VideoStartPos
	}
	return 0
}

func (x *UploadVideoResponse) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

func (x *UploadVideoResponse) GetAeskey() string {
	if x != nil && x.Aeskey != nil {
		return *x.Aeskey
	}
	return ""
}

func (x *UploadVideoResponse) GetMsgSource() string {
	if x != nil && x.MsgSource != nil {
		return *x.MsgSource
	}
	return ""
}

func (x *UploadVideoResponse) GetActionFlag() int64 {
	if x != nil && x.ActionFlag != nil {
		return *x.ActionFlag
	}
	return 0
}

type UploadDeviceStepReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	DeviceId    *string      `protobuf:"bytes,2,opt,name=deviceId" json:"deviceId,omitempty"`
	DeviceType  *string      `protobuf:"bytes,3,opt,name=deviceType" json:"deviceType,omitempty"`
	FromTime    *int64       `protobuf:"varint,4,opt,name=fromTime" json:"fromTime,omitempty"`
	ToTime      *int64       `protobuf:"varint,5,opt,name=toTime" json:"toTime,omitempty"`
	StepCount   *int64       `protobuf:"varint,6,opt,name=stepCount" json:"stepCount,omitempty"`
	SystemZone  *string      `protobuf:"bytes,7,opt,name=systemZone" json:"systemZone,omitempty"`
	Bundleid    *string      `protobuf:"bytes,8,opt,name=bundleid" json:"bundleid,omitempty"`
	Appname     *string      `protobuf:"bytes,9,opt,name=appname" json:"appname,omitempty"`
	M7StepCount *int64       `protobuf:"varint,10,opt,name=m7StepCount" json:"m7StepCount,omitempty"`
	PhoneModel  *int64       `protobuf:"varint,11,opt,name=phoneModel" json:"phoneModel,omitempty"`
	HkStepCount *int64       `protobuf:"varint,13,opt,name=hkStepCount" json:"hkStepCount,omitempty"`
}

func (x *UploadDeviceStepReq) Reset() {
	*x = UploadDeviceStepReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadDeviceStepReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDeviceStepReq) ProtoMessage() {}

func (x *UploadDeviceStepReq) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDeviceStepReq.ProtoReflect.Descriptor instead.
func (*UploadDeviceStepReq) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{312}
}

func (x *UploadDeviceStepReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *UploadDeviceStepReq) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *UploadDeviceStepReq) GetDeviceType() string {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return ""
}

func (x *UploadDeviceStepReq) GetFromTime() int64 {
	if x != nil && x.FromTime != nil {
		return *x.FromTime
	}
	return 0
}

func (x *UploadDeviceStepReq) GetToTime() int64 {
	if x != nil && x.ToTime != nil {
		return *x.ToTime
	}
	return 0
}

func (x *UploadDeviceStepReq) GetStepCount() int64 {
	if x != nil && x.StepCount != nil {
		return *x.StepCount
	}
	return 0
}

func (x *UploadDeviceStepReq) GetSystemZone() string {
	if x != nil && x.SystemZone != nil {
		return *x.SystemZone
	}
	return ""
}

func (x *UploadDeviceStepReq) GetBundleid() string {
	if x != nil && x.Bundleid != nil {
		return *x.Bundleid
	}
	return ""
}

func (x *UploadDeviceStepReq) GetAppname() string {
	if x != nil && x.Appname != nil {
		return *x.Appname
	}
	return ""
}

func (x *UploadDeviceStepReq) GetM7StepCount() int64 {
	if x != nil && x.M7StepCount != nil {
		return *x.M7StepCount
	}
	return 0
}

func (x *UploadDeviceStepReq) GetPhoneModel() int64 {
	if x != nil && x.PhoneModel != nil {
		return *x.PhoneModel
	}
	return 0
}

func (x *UploadDeviceStepReq) GetHkStepCount() int64 {
	if x != nil && x.HkStepCount != nil {
		return *x.HkStepCount
	}
	return 0
}

type UploadDeviceStepResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse    *BaseResponse      `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	WhiteListDevice []*SportDeviceInfo `protobuf:"bytes,2,rep,name=whiteListDevice" json:"whiteListDevice,omitempty"`
}

func (x *UploadDeviceStepResp) Reset() {
	*x = UploadDeviceStepResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadDeviceStepResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDeviceStepResp) ProtoMessage() {}

func (x *UploadDeviceStepResp) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDeviceStepResp.ProtoReflect.Descriptor instead.
func (*UploadDeviceStepResp) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{313}
}

func (x *UploadDeviceStepResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *UploadDeviceStepResp) GetWhiteListDevice() []*SportDeviceInfo {
	if x != nil {
		return x.WhiteListDevice
	}
	return nil
}

type SportDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundleId      *string `protobuf:"bytes,1,opt,name=bundleId" json:"bundleId,omitempty"`
	AppName       *string `protobuf:"bytes,2,opt,name=appName" json:"appName,omitempty"`
	StepCount     *int64  `protobuf:"varint,3,opt,name=stepCount" json:"stepCount,omitempty"`
	IsAppleWatch  *bool   `protobuf:"varint,4,opt,name=isAppleWatch" json:"isAppleWatch,omitempty"`
	IsWhiteList   *bool   `protobuf:"varint,5,opt,name=isWhiteList" json:"isWhiteList,omitempty"`
	IsLocalIphone *bool   `protobuf:"varint,6,opt,name=isLocalIphone" json:"isLocalIphone,omitempty"`
}

func (x *SportDeviceInfo) Reset() {
	*x = SportDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SportDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SportDeviceInfo) ProtoMessage() {}

func (x *SportDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SportDeviceInfo.ProtoReflect.Descriptor instead.
func (*SportDeviceInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{314}
}

func (x *SportDeviceInfo) GetBundleId() string {
	if x != nil && x.BundleId != nil {
		return *x.BundleId
	}
	return ""
}

func (x *SportDeviceInfo) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *SportDeviceInfo) GetStepCount() int64 {
	if x != nil && x.StepCount != nil {
		return *x.StepCount
	}
	return 0
}

func (x *SportDeviceInfo) GetIsAppleWatch() bool {
	if x != nil && x.IsAppleWatch != nil {
		return *x.IsAppleWatch
	}
	return false
}

func (x *SportDeviceInfo) GetIsWhiteList() bool {
	if x != nil && x.IsWhiteList != nil {
		return *x.IsWhiteList
	}
	return false
}

func (x *SportDeviceInfo) GetIsLocalIphone() bool {
	if x != nil && x.IsLocalIphone != nil {
		return *x.IsLocalIphone
	}
	return false
}


type UploadDeviceStepRequest struct {
	BaseRequest          *BaseRequest     `protobuf:"bytes,1,req,name=BaseRequest" json:"BaseRequest,omitempty"`
	DeviceID             *string          `protobuf:"bytes,2,opt,name=deviceID" json:"deviceID,omitempty"`
	DeviceType           *string          `protobuf:"bytes,3,opt,name=deviceType" json:"deviceType,omitempty"`
	FromTime             *uint32          `protobuf:"varint,4,opt,name=fromTime" json:"fromTime,omitempty"`
	ToTime               *uint32          `protobuf:"varint,5,opt,name=toTime" json:"toTime,omitempty"`
	StepCount            *uint32          `protobuf:"varint,6,opt,name=stepCount" json:"stepCount,omitempty"`
	TimeZone             *string          `protobuf:"bytes,7,opt,name=timeZone" json:"timeZone,omitempty"`
	Bundleid             *string          `protobuf:"bytes,8,opt,name=bundleid" json:"bundleid,omitempty"`
	Appname              *string          `protobuf:"bytes,9,opt,name=appname" json:"appname,omitempty"`
	M7StepCount          *uint32          `protobuf:"varint,10,opt,name=m7StepCount" json:"m7StepCount,omitempty"`
	PhoneModel           *uint32          `protobuf:"varint,11,opt,name=phoneModel" json:"phoneModel,omitempty"`
	DeviceInfo           *SportDeviceInfo `protobuf:"bytes,12,opt,name=deviceInfo" json:"deviceInfo,omitempty"`
	HkStepCount          *uint32          `protobuf:"varint,13,opt,name=hkStepCount" json:"hkStepCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UploadDeviceStepRequest) Reset()         { *m = UploadDeviceStepRequest{} }
func (m *UploadDeviceStepRequest) String() string { return proto.CompactTextString(m) }
func (*UploadDeviceStepRequest) ProtoMessage()    {}
func (*UploadDeviceStepRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_072c1ef9e72c0732, []int{5}
}

func (m *UploadDeviceStepRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadDeviceStepRequest.Unmarshal(m, b)
}
func (m *UploadDeviceStepRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadDeviceStepRequest.Marshal(b, m, deterministic)
}
func (m *UploadDeviceStepRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadDeviceStepRequest.Merge(m, src)
}
func (m *UploadDeviceStepRequest) XXX_Size() int {
	return xxx_messageInfo_UploadDeviceStepRequest.Size(m)
}
func (m *UploadDeviceStepRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadDeviceStepRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadDeviceStepRequest proto.InternalMessageInfo

func (m *UploadDeviceStepRequest) GetBaseRequest() *BaseRequest {
	if m != nil {
		return m.BaseRequest
	}
	return nil
}

func (m *UploadDeviceStepRequest) GetDeviceID() string {
	if m != nil && m.DeviceID != nil {
		return *m.DeviceID
	}
	return ""
}

func (m *UploadDeviceStepRequest) GetDeviceType() string {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return ""
}

func (m *UploadDeviceStepRequest) GetFromTime() uint32 {
	if m != nil && m.FromTime != nil {
		return *m.FromTime
	}
	return 0
}

func (m *UploadDeviceStepRequest) GetToTime() uint32 {
	if m != nil && m.ToTime != nil {
		return *m.ToTime
	}
	return 0
}

func (m *UploadDeviceStepRequest) GetStepCount() uint32 {
	if m != nil && m.StepCount != nil {
		return *m.StepCount
	}
	return 0
}

func (m *UploadDeviceStepRequest) GetTimeZone() string {
	if m != nil && m.TimeZone != nil {
		return *m.TimeZone
	}
	return ""
}

func (m *UploadDeviceStepRequest) GetBundleid() string {
	if m != nil && m.Bundleid != nil {
		return *m.Bundleid
	}
	return ""
}

func (m *UploadDeviceStepRequest) GetAppname() string {
	if m != nil && m.Appname != nil {
		return *m.Appname
	}
	return ""
}

func (m *UploadDeviceStepRequest) GetM7StepCount() uint32 {
	if m != nil && m.M7StepCount != nil {
		return *m.M7StepCount
	}
	return 0
}

func (m *UploadDeviceStepRequest) GetPhoneModel() uint32 {
	if m != nil && m.PhoneModel != nil {
		return *m.PhoneModel
	}
	return 0
}

func (m *UploadDeviceStepRequest) GetDeviceInfo() *SportDeviceInfo {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

func (m *UploadDeviceStepRequest) GetHkStepCount() uint32 {
	if m != nil && m.HkStepCount != nil {
		return *m.HkStepCount
	}
	return 0
}

type UploadDeviceStepResponse struct {
	BaseResponse         *BaseResponse    `protobuf:"bytes,1,req,name=BaseResponse" json:"BaseResponse,omitempty"`
	DeviceInfo           *SportDeviceInfo `protobuf:"bytes,12,opt,name=deviceInfo" json:"deviceInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UploadDeviceStepResponse) Reset()         { *m = UploadDeviceStepResponse{} }
func (m *UploadDeviceStepResponse) String() string { return proto.CompactTextString(m) }
func (*UploadDeviceStepResponse) ProtoMessage()    {}
func (*UploadDeviceStepResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_072c1ef9e72c0732, []int{4}
}

func (m *UploadDeviceStepResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GUploadDeviceStepResponse.Unmarshal(m, b)
}
func (m *UploadDeviceStepResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GUploadDeviceStepResponse.Marshal(b, m, deterministic)
}
func (m *UploadDeviceStepResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GUploadDeviceStepResponse.Merge(m, src)
}
func (m *UploadDeviceStepResponse) XXX_Size() int {
	return xxx_messageInfo_GUploadDeviceStepResponse.Size(m)
}
func (m *UploadDeviceStepResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GUploadDeviceStepResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GUploadDeviceStepResponse proto.InternalMessageInfo

func (m *UploadDeviceStepResponse) GetBaseResponse() *BaseResponse {
	if m != nil {
		return m.BaseResponse
	}
	return nil
}
func (m *UploadDeviceStepResponse) GetDeviceInfo() *SportDeviceInfo {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}


//--------------------------------------

type GetBoundHardDevicesRequest835 struct {
	BaseRequest          *BaseRequest `protobuf:"bytes,1,req,name=BaseRequest" json:"BaseRequest,omitempty"`
	Version              *uint32      `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetBoundHardDevicesRequest835) Reset()         { *m = GetBoundHardDevicesRequest835{} }
func (m *GetBoundHardDevicesRequest835) String() string { return proto.CompactTextString(m) }
func (*GetBoundHardDevicesRequest835) ProtoMessage()    {}
func (*GetBoundHardDevicesRequest835) Descriptor() ([]byte, []int) {
	return fileDescriptor_072c1ef9e72c0732, []int{3}
}

func (m *GetBoundHardDevicesRequest835) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBoundHardDevicesRequest.Unmarshal(m, b)
}
func (m *GetBoundHardDevicesRequest835) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBoundHardDevicesRequest.Marshal(b, m, deterministic)
}
func (m *GetBoundHardDevicesRequest835) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBoundHardDevicesRequest.Merge(m, src)
}
func (m *GetBoundHardDevicesRequest835) XXX_Size() int {
	return xxx_messageInfo_GetBoundHardDevicesRequest.Size(m)
}
func (m *GetBoundHardDevicesRequest835) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBoundHardDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBoundHardDevicesRequest proto.InternalMessageInfo

func (m *GetBoundHardDevicesRequest835) GetBaseRequest() *BaseRequest {
	if m != nil {
		return m.BaseRequest
	}
	return nil
}

func (m *GetBoundHardDevicesRequest835) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}







//   ------------------------
type GetBoundHardDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	Version     *int64       `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (x *GetBoundHardDevicesRequest) Reset() {
	*x = GetBoundHardDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoundHardDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoundHardDevicesRequest) ProtoMessage() {}

func (x *GetBoundHardDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoundHardDevicesRequest.ProtoReflect.Descriptor instead.
func (*GetBoundHardDevicesRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{315}
}

func (x *GetBoundHardDevicesRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GetBoundHardDevicesRequest) GetVersion() int64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type GetBoundHardDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse    `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	Count        *int64           `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	DeviceList   []*ModHardDevice `protobuf:"bytes,5,rep,name=deviceList" json:"deviceList,omitempty"`
	Version      *int64           `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	ContinueFlag *int64           `protobuf:"varint,7,opt,name=continueFlag" json:"continueFlag,omitempty"`
}

func (x *GetBoundHardDevicesResponse) Reset() {
	*x = GetBoundHardDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoundHardDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoundHardDevicesResponse) ProtoMessage() {}

func (x *GetBoundHardDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoundHardDevicesResponse.ProtoReflect.Descriptor instead.
func (*GetBoundHardDevicesResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{316}
}

func (x *GetBoundHardDevicesResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetBoundHardDevicesResponse) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *GetBoundHardDevicesResponse) GetDeviceList() []*ModHardDevice {
	if x != nil {
		return x.DeviceList
	}
	return nil
}

func (x *GetBoundHardDevicesResponse) GetVersion() int64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *GetBoundHardDevicesResponse) GetContinueFlag() int64 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

type ModHardDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardDevice     *HardDevice     `protobuf:"bytes,1,opt,name=hardDevice" json:"hardDevice,omitempty"`
	HardDeviceAttr *HardDeviceAttr `protobuf:"bytes,2,opt,name=hardDeviceAttr" json:"hardDeviceAttr,omitempty"`
	BindFlag       *uint32         `protobuf:"varint,3,opt,name=bindFlag" json:"bindFlag,omitempty"`
}

func (x *ModHardDevice) Reset() {
	*x = ModHardDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModHardDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModHardDevice) ProtoMessage() {}

func (x *ModHardDevice) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModHardDevice.ProtoReflect.Descriptor instead.
func (*ModHardDevice) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{317}
}

func (x *ModHardDevice) GetHardDevice() *HardDevice {
	if x != nil {
		return x.HardDevice
	}
	return nil
}

func (x *ModHardDevice) GetHardDeviceAttr() *HardDeviceAttr {
	if x != nil {
		return x.HardDeviceAttr
	}
	return nil
}

func (x *ModHardDevice) GetBindFlag() uint32 {
	if x != nil && x.BindFlag != nil {
		return *x.BindFlag
	}
	return 0
}

type HardDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceType *string `protobuf:"bytes,1,opt,name=deviceType" json:"deviceType,omitempty"`
	DeviceId   *string `protobuf:"bytes,2,opt,name=deviceId" json:"deviceId,omitempty"`
}

func (x *HardDevice) Reset() {
	*x = HardDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardDevice) ProtoMessage() {}

func (x *HardDevice) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardDevice.ProtoReflect.Descriptor instead.
func (*HardDevice) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{318}
}

func (x *HardDevice) GetDeviceType() string {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return ""
}

func (x *HardDevice) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

type HardDeviceAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrandName            *string `protobuf:"bytes,1,opt,name=brandName" json:"brandName,omitempty"`
	AuthKey              *string `protobuf:"bytes,2,opt,name=authKey" json:"authKey,omitempty"`
	Mac                  *string `protobuf:"bytes,3,opt,name=mac" json:"mac,omitempty"`
	ConnProto            *string `protobuf:"bytes,4,opt,name=connProto" json:"connProto,omitempty"`
	ConnStrategy         *uint32 `protobuf:"varint,5,opt,name=connStrategy" json:"connStrategy,omitempty"`
	CloseStrategy        *uint32 `protobuf:"varint,6,opt,name=closeStrategy" json:"closeStrategy,omitempty"`
	ManuMacPos           *int32  `protobuf:"varint,7,opt,name=manuMacPos" json:"manuMacPos,omitempty"`
	SerMacPos            *int32  `protobuf:"varint,8,opt,name=serMacPos" json:"serMacPos,omitempty"`
	HardDeviceAttrDesc   *string `protobuf:"bytes,9,opt,name=hardDeviceAttrDesc" json:"hardDeviceAttrDesc,omitempty"`
	Alias                *string `protobuf:"bytes,10,opt,name=alias" json:"alias,omitempty"`
	IconUrl              *string `protobuf:"bytes,11,opt,name=iconUrl" json:"iconUrl,omitempty"`
	JumpUrl              *string `protobuf:"bytes,12,opt,name=jumpUrl" json:"jumpUrl,omitempty"`
	DeviceTitle          *string `protobuf:"bytes,13,opt,name=deviceTitle" json:"deviceTitle,omitempty"`
	DeviceDesc           *string `protobuf:"bytes,14,opt,name=deviceDesc" json:"deviceDesc,omitempty"`
	Category             *string `protobuf:"bytes,15,opt,name=category" json:"category,omitempty"`
	DeviceTypeMainDevice *uint32 `protobuf:"varint,16,opt,name=deviceTypeMainDevice" json:"deviceTypeMainDevice,omitempty"`
	IsEnterMyDevice      *uint32 `protobuf:"varint,17,opt,name=isEnterMyDevice" json:"isEnterMyDevice,omitempty"`
	BleSimpleProtocol    *int64  `protobuf:"varint,18,opt,name=bleSimpleProtocol" json:"bleSimpleProtocol,omitempty"`
	Ability              *string `protobuf:"bytes,19,opt,name=ability" json:"ability,omitempty"`
	AbilityInf           *string `protobuf:"bytes,20,opt,name=abilityInf" json:"abilityInf,omitempty"`
	SerialNumber         *string `protobuf:"bytes,21,opt,name=serialNumber" json:"serialNumber,omitempty"`
	SubDeviceList        *string `protobuf:"bytes,22,opt,name=subDeviceList" json:"subDeviceList,omitempty"`
}

func (x *HardDeviceAttr) Reset() {
	*x = HardDeviceAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardDeviceAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardDeviceAttr) ProtoMessage() {}

func (x *HardDeviceAttr) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardDeviceAttr.ProtoReflect.Descriptor instead.
func (*HardDeviceAttr) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{319}
}

func (x *HardDeviceAttr) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *HardDeviceAttr) GetAuthKey() string {
	if x != nil && x.AuthKey != nil {
		return *x.AuthKey
	}
	return ""
}

func (x *HardDeviceAttr) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *HardDeviceAttr) GetConnProto() string {
	if x != nil && x.ConnProto != nil {
		return *x.ConnProto
	}
	return ""
}

func (x *HardDeviceAttr) GetConnStrategy() uint32 {
	if x != nil && x.ConnStrategy != nil {
		return *x.ConnStrategy
	}
	return 0
}

func (x *HardDeviceAttr) GetCloseStrategy() uint32 {
	if x != nil && x.CloseStrategy != nil {
		return *x.CloseStrategy
	}
	return 0
}

func (x *HardDeviceAttr) GetManuMacPos() int32 {
	if x != nil && x.ManuMacPos != nil {
		return *x.ManuMacPos
	}
	return 0
}

func (x *HardDeviceAttr) GetSerMacPos() int32 {
	if x != nil && x.SerMacPos != nil {
		return *x.SerMacPos
	}
	return 0
}

func (x *HardDeviceAttr) GetHardDeviceAttrDesc() string {
	if x != nil && x.HardDeviceAttrDesc != nil {
		return *x.HardDeviceAttrDesc
	}
	return ""
}

func (x *HardDeviceAttr) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *HardDeviceAttr) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *HardDeviceAttr) GetJumpUrl() string {
	if x != nil && x.JumpUrl != nil {
		return *x.JumpUrl
	}
	return ""
}

func (x *HardDeviceAttr) GetDeviceTitle() string {
	if x != nil && x.DeviceTitle != nil {
		return *x.DeviceTitle
	}
	return ""
}

func (x *HardDeviceAttr) GetDeviceDesc() string {
	if x != nil && x.DeviceDesc != nil {
		return *x.DeviceDesc
	}
	return ""
}

func (x *HardDeviceAttr) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *HardDeviceAttr) GetDeviceTypeMainDevice() uint32 {
	if x != nil && x.DeviceTypeMainDevice != nil {
		return *x.DeviceTypeMainDevice
	}
	return 0
}

func (x *HardDeviceAttr) GetIsEnterMyDevice() uint32 {
	if x != nil && x.IsEnterMyDevice != nil {
		return *x.IsEnterMyDevice
	}
	return 0
}

func (x *HardDeviceAttr) GetBleSimpleProtocol() int64 {
	if x != nil && x.BleSimpleProtocol != nil {
		return *x.BleSimpleProtocol
	}
	return 0
}

func (x *HardDeviceAttr) GetAbility() string {
	if x != nil && x.Ability != nil {
		return *x.Ability
	}
	return ""
}

func (x *HardDeviceAttr) GetAbilityInf() string {
	if x != nil && x.AbilityInf != nil {
		return *x.AbilityInf
	}
	return ""
}

func (x *HardDeviceAttr) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *HardDeviceAttr) GetSubDeviceList() string {
	if x != nil && x.SubDeviceList != nil {
		return *x.SubDeviceList
	}
	return ""
}

type GetCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest        *BaseRequest      `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	RandomEncryKey     *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=randomEncryKey" json:"randomEncryKey,omitempty"`
	CurrentCertVersion *uint32           `protobuf:"varint,3,opt,name=currentCertVersion" json:"currentCertVersion,omitempty"`
}

func (x *GetCertRequest) Reset() {
	*x = GetCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertRequest) ProtoMessage() {}

func (x *GetCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertRequest.ProtoReflect.Descriptor instead.
func (*GetCertRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{320}
}

func (x *GetCertRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GetCertRequest) GetRandomEncryKey() *SKBuiltinBufferT {
	if x != nil {
		return x.RandomEncryKey
	}
	return nil
}

func (x *GetCertRequest) GetCurrentCertVersion() uint32 {
	if x != nil && x.CurrentCertVersion != nil {
		return *x.CurrentCertVersion
	}
	return 0
}

type GetCertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	CertValue    *RSACert      `protobuf:"bytes,2,opt,name=certValue" json:"certValue,omitempty"`
	CertVersion  *uint32       `protobuf:"varint,3,opt,name=certVersion" json:"certVersion,omitempty"`
}

func (x *GetCertResponse) Reset() {
	*x = GetCertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertResponse) ProtoMessage() {}

func (x *GetCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertResponse.ProtoReflect.Descriptor instead.
func (*GetCertResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{321}
}

func (x *GetCertResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetCertResponse) GetCertValue() *RSACert {
	if x != nil {
		return x.CertValue
	}
	return nil
}

func (x *GetCertResponse) GetCertVersion() uint32 {
	if x != nil && x.CertVersion != nil {
		return *x.CertVersion
	}
	return 0
}

type RSACert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyN *string `protobuf:"bytes,1,opt,name=keyN" json:"keyN,omitempty"`
	KeyE *string `protobuf:"bytes,2,opt,name=keyE" json:"keyE,omitempty"`
}

func (x *RSACert) Reset() {
	*x = RSACert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RSACert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RSACert) ProtoMessage() {}

func (x *RSACert) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RSACert.ProtoReflect.Descriptor instead.
func (*RSACert) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{322}
}

func (x *RSACert) GetKeyN() string {
	if x != nil && x.KeyN != nil {
		return *x.KeyN
	}
	return ""
}

func (x *RSACert) GetKeyE() string {
	if x != nil && x.KeyE != nil {
		return *x.KeyE
	}
	return ""
}

type DownloadVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	MsgId       *uint32      `protobuf:"varint,2,opt,name=msgId" json:"msgId,omitempty"`
	TotalLen    *uint32      `protobuf:"varint,3,opt,name=totalLen" json:"totalLen,omitempty"`
	StartPos    *uint32      `protobuf:"varint,4,opt,name=startPos" json:"startPos,omitempty"`
	NetworkEnv  *uint32      `protobuf:"varint,5,opt,name=networkEnv" json:"networkEnv,omitempty"`
	MxPackSize  *uint32      `protobuf:"varint,6,opt,name=mxPackSize" json:"mxPackSize,omitempty"`
	NewMsgId    *uint64      `protobuf:"varint,7,opt,name=newMsgId" json:"newMsgId,omitempty"`
}

func (x *DownloadVideoRequest) Reset() {
	*x = DownloadVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadVideoRequest) ProtoMessage() {}

func (x *DownloadVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadVideoRequest.ProtoReflect.Descriptor instead.
func (*DownloadVideoRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{323}
}

func (x *DownloadVideoRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *DownloadVideoRequest) GetMsgId() uint32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *DownloadVideoRequest) GetTotalLen() uint32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *DownloadVideoRequest) GetStartPos() uint32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *DownloadVideoRequest) GetNetworkEnv() uint32 {
	if x != nil && x.NetworkEnv != nil {
		return *x.NetworkEnv
	}
	return 0
}

func (x *DownloadVideoRequest) GetMxPackSize() uint32 {
	if x != nil && x.MxPackSize != nil {
		return *x.MxPackSize
	}
	return 0
}

func (x *DownloadVideoRequest) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

type DownloadVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse     `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	MsgId        *uint32           `protobuf:"varint,2,opt,name=msgId" json:"msgId,omitempty"`
	TotalLen     *uint32           `protobuf:"varint,3,opt,name=totalLen" json:"totalLen,omitempty"`
	StartPos     *uint32           `protobuf:"varint,4,opt,name=startPos" json:"startPos,omitempty"`
	Data         *SKBuiltinBufferT `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
	NewMsgId     *uint64           `protobuf:"varint,6,opt,name=newMsgId" json:"newMsgId,omitempty"`
}

func (x *DownloadVideoResponse) Reset() {
	*x = DownloadVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadVideoResponse) ProtoMessage() {}

func (x *DownloadVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadVideoResponse.ProtoReflect.Descriptor instead.
func (*DownloadVideoResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{324}
}

func (x *DownloadVideoResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *DownloadVideoResponse) GetMsgId() uint32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *DownloadVideoResponse) GetTotalLen() uint32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *DownloadVideoResponse) GetStartPos() uint32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *DownloadVideoResponse) GetData() *SKBuiltinBufferT {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DownloadVideoResponse) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

type GetMsgImgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest  *BaseRequest      `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	MsgId        *uint32           `protobuf:"varint,2,opt,name=msgId" json:"msgId,omitempty"`
	FromUserName *SKBuiltinStringT `protobuf:"bytes,3,opt,name=fromUserName" json:"fromUserName,omitempty"`
	ToUserName   *SKBuiltinStringT `protobuf:"bytes,4,opt,name=toUserName" json:"toUserName,omitempty"`
	TotalLen     *uint32           `protobuf:"varint,5,opt,name=totalLen" json:"totalLen,omitempty"`
	StartPos     *uint32           `protobuf:"varint,6,opt,name=startPos" json:"startPos,omitempty"`
	DataLen      *uint32           `protobuf:"varint,7,opt,name=dataLen" json:"dataLen,omitempty"`
	CompressType *uint32           `protobuf:"varint,8,opt,name=compressType" json:"compressType,omitempty"`
	NewMsgId     *uint64           `protobuf:"varint,9,opt,name=newMsgId" json:"newMsgId,omitempty"`
}

func (x *GetMsgImgRequest) Reset() {
	*x = GetMsgImgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMsgImgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMsgImgRequest) ProtoMessage() {}

func (x *GetMsgImgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMsgImgRequest.ProtoReflect.Descriptor instead.
func (*GetMsgImgRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{325}
}

func (x *GetMsgImgRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GetMsgImgRequest) GetMsgId() uint32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *GetMsgImgRequest) GetFromUserName() *SKBuiltinStringT {
	if x != nil {
		return x.FromUserName
	}
	return nil
}

func (x *GetMsgImgRequest) GetToUserName() *SKBuiltinStringT {
	if x != nil {
		return x.ToUserName
	}
	return nil
}

func (x *GetMsgImgRequest) GetTotalLen() uint32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *GetMsgImgRequest) GetStartPos() uint32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *GetMsgImgRequest) GetDataLen() uint32 {
	if x != nil && x.DataLen != nil {
		return *x.DataLen
	}
	return 0
}

func (x *GetMsgImgRequest) GetCompressType() uint32 {
	if x != nil && x.CompressType != nil {
		return *x.CompressType
	}
	return 0
}

func (x *GetMsgImgRequest) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

type GetMsgImgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse     `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	MsgId        *uint32           `protobuf:"varint,2,opt,name=msgId" json:"msgId,omitempty"`
	FromUserName *SKBuiltinStringT `protobuf:"bytes,3,opt,name=fromUserName" json:"fromUserName,omitempty"`
	ToUserName   *SKBuiltinStringT `protobuf:"bytes,4,opt,name=toUserName" json:"toUserName,omitempty"`
	TotalLen     *uint32           `protobuf:"varint,5,opt,name=totalLen" json:"totalLen,omitempty"`
	StartPos     *uint32           `protobuf:"varint,6,opt,name=startPos" json:"startPos,omitempty"`
	DataLen      *uint32           `protobuf:"varint,7,opt,name=dataLen" json:"dataLen,omitempty"`
	Data         *SKBuiltinBufferT `protobuf:"bytes,8,opt,name=data" json:"data,omitempty"`
	NewMsgId     *uint64           `protobuf:"varint,9,opt,name=newMsgId" json:"newMsgId,omitempty"`
}

func (x *GetMsgImgResponse) Reset() {
	*x = GetMsgImgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMsgImgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMsgImgResponse) ProtoMessage() {}

func (x *GetMsgImgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMsgImgResponse.ProtoReflect.Descriptor instead.
func (*GetMsgImgResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{326}
}

func (x *GetMsgImgResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetMsgImgResponse) GetMsgId() uint32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *GetMsgImgResponse) GetFromUserName() *SKBuiltinStringT {
	if x != nil {
		return x.FromUserName
	}
	return nil
}

func (x *GetMsgImgResponse) GetToUserName() *SKBuiltinStringT {
	if x != nil {
		return x.ToUserName
	}
	return nil
}

func (x *GetMsgImgResponse) GetTotalLen() uint32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *GetMsgImgResponse) GetStartPos() uint32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *GetMsgImgResponse) GetDataLen() uint32 {
	if x != nil && x.DataLen != nil {
		return *x.DataLen
	}
	return 0
}

func (x *GetMsgImgResponse) GetData() *SKBuiltinBufferT {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetMsgImgResponse) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

type DownloadAppAttachRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	AppId       *string      `protobuf:"bytes,2,opt,name=appId" json:"appId,omitempty"`
	SdkVersion  *uint32      `protobuf:"varint,3,opt,name=sdkVersion" json:"sdkVersion,omitempty"`
	MediaId     *string      `protobuf:"bytes,4,opt,name=mediaId" json:"mediaId,omitempty"`
	UserName    *string      `protobuf:"bytes,5,opt,name=userName" json:"userName,omitempty"`
	TotalLen    *uint32      `protobuf:"varint,6,opt,name=totalLen" json:"totalLen,omitempty"`
	StartPos    *uint32      `protobuf:"varint,7,opt,name=startPos" json:"startPos,omitempty"`
	DataLen     *uint32      `protobuf:"varint,8,opt,name=dataLen" json:"dataLen,omitempty"`
	OutFmt      *string      `protobuf:"bytes,9,opt,name=outFmt" json:"outFmt,omitempty"`
	Rotation    *int32       `protobuf:"varint,10,opt,name=rotation" json:"rotation,omitempty"`
	Type        *uint32      `protobuf:"varint,11,opt,name=type" json:"type,omitempty"`
	Cdntype     *uint32      `protobuf:"varint,12,opt,name=cdntype" json:"cdntype,omitempty"`
	NewMsgId    *uint64      `protobuf:"varint,13,opt,name=newMsgId" json:"newMsgId,omitempty"`
}

func (x *DownloadAppAttachRequest) Reset() {
	*x = DownloadAppAttachRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadAppAttachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadAppAttachRequest) ProtoMessage() {}

func (x *DownloadAppAttachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadAppAttachRequest.ProtoReflect.Descriptor instead.
func (*DownloadAppAttachRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{327}
}

func (x *DownloadAppAttachRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *DownloadAppAttachRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *DownloadAppAttachRequest) GetSdkVersion() uint32 {
	if x != nil && x.SdkVersion != nil {
		return *x.SdkVersion
	}
	return 0
}

func (x *DownloadAppAttachRequest) GetMediaId() string {
	if x != nil && x.MediaId != nil {
		return *x.MediaId
	}
	return ""
}

func (x *DownloadAppAttachRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *DownloadAppAttachRequest) GetTotalLen() uint32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *DownloadAppAttachRequest) GetStartPos() uint32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *DownloadAppAttachRequest) GetDataLen() uint32 {
	if x != nil && x.DataLen != nil {
		return *x.DataLen
	}
	return 0
}

func (x *DownloadAppAttachRequest) GetOutFmt() string {
	if x != nil && x.OutFmt != nil {
		return *x.OutFmt
	}
	return ""
}

func (x *DownloadAppAttachRequest) GetRotation() int32 {
	if x != nil && x.Rotation != nil {
		return *x.Rotation
	}
	return 0
}

func (x *DownloadAppAttachRequest) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *DownloadAppAttachRequest) GetCdntype() uint32 {
	if x != nil && x.Cdntype != nil {
		return *x.Cdntype
	}
	return 0
}

func (x *DownloadAppAttachRequest) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

type DownloadAppAttachResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse     `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	AppId        *string           `protobuf:"bytes,2,opt,name=appId" json:"appId,omitempty"`
	MediaId      *string           `protobuf:"bytes,3,opt,name=mediaId" json:"mediaId,omitempty"`
	UserName     *string           `protobuf:"bytes,4,opt,name=userName" json:"userName,omitempty"`
	TotalLen     *uint32           `protobuf:"varint,5,opt,name=totalLen" json:"totalLen,omitempty"`
	StartPos     *uint32           `protobuf:"varint,6,opt,name=startPos" json:"startPos,omitempty"`
	DataLen      *uint32           `protobuf:"varint,7,opt,name=dataLen" json:"dataLen,omitempty"`
	Data         *SKBuiltinBufferT `protobuf:"bytes,8,opt,name=data" json:"data,omitempty"`
}

func (x *DownloadAppAttachResponse) Reset() {
	*x = DownloadAppAttachResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadAppAttachResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadAppAttachResponse) ProtoMessage() {}

func (x *DownloadAppAttachResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadAppAttachResponse.ProtoReflect.Descriptor instead.
func (*DownloadAppAttachResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{328}
}

func (x *DownloadAppAttachResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *DownloadAppAttachResponse) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *DownloadAppAttachResponse) GetMediaId() string {
	if x != nil && x.MediaId != nil {
		return *x.MediaId
	}
	return ""
}

func (x *DownloadAppAttachResponse) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *DownloadAppAttachResponse) GetTotalLen() uint32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *DownloadAppAttachResponse) GetStartPos() uint32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *DownloadAppAttachResponse) GetDataLen() uint32 {
	if x != nil && x.DataLen != nil {
		return *x.DataLen
	}
	return 0
}

func (x *DownloadAppAttachResponse) GetData() *SKBuiltinBufferT {
	if x != nil {
		return x.Data
	}
	return nil
}

type UploadEmojiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest          `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	EmojiItemCount *int32                `protobuf:"varint,2,opt,name=emojiItemCount" json:"emojiItemCount,omitempty"`
	EmojiItem      []*EmojiUploadInfoReq `protobuf:"bytes,3,rep,name=emojiItem" json:"emojiItem,omitempty"`
}

func (x *UploadEmojiRequest) Reset() {
	*x = UploadEmojiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadEmojiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadEmojiRequest) ProtoMessage() {}

func (x *UploadEmojiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadEmojiRequest.ProtoReflect.Descriptor instead.
func (*UploadEmojiRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{329}
}

func (x *UploadEmojiRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *UploadEmojiRequest) GetEmojiItemCount() int32 {
	if x != nil && x.EmojiItemCount != nil {
		return *x.EmojiItemCount
	}
	return 0
}

func (x *UploadEmojiRequest) GetEmojiItem() []*EmojiUploadInfoReq {
	if x != nil {
		return x.EmojiItem
	}
	return nil
}

type UploadEmojiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse   *BaseResponse          `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	EmojiItemCount *int32                 `protobuf:"varint,2,opt,name=emojiItemCount" json:"emojiItemCount,omitempty"`
	EmojiItem      []*EmojiUploadInfoResp `protobuf:"bytes,3,rep,name=emojiItem" json:"emojiItem,omitempty"`
	ActionFlag     *uint32                `protobuf:"varint,4,opt,name=actionFlag" json:"actionFlag,omitempty"`
}

func (x *UploadEmojiResponse) Reset() {
	*x = UploadEmojiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadEmojiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadEmojiResponse) ProtoMessage() {}

func (x *UploadEmojiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadEmojiResponse.ProtoReflect.Descriptor instead.
func (*UploadEmojiResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{330}
}

func (x *UploadEmojiResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *UploadEmojiResponse) GetEmojiItemCount() int32 {
	if x != nil && x.EmojiItemCount != nil {
		return *x.EmojiItemCount
	}
	return 0
}

func (x *UploadEmojiResponse) GetEmojiItem() []*EmojiUploadInfoResp {
	if x != nil {
		return x.EmojiItem
	}
	return nil
}

func (x *UploadEmojiResponse) GetActionFlag() uint32 {
	if x != nil && x.ActionFlag != nil {
		return *x.ActionFlag
	}
	return 0
}

type EmojiUploadInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Md5           *string           `protobuf:"bytes,1,opt,name=md5" json:"md5,omitempty"`
	StartPos      *int32            `protobuf:"varint,2,opt,name=startPos" json:"startPos,omitempty"`
	TotalLen      *int32            `protobuf:"varint,3,opt,name=totalLen" json:"totalLen,omitempty"`
	EmojiBuffer   *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=emojiBuffer" json:"emojiBuffer,omitempty"`
	Type          *int32            `protobuf:"varint,5,opt,name=type" json:"type,omitempty"`
	ToUserName    *string           `protobuf:"bytes,6,opt,name=toUserName" json:"toUserName,omitempty"`
	ExternXml     *string           `protobuf:"bytes,7,opt,name=externXml" json:"externXml,omitempty"`
	Report        *string           `protobuf:"bytes,8,opt,name=report" json:"report,omitempty"`
	ClientMsgId   *string           `protobuf:"bytes,9,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	MsgSource     *string           `protobuf:"bytes,10,opt,name=msgSource" json:"msgSource,omitempty"`
	NewXmlFlag    *int32            `protobuf:"varint,11,opt,name=newXmlFlag" json:"newXmlFlag,omitempty"`
	SendMsgTicket *string           `protobuf:"bytes,12,opt,name=sendMsgTicket" json:"sendMsgTicket,omitempty"`
}

func (x *EmojiUploadInfoReq) Reset() {
	*x = EmojiUploadInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmojiUploadInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmojiUploadInfoReq) ProtoMessage() {}

func (x *EmojiUploadInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmojiUploadInfoReq.ProtoReflect.Descriptor instead.
func (*EmojiUploadInfoReq) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{331}
}

func (x *EmojiUploadInfoReq) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

func (x *EmojiUploadInfoReq) GetStartPos() int32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *EmojiUploadInfoReq) GetTotalLen() int32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *EmojiUploadInfoReq) GetEmojiBuffer() *SKBuiltinBufferT {
	if x != nil {
		return x.EmojiBuffer
	}
	return nil
}

func (x *EmojiUploadInfoReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *EmojiUploadInfoReq) GetToUserName() string {
	if x != nil && x.ToUserName != nil {
		return *x.ToUserName
	}
	return ""
}

func (x *EmojiUploadInfoReq) GetExternXml() string {
	if x != nil && x.ExternXml != nil {
		return *x.ExternXml
	}
	return ""
}

func (x *EmojiUploadInfoReq) GetReport() string {
	if x != nil && x.Report != nil {
		return *x.Report
	}
	return ""
}

func (x *EmojiUploadInfoReq) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *EmojiUploadInfoReq) GetMsgSource() string {
	if x != nil && x.MsgSource != nil {
		return *x.MsgSource
	}
	return ""
}

func (x *EmojiUploadInfoReq) GetNewXmlFlag() int32 {
	if x != nil && x.NewXmlFlag != nil {
		return *x.NewXmlFlag
	}
	return 0
}

func (x *EmojiUploadInfoReq) GetSendMsgTicket() string {
	if x != nil && x.SendMsgTicket != nil {
		return *x.SendMsgTicket
	}
	return ""
}

type EmojiUploadInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32  `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	StartPos *int32  `protobuf:"varint,2,opt,name=startPos" json:"startPos,omitempty"`
	TotalLen *int32  `protobuf:"varint,3,opt,name=totalLen" json:"totalLen,omitempty"`
	Md5      *string `protobuf:"bytes,4,opt,name=md5" json:"md5,omitempty"`
	MsgId    *uint32 `protobuf:"varint,5,opt,name=msgId" json:"msgId,omitempty"`
	NewMsgId *uint64 `protobuf:"varint,6,opt,name=newMsgId" json:"newMsgId,omitempty"`
}

func (x *EmojiUploadInfoResp) Reset() {
	*x = EmojiUploadInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmojiUploadInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmojiUploadInfoResp) ProtoMessage() {}

func (x *EmojiUploadInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmojiUploadInfoResp.ProtoReflect.Descriptor instead.
func (*EmojiUploadInfoResp) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{332}
}

func (x *EmojiUploadInfoResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *EmojiUploadInfoResp) GetStartPos() int32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *EmojiUploadInfoResp) GetTotalLen() int32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *EmojiUploadInfoResp) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

func (x *EmojiUploadInfoResp) GetMsgId() uint32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *EmojiUploadInfoResp) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

type GetSafetyInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
}

func (x *GetSafetyInfoRequest) Reset() {
	*x = GetSafetyInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSafetyInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSafetyInfoRequest) ProtoMessage() {}

func (x *GetSafetyInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSafetyInfoRequest.ProtoReflect.Descriptor instead.
func (*GetSafetyInfoRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{333}
}

func (x *GetSafetyInfoRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

type GetSafetyInfoRespsonse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	Info         *SafetyInfo   `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (x *GetSafetyInfoRespsonse) Reset() {
	*x = GetSafetyInfoRespsonse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSafetyInfoRespsonse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSafetyInfoRespsonse) ProtoMessage() {}

func (x *GetSafetyInfoRespsonse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSafetyInfoRespsonse.ProtoReflect.Descriptor instead.
func (*GetSafetyInfoRespsonse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{334}
}

func (x *GetSafetyInfoRespsonse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetSafetyInfoRespsonse) GetInfo() *SafetyInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type SafetyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devicelist   []*LoginDevice `protobuf:"bytes,1,rep,name=devicelist" json:"devicelist,omitempty"`
	BHasVoice    *bool          `protobuf:"varint,2,opt,name=bHasVoice" json:"bHasVoice,omitempty"`
	BSwitchVoice *bool          `protobuf:"varint,3,opt,name=bSwitchVoice" json:"bSwitchVoice,omitempty"`
	BHasFace     *bool          `protobuf:"varint,4,opt,name=bHasFace" json:"bHasFace,omitempty"`
	BSwitchFace  *bool          `protobuf:"varint,5,opt,name=bSwitchFace" json:"bSwitchFace,omitempty"`
	BHasWxPwd    *bool          `protobuf:"varint,6,opt,name=bHasWxPwd" json:"bHasWxPwd,omitempty"`
}

func (x *SafetyInfo) Reset() {
	*x = SafetyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafetyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafetyInfo) ProtoMessage() {}

func (x *SafetyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafetyInfo.ProtoReflect.Descriptor instead.
func (*SafetyInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{335}
}

func (x *SafetyInfo) GetDevicelist() []*LoginDevice {
	if x != nil {
		return x.Devicelist
	}
	return nil
}

func (x *SafetyInfo) GetBHasVoice() bool {
	if x != nil && x.BHasVoice != nil {
		return *x.BHasVoice
	}
	return false
}

func (x *SafetyInfo) GetBSwitchVoice() bool {
	if x != nil && x.BSwitchVoice != nil {
		return *x.BSwitchVoice
	}
	return false
}

func (x *SafetyInfo) GetBHasFace() bool {
	if x != nil && x.BHasFace != nil {
		return *x.BHasFace
	}
	return false
}

func (x *SafetyInfo) GetBSwitchFace() bool {
	if x != nil && x.BSwitchFace != nil {
		return *x.BSwitchFace
	}
	return false
}

func (x *SafetyInfo) GetBHasWxPwd() bool {
	if x != nil && x.BHasWxPwd != nil {
		return *x.BHasWxPwd
	}
	return false
}

type LoginDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       *string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Devicename *string `protobuf:"bytes,2,opt,name=devicename" json:"devicename,omitempty"`
	Devicetype *string `protobuf:"bytes,3,opt,name=devicetype" json:"devicetype,omitempty"`
	Lasttime   *uint64 `protobuf:"varint,4,opt,name=lasttime" json:"lasttime,omitempty"`
}

func (x *LoginDevice) Reset() {
	*x = LoginDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginDevice) ProtoMessage() {}

func (x *LoginDevice) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginDevice.ProtoReflect.Descriptor instead.
func (*LoginDevice) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{336}
}

func (x *LoginDevice) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *LoginDevice) GetDevicename() string {
	if x != nil && x.Devicename != nil {
		return *x.Devicename
	}
	return ""
}

func (x *LoginDevice) GetDevicetype() string {
	if x != nil && x.Devicetype != nil {
		return *x.Devicetype
	}
	return ""
}

func (x *LoginDevice) GetLasttime() uint64 {
	if x != nil && x.Lasttime != nil {
		return *x.Lasttime
	}
	return 0
}

type DelSafeDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	Uuid        *string      `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
}

func (x *DelSafeDeviceRequest) Reset() {
	*x = DelSafeDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSafeDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSafeDeviceRequest) ProtoMessage() {}

func (x *DelSafeDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSafeDeviceRequest.ProtoReflect.Descriptor instead.
func (*DelSafeDeviceRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{337}
}

func (x *DelSafeDeviceRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *DelSafeDeviceRequest) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

type DelSafeDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	SafeDevice   *uint64       `protobuf:"varint,2,opt,name=safeDevice" json:"safeDevice,omitempty"`
}

func (x *DelSafeDeviceResponse) Reset() {
	*x = DelSafeDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSafeDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSafeDeviceResponse) ProtoMessage() {}

func (x *DelSafeDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSafeDeviceResponse.ProtoReflect.Descriptor instead.
func (*DelSafeDeviceResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{338}
}

func (x *DelSafeDeviceResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *DelSafeDeviceResponse) GetSafeDevice() uint64 {
	if x != nil && x.SafeDevice != nil {
		return *x.SafeDevice
	}
	return 0
}

type StatusNotifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest         *BaseRequest              `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	Code                *uint32                   `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	FromUserName        *string                   `protobuf:"bytes,3,opt,name=fromUserName" json:"fromUserName,omitempty"`
	ToUserName          *string                   `protobuf:"bytes,4,opt,name=toUserName" json:"toUserName,omitempty"`
	ClientMsgId         *string                   `protobuf:"bytes,5,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	UnreadChatListCount *uint32                   `protobuf:"varint,6,opt,name=unreadChatListCount" json:"unreadChatListCount,omitempty"`
	UnreadChatList      []*StatusNotifyUnreadChat `protobuf:"bytes,7,rep,name=unreadChatList" json:"unreadChatList,omitempty"`
	Function            *StatusNotifyFunction     `protobuf:"bytes,8,opt,name=function" json:"function,omitempty"`
	UnreadFunctionCount *uint32                   `protobuf:"varint,9,opt,name=unreadFunctionCount" json:"unreadFunctionCount,omitempty"`
	UnreadFunctionList  []*StatusNotifyFunction   `protobuf:"bytes,10,rep,name=unreadFunctionList" json:"unreadFunctionList,omitempty"`
}

func (x *StatusNotifyRequest) Reset() {
	*x = StatusNotifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusNotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusNotifyRequest) ProtoMessage() {}

func (x *StatusNotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusNotifyRequest.ProtoReflect.Descriptor instead.
func (*StatusNotifyRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{339}
}

func (x *StatusNotifyRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *StatusNotifyRequest) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *StatusNotifyRequest) GetFromUserName() string {
	if x != nil && x.FromUserName != nil {
		return *x.FromUserName
	}
	return ""
}

func (x *StatusNotifyRequest) GetToUserName() string {
	if x != nil && x.ToUserName != nil {
		return *x.ToUserName
	}
	return ""
}

func (x *StatusNotifyRequest) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *StatusNotifyRequest) GetUnreadChatListCount() uint32 {
	if x != nil && x.UnreadChatListCount != nil {
		return *x.UnreadChatListCount
	}
	return 0
}

func (x *StatusNotifyRequest) GetUnreadChatList() []*StatusNotifyUnreadChat {
	if x != nil {
		return x.UnreadChatList
	}
	return nil
}

func (x *StatusNotifyRequest) GetFunction() *StatusNotifyFunction {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *StatusNotifyRequest) GetUnreadFunctionCount() uint32 {
	if x != nil && x.UnreadFunctionCount != nil {
		return *x.UnreadFunctionCount
	}
	return 0
}

func (x *StatusNotifyRequest) GetUnreadFunctionList() []*StatusNotifyFunction {
	if x != nil {
		return x.UnreadFunctionList
	}
	return nil
}

type StatusNotifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse     *BaseResponse  `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	MsgId            *uint32        `protobuf:"varint,2,opt,name=msgId" json:"msgId,omitempty"`
	NewMsgId         *uint64        `protobuf:"varint,3,opt,name=newMsgId" json:"newMsgId,omitempty"`
	ChatContactCount *uint32        `protobuf:"varint,4,opt,name=chatContactCount" json:"chatContactCount,omitempty"`
	ChatContactList  []*ChatContact `protobuf:"bytes,5,rep,name=chatContactList" json:"chatContactList,omitempty"`
}

func (x *StatusNotifyResponse) Reset() {
	*x = StatusNotifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusNotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusNotifyResponse) ProtoMessage() {}

func (x *StatusNotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusNotifyResponse.ProtoReflect.Descriptor instead.
func (*StatusNotifyResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{340}
}

func (x *StatusNotifyResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *StatusNotifyResponse) GetMsgId() uint32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *StatusNotifyResponse) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

func (x *StatusNotifyResponse) GetChatContactCount() uint32 {
	if x != nil && x.ChatContactCount != nil {
		return *x.ChatContactCount
	}
	return 0
}

func (x *StatusNotifyResponse) GetChatContactList() []*ChatContact {
	if x != nil {
		return x.ChatContactList
	}
	return nil
}

type StatusNotifyUnreadChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName     *string `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
	LastReadTime *uint32 `protobuf:"varint,2,opt,name=lastReadTime" json:"lastReadTime,omitempty"`
}

func (x *StatusNotifyUnreadChat) Reset() {
	*x = StatusNotifyUnreadChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusNotifyUnreadChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusNotifyUnreadChat) ProtoMessage() {}

func (x *StatusNotifyUnreadChat) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusNotifyUnreadChat.ProtoReflect.Descriptor instead.
func (*StatusNotifyUnreadChat) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{341}
}

func (x *StatusNotifyUnreadChat) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *StatusNotifyUnreadChat) GetLastReadTime() uint32 {
	if x != nil && x.LastReadTime != nil {
		return *x.LastReadTime
	}
	return 0
}

type StatusNotifyFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Arg  *string `protobuf:"bytes,2,opt,name=arg" json:"arg,omitempty"`
}

func (x *StatusNotifyFunction) Reset() {
	*x = StatusNotifyFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusNotifyFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusNotifyFunction) ProtoMessage() {}

func (x *StatusNotifyFunction) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusNotifyFunction.ProtoReflect.Descriptor instead.
func (*StatusNotifyFunction) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{342}
}

func (x *StatusNotifyFunction) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *StatusNotifyFunction) GetArg() string {
	if x != nil && x.Arg != nil {
		return *x.Arg
	}
	return ""
}

type ChatContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *string `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
}

func (x *ChatContact) Reset() {
	*x = ChatContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatContact) ProtoMessage() {}

func (x *ChatContact) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatContact.ProtoReflect.Descriptor instead.
func (*ChatContact) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{343}
}

func (x *ChatContact) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

type RealTimeKVReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	DeviceModel *string      `protobuf:"bytes,2,opt,name=deviceModel" json:"deviceModel,omitempty"`
	DeviceBrand *string      `protobuf:"bytes,3,opt,name=deviceBrand" json:"deviceBrand,omitempty"`
	OsName      *string      `protobuf:"bytes,4,opt,name=osName" json:"osName,omitempty"`
	OsVersion   *string      `protobuf:"bytes,5,opt,name=osVersion" json:"osVersion,omitempty"`
	LanguageVer *string      `protobuf:"bytes,6,opt,name=languageVer" json:"languageVer,omitempty"`
	LogId       *uint32      `protobuf:"varint,7,opt,name=logId" json:"logId,omitempty"`
	Value       *string      `protobuf:"bytes,8,opt,name=value" json:"value,omitempty"`
}

func (x *RealTimeKVReportReq) Reset() {
	*x = RealTimeKVReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealTimeKVReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeKVReportReq) ProtoMessage() {}

func (x *RealTimeKVReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeKVReportReq.ProtoReflect.Descriptor instead.
func (*RealTimeKVReportReq) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{344}
}

func (x *RealTimeKVReportReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *RealTimeKVReportReq) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

func (x *RealTimeKVReportReq) GetDeviceBrand() string {
	if x != nil && x.DeviceBrand != nil {
		return *x.DeviceBrand
	}
	return ""
}

func (x *RealTimeKVReportReq) GetOsName() string {
	if x != nil && x.OsName != nil {
		return *x.OsName
	}
	return ""
}

func (x *RealTimeKVReportReq) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

func (x *RealTimeKVReportReq) GetLanguageVer() string {
	if x != nil && x.LanguageVer != nil {
		return *x.LanguageVer
	}
	return ""
}

func (x *RealTimeKVReportReq) GetLogId() uint32 {
	if x != nil && x.LogId != nil {
		return *x.LogId
	}
	return 0
}

func (x *RealTimeKVReportReq) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type RealTimeKVReportResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
}

func (x *RealTimeKVReportResp) Reset() {
	*x = RealTimeKVReportResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealTimeKVReportResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeKVReportResp) ProtoMessage() {}

func (x *RealTimeKVReportResp) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeKVReportResp.ProtoReflect.Descriptor instead.
func (*RealTimeKVReportResp) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{345}
}

func (x *RealTimeKVReportResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type FPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	Randomkey   []byte       `protobuf:"bytes,2,opt,name=randomkey" json:"randomkey,omitempty"`
	SpamBuff    []byte       `protobuf:"bytes,3,opt,name=spamBuff" json:"spamBuff,omitempty"`
}

func (x *FPRequest) Reset() {
	*x = FPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FPRequest) ProtoMessage() {}

func (x *FPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FPRequest.ProtoReflect.Descriptor instead.
func (*FPRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{346}
}

func (x *FPRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FPRequest) GetRandomkey() []byte {
	if x != nil {
		return x.Randomkey
	}
	return nil
}

func (x *FPRequest) GetSpamBuff() []byte {
	if x != nil {
		return x.SpamBuff
	}
	return nil
}

type FPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	SpamBuff     []byte        `protobuf:"bytes,2,opt,name=spamBuff" json:"spamBuff,omitempty"`
}

func (x *FPResponse) Reset() {
	*x = FPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FPResponse) ProtoMessage() {}

func (x *FPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FPResponse.ProtoReflect.Descriptor instead.
func (*FPResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{347}
}

func (x *FPResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FPResponse) GetSpamBuff() []byte {
	if x != nil {
		return x.SpamBuff
	}
	return nil
}

type Test24 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnKnown1    *uint32     `protobuf:"varint,1,opt,name=unKnown1" json:"unKnown1,omitempty"`
	UnKnown2    *uint32     `protobuf:"varint,2,opt,name=unKnown2" json:"unKnown2,omitempty"`
	UnKnown3    *uint32     `protobuf:"varint,3,opt,name=unKnown3" json:"unKnown3,omitempty"`
	UnKnown4    *string     `protobuf:"bytes,11,opt,name=unKnown4" json:"unKnown4,omitempty"`
	UnKnown5    *string     `protobuf:"bytes,12,opt,name=unKnown5" json:"unKnown5,omitempty"`
	UnKnown6    *string     `protobuf:"bytes,13,opt,name=unKnown6" json:"unKnown6,omitempty"`
	UnKnown7    *string     `protobuf:"bytes,14,opt,name=unKnown7" json:"unKnown7,omitempty"`
	UnKnown8    *uint32     `protobuf:"varint,15,opt,name=unKnown8" json:"unKnown8,omitempty"`
	UnKnown9    *string     `protobuf:"bytes,16,opt,name=unKnown9" json:"unKnown9,omitempty"`
	UnKnown10   *string     `protobuf:"bytes,17,opt,name=unKnown10" json:"unKnown10,omitempty"`
	UnKnown11   *string     `protobuf:"bytes,18,opt,name=unKnown11" json:"unKnown11,omitempty"`
	UnKnown12   *uint32     `protobuf:"varint,19,opt,name=unKnown12" json:"unKnown12,omitempty"`
	UnKnown13   *string     `protobuf:"bytes,20,opt,name=unKnown13" json:"unKnown13,omitempty"`
	UnKnown14   *uint32     `protobuf:"varint,21,opt,name=unKnown14" json:"unKnown14,omitempty"`
	UnKnown15   *string     `protobuf:"bytes,22,opt,name=unKnown15" json:"unKnown15,omitempty"`
	UnKnown16   *string     `protobuf:"bytes,23,opt,name=unKnown16" json:"unKnown16,omitempty"`
	UnKnown17   *string     `protobuf:"bytes,24,opt,name=unKnown17" json:"unKnown17,omitempty"`
	UnKnown18   *int64      `protobuf:"varint,25,opt,name=unKnown18" json:"unKnown18,omitempty"`
	UnKnown19   *uint64     `protobuf:"varint,26,opt,name=unKnown19" json:"unKnown19,omitempty"`
	UnKnown20   *uint32     `protobuf:"varint,27,opt,name=unKnown20" json:"unKnown20,omitempty"`
	UnKnown21   *uint32     `protobuf:"varint,28,opt,name=unKnown21" json:"unKnown21,omitempty"`
	UnKnown22   *string     `protobuf:"bytes,29,opt,name=unKnown22" json:"unKnown22,omitempty"`
	UnKnown23   *string     `protobuf:"bytes,30,opt,name=unKnown23" json:"unKnown23,omitempty"`
	UnKnown24   *int32      `protobuf:"varint,31,opt,name=unKnown24" json:"unKnown24,omitempty"`
	UnKnown25   *string     `protobuf:"bytes,32,opt,name=unKnown25" json:"unKnown25,omitempty"`
	UnKnown26   *uint32     `protobuf:"varint,33,opt,name=unKnown26" json:"unKnown26,omitempty"`
	UnKnown27   *uint32     `protobuf:"varint,34,opt,name=unKnown27" json:"unKnown27,omitempty"`
	UnKnown28   *string     `protobuf:"bytes,35,opt,name=unKnown28" json:"unKnown28,omitempty"`
	UnKnown29   *string     `protobuf:"bytes,36,opt,name=unKnown29" json:"unKnown29,omitempty"`
	UnKnown30   *string     `protobuf:"bytes,37,opt,name=unKnown30" json:"unKnown30,omitempty"`
	UnKnown31   *string     `protobuf:"bytes,38,opt,name=unKnown31" json:"unKnown31,omitempty"`
	UnKnown32   *string     `protobuf:"bytes,39,opt,name=unKnown32" json:"unKnown32,omitempty"`
	UnKnown33   *string     `protobuf:"bytes,40,opt,name=unKnown33" json:"unKnown33,omitempty"`
	UnKnown34   *string     `protobuf:"bytes,41,opt,name=unKnown34" json:"unKnown34,omitempty"`
	UnKnown35   *string     `protobuf:"bytes,42,opt,name=unKnown35" json:"unKnown35,omitempty"`
	UnKnown36   *string     `protobuf:"bytes,43,opt,name=unKnown36" json:"unKnown36,omitempty"`
	UnKnown37   *string     `protobuf:"bytes,44,opt,name=unKnown37" json:"unKnown37,omitempty"`
	UnKnown38   *string     `protobuf:"bytes,45,opt,name=unKnown38" json:"unKnown38,omitempty"`
	AppFileInfo []*FileInfo `protobuf:"bytes,46,rep,name=appFileInfo" json:"appFileInfo,omitempty"`
	Unknown39   *string     `protobuf:"bytes,47,opt,name=unknown39" json:"unknown39,omitempty"`
	UnKnown40   *uint32     `protobuf:"varint,50,opt,name=unKnown40" json:"unKnown40,omitempty"`
	UnKnown41   *string     `protobuf:"bytes,51,opt,name=unKnown41" json:"unKnown41,omitempty"`
	UnKnown42   *uint64     `protobuf:"varint,52,opt,name=unKnown42" json:"unKnown42,omitempty"`
	Unknown43   *uint64     `protobuf:"varint,53,opt,name=unknown43" json:"unknown43,omitempty"`
	Unknown44   *uint64     `protobuf:"varint,54,opt,name=unknown44" json:"unknown44,omitempty"`
	Unknown45   *uint64     `protobuf:"varint,55,opt,name=unknown45" json:"unknown45,omitempty"`
	Unknown46   *uint64     `protobuf:"varint,56,opt,name=unknown46" json:"unknown46,omitempty"`
	Unknown47   *uint64     `protobuf:"varint,57,opt,name=unknown47" json:"unknown47,omitempty"`
	Unknown48   *string     `protobuf:"bytes,58,opt,name=unknown48" json:"unknown48,omitempty"`
	Unknown49   *string     `protobuf:"bytes,59,opt,name=unknown49" json:"unknown49,omitempty"`
	Unknown50   *string     `protobuf:"bytes,60,opt,name=unknown50" json:"unknown50,omitempty"`
	Unknown51   *string     `protobuf:"bytes,61,opt,name=unknown51" json:"unknown51,omitempty"`
	Unknown52   *uint64     `protobuf:"varint,62,opt,name=unknown52" json:"unknown52,omitempty"`
	Unknown53   *string     `protobuf:"bytes,63,opt,name=unknown53" json:"unknown53,omitempty"`
	Unknown54   *string     `protobuf:"bytes,64,opt,name=unknown54" json:"unknown54,omitempty"`
}

func (x *Test24) Reset() {
	*x = Test24{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test24) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test24) ProtoMessage() {}

func (x *Test24) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test24.ProtoReflect.Descriptor instead.
func (*Test24) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{348}
}

func (x *Test24) GetUnKnown1() uint32 {
	if x != nil && x.UnKnown1 != nil {
		return *x.UnKnown1
	}
	return 0
}

func (x *Test24) GetUnKnown2() uint32 {
	if x != nil && x.UnKnown2 != nil {
		return *x.UnKnown2
	}
	return 0
}

func (x *Test24) GetUnKnown3() uint32 {
	if x != nil && x.UnKnown3 != nil {
		return *x.UnKnown3
	}
	return 0
}

func (x *Test24) GetUnKnown4() string {
	if x != nil && x.UnKnown4 != nil {
		return *x.UnKnown4
	}
	return ""
}

func (x *Test24) GetUnKnown5() string {
	if x != nil && x.UnKnown5 != nil {
		return *x.UnKnown5
	}
	return ""
}

func (x *Test24) GetUnKnown6() string {
	if x != nil && x.UnKnown6 != nil {
		return *x.UnKnown6
	}
	return ""
}

func (x *Test24) GetUnKnown7() string {
	if x != nil && x.UnKnown7 != nil {
		return *x.UnKnown7
	}
	return ""
}

func (x *Test24) GetUnKnown8() uint32 {
	if x != nil && x.UnKnown8 != nil {
		return *x.UnKnown8
	}
	return 0
}

func (x *Test24) GetUnKnown9() string {
	if x != nil && x.UnKnown9 != nil {
		return *x.UnKnown9
	}
	return ""
}

func (x *Test24) GetUnKnown10() string {
	if x != nil && x.UnKnown10 != nil {
		return *x.UnKnown10
	}
	return ""
}

func (x *Test24) GetUnKnown11() string {
	if x != nil && x.UnKnown11 != nil {
		return *x.UnKnown11
	}
	return ""
}

func (x *Test24) GetUnKnown12() uint32 {
	if x != nil && x.UnKnown12 != nil {
		return *x.UnKnown12
	}
	return 0
}

func (x *Test24) GetUnKnown13() string {
	if x != nil && x.UnKnown13 != nil {
		return *x.UnKnown13
	}
	return ""
}

func (x *Test24) GetUnKnown14() uint32 {
	if x != nil && x.UnKnown14 != nil {
		return *x.UnKnown14
	}
	return 0
}

func (x *Test24) GetUnKnown15() string {
	if x != nil && x.UnKnown15 != nil {
		return *x.UnKnown15
	}
	return ""
}

func (x *Test24) GetUnKnown16() string {
	if x != nil && x.UnKnown16 != nil {
		return *x.UnKnown16
	}
	return ""
}

func (x *Test24) GetUnKnown17() string {
	if x != nil && x.UnKnown17 != nil {
		return *x.UnKnown17
	}
	return ""
}

func (x *Test24) GetUnKnown18() int64 {
	if x != nil && x.UnKnown18 != nil {
		return *x.UnKnown18
	}
	return 0
}

func (x *Test24) GetUnKnown19() uint64 {
	if x != nil && x.UnKnown19 != nil {
		return *x.UnKnown19
	}
	return 0
}

func (x *Test24) GetUnKnown20() uint32 {
	if x != nil && x.UnKnown20 != nil {
		return *x.UnKnown20
	}
	return 0
}

func (x *Test24) GetUnKnown21() uint32 {
	if x != nil && x.UnKnown21 != nil {
		return *x.UnKnown21
	}
	return 0
}

func (x *Test24) GetUnKnown22() string {
	if x != nil && x.UnKnown22 != nil {
		return *x.UnKnown22
	}
	return ""
}

func (x *Test24) GetUnKnown23() string {
	if x != nil && x.UnKnown23 != nil {
		return *x.UnKnown23
	}
	return ""
}

func (x *Test24) GetUnKnown24() int32 {
	if x != nil && x.UnKnown24 != nil {
		return *x.UnKnown24
	}
	return 0
}

func (x *Test24) GetUnKnown25() string {
	if x != nil && x.UnKnown25 != nil {
		return *x.UnKnown25
	}
	return ""
}

func (x *Test24) GetUnKnown26() uint32 {
	if x != nil && x.UnKnown26 != nil {
		return *x.UnKnown26
	}
	return 0
}

func (x *Test24) GetUnKnown27() uint32 {
	if x != nil && x.UnKnown27 != nil {
		return *x.UnKnown27
	}
	return 0
}

func (x *Test24) GetUnKnown28() string {
	if x != nil && x.UnKnown28 != nil {
		return *x.UnKnown28
	}
	return ""
}

func (x *Test24) GetUnKnown29() string {
	if x != nil && x.UnKnown29 != nil {
		return *x.UnKnown29
	}
	return ""
}

func (x *Test24) GetUnKnown30() string {
	if x != nil && x.UnKnown30 != nil {
		return *x.UnKnown30
	}
	return ""
}

func (x *Test24) GetUnKnown31() string {
	if x != nil && x.UnKnown31 != nil {
		return *x.UnKnown31
	}
	return ""
}

func (x *Test24) GetUnKnown32() string {
	if x != nil && x.UnKnown32 != nil {
		return *x.UnKnown32
	}
	return ""
}

func (x *Test24) GetUnKnown33() string {
	if x != nil && x.UnKnown33 != nil {
		return *x.UnKnown33
	}
	return ""
}

func (x *Test24) GetUnKnown34() string {
	if x != nil && x.UnKnown34 != nil {
		return *x.UnKnown34
	}
	return ""
}

func (x *Test24) GetUnKnown35() string {
	if x != nil && x.UnKnown35 != nil {
		return *x.UnKnown35
	}
	return ""
}

func (x *Test24) GetUnKnown36() string {
	if x != nil && x.UnKnown36 != nil {
		return *x.UnKnown36
	}
	return ""
}

func (x *Test24) GetUnKnown37() string {
	if x != nil && x.UnKnown37 != nil {
		return *x.UnKnown37
	}
	return ""
}

func (x *Test24) GetUnKnown38() string {
	if x != nil && x.UnKnown38 != nil {
		return *x.UnKnown38
	}
	return ""
}

func (x *Test24) GetAppFileInfo() []*FileInfo {
	if x != nil {
		return x.AppFileInfo
	}
	return nil
}

func (x *Test24) GetUnknown39() string {
	if x != nil && x.Unknown39 != nil {
		return *x.Unknown39
	}
	return ""
}

func (x *Test24) GetUnKnown40() uint32 {
	if x != nil && x.UnKnown40 != nil {
		return *x.UnKnown40
	}
	return 0
}

func (x *Test24) GetUnKnown41() string {
	if x != nil && x.UnKnown41 != nil {
		return *x.UnKnown41
	}
	return ""
}

func (x *Test24) GetUnKnown42() uint64 {
	if x != nil && x.UnKnown42 != nil {
		return *x.UnKnown42
	}
	return 0
}

func (x *Test24) GetUnknown43() uint64 {
	if x != nil && x.Unknown43 != nil {
		return *x.Unknown43
	}
	return 0
}

func (x *Test24) GetUnknown44() uint64 {
	if x != nil && x.Unknown44 != nil {
		return *x.Unknown44
	}
	return 0
}

func (x *Test24) GetUnknown45() uint64 {
	if x != nil && x.Unknown45 != nil {
		return *x.Unknown45
	}
	return 0
}

func (x *Test24) GetUnknown46() uint64 {
	if x != nil && x.Unknown46 != nil {
		return *x.Unknown46
	}
	return 0
}

func (x *Test24) GetUnknown47() uint64 {
	if x != nil && x.Unknown47 != nil {
		return *x.Unknown47
	}
	return 0
}

func (x *Test24) GetUnknown48() string {
	if x != nil && x.Unknown48 != nil {
		return *x.Unknown48
	}
	return ""
}

func (x *Test24) GetUnknown49() string {
	if x != nil && x.Unknown49 != nil {
		return *x.Unknown49
	}
	return ""
}

func (x *Test24) GetUnknown50() string {
	if x != nil && x.Unknown50 != nil {
		return *x.Unknown50
	}
	return ""
}

func (x *Test24) GetUnknown51() string {
	if x != nil && x.Unknown51 != nil {
		return *x.Unknown51
	}
	return ""
}

func (x *Test24) GetUnknown52() uint64 {
	if x != nil && x.Unknown52 != nil {
		return *x.Unknown52
	}
	return 0
}

func (x *Test24) GetUnknown53() string {
	if x != nil && x.Unknown53 != nil {
		return *x.Unknown53
	}
	return ""
}

func (x *Test24) GetUnknown54() string {
	if x != nil && x.Unknown54 != nil {
		return *x.Unknown54
	}
	return ""
}

type OauthAuthorizeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	OauthUrl    *string      `protobuf:"bytes,2,opt,name=oauthUrl" json:"oauthUrl,omitempty"`
	BizUsername *string      `protobuf:"bytes,3,opt,name=bizUsername" json:"bizUsername,omitempty"`
	Scene       *uint32      `protobuf:"varint,4,opt,name=scene" json:"scene,omitempty"`
}

func (x *OauthAuthorizeReq) Reset() {
	*x = OauthAuthorizeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OauthAuthorizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthAuthorizeReq) ProtoMessage() {}

func (x *OauthAuthorizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthAuthorizeReq.ProtoReflect.Descriptor instead.
func (*OauthAuthorizeReq) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{349}
}

func (x *OauthAuthorizeReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *OauthAuthorizeReq) GetOauthUrl() string {
	if x != nil && x.OauthUrl != nil {
		return *x.OauthUrl
	}
	return ""
}

func (x *OauthAuthorizeReq) GetBizUsername() string {
	if x != nil && x.BizUsername != nil {
		return *x.BizUsername
	}
	return ""
}

func (x *OauthAuthorizeReq) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

type OauthAuthorizeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse            *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	ScopeList               [][]byte      `protobuf:"bytes,2,rep,name=scopeList" json:"scopeList,omitempty"`
	Appname                 *string       `protobuf:"bytes,4,opt,name=appname" json:"appname,omitempty"`
	AppiconUrl              *string       `protobuf:"bytes,5,opt,name=appiconUrl" json:"appiconUrl,omitempty"`
	RedirectUrl             *string       `protobuf:"bytes,6,opt,name=redirectUrl" json:"redirectUrl,omitempty"`
	IsRecentHasAuth         *bool         `protobuf:"varint,9,opt,name=isRecentHasAuth" json:"isRecentHasAuth,omitempty"`
	IsSlienctAuth           *bool         `protobuf:"varint,10,opt,name=isSlienctAuth" json:"isSlienctAuth,omitempty"`
	IsCallServerWhenConfirm *bool         `protobuf:"varint,11,opt,name=isCallServerWhenConfirm" json:"isCallServerWhenConfirm,omitempty"`
}

func (x *OauthAuthorizeResp) Reset() {
	*x = OauthAuthorizeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OauthAuthorizeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthAuthorizeResp) ProtoMessage() {}

func (x *OauthAuthorizeResp) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthAuthorizeResp.ProtoReflect.Descriptor instead.
func (*OauthAuthorizeResp) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{350}
}

func (x *OauthAuthorizeResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *OauthAuthorizeResp) GetScopeList() [][]byte {
	if x != nil {
		return x.ScopeList
	}
	return nil
}

func (x *OauthAuthorizeResp) GetAppname() string {
	if x != nil && x.Appname != nil {
		return *x.Appname
	}
	return ""
}

func (x *OauthAuthorizeResp) GetAppiconUrl() string {
	if x != nil && x.AppiconUrl != nil {
		return *x.AppiconUrl
	}
	return ""
}

func (x *OauthAuthorizeResp) GetRedirectUrl() string {
	if x != nil && x.RedirectUrl != nil {
		return *x.RedirectUrl
	}
	return ""
}

func (x *OauthAuthorizeResp) GetIsRecentHasAuth() bool {
	if x != nil && x.IsRecentHasAuth != nil {
		return *x.IsRecentHasAuth
	}
	return false
}

func (x *OauthAuthorizeResp) GetIsSlienctAuth() bool {
	if x != nil && x.IsSlienctAuth != nil {
		return *x.IsSlienctAuth
	}
	return false
}

func (x *OauthAuthorizeResp) GetIsCallServerWhenConfirm() bool {
	if x != nil && x.IsCallServerWhenConfirm != nil {
		return *x.IsCallServerWhenConfirm
	}
	return false
}

type JSAPIPreVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest     *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	Url             *string      `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Appid           *string      `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	JsapiList       []string     `protobuf:"bytes,4,rep,name=jsapiList" json:"jsapiList,omitempty"`
	Timestamp       *string      `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Noncestr        *string      `protobuf:"bytes,6,opt,name=noncestr" json:"noncestr,omitempty"`
	Signature       *string      `protobuf:"bytes,7,opt,name=signature" json:"signature,omitempty"`
	SignatureMethod *string      `protobuf:"bytes,8,opt,name=signatureMethod" json:"signatureMethod,omitempty"`
	Scene           *uint32      `protobuf:"varint,9,opt,name=scene" json:"scene,omitempty"`
	SourceAppid     *string      `protobuf:"bytes,10,opt,name=sourceAppid" json:"sourceAppid,omitempty"`
	TagnameList     [][]byte     `protobuf:"bytes,11,rep,name=tagnameList" json:"tagnameList,omitempty"`
}

func (x *JSAPIPreVerifyRequest) Reset() {
	*x = JSAPIPreVerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSAPIPreVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSAPIPreVerifyRequest) ProtoMessage() {}

func (x *JSAPIPreVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSAPIPreVerifyRequest.ProtoReflect.Descriptor instead.
func (*JSAPIPreVerifyRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{351}
}

func (x *JSAPIPreVerifyRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *JSAPIPreVerifyRequest) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *JSAPIPreVerifyRequest) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *JSAPIPreVerifyRequest) GetJsapiList() []string {
	if x != nil {
		return x.JsapiList
	}
	return nil
}

func (x *JSAPIPreVerifyRequest) GetTimestamp() string {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return ""
}

func (x *JSAPIPreVerifyRequest) GetNoncestr() string {
	if x != nil && x.Noncestr != nil {
		return *x.Noncestr
	}
	return ""
}

func (x *JSAPIPreVerifyRequest) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *JSAPIPreVerifyRequest) GetSignatureMethod() string {
	if x != nil && x.SignatureMethod != nil {
		return *x.SignatureMethod
	}
	return ""
}

func (x *JSAPIPreVerifyRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *JSAPIPreVerifyRequest) GetSourceAppid() string {
	if x != nil && x.SourceAppid != nil {
		return *x.SourceAppid
	}
	return ""
}

func (x *JSAPIPreVerifyRequest) GetTagnameList() [][]byte {
	if x != nil {
		return x.TagnameList
	}
	return nil
}

type JSAPIPreVerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse      *BaseResponse      `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	JsapiBaseresponse *JSAPIBaseResponse `protobuf:"bytes,2,opt,name=jsapiBaseresponse" json:"jsapiBaseresponse,omitempty"`
	VerifyInfoList    []string           `protobuf:"bytes,3,rep,name=verifyInfoList" json:"verifyInfoList,omitempty"`
	DomainPathList    []string           `protobuf:"bytes,4,rep,name=domainPathList" json:"domainPathList,omitempty"`
	AppHeadimgUrl     *string            `protobuf:"bytes,5,opt,name=appHeadimgUrl" json:"appHeadimgUrl,omitempty"`
	AuthWebCompt      []byte             `protobuf:"bytes,6,opt,name=authWebCompt" json:"authWebCompt,omitempty"`
}

func (x *JSAPIPreVerifyResponse) Reset() {
	*x = JSAPIPreVerifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSAPIPreVerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSAPIPreVerifyResponse) ProtoMessage() {}

func (x *JSAPIPreVerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSAPIPreVerifyResponse.ProtoReflect.Descriptor instead.
func (*JSAPIPreVerifyResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{352}
}

func (x *JSAPIPreVerifyResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *JSAPIPreVerifyResponse) GetJsapiBaseresponse() *JSAPIBaseResponse {
	if x != nil {
		return x.JsapiBaseresponse
	}
	return nil
}

func (x *JSAPIPreVerifyResponse) GetVerifyInfoList() []string {
	if x != nil {
		return x.VerifyInfoList
	}
	return nil
}

func (x *JSAPIPreVerifyResponse) GetDomainPathList() []string {
	if x != nil {
		return x.DomainPathList
	}
	return nil
}

func (x *JSAPIPreVerifyResponse) GetAppHeadimgUrl() string {
	if x != nil && x.AppHeadimgUrl != nil {
		return *x.AppHeadimgUrl
	}
	return ""
}

func (x *JSAPIPreVerifyResponse) GetAuthWebCompt() []byte {
	if x != nil {
		return x.AuthWebCompt
	}
	return nil
}

type F2FQrcodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
}

func (x *F2FQrcodeRequest) Reset() {
	*x = F2FQrcodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FQrcodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FQrcodeRequest) ProtoMessage() {}

func (x *F2FQrcodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FQrcodeRequest.ProtoReflect.Descriptor instead.
func (*F2FQrcodeRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{353}
}

func (x *F2FQrcodeRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

type F2FQrcodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse         *BaseResponse    `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	Url                  *string          `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	UpperRightItems      []byte           `protobuf:"bytes,3,opt,name=upperRightItems" json:"upperRightItems,omitempty"`
	BottomItem           *MenuItem        `protobuf:"bytes,4,opt,name=bottomItem" json:"bottomItem,omitempty"`
	TrueName             *string          `protobuf:"bytes,5,opt,name=trueName" json:"trueName,omitempty"`
	BottomleftIconUrl    *string          `protobuf:"bytes,6,opt,name=bottomleftIconUrl" json:"bottomleftIconUrl,omitempty"`
	BottomRightArrowFlag *bool            `protobuf:"varint,7,opt,name=bottomRightArrowFlag" json:"bottomRightArrowFlag,omitempty"`
	BusiType             *uint32          `protobuf:"varint,8,opt,name=busiType" json:"busiType,omitempty"`
	UpperWording         *string          `protobuf:"bytes,9,opt,name=upperWording" json:"upperWording,omitempty"`
	MchName              *string          `protobuf:"bytes,10,opt,name=mchName" json:"mchName,omitempty"`
	MchPhoto             *string          `protobuf:"bytes,11,opt,name=mchPhoto" json:"mchPhoto,omitempty"`
	GuideMaterialFlag    *uint32          `protobuf:"varint,12,opt,name=guideMaterialFlag" json:"guideMaterialFlag,omitempty"`
	BuyMaterialInfo      *MiniProgramInfo `protobuf:"bytes,13,opt,name=buyMaterialInfo" json:"buyMaterialInfo,omitempty"`
}

func (x *F2FQrcodeResponse) Reset() {
	*x = F2FQrcodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FQrcodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FQrcodeResponse) ProtoMessage() {}

func (x *F2FQrcodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FQrcodeResponse.ProtoReflect.Descriptor instead.
func (*F2FQrcodeResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{354}
}

func (x *F2FQrcodeResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *F2FQrcodeResponse) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *F2FQrcodeResponse) GetUpperRightItems() []byte {
	if x != nil {
		return x.UpperRightItems
	}
	return nil
}

func (x *F2FQrcodeResponse) GetBottomItem() *MenuItem {
	if x != nil {
		return x.BottomItem
	}
	return nil
}

func (x *F2FQrcodeResponse) GetTrueName() string {
	if x != nil && x.TrueName != nil {
		return *x.TrueName
	}
	return ""
}

func (x *F2FQrcodeResponse) GetBottomleftIconUrl() string {
	if x != nil && x.BottomleftIconUrl != nil {
		return *x.BottomleftIconUrl
	}
	return ""
}

func (x *F2FQrcodeResponse) GetBottomRightArrowFlag() bool {
	if x != nil && x.BottomRightArrowFlag != nil {
		return *x.BottomRightArrowFlag
	}
	return false
}

func (x *F2FQrcodeResponse) GetBusiType() uint32 {
	if x != nil && x.BusiType != nil {
		return *x.BusiType
	}
	return 0
}

func (x *F2FQrcodeResponse) GetUpperWording() string {
	if x != nil && x.UpperWording != nil {
		return *x.UpperWording
	}
	return ""
}

func (x *F2FQrcodeResponse) GetMchName() string {
	if x != nil && x.MchName != nil {
		return *x.MchName
	}
	return ""
}

func (x *F2FQrcodeResponse) GetMchPhoto() string {
	if x != nil && x.MchPhoto != nil {
		return *x.MchPhoto
	}
	return ""
}

func (x *F2FQrcodeResponse) GetGuideMaterialFlag() uint32 {
	if x != nil && x.GuideMaterialFlag != nil {
		return *x.GuideMaterialFlag
	}
	return 0
}

func (x *F2FQrcodeResponse) GetBuyMaterialInfo() *MiniProgramInfo {
	if x != nil {
		return x.BuyMaterialInfo
	}
	return nil
}

type MenuItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Wording       *string `protobuf:"bytes,2,opt,name=wording" json:"wording,omitempty"`
	Url           *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	WaappUsername *string `protobuf:"bytes,4,opt,name=waappUsername" json:"waappUsername,omitempty"`
	WaappPath     *string `protobuf:"bytes,5,opt,name=waappPath" json:"waappPath,omitempty"`
	Subwording    *string `protobuf:"bytes,6,opt,name=subwording" json:"subwording,omitempty"`
	IsShowRed     *uint32 `protobuf:"varint,7,opt,name=isShowRed" json:"isShowRed,omitempty"`
}

func (x *MenuItem) Reset() {
	*x = MenuItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuItem) ProtoMessage() {}

func (x *MenuItem) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuItem.ProtoReflect.Descriptor instead.
func (*MenuItem) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{355}
}

func (x *MenuItem) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *MenuItem) GetWording() string {
	if x != nil && x.Wording != nil {
		return *x.Wording
	}
	return ""
}

func (x *MenuItem) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *MenuItem) GetWaappUsername() string {
	if x != nil && x.WaappUsername != nil {
		return *x.WaappUsername
	}
	return ""
}

func (x *MenuItem) GetWaappPath() string {
	if x != nil && x.WaappPath != nil {
		return *x.WaappPath
	}
	return ""
}

func (x *MenuItem) GetSubwording() string {
	if x != nil && x.Subwording != nil {
		return *x.Subwording
	}
	return ""
}

func (x *MenuItem) GetIsShowRed() uint32 {
	if x != nil && x.IsShowRed != nil {
		return *x.IsShowRed
	}
	return 0
}

type MiniProgramInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username *string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	PagePath *string `protobuf:"bytes,2,opt,name=pagePath" json:"pagePath,omitempty"`
}

func (x *MiniProgramInfo) Reset() {
	*x = MiniProgramInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniProgramInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniProgramInfo) ProtoMessage() {}

func (x *MiniProgramInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniProgramInfo.ProtoReflect.Descriptor instead.
func (*MiniProgramInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{356}
}

func (x *MiniProgramInfo) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *MiniProgramInfo) GetPagePath() string {
	if x != nil && x.PagePath != nil {
		return *x.PagePath
	}
	return ""
}

type SdkOauthAuthorizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	Appid       *string      `protobuf:"bytes,2,opt,name=Appid" json:"Appid,omitempty"`
	Userinfo    *string      `protobuf:"bytes,3,opt,name=userinfo" json:"userinfo,omitempty"`
	Tag4        *string      `protobuf:"bytes,4,opt,name=tag4" json:"tag4,omitempty"`
	Url         *string      `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	Tag8        *string      `protobuf:"bytes,8,opt,name=tag8" json:"tag8,omitempty"`
	Tag9        *string      `protobuf:"bytes,9,opt,name=tag9" json:"tag9,omitempty"`
	Tag10       *string      `protobuf:"bytes,10,opt,name=tag10" json:"tag10,omitempty"`
	Tag11       *string      `protobuf:"bytes,11,opt,name=tag11" json:"tag11,omitempty"`
	Tag12       *int32       `protobuf:"varint,12,opt,name=tag12" json:"tag12,omitempty"`
}

func (x *SdkOauthAuthorizeRequest) Reset() {
	*x = SdkOauthAuthorizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOauthAuthorizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOauthAuthorizeRequest) ProtoMessage() {}

func (x *SdkOauthAuthorizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOauthAuthorizeRequest.ProtoReflect.Descriptor instead.
func (*SdkOauthAuthorizeRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{357}
}

func (x *SdkOauthAuthorizeRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SdkOauthAuthorizeRequest) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *SdkOauthAuthorizeRequest) GetUserinfo() string {
	if x != nil && x.Userinfo != nil {
		return *x.Userinfo
	}
	return ""
}

func (x *SdkOauthAuthorizeRequest) GetTag4() string {
	if x != nil && x.Tag4 != nil {
		return *x.Tag4
	}
	return ""
}

func (x *SdkOauthAuthorizeRequest) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *SdkOauthAuthorizeRequest) GetTag8() string {
	if x != nil && x.Tag8 != nil {
		return *x.Tag8
	}
	return ""
}

func (x *SdkOauthAuthorizeRequest) GetTag9() string {
	if x != nil && x.Tag9 != nil {
		return *x.Tag9
	}
	return ""
}

func (x *SdkOauthAuthorizeRequest) GetTag10() string {
	if x != nil && x.Tag10 != nil {
		return *x.Tag10
	}
	return ""
}

func (x *SdkOauthAuthorizeRequest) GetTag11() string {
	if x != nil && x.Tag11 != nil {
		return *x.Tag11
	}
	return ""
}

func (x *SdkOauthAuthorizeRequest) GetTag12() int32 {
	if x != nil && x.Tag12 != nil {
		return *x.Tag12
	}
	return 0
}

type TenPayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest       `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	CgiCmd      *uint32            `protobuf:"varint,2,opt,name=cgiCmd" json:"cgiCmd,omitempty"`
	OutPutType  *uint32            `protobuf:"varint,3,opt,name=outPutType" json:"outPutType,omitempty"`
	ReqText     *SKBuiltinString_S `protobuf:"bytes,4,opt,name=reqText" json:"reqText,omitempty"`
	ReqTextWx   *SKBuiltinString_S `protobuf:"bytes,5,opt,name=reqTextWx" json:"reqTextWx,omitempty"`
}

func (x *TenPayRequest) Reset() {
	*x = TenPayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenPayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenPayRequest) ProtoMessage() {}

func (x *TenPayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenPayRequest.ProtoReflect.Descriptor instead.
func (*TenPayRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{358}
}

func (x *TenPayRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *TenPayRequest) GetCgiCmd() uint32 {
	if x != nil && x.CgiCmd != nil {
		return *x.CgiCmd
	}
	return 0
}

func (x *TenPayRequest) GetOutPutType() uint32 {
	if x != nil && x.OutPutType != nil {
		return *x.OutPutType
	}
	return 0
}

func (x *TenPayRequest) GetReqText() *SKBuiltinString_S {
	if x != nil {
		return x.ReqText
	}
	return nil
}

func (x *TenPayRequest) GetReqTextWx() *SKBuiltinString_S {
	if x != nil {
		return x.ReqTextWx
	}
	return nil
}

type TenPayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse  *BaseResponse      `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	ReqText       *SKBuiltinString_S `protobuf:"bytes,2,opt,name=reqText" json:"reqText,omitempty"`
	PlatRet       *int32             `protobuf:"varint,3,opt,name=platRet" json:"platRet,omitempty"`
	PlatMsg       *string            `protobuf:"bytes,4,opt,name=platMsg" json:"platMsg,omitempty"`
	CgiCmdid      *uint32            `protobuf:"varint,5,opt,name=cgiCmdid" json:"cgiCmdid,omitempty"`
	TenpayErrType *int32             `protobuf:"varint,6,opt,name=tenpayErrType" json:"tenpayErrType,omitempty"`
	TenpayErrMsg  *string            `protobuf:"bytes,7,opt,name=tenpayErrMsg" json:"tenpayErrMsg,omitempty"`
}

func (x *TenPayResponse) Reset() {
	*x = TenPayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenPayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenPayResponse) ProtoMessage() {}

func (x *TenPayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenPayResponse.ProtoReflect.Descriptor instead.
func (*TenPayResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{359}
}

func (x *TenPayResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *TenPayResponse) GetReqText() *SKBuiltinString_S {
	if x != nil {
		return x.ReqText
	}
	return nil
}

func (x *TenPayResponse) GetPlatRet() int32 {
	if x != nil && x.PlatRet != nil {
		return *x.PlatRet
	}
	return 0
}

func (x *TenPayResponse) GetPlatMsg() string {
	if x != nil && x.PlatMsg != nil {
		return *x.PlatMsg
	}
	return ""
}

func (x *TenPayResponse) GetCgiCmdid() uint32 {
	if x != nil && x.CgiCmdid != nil {
		return *x.CgiCmdid
	}
	return 0
}

func (x *TenPayResponse) GetTenpayErrType() int32 {
	if x != nil && x.TenpayErrType != nil {
		return *x.TenpayErrType
	}
	return 0
}

func (x *TenPayResponse) GetTenpayErrMsg() string {
	if x != nil && x.TenpayErrMsg != nil {
		return *x.TenpayErrMsg
	}
	return ""
}

type JSOperateWxDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest     `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	Appid       *string          `protobuf:"bytes,2,opt,name=appid" json:"appid,omitempty"`
	Data        []byte           `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	GrantScope  *string          `protobuf:"bytes,4,opt,name=grantScope" json:"grantScope,omitempty"`
	Opt         *int32           `protobuf:"varint,5,opt,name=opt" json:"opt,omitempty"`
	VersionType *int32           `protobuf:"varint,6,opt,name=versionType" json:"versionType,omitempty"`
	ExtInfo     *WxaExternalInfo `protobuf:"bytes,7,opt,name=extInfo" json:"extInfo,omitempty"`
}

func (x *JSOperateWxDataRequest) Reset() {
	*x = JSOperateWxDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSOperateWxDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSOperateWxDataRequest) ProtoMessage() {}

func (x *JSOperateWxDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSOperateWxDataRequest.ProtoReflect.Descriptor instead.
func (*JSOperateWxDataRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{360}
}

func (x *JSOperateWxDataRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *JSOperateWxDataRequest) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *JSOperateWxDataRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *JSOperateWxDataRequest) GetGrantScope() string {
	if x != nil && x.GrantScope != nil {
		return *x.GrantScope
	}
	return ""
}

func (x *JSOperateWxDataRequest) GetOpt() int32 {
	if x != nil && x.Opt != nil {
		return *x.Opt
	}
	return 0
}

func (x *JSOperateWxDataRequest) GetVersionType() int32 {
	if x != nil && x.VersionType != nil {
		return *x.VersionType
	}
	return 0
}

func (x *JSOperateWxDataRequest) GetExtInfo() *WxaExternalInfo {
	if x != nil {
		return x.ExtInfo
	}
	return nil
}

type JSOperateWxDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse      *BaseResponse      `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	JsapiBaseresponse *JSAPIBaseResponse `protobuf:"bytes,2,opt,name=jsapiBaseresponse" json:"jsapiBaseresponse,omitempty"`
	Data              []byte             `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Scope             *ScopeInfo         `protobuf:"bytes,4,opt,name=scope" json:"scope,omitempty"`
	Appname           *string            `protobuf:"bytes,5,opt,name=appname" json:"appname,omitempty"`
	AppiconUrl        *string            `protobuf:"bytes,6,opt,name=appiconUrl" json:"appiconUrl,omitempty"`
	CancelWording     *string            `protobuf:"bytes,9,opt,name=cancelWording" json:"cancelWording,omitempty"`
	AllowWording      *string            `protobuf:"bytes,10,opt,name=allowWording" json:"allowWording,omitempty"`
	ApplyWording      *string            `protobuf:"bytes,11,opt,name=applyWording" json:"applyWording,omitempty"`
}

func (x *JSOperateWxDataResponse) Reset() {
	*x = JSOperateWxDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSOperateWxDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSOperateWxDataResponse) ProtoMessage() {}

func (x *JSOperateWxDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSOperateWxDataResponse.ProtoReflect.Descriptor instead.
func (*JSOperateWxDataResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{361}
}

func (x *JSOperateWxDataResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *JSOperateWxDataResponse) GetJsapiBaseresponse() *JSAPIBaseResponse {
	if x != nil {
		return x.JsapiBaseresponse
	}
	return nil
}

func (x *JSOperateWxDataResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *JSOperateWxDataResponse) GetScope() *ScopeInfo {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *JSOperateWxDataResponse) GetAppname() string {
	if x != nil && x.Appname != nil {
		return *x.Appname
	}
	return ""
}

func (x *JSOperateWxDataResponse) GetAppiconUrl() string {
	if x != nil && x.AppiconUrl != nil {
		return *x.AppiconUrl
	}
	return ""
}

func (x *JSOperateWxDataResponse) GetCancelWording() string {
	if x != nil && x.CancelWording != nil {
		return *x.CancelWording
	}
	return ""
}

func (x *JSOperateWxDataResponse) GetAllowWording() string {
	if x != nil && x.AllowWording != nil {
		return *x.AllowWording
	}
	return ""
}

func (x *JSOperateWxDataResponse) GetApplyWording() string {
	if x != nil && x.ApplyWording != nil {
		return *x.ApplyWording
	}
	return ""
}

type GetCDNDnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,req,name=BaseRequest" json:"BaseRequest,omitempty"`
	ClientIp    *string      `protobuf:"bytes,2,req,name=clientIp" json:"clientIp,omitempty"`
}

func (x *GetCDNDnsRequest) Reset() {
	*x = GetCDNDnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCDNDnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCDNDnsRequest) ProtoMessage() {}

func (x *GetCDNDnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCDNDnsRequest.ProtoReflect.Descriptor instead.
func (*GetCDNDnsRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{362}
}

func (x *GetCDNDnsRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GetCDNDnsRequest) GetClientIp() string {
	if x != nil && x.ClientIp != nil {
		return *x.ClientIp
	}
	return ""
}

type CDNDnsPortInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortCount *uint32  `protobuf:"varint,1,opt,name=portCount" json:"portCount,omitempty"`
	PortList  []uint32 `protobuf:"varint,2,rep,name=portList" json:"portList,omitempty"`
}

func (x *CDNDnsPortInfo) Reset() {
	*x = CDNDnsPortInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDNDnsPortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDNDnsPortInfo) ProtoMessage() {}

func (x *CDNDnsPortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDNDnsPortInfo.ProtoReflect.Descriptor instead.
func (*CDNDnsPortInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{363}
}

func (x *CDNDnsPortInfo) GetPortCount() uint32 {
	if x != nil && x.PortCount != nil {
		return *x.PortCount
	}
	return 0
}

func (x *CDNDnsPortInfo) GetPortList() []uint32 {
	if x != nil {
		return x.PortList
	}
	return nil
}

type CDNDnsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ver              *uint32             `protobuf:"varint,1,req,name=ver" json:"ver,omitempty"`
	Uin              *uint32             `protobuf:"varint,2,req,name=uin" json:"uin,omitempty"`
	ExpireTime       *uint32             `protobuf:"varint,3,req,name=expireTime" json:"expireTime,omitempty"`
	FrontID          *int32              `protobuf:"varint,4,req,name=frontID" json:"frontID,omitempty"`
	FrontIPCount     *int32              `protobuf:"varint,5,req,name=frontIPCount" json:"frontIPCount,omitempty"`
	FontIPList       []*SKBuiltinStringT `protobuf:"bytes,6,rep,name=fontIPList" json:"fontIPList,omitempty"`
	ZoneDomain       *string             `protobuf:"bytes,7,opt,name=zoneDomain" json:"zoneDomain,omitempty"`
	AuthKey          *SKBuiltinBufferT   `protobuf:"bytes,8,req,name=authKey" json:"authKey,omitempty"`
	ZoneID           *int32              `protobuf:"varint,9,req,name=zoneID" json:"zoneID,omitempty"`
	ZoneIPCount      *int32              `protobuf:"varint,10,req,name=zoneIPCount" json:"zoneIPCount,omitempty"`
	ZoneIPList       []*SKBuiltinStringT `protobuf:"bytes,11,rep,name=zoneIPList" json:"zoneIPList,omitempty"`
	FrontIPPortList  []*CDNDnsPortInfo   `protobuf:"bytes,12,rep,name=frontIPPortList" json:"frontIPPortList,omitempty"`
	ZoneIPPortList   []*CDNDnsPortInfo   `protobuf:"bytes,13,rep,name=zoneIPPortList" json:"zoneIPPortList,omitempty"`
	FrontIPPortCount *int32              `protobuf:"varint,14,req,name=frontIPPortCount" json:"frontIPPortCount,omitempty"`
	ZoneIPPortCount  *int32              `protobuf:"varint,15,req,name=zoneIPPortCount" json:"zoneIPPortCount,omitempty"`
	FakeUin          *uint32             `protobuf:"varint,16,opt,name=fakeUin" json:"fakeUin,omitempty"`
	NewAuthkey       *SKBuiltinBufferT   `protobuf:"bytes,17,opt,name=newAuthkey" json:"newAuthkey,omitempty"`
}

func (x *CDNDnsInfo) Reset() {
	*x = CDNDnsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDNDnsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDNDnsInfo) ProtoMessage() {}

func (x *CDNDnsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDNDnsInfo.ProtoReflect.Descriptor instead.
func (*CDNDnsInfo) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{364}
}

func (x *CDNDnsInfo) GetVer() uint32 {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return 0
}

func (x *CDNDnsInfo) GetUin() uint32 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *CDNDnsInfo) GetExpireTime() uint32 {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return 0
}

func (x *CDNDnsInfo) GetFrontID() int32 {
	if x != nil && x.FrontID != nil {
		return *x.FrontID
	}
	return 0
}

func (x *CDNDnsInfo) GetFrontIPCount() int32 {
	if x != nil && x.FrontIPCount != nil {
		return *x.FrontIPCount
	}
	return 0
}

func (x *CDNDnsInfo) GetFontIPList() []*SKBuiltinStringT {
	if x != nil {
		return x.FontIPList
	}
	return nil
}

func (x *CDNDnsInfo) GetZoneDomain() string {
	if x != nil && x.ZoneDomain != nil {
		return *x.ZoneDomain
	}
	return ""
}

func (x *CDNDnsInfo) GetAuthKey() *SKBuiltinBufferT {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *CDNDnsInfo) GetZoneID() int32 {
	if x != nil && x.ZoneID != nil {
		return *x.ZoneID
	}
	return 0
}

func (x *CDNDnsInfo) GetZoneIPCount() int32 {
	if x != nil && x.ZoneIPCount != nil {
		return *x.ZoneIPCount
	}
	return 0
}

func (x *CDNDnsInfo) GetZoneIPList() []*SKBuiltinStringT {
	if x != nil {
		return x.ZoneIPList
	}
	return nil
}

func (x *CDNDnsInfo) GetFrontIPPortList() []*CDNDnsPortInfo {
	if x != nil {
		return x.FrontIPPortList
	}
	return nil
}

func (x *CDNDnsInfo) GetZoneIPPortList() []*CDNDnsPortInfo {
	if x != nil {
		return x.ZoneIPPortList
	}
	return nil
}

func (x *CDNDnsInfo) GetFrontIPPortCount() int32 {
	if x != nil && x.FrontIPPortCount != nil {
		return *x.FrontIPPortCount
	}
	return 0
}

func (x *CDNDnsInfo) GetZoneIPPortCount() int32 {
	if x != nil && x.ZoneIPPortCount != nil {
		return *x.ZoneIPPortCount
	}
	return 0
}

func (x *CDNDnsInfo) GetFakeUin() uint32 {
	if x != nil && x.FakeUin != nil {
		return *x.FakeUin
	}
	return 0
}

func (x *CDNDnsInfo) GetNewAuthkey() *SKBuiltinBufferT {
	if x != nil {
		return x.NewAuthkey
	}
	return nil
}

type CDNClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C2CShowErrorDelayMs *int32 `protobuf:"varint,1,req,name=c2CShowErrorDelayMs" json:"c2CShowErrorDelayMs,omitempty"`
	SnsShowErrorDelayMs *int32 `protobuf:"varint,2,req,name=snsShowErrorDelayMs" json:"snsShowErrorDelayMs,omitempty"`
	C2CRetryInterval    *int32 `protobuf:"varint,3,req,name=c2CRetryInterval" json:"c2CRetryInterval,omitempty"`
	SnsRetryInterval    *int32 `protobuf:"varint,4,req,name=snsRetryInterval" json:"snsRetryInterval,omitempty"`
	C2CRWTimeout        *int32 `protobuf:"varint,5,req,name=c2CRWTimeout" json:"c2CRWTimeout,omitempty"`
	SnsRWTimeout        *int32 `protobuf:"varint,6,req,name=snsRWTimeout" json:"snsRWTimeout,omitempty"`
}

func (x *CDNClientConfig) Reset() {
	*x = CDNClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDNClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDNClientConfig) ProtoMessage() {}

func (x *CDNClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDNClientConfig.ProtoReflect.Descriptor instead.
func (*CDNClientConfig) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{365}
}

func (x *CDNClientConfig) GetC2CShowErrorDelayMs() int32 {
	if x != nil && x.C2CShowErrorDelayMs != nil {
		return *x.C2CShowErrorDelayMs
	}
	return 0
}

func (x *CDNClientConfig) GetSnsShowErrorDelayMs() int32 {
	if x != nil && x.SnsShowErrorDelayMs != nil {
		return *x.SnsShowErrorDelayMs
	}
	return 0
}

func (x *CDNClientConfig) GetC2CRetryInterval() int32 {
	if x != nil && x.C2CRetryInterval != nil {
		return *x.C2CRetryInterval
	}
	return 0
}

func (x *CDNClientConfig) GetSnsRetryInterval() int32 {
	if x != nil && x.SnsRetryInterval != nil {
		return *x.SnsRetryInterval
	}
	return 0
}

func (x *CDNClientConfig) GetC2CRWTimeout() int32 {
	if x != nil && x.C2CRWTimeout != nil {
		return *x.C2CRWTimeout
	}
	return 0
}

func (x *CDNClientConfig) GetSnsRWTimeout() int32 {
	if x != nil && x.SnsRWTimeout != nil {
		return *x.SnsRWTimeout
	}
	return 0
}

type GetCDNDnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse        *BaseResponse    `protobuf:"bytes,1,req,name=BaseResponse" json:"BaseResponse,omitempty"`
	DnsInfo             *CDNDnsInfo      `protobuf:"bytes,2,req,name=dnsInfo" json:"dnsInfo,omitempty"`
	SnsDnsInfo          *CDNDnsInfo      `protobuf:"bytes,3,req,name=snsDnsInfo" json:"snsDnsInfo,omitempty"`
	AppDnsInfo          *CDNDnsInfo      `protobuf:"bytes,4,req,name=appDnsInfo" json:"appDnsInfo,omitempty"`
	CdnDnsRuleBuf       []byte           `protobuf:"bytes,5,req,name=cdnDnsRuleBuf" json:"cdnDnsRuleBuf,omitempty"`
	FakeCdnDnsRuleBuf   []byte           `protobuf:"bytes,6,req,name=fakeCdnDnsRuleBuf" json:"fakeCdnDnsRuleBuf,omitempty"`
	FakeDnsInfo         *CDNDnsInfo      `protobuf:"bytes,7,req,name=fakeDnsInfo" json:"fakeDnsInfo,omitempty"`
	GetCdnDnsIntervalMs *int32           `protobuf:"varint,8,req,name=getCdnDnsIntervalMs" json:"getCdnDnsIntervalMs,omitempty"`
	DefaultConfig       *CDNClientConfig `protobuf:"bytes,9,req,name=defaultConfig" json:"defaultConfig,omitempty"`
	DisasterConfig      *CDNClientConfig `protobuf:"bytes,10,req,name=disasterConfig" json:"disasterConfig,omitempty"`
}

func (x *GetCDNDnsResponse) Reset() {
	*x = GetCDNDnsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCDNDnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCDNDnsResponse) ProtoMessage() {}

func (x *GetCDNDnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCDNDnsResponse.ProtoReflect.Descriptor instead.
func (*GetCDNDnsResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{366}
}

func (x *GetCDNDnsResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetCDNDnsResponse) GetDnsInfo() *CDNDnsInfo {
	if x != nil {
		return x.DnsInfo
	}
	return nil
}

func (x *GetCDNDnsResponse) GetSnsDnsInfo() *CDNDnsInfo {
	if x != nil {
		return x.SnsDnsInfo
	}
	return nil
}

func (x *GetCDNDnsResponse) GetAppDnsInfo() *CDNDnsInfo {
	if x != nil {
		return x.AppDnsInfo
	}
	return nil
}

func (x *GetCDNDnsResponse) GetCdnDnsRuleBuf() []byte {
	if x != nil {
		return x.CdnDnsRuleBuf
	}
	return nil
}

func (x *GetCDNDnsResponse) GetFakeCdnDnsRuleBuf() []byte {
	if x != nil {
		return x.FakeCdnDnsRuleBuf
	}
	return nil
}

func (x *GetCDNDnsResponse) GetFakeDnsInfo() *CDNDnsInfo {
	if x != nil {
		return x.FakeDnsInfo
	}
	return nil
}

func (x *GetCDNDnsResponse) GetGetCdnDnsIntervalMs() int32 {
	if x != nil && x.GetCdnDnsIntervalMs != nil {
		return *x.GetCdnDnsIntervalMs
	}
	return 0
}

func (x *GetCDNDnsResponse) GetDefaultConfig() *CDNClientConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *GetCDNDnsResponse) GetDisasterConfig() *CDNClientConfig {
	if x != nil {
		return x.DisasterConfig
	}
	return nil
}

type BindQQRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest      `protobuf:"bytes,1,req,name=BaseRequest" json:"BaseRequest,omitempty"`
	Qq             *uint32           `protobuf:"varint,2,req,name=qq" json:"qq,omitempty"`
	Password       *string           `protobuf:"bytes,3,req,name=password" json:"password,omitempty"`
	Password2      *string           `protobuf:"bytes,4,req,name=password2" json:"password2,omitempty"`
	ImageSid       *string           `protobuf:"bytes,5,req,name=imageSid" json:"imageSid,omitempty"`
	ImageCode      *string           `protobuf:"bytes,6,req,name=imageCode" json:"imageCode,omitempty"`
	Opcode         *uint32           `protobuf:"varint,7,req,name=opcode" json:"opcode,omitempty"`
	ImageEncKey    *SKBuiltinStringT `protobuf:"bytes,8,opt,name=imageEncKey" json:"imageEncKey,omitempty"`
	Ksid           *SKBuiltinBufferT `protobuf:"bytes,9,opt,name=ksid" json:"ksid,omitempty"`
	SetAsMain      *uint32           `protobuf:"varint,10,req,name=setAsMain" json:"setAsMain,omitempty"`
	SafeDeviceName *string           `protobuf:"bytes,11,req,name=safeDeviceName" json:"safeDeviceName,omitempty"`
	SafeDeviceType *string           `protobuf:"bytes,12,req,name=safeDeviceType" json:"safeDeviceType,omitempty"`
	WtLoginReqBuff *SKBuiltinBufferT `protobuf:"bytes,13,opt,name=wtLoginReqBuff" json:"wtLoginReqBuff,omitempty"`
}

func (x *BindQQRequest) Reset() {
	*x = BindQQRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindQQRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindQQRequest) ProtoMessage() {}

func (x *BindQQRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindQQRequest.ProtoReflect.Descriptor instead.
func (*BindQQRequest) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{367}
}

func (x *BindQQRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *BindQQRequest) GetQq() uint32 {
	if x != nil && x.Qq != nil {
		return *x.Qq
	}
	return 0
}

func (x *BindQQRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *BindQQRequest) GetPassword2() string {
	if x != nil && x.Password2 != nil {
		return *x.Password2
	}
	return ""
}

func (x *BindQQRequest) GetImageSid() string {
	if x != nil && x.ImageSid != nil {
		return *x.ImageSid
	}
	return ""
}

func (x *BindQQRequest) GetImageCode() string {
	if x != nil && x.ImageCode != nil {
		return *x.ImageCode
	}
	return ""
}

func (x *BindQQRequest) GetOpcode() uint32 {
	if x != nil && x.Opcode != nil {
		return *x.Opcode
	}
	return 0
}

func (x *BindQQRequest) GetImageEncKey() *SKBuiltinStringT {
	if x != nil {
		return x.ImageEncKey
	}
	return nil
}

func (x *BindQQRequest) GetKsid() *SKBuiltinBufferT {
	if x != nil {
		return x.Ksid
	}
	return nil
}

func (x *BindQQRequest) GetSetAsMain() uint32 {
	if x != nil && x.SetAsMain != nil {
		return *x.SetAsMain
	}
	return 0
}

func (x *BindQQRequest) GetSafeDeviceName() string {
	if x != nil && x.SafeDeviceName != nil {
		return *x.SafeDeviceName
	}
	return ""
}

func (x *BindQQRequest) GetSafeDeviceType() string {
	if x != nil && x.SafeDeviceType != nil {
		return *x.SafeDeviceType
	}
	return ""
}

func (x *BindQQRequest) GetWtLoginReqBuff() *SKBuiltinBufferT {
	if x != nil {
		return x.WtLoginReqBuff
	}
	return nil
}

type BindQQResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse         *BaseResponse     `protobuf:"bytes,1,req,name=BaseResponse" json:"BaseResponse,omitempty"`
	ImageSid             *string           `protobuf:"bytes,2,opt,name=imageSid" json:"imageSid,omitempty"`
	ImageBuff            *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=imageBuff" json:"imageBuff,omitempty"`
	PushMailStatus       *uint32           `protobuf:"varint,4,opt,name=pushMailStatus" json:"pushMailStatus,omitempty"`
	PrivateMessageStatus *uint32           `protobuf:"varint,5,opt,name=privateMessageStatus" json:"privateMessageStatus,omitempty"`
	MicroBlogName        *string           `protobuf:"bytes,6,opt,name=microBlogName" json:"microBlogName,omitempty"`
	Status               *uint32           `protobuf:"varint,7,opt,name=status" json:"status,omitempty"`
	QqMailSkey           *string           `protobuf:"bytes,8,opt,name=qqMailSkey" json:"qqMailSkey,omitempty"`
	ImageEncKey          *SKBuiltinBufferT `protobuf:"bytes,9,opt,name=imageEncKey" json:"imageEncKey,omitempty"`
	A2Key                *SKBuiltinBufferT `protobuf:"bytes,10,opt,name=a2Key" json:"a2Key,omitempty"`
	Ksid                 *SKBuiltinBufferT `protobuf:"bytes,11,opt,name=ksid" json:"ksid,omitempty"`
	SafeDeviceList       *SafeDeviceList   `protobuf:"bytes,12,opt,name=safeDeviceList" json:"safeDeviceList,omitempty"`
	SafeDevice           *uint32           `protobuf:"varint,13,opt,name=safeDevice" json:"safeDevice,omitempty"`
	WtLoginReqBuff       *SKBuiltinBufferT `protobuf:"bytes,14,opt,name=wtLoginReqBuff" json:"wtLoginReqBuff,omitempty"`
}

func (x *BindQQResponse) Reset() {
	*x = BindQQResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mm_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindQQResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindQQResponse) ProtoMessage() {}

func (x *BindQQResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mm_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindQQResponse.ProtoReflect.Descriptor instead.
func (*BindQQResponse) Descriptor() ([]byte, []int) {
	return file_mm_proto_rawDescGZIP(), []int{368}
}

func (x *BindQQResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *BindQQResponse) GetImageSid() string {
	if x != nil && x.ImageSid != nil {
		return *x.ImageSid
	}
	return ""
}

func (x *BindQQResponse) GetImageBuff() *SKBuiltinBufferT {
	if x != nil {
		return x.ImageBuff
	}
	return nil
}

func (x *BindQQResponse) GetPushMailStatus() uint32 {
	if x != nil && x.PushMailStatus != nil {
		return *x.PushMailStatus
	}
	return 0
}

func (x *BindQQResponse) GetPrivateMessageStatus() uint32 {
	if x != nil && x.PrivateMessageStatus != nil {
		return *x.PrivateMessageStatus
	}
	return 0
}

func (x *BindQQResponse) GetMicroBlogName() string {
	if x != nil && x.MicroBlogName != nil {
		return *x.MicroBlogName
	}
	return ""
}

func (x *BindQQResponse) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *BindQQResponse) GetQqMailSkey() string {
	if x != nil && x.QqMailSkey != nil {
		return *x.QqMailSkey
	}
	return ""
}

func (x *BindQQResponse) GetImageEncKey() *SKBuiltinBufferT {
	if x != nil {
		return x.ImageEncKey
	}
	return nil
}

func (x *BindQQResponse) GetA2Key() *SKBuiltinBufferT {
	if x != nil {
		return x.A2Key
	}
	return nil
}

func (x *BindQQResponse) GetKsid() *SKBuiltinBufferT {
	if x != nil {
		return x.Ksid
	}
	return nil
}

func (x *BindQQResponse) GetSafeDeviceList() *SafeDeviceList {
	if x != nil {
		return x.SafeDeviceList
	}
	return nil
}

func (x *BindQQResponse) GetSafeDevice() uint32 {
	if x != nil && x.SafeDevice != nil {
		return *x.SafeDevice
	}
	return 0
}

func (x *BindQQResponse) GetWtLoginReqBuff() *SKBuiltinBufferT {
	if x != nil {
		return x.WtLoginReqBuff
	}
	return nil
}

var File_mm_proto protoreflect.FileDescriptor

var file_mm_proto_rawDesc = []byte{
	0x0a, 0x08, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x6d, 0x6d, 0x22, 0x4f,
	0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x2d, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22,
	0x2b, 0x0a, 0x11, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x34, 0x0a, 0x0c,
	0x53, 0x6e, 0x73, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x22, 0x46, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x0e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6d,
	0x69, 0x6e, 0x4e, 0x6f, 0x6f, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x6f, 0x70, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x6f, 0x70,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x6f, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x6f, 0x70, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x6e, 0x6f, 0x6f, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x06, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x22, 0xf9, 0x01, 0x0a, 0x0d, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x49, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x49, 0x70, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x70, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x49, 0x70, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x70,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x11, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x49, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x6d, 0x6d, 0x2e, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x6c, 0x6f,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49,
	0x70, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x6d,
	0x2e, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0xb6, 0x01,
	0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2e, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6d, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x37, 0x0a,
	0x0d, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x49, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x49, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x11, 0x41, 0x78, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe7, 0x02, 0x0a, 0x11, 0x55, 0x6e, 0x69, 0x66, 0x79, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x66, 0x79, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65,
	0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e,
	0x69, 0x66, 0x79, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x34, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x74, 0x53, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d,
	0x2e, 0x41, 0x63, 0x63, 0x74, 0x53, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x74, 0x53, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6d, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x78,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x41, 0x78, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x61, 0x78,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x3f, 0x0a, 0x11, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x4c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x69, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x22, 0x3f, 0x0a, 0x11, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x4c, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x22, 0x3f, 0x0a, 0x11, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x4b, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x4c, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x22, 0x44, 0x0a, 0x07, 0x45, 0x43, 0x44, 0x48, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xac, 0x01, 0x0a, 0x12, 0x57, 0x54, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6d, 0x67, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x67, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x6b, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x04, 0x6b, 0x73, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x53, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x6d, 0x67, 0x53, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x42,
	0x75, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x06, 0x69, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x22, 0x77, 0x0a, 0x14, 0x57, 0x78, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x42, 0x75, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x75, 0x66, 0x66,
	0x22, 0x3c, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x87,
	0x09, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69,
	0x6e, 0x12, 0x31, 0x0a, 0x0d, 0x73, 0x76, 0x72, 0x50, 0x75, 0x62, 0x45, 0x63, 0x64, 0x68, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x6d, 0x2e, 0x45, 0x43,
	0x44, 0x48, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x73, 0x76, 0x72, 0x50, 0x75, 0x62, 0x45, 0x63, 0x64,
	0x68, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x61,
	0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x73, 0x70, 0x42, 0x75, 0x66, 0x66, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x77, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x42, 0x75, 0x66, 0x66,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x0e, 0x77, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x73, 0x70, 0x42, 0x75, 0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x52, 0x0e, 0x77, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x42,
	0x75, 0x66, 0x66, 0x12, 0x46, 0x0a, 0x12, 0x77, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6d,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x6d, 0x2e, 0x57, 0x54, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x77, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x49, 0x6d, 0x67, 0x52, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x14, 0x77,
	0x78, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6d, 0x2e, 0x57,
	0x78, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x14, 0x77, 0x78, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0f, 0x63, 0x6c, 0x69,
	0x44, 0x62, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x44, 0x62,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x6c,
	0x69, 0x44, 0x62, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x10, 0x63, 0x6c, 0x69,
	0x44, 0x62, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x61, 0x32, 0x4b, 0x65, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x05, 0x61,
	0x32, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x65, 0x74,
	0x61, 0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x42, 0x65, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75,
	0x74, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x65,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x73, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x73, 0x75, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6d, 0x74, 0x6c, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x6d, 0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x42, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x65, 0x63, 0x64, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x63, 0x64, 0x68, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xe2, 0x03, 0x0a, 0x0c, 0x41, 0x63, 0x63,
	0x74, 0x53, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x55, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x55, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x69, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x69, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x6e,
	0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x58,
	0x6d, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x58, 0x6d, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x66,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x4d, 0x61, 0x69,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x73, 0x75, 0x72, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x73, 0x75, 0x72, 0x6c, 0x22, 0xb7, 0x01,
	0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x76, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x57, 0x78, 0x61, 0x48, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x64, 0x22,
	0xbe, 0x03, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x57, 0x78, 0x61, 0x48, 0x42,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x77, 0x78, 0x61, 0x68, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x78, 0x61, 0x68, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x77, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65,
	0x6e, 0x64, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x68, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x8c, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x51, 0x52, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x44, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x44, 0x65,
	0x76, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x10,
	0x6d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x10, 0x6d,
	0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22,
	0x93, 0x03, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x51, 0x52, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x06, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x09, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x6c, 0x75, 0x65,
	0x54, 0x6f, 0x6f, 0x74, 0x68, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x6c, 0x75, 0x65, 0x54, 0x6f,
	0x6f, 0x74, 0x68, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x53, 0x0a, 0x19, 0x62, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x6f, 0x74, 0x68, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x19, 0x62, 0x6c, 0x75, 0x65,
	0x54, 0x6f, 0x6f, 0x74, 0x68, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x45, 0x63, 0x64, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x45, 0x43, 0x44, 0x48, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x45,
	0x43, 0x44, 0x48, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x6b, 0x65, 0x79, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x13,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x6b, 0x65, 0x79, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x79, 0x70, 0x74, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x79, 0x70, 0x74, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb3,
	0x01, 0x0a, 0x12, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x45, 0x63, 0x64, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x45, 0x43, 0x44, 0x48,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x52, 0x0a, 0x53, 0x65, 0x63, 0x45, 0x43, 0x44, 0x48, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x4e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4b,
	0x65, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x45, 0x63, 0x64,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x06, 0x53, 0x65, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x65, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x53, 0x65, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x63, 0x6d, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x47, 0x63, 0x6d, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x6f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x75, 0x74, 0x6f, 0x6b, 0x65, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x47, 0x63, 0x6d, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x47, 0x63, 0x6d, 0x32, 0x22, 0x76, 0x0a, 0x0e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x45, 0x63,
	0x64, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x65, 0x63, 0x4b,
	0x65, 0x79, 0x52, 0x06, 0x53, 0x65, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x63, 0x6d, 0x31, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x47, 0x63, 0x6d, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x63, 0x6d, 0x32,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x47, 0x63, 0x6d, 0x32, 0x22, 0xca, 0x01, 0x0a,
	0x14, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x52, 0x73, 0x61, 0x52, 0x65,
	0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x50, 0x75, 0x62, 0x45, 0x63,
	0x64, 0x68, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x6d,
	0x2e, 0x45, 0x43, 0x44, 0x48, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x50, 0x75, 0x62,
	0x45, 0x63, 0x64, 0x68, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x77, 0x64, 0x32, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x77, 0x64, 0x32, 0x22, 0x96, 0x01, 0x0a, 0x11, 0x57, 0x54,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x53, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x6d, 0x67, 0x53, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6d, 0x67, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x67, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x6b, 0x73, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x04, 0x6b, 0x73,
	0x69, 0x64, 0x22, 0x65, 0x0a, 0x13, 0x57, 0x78, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xa6, 0x03, 0x0a, 0x0f, 0x42, 0x61,
	0x73, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a,
	0x0e, 0x77, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x42, 0x75, 0x66, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x77, 0x74,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x42, 0x75, 0x66, 0x66, 0x12, 0x43, 0x0a, 0x11,
	0x77, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x57, 0x54, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11,
	0x77, 0x74, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x49, 0x0a, 0x13, 0x77, 0x78, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6d, 0x2e, 0x57, 0x78, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x77, 0x78, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0f,
	0x63, 0x6c, 0x69, 0x44, 0x62, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0f, 0x63, 0x6c,
	0x69, 0x44, 0x62, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a,
	0x10, 0x63, 0x6c, 0x69, 0x44, 0x62, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x10,
	0x63, 0x6c, 0x69, 0x44, 0x62, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x22, 0xb0, 0x06, 0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x75, 0x74,
	0x68, 0x41, 0x65, 0x73, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x66,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x66,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x49, 0x70, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x49, 0x70, 0x73, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0b,
	0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x63, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x0a, 0x72, 0x73, 0x61, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6d, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x73, 0x61, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x72,
	0x73, 0x61, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x6d, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x41, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x61, 0x65, 0x73, 0x52, 0x65, 0x71, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72,
	0x73, 0x61, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x6d, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x73, 0x61, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x72, 0x73, 0x61, 0x52, 0x65,
	0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x65, 0x73, 0x52, 0x65, 0x71, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6d, 0x2e, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x41, 0x65, 0x73, 0x52, 0x65, 0x71, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x61, 0x65, 0x73, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xd5, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x51, 0x52,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x50, 0x6b, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x50, 0x6b, 0x67, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50,
	0x6b, 0x67, 0x22, 0x65, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x51, 0x52, 0x43, 0x6f, 0x64,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x6b, 0x67, 0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x11, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61,
	0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68,
	0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x75, 0x73,
	0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x75, 0x73, 0x68,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x4f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x55, 0x69, 0x6e, 0x22, 0xbb, 0x12, 0x0a,
	0x13, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x70, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x4c, 0x6f, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x70, 0x75, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x70, 0x75, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x70, 0x75, 0x45, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x43, 0x70, 0x75, 0x45, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x6c, 0x61, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x6c, 0x61,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x73, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x73, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x42, 0x73, 0x73, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x73, 0x73,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x69, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x69, 0x6d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x57, 0x69, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x50, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x42, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x6f, 0x74, 0x4c, 0x6f,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x51, 0x65, 0x6d, 0x75, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x51, 0x65, 0x6d, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x75, 0x63, 0x6b, 0x70, 0x61, 0x63, 0x6b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4c, 0x75, 0x63,
	0x6b, 0x70, 0x61, 0x63, 0x6b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61,
	0x73, 0x65, 0x41, 0x50, 0x4b, 0x4d, 0x44, 0x35, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x42, 0x61, 0x73, 0x65, 0x41, 0x50, 0x4b, 0x4d, 0x44, 0x35, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x70, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x47, 0x75, 0x61, 0x72, 0x64,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4b, 0x65,
	0x79, 0x47, 0x75, 0x61, 0x72, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x57, 0x69, 0x66, 0x69, 0x4f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x57, 0x69,
	0x66, 0x69, 0x4f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x58, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x58, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x62, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x64, 0x62, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x4d, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x4d, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x70, 0x6c, 0x61,
	0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x70,
	0x6c, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x73, 0x42, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x4f, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x74, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x56, 0x70, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x56, 0x70, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x75, 0x62, 0x53, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x75, 0x62, 0x53, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x73, 0x6d, 0x53, 0x69, 0x6d, 0x53, 0x61, 0x74, 0x65,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x73, 0x6d, 0x53, 0x69, 0x6d, 0x53, 0x61,
	0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x73, 0x6d, 0x53, 0x69, 0x6d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47, 0x73, 0x6d, 0x53,
	0x69, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x47, 0x73,
	0x6d, 0x53, 0x69, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x47, 0x73, 0x6d, 0x53, 0x69, 0x6d,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x6f, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x53, 0x6f, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x4b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x55, 0x73,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x55, 0x6e, 0x6b, 0x6f, 0x6e, 0x77, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x55,
	0x6e, 0x6b, 0x6f, 0x6e, 0x77, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x62, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x63, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x54, 0x62,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x66,
	0x4d, 0x44, 0x35, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x66, 0x4d, 0x44, 0x35,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x66, 0x41, 0x72, 0x6d, 0x4d, 0x44, 0x35, 0x18, 0x49, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x53, 0x66, 0x41, 0x72, 0x6d, 0x4d, 0x44, 0x35, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x66, 0x41, 0x72, 0x6d, 0x36, 0x34, 0x4d, 0x44, 0x35, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x66, 0x41, 0x72, 0x6d, 0x36, 0x34, 0x4d, 0x44, 0x35, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x62, 0x4d, 0x44, 0x35, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x62, 0x4d,
	0x44, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x18, 0x4c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x12, 0x2a,
	0x0a, 0x10, 0x57, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x57, 0x69, 0x64, 0x65, 0x76, 0x69,
	0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x53,
	0x49, 0x44, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x53, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4f, 0x61, 0x69, 0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4f, 0x61,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x61, 0x6e, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x51, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x4e, 0x61, 0x6e, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x6f, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x6f, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x53, 0x6f, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x12, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x63, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x43, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x43,
	0x72, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2b, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6d, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x70, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xf2, 0x0c,
	0x0a, 0x0c, 0x53, 0x70, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x73, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x79, 0x65, 0x73, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x73, 0x32, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x73, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x6e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x36, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x37, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x37, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x38, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x38, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x39, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x39, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x4d, 0x44, 0x35, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x4d,
	0x44, 0x35, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x55, 0x55, 0x49, 0x44, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x55, 0x55, 0x49, 0x44, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x31, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x73, 0x68, 0x50, 0x61, 0x74, 0x68, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x73, 0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x54, 0x65, 0x73, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x4d,
	0x44, 0x35, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x4d, 0x44, 0x35,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x55, 0x73, 0x65, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x76, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2e, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x70, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x31, 0x32, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x44, 0x35, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x44, 0x35,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x71, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x72, 0x71, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x33, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x34, 0x34, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x34, 0x35, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x34, 0x35, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34,
	0x36, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x34, 0x36, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x37, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x37,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x38, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x38, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x39, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x39, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x30, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x31, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x35, 0x32, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x35, 0x33, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x35, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35,
	0x34, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x35, 0x34, 0x22, 0x42, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x75, 0x75, 0x69, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x36, 0x22, 0xfc, 0x03, 0x0a, 0x09,
	0x57, 0x43, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x05, 0x77, 0x63, 0x73,
	0x74, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x05, 0x77, 0x63, 0x73, 0x74, 0x66, 0x12, 0x2b, 0x0a, 0x05, 0x77, 0x63, 0x73, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x05, 0x77, 0x63,
	0x73, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x63, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x39, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a,
	0x0e, 0x61, 0x63, 0x67, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x61, 0x63,
	0x67, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0a,
	0x61, 0x63, 0x67, 0x69, 0x54, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0a, 0x61, 0x63, 0x67, 0x69, 0x54, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x0e,
	0x69, 0x6f, 0x73, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x69, 0x6f, 0x73,
	0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x3d, 0x0a, 0x0e, 0x69,
	0x6f, 0x73, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x69, 0x6f, 0x73, 0x74,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xa3, 0x05, 0x0a, 0x05, 0x77,
	0x63, 0x61, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x56, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x7a,
	0x74, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x7a, 0x74, 0x6b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x7a, 0x74, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x7a, 0x74, 0x6b, 0x65, 0x79, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x36, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x36, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x37, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6f,
	0x77, 0x6e, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6f, 0x77,
	0x6e, 0x38, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x39, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x39, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6f,
	0x77, 0x6e, 0x31, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6f,
	0x77, 0x6e, 0x31, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x31, 0x33,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x31, 0x33,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x31, 0x34, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x31, 0x34, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x31, 0x35, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x31, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6f,
	0x77, 0x6e, 0x31, 0x36, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6f,
	0x77, 0x6e, 0x31, 0x36, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x31, 0x37,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x31, 0x37,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x31, 0x38, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x31, 0x38, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x31, 0x39, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x31, 0x39, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6f,
	0x77, 0x6e, 0x32, 0x30, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6f,
	0x77, 0x6e, 0x32, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x32, 0x31,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x32, 0x31,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x32, 0x32, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x32, 0x32, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x32, 0x33, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x32, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6f,
	0x77, 0x6e, 0x32, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6f,
	0x77, 0x6e, 0x32, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x32, 0x35,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x32, 0x35,
	0x22, 0x6a, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x33, 0x32, 0x63, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x33, 0x32, 0x63, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x40, 0x0a, 0x07,
	0x43, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x6d,
	0x2e, 0x43, 0x6d, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4e,
	0x0a, 0x07, 0x43, 0x6d, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6d, 0x64,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x06, 0x43, 0x6d, 0x64, 0x42, 0x75, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x43, 0x6d, 0x64, 0x42, 0x75, 0x66, 0x22, 0xda,
	0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x6d, 0x6d, 0x2e, 0x43, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x6f,
	0x70, 0x6c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2d, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67,
	0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x79,
	0x6e, 0x63, 0x4d, 0x73, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x0f,
	0x4e, 0x65, 0x77, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65,
	0x74, 0x12, 0x25, 0x0a, 0x07, 0x43, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x6d, 0x2e, 0x43, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x07, 0x43, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2d, 0x0a, 0x06,
	0x4b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x52, 0x06, 0x4b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x53, 0x79, 0x6e, 0x63, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x0a, 0x4d, 0x61, 0x78, 0x53, 0x79, 0x6e, 0x63, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x49,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x52, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x53, 0x79, 0x6e, 0x63, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0a, 0x4d, 0x61, 0x78,
	0x53, 0x79, 0x6e, 0x63, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x6d, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x43, 0x6d, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x43,
	0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d,
	0x6d, 0x2e, 0x43, 0x6d, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x43, 0x6d, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74,
	0x6f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x73, 0x61, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3b, 0x0a, 0x0d, 0x61, 0x65, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0d, 0x61,
	0x65, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x0d,
	0x63, 0x6c, 0x69, 0x50, 0x75, 0x62, 0x45, 0x63, 0x64, 0x68, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x6d, 0x2e, 0x45, 0x43, 0x44, 0x48, 0x4b, 0x65, 0x79,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x50, 0x75, 0x62, 0x45, 0x63, 0x64, 0x68, 0x6b, 0x65, 0x79, 0x22,
	0x81, 0x01, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x73, 0x61, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6d, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x73, 0x61, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x72, 0x73, 0x61, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0a, 0x61,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x41, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x61, 0x65, 0x73, 0x52, 0x65, 0x71, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xd7, 0x04, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68,
	0x41, 0x65, 0x73, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65,
	0x69, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x49, 0x70, 0x73, 0x65, 0x71, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x49, 0x70, 0x73, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x71, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x52, 0x0b, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc1, 0x03,
	0x0a, 0x13, 0x50, 0x75, 0x73, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x52, 0x4c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x75,
	0x74, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x6b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0b, 0x41, 0x75, 0x74,
	0x6f, 0x61, 0x75, 0x74, 0x68, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x41,
	0x0a, 0x10, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x10, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x22, 0xe2, 0x02, 0x0a, 0x14, 0x50, 0x75, 0x73, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55,
	0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x09,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x42, 0x6c, 0x75,
	0x65, 0x54, 0x6f, 0x6f, 0x74, 0x68, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x42, 0x6c, 0x75, 0x65, 0x54,
	0x6f, 0x6f, 0x74, 0x68, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x53, 0x0a, 0x19, 0x42, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x6f, 0x74, 0x68, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x19, 0x42, 0x6c, 0x75,
	0x65, 0x54, 0x6f, 0x6f, 0x74, 0x68, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6d,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0xa1, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6d, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4e,
	0x6f, 0x4b, 0x6e, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x6f, 0x4b,
	0x6e, 0x6f, 0x77, 0x22, 0x83, 0x02, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x65, 0x4e, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0a, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xcd, 0x02, 0x0a, 0x10, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x65, 0x77,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x79,
	0x73, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x73, 0x79, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xb5, 0x01, 0x0a, 0x08,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x04, 0x74,
	0x6f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x74, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x74, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x6d, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x4b,
	0x65, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0a, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x03, 0x4b,
	0x65, 0x79, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x53, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6e, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x6e, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x6e, 0x73, 0x42, 0x67, 0x69, 0x6d, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x6e, 0x73, 0x42, 0x67, 0x69, 0x6d, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x53, 0x6e, 0x73, 0x42, 0x67, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x53, 0x6e, 0x73, 0x42, 0x67, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6e, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x6e, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x78,
	0x22, 0x73, 0x0a, 0x0f, 0x53, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x50,
	0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x43, 0x6f, 0x70, 0x79, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x43, 0x6f, 0x70, 0x79, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9c, 0x0a, 0x0a, 0x09, 0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x52, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x4c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x4c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x4c, 0x69,
	0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x4c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x57, 0x69, 0x74, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0c,
	0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x52,
	0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x49,
	0x73, 0x4e, 0x6f, 0x74, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x65, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x09,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x53, 0x6e, 0x73,
	0x52, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x52, 0x65, 0x64, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x73, 0x52, 0x0e, 0x53, 0x6e, 0x73, 0x52, 0x65, 0x64, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6d, 0x2e, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x57, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73,
	0x57, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x57, 0x65, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcc, 0x03, 0x0a, 0x0e, 0x53, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x52,
	0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x22, 0x24, 0x0a, 0x08, 0x53, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x53, 0x6e,
	0x73, 0x52, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4e, 0x6f, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x4e, 0x6f, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x0c, 0x53, 0x6e, 0x73, 0x57, 0x65, 0x41, 0x70,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x50, 0x6f, 0x69, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x70, 0x50, 0x6f, 0x69, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x52, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xd4, 0x06, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x41, 0x38, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4f, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x41, 0x32, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x05, 0x41, 0x32, 0x6b, 0x65,
	0x79, 0x12, 0x2b, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x2b,
	0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e,
	0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x52, 0x65, 0x71, 0x55,
	0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52,
	0x06, 0x52, 0x65, 0x71, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x51, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x51, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x32, 0x4b,
	0x65, 0x79, 0x4e, 0x65, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x41, 0x32, 0x4b,
	0x65, 0x79, 0x4e, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6f, 0x64, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x52, 0x06, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x75, 0x74, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x75, 0x62, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x22, 0x8d, 0x07, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x38, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x75, 0x6c, 0x6c, 0x55,
	0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x52,
	0x4c, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x38, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x38, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x4a, 0x53, 0x41, 0x50, 0x49,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x6d, 0x2e, 0x4a, 0x53, 0x41, 0x50, 0x49, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x53, 0x65, 0x74, 0x52, 0x0f, 0x4a, 0x53, 0x41,
	0x50, 0x49, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x14,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x69,
	0x74, 0x53, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6d, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x69,
	0x74, 0x53, 0x65, 0x74, 0x52, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x42, 0x69, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55,
	0x52, 0x4c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55,
	0x52, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x69, 0x7a, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x6e, 0x74, 0x69,
	0x73, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x73,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x73, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x4d, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x49, 0x44,
	0x12, 0x3a, 0x0a, 0x0e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x69, 0x74, 0x53,
	0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x69, 0x74, 0x53, 0x65, 0x74, 0x52, 0x0e, 0x44, 0x65,
	0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x69, 0x74, 0x53, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x11,
	0x4a, 0x53, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x11,
	0x4a, 0x53, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x48, 0x74, 0x74, 0x70,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x48,
	0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x6d, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x0a, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x57,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x12,
	0x2d, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x65, 0x6e, 0x75, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x6e, 0x75, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x22, 0x34, 0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x4a, 0x53, 0x41, 0x50, 0x49,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x53, 0x65, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x34, 0x22, 0x32, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x69, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x0c, 0x42,
	0x69, 0x7a, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x07, 0x61, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x69, 0x7a, 0x41, 0x70, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x61, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x0a, 0x42, 0x69, 0x7a, 0x41, 0x70,
	0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x2c, 0x0a, 0x0e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x69, 0x74, 0x53, 0x65,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x59, 0x0a,
	0x0b, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x4f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10,
	0x4f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x4b, 0x0a, 0x15, 0x53, 0x6e, 0x73, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x74, 0x6f, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x16, 0x53, 0x6e, 0x73, 0x50, 0x6f, 0x73,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x55, 0x72, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x4a, 0x73, 0x41, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4a, 0x73, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x61, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x65, 0x6d, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x54, 0x65, 0x6d,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2c, 0x0a, 0x0a, 0x43, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c,
	0x61, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x91, 0x0a, 0x0a, 0x0e, 0x53, 0x6e, 0x73, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x53, 0x52, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x28, 0x0a, 0x0f, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x57, 0x69, 0x74, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x0c, 0x57,
	0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74,
	0x42, 0x47, 0x49, 0x6d, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x47, 0x49, 0x6d, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x08, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x09, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x52, 0x09, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x54,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x33, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x43, 0x74, 0x6f, 0x63, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x74, 0x6f, 0x63,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x43, 0x74, 0x6f, 0x63,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x16, 0x53, 0x6e,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6d, 0x2e,
	0x53, 0x6e, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x16, 0x53, 0x6e, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3a,
	0x0a, 0x0e, 0x53, 0x6e, 0x73, 0x52, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x52,
	0x65, 0x64, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x73, 0x52, 0x0e, 0x53, 0x6e, 0x73, 0x52,
	0x65, 0x64, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x50, 0x6f,
	0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x52, 0x07, 0x50, 0x6f, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x43, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6d, 0x6d, 0x2e, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x43,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x09, 0x57, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x57, 0x65, 0x41, 0x70, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x57, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f,
	0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x37, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0b, 0x45, 0x78, 0x74,
	0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x53, 0x6e, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x70, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x12,
	0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x06, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70,
	0x52, 0x06, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x0b, 0x53, 0x6e, 0x73, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x53, 0x6e, 0x73,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x52, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x70, 0x52, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8e,
	0x01, 0x0a, 0x11, 0x53, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x22,
	0xea, 0x01, 0x0a, 0x0e, 0x53, 0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xab, 0x05, 0x0a,
	0x09, 0x53, 0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72,
	0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x69, 0x63, 0x68,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0x12, 0x31,
	0x0a, 0x08, 0x68, 0x62, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x08, 0x68, 0x62, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c,
	0x61, 0x12, 0x43, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x6e, 0x73, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x73, 0x6e, 0x73, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x6e, 0x73, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x6e, 0x73, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x0c, 0x53,
	0x6e, 0x73, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x64, 0x35, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x39, 0x0a,
	0x0c, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x75, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0c, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x75, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x11, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e,
	0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x74, 0x52, 0x08, 0x70, 0x61, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x36, 0x34, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x36, 0x34, 0x22, 0x77, 0x0a, 0x12, 0x53, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x09, 0x73, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x09, 0x73, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x89, 0x04, 0x0a, 0x10,
	0x53, 0x6e, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12,
	0x2d, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x53, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x54, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x78,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x44, 0x35, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x4d, 0x44, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x11, 0x53, 0x6e, 0x73, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e,
	0x53, 0x6e, 0x73, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x52, 0x09, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x55, 0x72, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x09, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x52, 0x09, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x96, 0x05, 0x0a, 0x12, 0x53, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4d, 0x69, 0x6e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e,
	0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x74, 0x52, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x09,
	0x61, 0x64, 0x65, 0x78, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x41, 0x64, 0x45, 0x78, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x61, 0x64, 0x65, 0x78, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x18,
	0x72, 0x65, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x49, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18,
	0x72, 0x65, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x49, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x6c,
	0x46, 0x65, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x49,
	0x64, 0x46, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x49,
	0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x22, 0xae, 0x04, 0x0a, 0x13, 0x53,
	0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x20, 0x0a, 0x0b,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x37, 0x0a,
	0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x07, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x52, 0x65, 0x63, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x52, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x0c, 0x53,
	0x6e, 0x73, 0x41, 0x64, 0x45, 0x78, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x68,
	0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x68, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x68,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x68, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xa1, 0x02, 0x0a, 0x12, 0x53, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x61, 0x78, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4d, 0x61, 0x78, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x4d, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8e, 0x04, 0x0a, 0x13, 0x53, 0x6e, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x4d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x72, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x53, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x53, 0x6e, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x53, 0x61, 0x6d, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x61,
	0x6d, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x37, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6d,
	0x2e, 0x53, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x65, 0x74, 0x54, 0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x52,
	0x65, 0x74, 0x54, 0x69, 0x70, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x57, 0x78, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x71,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57,
	0x78, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x19, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x71, 0x22, 0x93, 0x02, 0x0a, 0x13, 0x49, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x57, 0x78, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x71, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x78, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x30, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xc7, 0x14, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x31,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x50, 0x79, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x09,
	0x50, 0x79, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x07, 0x51, 0x75, 0x61,
	0x6e, 0x50, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e,
	0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x06,
	0x49, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x52, 0x06, 0x49, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x42,
	0x69, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x42, 0x69,
	0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x42, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x6d, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x49, 0x6d, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2d, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x06,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3f, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x50, 0x79, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x79,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x51, 0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0d, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x51, 0x75, 0x61,
	0x6e, 0x50, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0c,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x48, 0x61, 0x73,
	0x57, 0x65, 0x69, 0x58, 0x69, 0x6e, 0x48, 0x64, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x48, 0x61, 0x73, 0x57, 0x65, 0x69, 0x58, 0x69, 0x6e,
	0x48, 0x64, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x65, 0x69, 0x62, 0x6f,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x12, 0x24, 0x0a,
	0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x47, 0x49, 0x6d, 0x67, 0x49,
	0x44, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x47,
	0x49, 0x6d, 0x67, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x0b, 0x53, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e,
	0x53, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x53, 0x6e, 0x73,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x55, 0x72, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x69, 0x67, 0x48, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6d, 0x61, 0x6c,
	0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55,
	0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x6d, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x4d,
	0x64, 0x35, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d,
	0x67, 0x4d, 0x64, 0x35, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x64, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x49, 0x64, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x4f, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x6d, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x15, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x43, 0x68, 0x61, 0x74,
	0x72, 0x6f, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f,
	0x6d, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x43,
	0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x40, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6d, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x67,
	0x55, 0x72, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6d, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x65, 0x69,
	0x44, 0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x57, 0x65, 0x69, 0x44, 0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x43,
	0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x74, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x78, 0x74, 0x66, 0x6c, 0x61, 0x67, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x70, 0x0a, 0x08, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e,
	0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x55,
	0x52, 0x4c, 0x22, 0x62, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x13, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6d, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x13, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22,
	0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x22, 0x92, 0x01, 0x0a,
	0x12, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x98, 0x02, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x69, 0x67, 0x48, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6d, 0x61, 0x6c,
	0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55,
	0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x10,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc2, 0x09, 0x0a, 0x13, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6d, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e,
	0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x52, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x67, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x12, 0x33, 0x0a, 0x09, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e,
	0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x52, 0x09, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x12, 0x29,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a,
	0x0c, 0x55, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x55, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x44, 0x4e, 0x42, 0x69, 0x67, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x44, 0x4e, 0x42, 0x69, 0x67, 0x49,
	0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x44, 0x4e, 0x4d, 0x69, 0x64, 0x49,
	0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x44, 0x4e,
	0x4d, 0x69, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x45, 0x53,
	0x4b, 0x65, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x45, 0x53, 0x4b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x56, 0x65, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x56, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x44, 0x4e, 0x42, 0x69, 0x67, 0x49, 0x6d, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x44, 0x4e, 0x42, 0x69, 0x67, 0x49, 0x6d, 0x67, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x44, 0x4e, 0x4d, 0x69, 0x64, 0x49, 0x6d, 0x67,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x44, 0x4e, 0x4d,
	0x69, 0x64, 0x49, 0x6d, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x44, 0x4e,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x43, 0x44, 0x4e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x44, 0x4e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x43, 0x44, 0x4e, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43,
	0x44, 0x4e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x44, 0x4e, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x49, 0x6d, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x44, 0x4e,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x43, 0x44, 0x4e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x44, 0x4e, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x41, 0x45, 0x53, 0x4b, 0x65, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43,
	0x44, 0x4e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x41, 0x45, 0x53, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x64, 0x35, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x64, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x72, 0x63,
	0x33, 0x32, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x43, 0x72, 0x63, 0x33, 0x32, 0x12,
	0x26, 0x0a, 0x0e, 0x4d, 0x73, 0x67, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4d, 0x73, 0x67, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x69, 0x74, 0x4d, 0x64,
	0x35, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x48, 0x69, 0x74, 0x4d, 0x64, 0x35, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xe9, 0x03, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x6d, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d,
	0x73, 0x67, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d,
	0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x52, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x67, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0c, 0x46, 0x72, 0x6f, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x54, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x52, 0x0a, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x4e, 0x65, 0x77, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x65, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41,
	0x65, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x49, 0x0a, 0x0f, 0x44,
	0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x74, 0x75,
	0x72, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a,
	0x09, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x09, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x79,
	0x54, 0x69, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6d, 0x2e, 0x44,
	0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x09,
	0x41, 0x6c, 0x6c, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x22, 0x6f, 0x0a, 0x09, 0x47, 0x6d, 0x61,
	0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x63, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x6d, 0x61, 0x69, 0x6c,
	0x41, 0x63, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x47, 0x6d, 0x61, 0x69, 0x6c,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x6d, 0x61, 0x69, 0x6c, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x47, 0x6d,
	0x61, 0x69, 0x6c, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x44, 0x0a, 0x09, 0x47, 0x6d,
	0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d,
	0x2e, 0x47, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xec, 0x09, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x42, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x42, 0x69,
	0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x52, 0x09, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x35, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0a, 0x42, 0x69, 0x6e, 0x64,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x6d, 0x67, 0x4c, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x49, 0x6d, 0x67, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6d, 0x67, 0x42, 0x75, 0x66,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x49, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x12, 0x10,
	0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e,
	0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e,
	0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4c, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x45, 0x78, 0x70, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x45, 0x78, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x09, 0x47, 0x6d,
	0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6d, 0x6d, 0x2e, 0x47, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x47, 0x6d,
	0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x61, 0x63, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x46, 0x61, 0x63, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x62, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x46, 0x62, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x62, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x62, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x67, 0x69, 0x6d, 0x67, 0x49, 0x64, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x67, 0x69, 0x6d,
	0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x78, 0x6e, 0x65, 0x77, 0x73, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x54, 0x78, 0x6e,
	0x65, 0x77, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x46,
	0x62, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x62,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22,
	0xc8, 0x14, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12,
	0x31, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x4e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x50, 0x79, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52,
	0x09, 0x50, 0x79, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x07, 0x51, 0x75,
	0x61, 0x6e, 0x50, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x53,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x2d, 0x0a,
	0x06, 0x49, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x49, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x12, 0x18, 0x0a, 0x07,
	0x42, 0x69, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x42,
	0x69, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x69, 0x74, 0x56, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x42, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x6d, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x49, 0x6d, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2d, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52,
	0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3f, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x50, 0x79, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x50,
	0x79, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0d, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x51, 0x75,
	0x61, 0x6e, 0x50, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x48, 0x61,
	0x73, 0x57, 0x65, 0x69, 0x58, 0x69, 0x6e, 0x48, 0x64, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x48, 0x61, 0x73, 0x57, 0x65, 0x69, 0x58, 0x69,
	0x6e, 0x48, 0x64, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x65, 0x69, 0x62,
	0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x12, 0x24,
	0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x57, 0x65, 0x69, 0x62, 0x6f,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x67, 0x69, 0x6d, 0x67,
	0x49, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x42,
	0x67, 0x69, 0x6d, 0x67, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x53, 0x6e, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d,
	0x2e, 0x53, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x53, 0x6e,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x69, 0x67, 0x48,
	0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x6d, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x4d, 0x64, 0x35, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x49,
	0x6d, 0x67, 0x4d, 0x64, 0x35, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x64, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x49, 0x64, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x4f, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x6d, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x15, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x43, 0x68, 0x61,
	0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f,
	0x6f, 0x6d, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6d,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0f, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x64, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x49, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6d, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x65,
	0x69, 0x44, 0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x57, 0x65, 0x69, 0x44, 0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13,
	0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x43, 0x68, 0x61, 0x74, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x24, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6d, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e,
	0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x63, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x22, 0xd4, 0x03, 0x0a, 0x06, 0x41, 0x64,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x46, 0x72,
	0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x52, 0x0a, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x49, 0x6d, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a,
	0x06, 0x49, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x49, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x75,
	0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x71, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71,
	0x22, 0xca, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0a, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x43, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x31, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xc9,
	0x01, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x0c,
	0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x52, 0x0a, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x0a, 0x4d,
	0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x49, 0x6d, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6d, 0x67, 0x4c, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x49, 0x6d, 0x67, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x49,
	0x6d, 0x67, 0x42, 0x75, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x49, 0x6d, 0x67,
	0x42, 0x75, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6d, 0x67, 0x4d, 0x64, 0x35, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6d, 0x67, 0x4d, 0x64, 0x35, 0x12, 0x24, 0x0a, 0x0d, 0x42,
	0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x42, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x6d, 0x61, 0x6c,
	0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x22, 0x74, 0x0a, 0x0a, 0x53,
	0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x53, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x61, 0x66,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x84, 0x01,
	0x0a, 0x0f, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x53, 0x69, 0x67,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x04,
	0x53, 0x69, 0x67, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x89, 0x0a, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x53, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x53, 0x6e, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x73, 0x67,
	0x50, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4d, 0x73, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x56, 0x6f, 0x69, 0x70, 0x50, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x56, 0x6f, 0x69, 0x70, 0x50, 0x75, 0x73, 0x68, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x69, 0x67, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x42, 0x69,
	0x67, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x42, 0x69, 0x67, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x42, 0x69, 0x67, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x69, 0x67,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x42, 0x69, 0x67, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x61, 0x66, 0x65, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x61, 0x66,
	0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x69, 0x67, 0x48, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x42, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a,
	0x0f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61,
	0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x41,
	0x63, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4d,
	0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x45,
	0x78, 0x74, 0x58, 0x6d, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x52, 0x06, 0x45, 0x78, 0x74, 0x58, 0x6d, 0x6c, 0x12, 0x3a, 0x0a, 0x0e, 0x53, 0x61,
	0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x53, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x61, 0x66, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x61, 0x66, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x72, 0x61, 0x79, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x47,
	0x72, 0x61, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x64,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x62, 0x70, 0x70, 0x69, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x62, 0x70, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x42, 0x62, 0x70, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x62, 0x70,
	0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x62, 0x6d, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x62, 0x6d, 0x6e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6d, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x4b, 0x66, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4b, 0x66, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6d, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x50, 0x61, 0x79, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x65, 0x69, 0x44,
	0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57,
	0x65, 0x69, 0x44, 0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x45, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x45, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x46, 0x32, 0x46, 0x70, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x46, 0x32, 0x46, 0x70, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x50, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x22, 0x52, 0x0a, 0x0e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x06, 0x4b, 0x65,
	0x79, 0x42, 0x75, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e,
	0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x74, 0x52, 0x06, 0x4b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x12, 0x53, 0x0a, 0x19, 0x42, 0x6c, 0x75,
	0x65, 0x54, 0x6f, 0x6f, 0x74, 0x68, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x52, 0x19, 0x42, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x6f, 0x74, 0x68, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x19, 0x42, 0x6c, 0x75, 0x65,
	0x54, 0x6f, 0x6f, 0x74, 0x68, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x52, 0x19, 0x42, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x6f, 0x74, 0x68, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x58, 0x0a,
	0x0d, 0x4c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x72, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x4f, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x50, 0x77, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x50, 0x77, 0x64,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x5b, 0x0a, 0x0e, 0x46,
	0x61, 0x76, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x4b, 0x65, 0x79,
	0x42, 0x75, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x52, 0x06, 0x4b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x22, 0x9d, 0x01, 0x0a, 0x0f, 0x46, 0x61, 0x76,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x25,
	0x0a, 0x07, 0x43, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x6d, 0x6d, 0x2e, 0x43, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x43, 0x6d,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x4b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x4b, 0x65,
	0x79, 0x42, 0x75, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64,
	0x46, 0x61, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x61, 0x76, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x46, 0x61, 0x76, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x71, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x46, 0x61, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x46, 0x61, 0x76, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x46, 0x61, 0x76, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x61, 0x76, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xa3, 0x01, 0x0a, 0x09, 0x46, 0x61, 0x76, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x46, 0x61, 0x76, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46,
	0x61, 0x76, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x46, 0x61, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x46, 0x61,
	0x76, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x46, 0x61, 0x76, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8c, 0x01, 0x0a,
	0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x46, 0x61, 0x76, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x46, 0x61, 0x76, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x73, 0x70, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x46, 0x61, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x46, 0x61, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46,
	0x61, 0x76, 0x49, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x52,
	0x65, 0x71, 0x42, 0x75, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x52, 0x06, 0x52, 0x65, 0x71, 0x42, 0x75, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72,
	0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22, 0xe0, 0x0a, 0x0a, 0x15, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x09, 0x50, 0x79, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x09, 0x50, 0x79, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x07, 0x51,
	0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x06, 0x49, 0x6d, 0x67, 0x42,
	0x75, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x06, 0x49, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x65, 0x69,
	0x62, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x65, 0x69, 0x62, 0x6f, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x65,
	0x69, 0x62, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x57,
	0x65, 0x69, 0x62, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x57, 0x65, 0x69, 0x62, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x42, 0x67, 0x69, 0x6d, 0x67, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x42, 0x67, 0x69, 0x6d, 0x67, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x53,
	0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x53, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x69, 0x67, 0x48,
	0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x42, 0x75, 0x66, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x42,
	0x75, 0x66, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x6e, 0x74, 0x69,
	0x73, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x66,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x4b, 0x66, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6f, 0x70, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x50, 0x6f, 0x70, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x12,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x11,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6d, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x11, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x6d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe5, 0x07,
	0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x31, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52,
	0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x50, 0x79, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x52, 0x09, 0x50, 0x79, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2f,
	0x0a, 0x07, 0x51, 0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65,
	0x78, 0x12, 0x2d, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x42, 0x75, 0x66,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x67, 0x69, 0x6d, 0x67, 0x49, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x67, 0x69,
	0x6d, 0x67, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x6e, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x24, 0x0a, 0x0d, 0x62, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49,
	0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61,
	0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa2, 0x04, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64,
	0x69, 0x6d, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x79, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x79, 0x69,
	0x6e, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x70, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x70, 0x69, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x79, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x79, 0x69, 0x6e, 0x69,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x70,
	0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x51, 0x75, 0x61, 0x6e, 0x70, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6d,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61, 0x6d,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e,
	0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x73, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x57, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73,
	0x63, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x17, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xd0, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e,
	0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x52, 0x0a, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x09, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x04, 0x0a, 0x11, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6d, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x37, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0b, 0x65, 0x78, 0x74,
	0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e,
	0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x22, 0xda, 0x04, 0x0a, 0x0a, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41,
	0x6e, 0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x53, 0x63, 0x61, 0x6e, 0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x53, 0x63,
	0x61, 0x6e, 0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x14, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x14, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x75, 0x62, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x53, 0x75, 0x62, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x69,
	0x7a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0d, 0x62, 0x69, 0x7a, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x66, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x4f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xa8, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x50,
	0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6d, 0x6d, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0d, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x09, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x44,
	0x22, 0xa0, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61,
	0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x6d, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0d, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x1d, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a,
	0x11, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6d, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x56,
	0x0a, 0x1e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x44, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x44, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x44,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50,
	0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6d, 0x6d, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0d, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2d, 0x0a, 0x0c, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d,
	0x6d, 0x2e, 0x43, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0x4b,
	0x0a, 0x0d, 0x4f, 0x70, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x28, 0x0a, 0x08, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6d, 0x2e, 0x4f, 0x70, 0x6c, 0x6f, 0x67, 0x52, 0x65,
	0x74, 0x52, 0x08, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x22, 0x4a, 0x0a, 0x08, 0x4f,
	0x70, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x7d, 0x0a, 0x16, 0x53, 0x6e, 0x73, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x76, 0x0a, 0x17, 0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e, 0x73,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x35,
	0x0a, 0x0f, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03,
	0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x32, 0x0a, 0x09, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x25, 0x0a, 0x03, 0x74, 0x64, 0x69, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6d, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x74, 0x64, 0x69, 0x22, 0x39, 0x0a, 0x08, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x02, 0x74, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x02, 0x74, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6d, 0x64, 0x22, 0x4b, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x73, 0x74, 0x53, 0x6f, 0x66,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x66, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x66, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6d, 0x2e, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x6f,
	0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x11, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x11, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x7a, 0x0a, 0x07, 0x46, 0x50, 0x46, 0x72, 0x65, 0x73, 0x68, 0x12, 0x31,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x53, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x5a,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x6d,
	0x2e, 0x5a, 0x54, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x5a, 0x74, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x9c, 0x01, 0x0a, 0x06, 0x5a, 0x54, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x55, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x55, 0x69, 0x6e, 0x22, 0xc3,
	0x01, 0x0a, 0x07, 0x53, 0x61, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x49,
	0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x58, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x31, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x58, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x31, 0x12, 0x12,
	0x0a, 0x04, 0x4b, 0x65, 0x79, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x4b, 0x65,
	0x79, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x58, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x32, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x58, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x32, 0x12, 0x12, 0x0a, 0x04,
	0x4b, 0x65, 0x79, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x4b, 0x65, 0x79, 0x32,
	0x12, 0x12, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x33, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x4b, 0x65, 0x79, 0x33, 0x22, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x4d, 0x6f, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x78, 0x74, 0x22, 0xfd, 0x04, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x73, 0x67, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x69, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x55, 0x69, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4e, 0x65, 0x77, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x07, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x07, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4f, 0x66, 0x66, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x4f, 0x66, 0x66, 0x73, 0x74, 0x22, 0x8f, 0x03, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4e,
	0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x0c, 0x51, 0x75, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x44, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x48,
	0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6d, 0x67, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xff,
	0x01, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x44, 0x48, 0x65, 0x61, 0x64, 0x49,
	0x6d, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x49, 0x6d, 0x67, 0x4d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x67, 0x4d, 0x64, 0x35, 0x73, 0x75, 0x6d,
	0x12, 0x24, 0x0a, 0x0d, 0x42, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64,
	0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x48,
	0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c,
	0x22, 0xa5, 0x03, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x73, 0x77, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x77, 0x64, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x77, 0x64, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x77, 0x64, 0x32, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x77, 0x64, 0x32, 0x12, 0x2d, 0x0a, 0x06, 0x69, 0x6d, 0x67,
	0x53, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x52, 0x06, 0x69, 0x6d, 0x67, 0x53, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x52, 0x07, 0x69, 0x6d, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x69, 0x6d, 0x67,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0d, 0x69, 0x6d, 0x67, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x6b, 0x73, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x04, 0x6b, 0x73, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x77, 0x74, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x42, 0x75, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x77, 0x74, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x73, 0x70, 0x42, 0x75, 0x66, 0x66, 0x22, 0xae, 0x03, 0x0a, 0x12, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x50, 0x73, 0x77, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x53, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x06, 0x69, 0x6d,
	0x67, 0x53, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x69, 0x6d, 0x67,
	0x42, 0x75, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x69,
	0x6d, 0x67, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0d, 0x69, 0x6d, 0x67, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x61, 0x32, 0x4b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x05,
	0x61, 0x32, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x6b, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x04, 0x6b, 0x73, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x0e, 0x77, 0x74,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x42, 0x75, 0x66, 0x66, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x77, 0x74, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x73, 0x70, 0x42, 0x75, 0x66, 0x66, 0x22, 0xcf, 0x01, 0x0a, 0x0d, 0x53, 0x65,
	0x74, 0x50, 0x77, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0b,
	0x61, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7f, 0x0a, 0x0e, 0x53,
	0x65, 0x74, 0x50, 0x77, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x0b, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x93, 0x02, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52,
	0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x0a, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x33, 0x0a,
	0x09, 0x45, 0x78, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x09, 0x45, 0x78, 0x74, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x22, 0x8c, 0x02, 0x0a, 0x1b, 0x46, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f,
	0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x61, 0x67, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x39, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x61, 0x67, 0x39, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x67, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x67, 0x31,
	0x30, 0x22, 0xe2, 0x01, 0x0a, 0x1c, 0x46, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x57, 0x78,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f,
	0x6f, 0x6d, 0x57, 0x78, 0x69, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a,
	0x12, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x74, 0x72,
	0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x42, 0x0a,
	0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x0a, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xeb, 0x03, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x33, 0x0a, 0x09, 0x50, 0x79, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x09, 0x50, 0x79, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x07, 0x51, 0x75,
	0x61, 0x6e, 0x50, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6d, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x52, 0x09, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x06, 0x49, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x49, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x12,
	0x24, 0x0a, 0x0d, 0x42, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49,
	0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x22,
	0xad, 0x05, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35,
	0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x4e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09,
	0x50, 0x59, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x09, 0x50, 0x59, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x2f, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6e, 0x50,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x53, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x06, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x3f, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x79, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x52, 0x0f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x79, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x51, 0x75,
	0x61, 0x6e, 0x50, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x52, 0x0d, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x50, 0x69,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22,
	0xc3, 0x02, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x52, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0c, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x4c,
	0x61, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x34, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x70, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x52, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0a,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x46, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x35, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0a, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x64,
	0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x64, 0x35, 0x22, 0xa7, 0x05, 0x0a,
	0x0a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4d, 0x44, 0x35,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4d, 0x44,
	0x35, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x53, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x46,
	0x42, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6d,
	0x2e, 0x46, 0x42, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x06, 0x46, 0x42, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x47, 0x49, 0x6d, 0x67, 0x49, 0x44, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x47, 0x49, 0x6d,
	0x67, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x0b, 0x53, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6e,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x53, 0x6e, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x0a, 0x0d, 0x42, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61,
	0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x41, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61, 0x6d,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x46, 0x0a, 0x08, 0x46, 0x42, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x43,
	0x0a, 0x0f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x46, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x86, 0x02, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x46, 0x61, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x78, 0x46, 0x61, 0x76, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x78, 0x46, 0x61, 0x76, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x78, 0x41, 0x75, 0x74, 0x6f,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x6d, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x6d, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x53, 0x6e, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x6b, 0x65, 0x79,
	0x42, 0x75, 0x66, 0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x53, 0x6e, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x07, 0x63, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x6d, 0x6d, 0x2e, 0x43, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x63, 0x6d, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2d, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x42,
	0x75, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x06, 0x6b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x22, 0x65, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xda,
	0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x88, 0x04, 0x0a, 0x19,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3c, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a,
	0x0b, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x34,
	0x0a, 0x15, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x1d, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x69, 0x73, 0x4e,
	0x6f, 0x6e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x69, 0x73,
	0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x57, 0x78, 0x61, 0x63, 0x63,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x57, 0x78,
	0x61, 0x63, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x1f,
	0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x61, 0x63, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x63, 0x63, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x02, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x65, 0x72, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22, 0xb5, 0x03, 0x0a, 0x0d,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x32, 0x0a, 0x07, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46,
	0x6c, 0x61, 0x67, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x59, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44,
	0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44,
	0x61, 0x79, 0x22, 0xeb, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x49, 0x63, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x47, 0x75, 0x61,
	0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xcb, 0x02, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x4d, 0x64, 0x35, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e,
	0x65, 0x65, 0x64, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72,
	0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0xc5,
	0x04, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x3a, 0x0a,
	0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6d, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x64, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x64,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3c, 0x0a, 0x0a, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x61, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x34, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x74,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x74, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xae, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xec, 0x09, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x69, 0x64, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x64, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69,
	0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6d, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x10, 0x72, 0x65,
	0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x46, 0x61, 0x76, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x61, 0x76, 0x57,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x53, 0x68, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x70, 0x73,
	0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x69, 0x70, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x2e,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x22, 0xa2, 0x02, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55,
	0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x4d, 0x64, 0x35, 0x53, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x4d, 0x64, 0x35, 0x53, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x53, 0x70, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6d, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x53, 0x70, 0x65, 0x63, 0x22, 0x97, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22,
	0x26, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6f, 0x69, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa7,
	0x06, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54,
	0x77, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x77, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x69, 0x64, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x64, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xfb, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x72,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x6f,
	0x77, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xfa, 0x03, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x0c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x6e, 0x74, 0x69,
	0x73, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x41, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x41, 0x6e,
	0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0e, 0x41, 0x6e, 0x74, 0x69, 0x73,
	0x70, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x55, 0x0a, 0x1a,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x1a, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x4d,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6d, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x15, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x41, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61,
	0x6d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xeb, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x68, 0x61,
	0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0f, 0x4e,
	0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x4e, 0x65,
	0x77, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x7d, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x68, 0x61, 0x74,
	0x72, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9e, 0x03, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6f,
	0x6c, 0x73, 0x52, 0x09, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x7a, 0x0a,
	0x09, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x6f,
	0x6f, 0x6d, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x57, 0x78, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6f,
	0x6c, 0x73, 0x57, 0x78, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0f,
	0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x57, 0x78, 0x41, 0x70, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54,
	0x6f, 0x6f, 0x6c, 0x73, 0x54, 0x6f, 0x64, 0x6f, 0x52, 0x0f, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x6f,
	0x6f, 0x6c, 0x73, 0x57, 0x78, 0x41, 0x70, 0x70, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x0d, 0x52, 0x6f,
	0x6f, 0x6d, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x54, 0x6f, 0x64, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x6f, 0x64, 0x6f, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x64,
	0x6f, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x54, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0xcd, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x57, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x91, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x6d, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x43, 0x74, 0x78,
	0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x74, 0x78, 0x22, 0x5d, 0x0a, 0x0d, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x29, 0x0a, 0x0b, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x43, 0x74, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x22, 0xcd, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x30, 0x0a,
	0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x74, 0x78, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x78, 0x12,
	0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x6d, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x74,
	0x78, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x78, 0x22, 0x8d, 0x01, 0x0a,
	0x09, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x69, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62,
	0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x62, 0x0a, 0x0e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x74, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e,
	0x22, 0x93, 0x02, 0x0a, 0x14, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x42, 0x75,
	0x66, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x42, 0x75, 0x66, 0x49, 0x64, 0x22, 0xd8, 0x02, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x22, 0xa6, 0x03, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x6d, 0x2e, 0x41, 0x70, 0x70,
	0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x69, 0x74, 0x4d, 0x64, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x69,
	0x74, 0x4d, 0x64, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x72, 0x63, 0x33, 0x32, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x72, 0x63, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x73,
	0x67, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6d, 0x73, 0x67, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x82, 0x03, 0x0a, 0x12, 0x53,
	0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x65, 0x73,
	0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x65, 0x73, 0x6b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0xdb, 0x03, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72,
	0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x73, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x73, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xa6, 0x01,
	0x0a, 0x0a, 0x48, 0x6f, 0x6e, 0x67, 0x42, 0x61, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x0b,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x67, 0x69, 0x43, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x63, 0x67, 0x69, 0x43, 0x6d, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x50, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x50,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x54, 0x65, 0x78, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x0a, 0x48, 0x6f, 0x6e, 0x67, 0x42,
	0x61, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x52, 0x07, 0x72, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70,
	0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x4d, 0x73,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x4d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x67, 0x69, 0x43, 0x6d, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x67, 0x69, 0x43, 0x6d, 0x64, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x73, 0x0a, 0x05, 0x57, 0x63, 0x73, 0x74, 0x66, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x05,
	0x57, 0x63, 0x73, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x31, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x33, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x35, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x36, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x36, 0x22, 0x86, 0x02, 0x0a, 0x0e, 0x4a, 0x53, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a,
	0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6d, 0x2e, 0x57, 0x78, 0x61, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb5, 0x03, 0x0a,
	0x0f, 0x4a, 0x53, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x6a, 0x73, 0x61, 0x70, 0x69, 0x42,
	0x61, 0x73, 0x65, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x4a, 0x53, 0x41, 0x50, 0x49, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x6a, 0x73, 0x61, 0x70, 0x69, 0x42,
	0x61, 0x73, 0x65, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x2b, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x69,
	0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x45, 0x0a, 0x11, 0x4a, 0x53, 0x41, 0x50, 0x49, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x09,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x44, 0x65, 0x73, 0x63, 0x22, 0x63, 0x0a, 0x0f, 0x57, 0x78, 0x61, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68,
	0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x76, 0x22, 0x73, 0x0a, 0x10,
	0x42, 0x69, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x49, 0x0a, 0x11, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x0a, 0x16,
	0x53, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x17,
	0x53, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x0a,
	0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x12, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf4, 0x06, 0x0a, 0x13, 0x42, 0x69, 0x6e, 0x64,
	0x4f, 0x70, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69,
	0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x61, 0x66, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x61,
	0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e,
	0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x74, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x52, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x52, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x70, 0x61,
	0x6d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x37, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x41, 0x70, 0x70, 0x41, 0x75, 0x74, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x68, 0x69, 0x72, 0x64, 0x41, 0x70, 0x70, 0x41,
	0x75, 0x74, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x73, 0x6d, 0x73,
	0x55, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x6d, 0x73, 0x55, 0x70, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x73, 0x6d, 0x73,
	0x55, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf2,
	0x06, 0x0a, 0x14, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6d, 0x73, 0x4e, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6d, 0x73, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x65, 0x65, 0x64, 0x53, 0x65, 0x74, 0x50, 0x77, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x65, 0x74, 0x50, 0x77, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x77, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x6e, 0x65, 0x77,
	0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x6d, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x0b, 0x6e,
	0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x49, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x49, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x49, 0x70, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x63, 0x12,
	0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x31,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x31, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x68, 0x6f,
	0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x6d, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x09,
	0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6d, 0x74,
	0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x6d, 0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x42, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x6d, 0x73, 0x55, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6d, 0x73, 0x55, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6d, 0x73,
	0x55, 0x70, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x6d, 0x73, 0x55, 0x70, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x22, 0x57, 0x0a, 0x11, 0x53, 0x6d, 0x73, 0x55, 0x70, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x3f, 0x0a, 0x09,
	0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x6d, 0x6d, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5a, 0x0a,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xa6, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x8e, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x06, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6f, 0x6f, 0x74,
	0x65, 0x72, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x51, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x57, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0xe8, 0x02, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x7a, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x73,
	0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0b,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x3d, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x79,
	0x0a, 0x14, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09,
	0x77, 0x75, 0x52, 0x61, 0x6f, 0x54, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x57, 0x75, 0x52, 0x61, 0x6f, 0x54, 0x69, 0x70, 0x73, 0x52, 0x09,
	0x77, 0x75, 0x52, 0x61, 0x6f, 0x54, 0x69, 0x70, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x09, 0x57, 0x75,
	0x52, 0x61, 0x6f, 0x54, 0x69, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x57,
	0x75, 0x52, 0x61, 0x6f, 0x54, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x65, 0x6e, 0x64, 0x57, 0x75, 0x52, 0x61, 0x6f, 0x54, 0x69, 0x70, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x77, 0x75, 0x52, 0x61, 0x6f, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x75, 0x52, 0x61, 0x6f, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x75, 0x52, 0x61, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77,
	0x75, 0x52, 0x61, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x22, 0xbf, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x79, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x13, 0x6d, 0x61, 0x73, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61,
	0x73, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x57, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x57, 0x75, 0x52, 0x61, 0x6f, 0x4f, 0x70,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x57, 0x75, 0x52, 0x61, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x9e, 0x02, 0x0a,
	0x0f, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x65, 0x71,
	0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x7a, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6d, 0x70,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x74, 0x6d, 0x70, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x69, 0x7a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x69, 0x7a, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22, 0xba, 0x04,
	0x0a, 0x10, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x6d, 0x2e, 0x42, 0x69, 0x7a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b,
	0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x69, 0x7a, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x07, 0x6d,
	0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x6d, 0x2e, 0x42, 0x69, 0x7a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x07, 0x6d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x6d, 0x2e, 0x42, 0x69, 0x7a, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x09, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x6d, 0x2e, 0x42, 0x69, 0x7a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x69, 0x7a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x4b, 0x0a,
	0x0f, 0x66, 0x75, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x69, 0x7a, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x46, 0x75, 0x6e,
	0x63, 0x46, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0f, 0x66, 0x75, 0x6e, 0x63, 0x46,
	0x6c, 0x61, 0x67, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x5e, 0x0a, 0x16, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6d, 0x2e,
	0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70,
	0x5f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x16, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x1d, 0x42, 0x69,
	0x7a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x46,
	0x75, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x42, 0x69, 0x7a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x61, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x0b, 0x42, 0x69, 0x7a, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53,
	0x74, 0x72, 0x22, 0x5e, 0x0a, 0x0e, 0x42, 0x69, 0x7a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6d, 0x2e,
	0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x46, 0x0a, 0x16, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x56, 0x32, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x22, 0x2e, 0x0a, 0x0c, 0x42, 0x69,
	0x7a, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x40, 0x0a, 0x0e, 0x42, 0x69,
	0x7a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x08,
	0x6d, 0x65, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x69, 0x7a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x6e, 0x75, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd4, 0x01, 0x0a,
	0x0e, 0x42, 0x69, 0x7a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x69, 0x7a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x6e, 0x75, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x14, 0x42, 0x69, 0x7a, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x63, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xbc, 0x01, 0x0a, 0x22, 0x42,
	0x69, 0x7a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x5f,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x53, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x53, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x5d, 0x0a, 0x1f, 0x45, 0x78, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x84, 0x03, 0x0a, 0x20, 0x45, 0x78, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x6f, 0x6b, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6d, 0x2e, 0x45, 0x78, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x4b, 0x52,
	0x65, 0x74, 0x52, 0x05, 0x6f, 0x6b, 0x72, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6d,
	0x2e, 0x45, 0x78, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x6d, 0x2e, 0x45, 0x78, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x43, 0x74, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x43, 0x74, 0x72, 0x6c, 0x22,
	0xf6, 0x02, 0x0a, 0x1a, 0x45, 0x78, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x4b, 0x52, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x4f, 0x6b, 0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4f, 0x6b, 0x53, 0x74, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x4f,
	0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x65, 0x64, 0x44, 0x65, 0x76, 0x54, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x76, 0x54, 0x69, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x5b, 0x0a, 0x1d, 0x45, 0x78, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x63, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x63, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x22, 0x7b, 0x0a, 0x1f, 0x45, 0x78, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x1e, 0x45, 0x78, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x4b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x15, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6e,
	0x63, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63,
	0x4d, 0x73, 0x67, 0x22, 0x83, 0x01, 0x0a, 0x1f, 0x45, 0x78, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x4b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x94, 0x0c, 0x0a, 0x11, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x09,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x76, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x64, 0x6e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x55, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x64, 0x6e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x65, 0x73, 0x6b, 0x65, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x65, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x56, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x56, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x64,
	0x6e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x64, 0x6e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x64, 0x6e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x64, 0x6e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49,
	0x6d, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x64, 0x6e, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x49, 0x6d, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x63, 0x64, 0x6e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x64, 0x6e, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x49, 0x6d, 0x67, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x63, 0x64, 0x6e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x67, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x64, 0x6e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x41, 0x65, 0x73, 0x6b,
	0x65, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x64, 0x6e, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x41, 0x65, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x64, 0x35, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x64, 0x35, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x57, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x57, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x57, 0x65, 0x62, 0x55,
	0x72, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x64, 0x55, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x41, 0x64, 0x55, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x45, 0x78, 0x74, 0x53, 0x74, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x45, 0x78, 0x74, 0x53, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69,
	0x74, 0x4d, 0x64, 0x35, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x69, 0x74, 0x4d,
	0x64, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x65, 0x77, 0x4d, 0x64,
	0x35, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x65,
	0x77, 0x4d, 0x64, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x72, 0x63, 0x33, 0x32, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x73,
	0x67, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6d, 0x73, 0x67, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65,
	0x6e, 0x64, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x22, 0xc1, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x65, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x65, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x22, 0x90, 0x03, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x0b,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x37, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x37, 0x53, 0x74, 0x65, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x6b, 0x53, 0x74,
	0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x0f, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x69, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x48, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6d, 0x2e, 0x4d, 0x6f, 0x64, 0x48, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x48, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6d, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x68, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d,
	0x2e, 0x48, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x0e, 0x68, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x48, 0x0a, 0x0a, 0x48,
	0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xe8, 0x05, 0x0a, 0x0e, 0x48, 0x61, 0x72, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x61, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61,
	0x6e, 0x75, 0x4d, 0x61, 0x63, 0x50, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6d, 0x61, 0x6e, 0x75, 0x4d, 0x61, 0x63, 0x50, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x72, 0x4d, 0x61, 0x63, 0x50, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x4d, 0x61, 0x63, 0x50, 0x6f, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x75, 0x6d, 0x70,
	0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55,
	0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d,
	0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69,
	0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x6c, 0x65, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75,
	0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xb2, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x6d, 0x2e, 0x52, 0x53, 0x41, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x09, 0x63, 0x65, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65,
	0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x65, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x07,
	0x52, 0x53, 0x41, 0x43, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x4e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x4e, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x45, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x45, 0x22,
	0xf3, 0x01, 0x0a, 0x14, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x76, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x78, 0x50,
	0x61, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d,
	0x78, 0x50, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x77,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xdf, 0x02, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0a,
	0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xea, 0x02, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x4c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4c,
	0x65, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x89, 0x03, 0x0a, 0x18, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x70, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x46, 0x6d,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x46, 0x6d, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x64, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x63, 0x64, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x77,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x9a, 0x02, 0x0a, 0x19, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x70, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xa5, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x74, 0x65,
	0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6d, 0x2e, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x52,
	0x09, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xca, 0x01, 0x0a, 0x13, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x35, 0x0a, 0x09, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6d, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x52, 0x09, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x87, 0x03, 0x0a, 0x12, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x52, 0x0b, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x58,
	0x6d, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x58, 0x6d, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x65, 0x77, 0x58, 0x6d, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6e, 0x65, 0x77, 0x58, 0x6d, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e,
	0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x72, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x73, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xdb, 0x01, 0x0a, 0x0a, 0x53, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x48, 0x61, 0x73, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x48, 0x61, 0x73, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x48, 0x61, 0x73,
	0x46, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x48, 0x61, 0x73,
	0x46, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46,
	0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x46, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x48, 0x61, 0x73, 0x57, 0x78,
	0x50, 0x77, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x48, 0x61, 0x73, 0x57,
	0x78, 0x50, 0x77, 0x64, 0x22, 0x7d, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x53, 0x61, 0x66, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x22, 0x6d, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x53, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x22, 0xea, 0x03, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x0e, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe5,
	0x01, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0f, 0x63,
	0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x3c, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x67, 0x22, 0x29,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x13, 0x52, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4b, 0x56, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x14,
	0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4b, 0x56, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x0a, 0x09, 0x46, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x6d,
	0x42, 0x75, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6d,
	0x42, 0x75, 0x66, 0x66, 0x22, 0x5e, 0x0a, 0x0a, 0x46, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x6d,
	0x42, 0x75, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6d,
	0x42, 0x75, 0x66, 0x66, 0x22, 0xfa, 0x0c, 0x0a, 0x06, 0x54, 0x65, 0x73, 0x74, 0x32, 0x34, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75,
	0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6e, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6e, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x36, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x36, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6e, 0x37, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6e, 0x37, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x38, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x38, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x39, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x39, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b,
	0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x31, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6e, 0x31, 0x32, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6e, 0x31, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e,
	0x31, 0x33, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77,
	0x6e, 0x31, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x34,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31,
	0x34, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x35, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x35, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x36, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x36, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x37, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x37, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x38, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x38, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b,
	0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x39, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x6e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x39, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6e, 0x32, 0x30, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6e, 0x32, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e,
	0x32, 0x31, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77,
	0x6e, 0x32, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x32,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32,
	0x32, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x33, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x33, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x34, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x34, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x35, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x35, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x36, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x36, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b,
	0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x37, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x37, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6e, 0x32, 0x38, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6e, 0x32, 0x38, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e,
	0x32, 0x39, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77,
	0x6e, 0x32, 0x39, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x30,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x33,
	0x30, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x31, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x31, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x32, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x32, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x33, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x34, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b,
	0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x35, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x35, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6e, 0x33, 0x36, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6e, 0x33, 0x36, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e,
	0x33, 0x37, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77,
	0x6e, 0x33, 0x37, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x38,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x33,
	0x38, 0x12, 0x2e, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x39, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x39, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x30, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x30, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x31, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x32, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x75, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x33, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x34, 0x34, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x34, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x34, 0x35, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x34, 0x35, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x36,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34,
	0x36, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x37, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x37, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x38, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x38, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x39, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x39, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x30, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x31, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x35, 0x32, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x35, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x35, 0x33, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x35, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x34,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35,
	0x34, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x7a, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x7a,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22, 0xce,
	0x02, 0x0a, 0x12, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x69, 0x63, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x41, 0x75, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x73, 0x53, 0x6c, 0x69, 0x65, 0x6e, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x6c, 0x69, 0x65, 0x6e, 0x63,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x68, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x57, 0x68, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x22,
	0xec, 0x02, 0x0a, 0x15, 0x4a, 0x53, 0x41, 0x50, 0x49, 0x50, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x73, 0x61, 0x70, 0x69, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x73, 0x61, 0x70, 0x69, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x61, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0b, 0x74, 0x61, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xad,
	0x02, 0x0a, 0x16, 0x4a, 0x53, 0x41, 0x50, 0x49, 0x50, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x11, 0x6a, 0x73, 0x61, 0x70, 0x69, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e,
	0x4a, 0x53, 0x41, 0x50, 0x49, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x11, 0x6a, 0x73, 0x61, 0x70, 0x69, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x69,
	0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70,
	0x48, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75,
	0x74, 0x68, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x74, 0x22, 0x45,
	0x0a, 0x10, 0x46, 0x32, 0x46, 0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x94, 0x04, 0x0a, 0x11, 0x46, 0x32, 0x46, 0x51, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2c, 0x0a,
	0x0a, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6d, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0a, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x72, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x72, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x6c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x6c, 0x65, 0x66, 0x74, 0x49, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x41, 0x72, 0x72, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x73,
	0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x73,
	0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x70, 0x65, 0x72, 0x57, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x63, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x63, 0x68, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x63, 0x68, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x2c, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3d, 0x0a,
	0x0f, 0x62, 0x75, 0x79, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6d, 0x2e, 0x4d, 0x69, 0x6e, 0x69,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x62, 0x75, 0x79,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcc, 0x01, 0x0a,
	0x08, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x61, 0x61,
	0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x61, 0x61, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x61, 0x61, 0x70, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x77, 0x61, 0x61, 0x70, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x22, 0x49, 0x0a, 0x0f, 0x4d,
	0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x8f, 0x02, 0x0a, 0x18, 0x53, 0x64, 0x6b, 0x4f, 0x61,
	0x75, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x34,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x34, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x38, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x39, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x31, 0x30, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x31, 0x30, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x67, 0x31, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67,
	0x31, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x31, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x61, 0x67, 0x31, 0x32, 0x22, 0xe0, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x6e,
	0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x67, 0x69, 0x43, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x67, 0x69, 0x43, 0x6d, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x50, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x54, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x54, 0x65, 0x78,
	0x74, 0x57, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x53,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x54, 0x65, 0x78, 0x74, 0x57, 0x78, 0x22, 0x91, 0x02, 0x0a, 0x0e,
	0x54, 0x65, 0x6e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x67, 0x69,
	0x43, 0x6d, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x67, 0x69,
	0x43, 0x6d, 0x64, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x45,
	0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x65,
	0x6e, 0x70, 0x61, 0x79, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x65, 0x6e, 0x70, 0x61, 0x79, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22,
	0xf8, 0x01, 0x0a, 0x16, 0x4a, 0x53, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6d, 0x2e, 0x57, 0x78, 0x61, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf5, 0x02, 0x0a, 0x17, 0x4a,
	0x53, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x11,
	0x6a, 0x73, 0x61, 0x70, 0x69, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x4a, 0x53, 0x41,
	0x50, 0x49, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11,
	0x6a, 0x73, 0x61, 0x70, 0x69, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70,
	0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x69, 0x63, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x22, 0x61, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x44, 0x4e, 0x44, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x70, 0x22, 0x4a, 0x0a, 0x0e, 0x43, 0x44, 0x4e, 0x44, 0x6e, 0x73, 0x50,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xa8, 0x05, 0x0a, 0x0a, 0x43, 0x44, 0x4e, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x76,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x03, 0x75, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x50, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x50, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0a, 0x66,
	0x6f, 0x6e, 0x74, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x7a, 0x6f, 0x6e,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x7a,
	0x6f, 0x6e, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e,
	0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x74, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f,
	0x6e, 0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x50, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x50, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x50, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52,
	0x0a, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0f, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x49, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x43, 0x44, 0x4e, 0x44, 0x6e, 0x73,
	0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49,
	0x50, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x7a, 0x6f, 0x6e,
	0x65, 0x49, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x43, 0x44, 0x4e, 0x44, 0x6e, 0x73, 0x50, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x50, 0x50, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x50,
	0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x10, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x7a, 0x6f, 0x6e, 0x65,
	0x49, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x61, 0x6b, 0x65, 0x55, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x61,
	0x6b, 0x65, 0x55, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x41, 0x75, 0x74, 0x68,
	0x6b, 0x65, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x52, 0x0a, 0x6e, 0x65, 0x77, 0x41, 0x75, 0x74, 0x68, 0x6b, 0x65, 0x79, 0x22, 0x95, 0x02, 0x0a,
	0x0f, 0x43, 0x44, 0x4e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x30, 0x0a, 0x13, 0x63, 0x32, 0x43, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x13, 0x63,
	0x32, 0x43, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x4d, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x6e, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x13, 0x73, 0x6e, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x32, 0x43, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x10,
	0x63, 0x32, 0x43, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6e, 0x73, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x10, 0x73, 0x6e, 0x73, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x32, 0x43, 0x52, 0x57, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x32, 0x43, 0x52, 0x57, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x73, 0x52, 0x57, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6e, 0x73, 0x52, 0x57, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x83, 0x04, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x44, 0x4e, 0x44,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6d, 0x2e, 0x43, 0x44, 0x4e, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x6e,
	0x73, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x6d, 0x2e, 0x43, 0x44, 0x4e, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x73, 0x6e, 0x73, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x6d, 0x2e, 0x43, 0x44, 0x4e, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x64,
	0x6e, 0x44, 0x6e, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x75, 0x66, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x0d, 0x63, 0x64, 0x6e, 0x44, 0x6e, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x75, 0x66,
	0x12, 0x2c, 0x0a, 0x11, 0x66, 0x61, 0x6b, 0x65, 0x43, 0x64, 0x6e, 0x44, 0x6e, 0x73, 0x52, 0x75,
	0x6c, 0x65, 0x42, 0x75, 0x66, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x11, 0x66, 0x61, 0x6b,
	0x65, 0x43, 0x64, 0x6e, 0x44, 0x6e, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x75, 0x66, 0x12, 0x30,
	0x0a, 0x0b, 0x66, 0x61, 0x6b, 0x65, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6d, 0x2e, 0x43, 0x44, 0x4e, 0x44, 0x6e, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x66, 0x61, 0x6b, 0x65, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x30, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x43, 0x64, 0x6e, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x13, 0x67,
	0x65, 0x74, 0x43, 0x64, 0x6e, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4d, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6d, 0x2e, 0x43,
	0x44, 0x4e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a,
	0x0e, 0x64, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x0a, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6d, 0x2e, 0x43, 0x44, 0x4e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xef, 0x03, 0x0a, 0x0d, 0x42,
	0x69, 0x6e, 0x64, 0x51, 0x51, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0b,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x71, 0x71, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x71, 0x71, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x6b, 0x73, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x04, 0x6b, 0x73, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x41, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x74, 0x41, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a,
	0x0e, 0x77, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x42, 0x75, 0x66, 0x66, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x77, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x42, 0x75, 0x66, 0x66, 0x22, 0xfd, 0x04, 0x0a,
	0x0e, 0x42, 0x69, 0x6e, 0x64, 0x51, 0x51, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x64, 0x12, 0x33, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75, 0x66, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x75, 0x66, 0x66, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x4d, 0x61,
	0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x70, 0x75, 0x73, 0x68, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32,
	0x0a, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x6c, 0x6f, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x42, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x71, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x6b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x71, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x6b, 0x65, 0x79,
	0x12, 0x37, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0b, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x61, 0x32, 0x4b,
	0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x05, 0x61, 0x32, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x6b, 0x73, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x04, 0x6b, 0x73, 0x69,
	0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6d, 0x2e, 0x53,
	0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x73,
	0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x0e, 0x77, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x42, 0x75, 0x66, 0x66, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6d, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x77, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x42, 0x75, 0x66, 0x66, 0x2a, 0x91, 0x01, 0x0a,
	0x0c, 0x53, 0x6e, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x45, 0x58, 0x54,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4d, 0x53, 0x4e,
	0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4d,
	0x53, 0x4e, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x49, 0x47, 0x48, 0x54, 0x10, 0x06,
	0x2a, 0xa9, 0x01, 0x0a, 0x0f, 0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4c, 0x49,
	0x4b, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d,
	0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x4f, 0x50, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12,
	0x1b, 0x0a, 0x17, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x4f,
	0x50, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a,
	0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x4f, 0x50, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x10, 0x02, 0x2a, 0xd6, 0x0a, 0x0a,
	0x09, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6d, 0x64, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6d,
	0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x44, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x41, 0x64, 0x64, 0x4d, 0x73, 0x67, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x6d, 0x64, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x6d, 0x64, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x73,
	0x67, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x4f, 0x70, 0x65,
	0x6e, 0x51, 0x51, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x6c, 0x6f, 0x67, 0x10, 0x0b, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x42, 0x6c, 0x6f, 0x67, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6d, 0x64, 0x49, 0x64,
	0x4d, 0x6f, 0x64, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x6c, 0x6f, 0x67, 0x10, 0x0d, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6d, 0x64, 0x49,
	0x64, 0x4d, 0x6f, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x51, 0x75, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x6d, 0x64, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x6d, 0x64, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x6d, 0x64, 0x49,
	0x64, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x10, 0x13, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x4d, 0x6f,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x10,
	0x14, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x15, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f,
	0x70, 0x65, 0x6e, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x10, 0x17, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x51, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x10, 0x18, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x50, 0x73, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x10, 0x1a, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x4d,
	0x6f, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x10,
	0x1b, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x10, 0x1e, 0x12, 0x20, 0x0a, 0x1c,
	0x4d, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x44, 0x49,
	0x53, 0x54, 0x55, 0x52, 0x42, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x1f, 0x12, 0x1b,
	0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x20, 0x12, 0x1f, 0x0a, 0x1b, 0x4d,
	0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x42, 0x4f, 0x54,
	0x54, 0x4c, 0x45, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0x21, 0x12, 0x1f, 0x0a, 0x1b,
	0x4d, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x42, 0x4f,
	0x54, 0x54, 0x4c, 0x45, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0x22, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x55,
	0x53, 0x45, 0x52, 0x49, 0x4d, 0x47, 0x10, 0x23, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4d, 0x5f, 0x53,
	0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x4b, 0x56, 0x53, 0x54, 0x41, 0x54, 0x10, 0x24, 0x12,
	0x18, 0x0a, 0x14, 0x4e, 0x4e, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x54, 0x48,
	0x45, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x10, 0x25, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4d, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f,
	0x45, 0x58, 0x54, 0x10, 0x2c, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x53, 0x4e, 0x53, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x2d,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x53, 0x4e, 0x53, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x43,
	0x4d, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2e, 0x12, 0x1c, 0x0a, 0x18, 0x4d,
	0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x44, 0x5f,
	0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x2f, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x4d, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x43, 0x48, 0x41, 0x54, 0x52,
	0x4f, 0x4f, 0x4d, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x30, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4d, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x57, 0x58, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x32, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4d,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x53, 0x4e, 0x53, 0x55,
	0x53, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x33, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4d, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x53, 0x4e, 0x53, 0x42, 0x4c,
	0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x34, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4d, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x44, 0x45, 0x4c, 0x4d, 0x53,
	0x47, 0x10, 0x35, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d,
	0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x36, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44,
	0x5f, 0x4b, 0x56, 0x43, 0x4d, 0x44, 0x10, 0x37, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4d, 0x5f, 0x53,
	0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x53, 0x4e,
	0x53, 0x5f, 0x4f, 0x4c, 0x44, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x38, 0x12, 0x1b, 0x0a, 0x16,
	0x4d, 0x4d, 0x5f, 0x46, 0x41, 0x56, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x41,
	0x44, 0x44, 0x49, 0x54, 0x45, 0x4d, 0x10, 0xc8, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x6d, 0x64,
	0x49, 0x64, 0x4d, 0x61, 0x78, 0x10, 0xc9, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x6d, 0x64, 0x49,
	0x64, 0x44, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x10, 0x92, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x6d,
	0x64, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x54, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x10, 0x93,
	0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x43, 0x4d, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x4d, 0x53, 0x47, 0x10, 0x94, 0x4e, 0x12, 0x25,
	0x0a, 0x20, 0x4d, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x4d, 0x4f, 0x44,
	0x43, 0x48, 0x41, 0x54, 0x52, 0x4f, 0x4f, 0x4d, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x46, 0x4c,
	0x41, 0x47, 0x10, 0x95, 0x4e, 0x2a, 0xdc, 0x29, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xad, 0xc4,
	0xc8, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1e, 0x0a, 0x11, 0x4d, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x10, 0xc1, 0xfb,
	0xc2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1a, 0x0a, 0x0d, 0x4d, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x80, 0x96, 0xcf, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x2b, 0x0a, 0x1e, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0xa3, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x28, 0x0a, 0x1b, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x54,
	0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
	0x10, 0xa4, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x4d,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xa5,
	0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x31, 0x0a, 0x24, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x44, 0x42, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50,
	0x54, 0x5f, 0x4b, 0x45, 0x59, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0xa6, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2b, 0x0a, 0x1e,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x52, 0x4c,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x41, 0x46, 0x45, 0x10, 0xa7,
	0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x10,
	0xa8, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2d, 0x0a, 0x20, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x51, 0x52, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xa9,
	0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x42, 0x55, 0x46, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0xaa, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a,
	0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0xab, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x51, 0x52, 0x43, 0x4f,
	0x44, 0x45, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x42, 0x59, 0x45, 0x58,
	0x50, 0x4f, 0x53, 0x45, 0x10, 0xac, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x24, 0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x42,
	0x41, 0x4e, 0x42, 0x59, 0x45, 0x58, 0x50, 0x4f, 0x53, 0x45, 0x10, 0xad, 0xf0, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x42, 0x41, 0x4e, 0x42, 0x59, 0x45, 0x58, 0x50, 0x4f, 0x53,
	0x45, 0x10, 0xae, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4c, 0x42, 0x53, 0x42, 0x41, 0x4e, 0x42, 0x59, 0x45,
	0x58, 0x50, 0x4f, 0x53, 0x45, 0x10, 0xaf, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x23, 0x0a, 0x16, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4c, 0x42, 0x53, 0x44, 0x41,
	0x54, 0x41, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xb0, 0xf0, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1c, 0x0a, 0x0f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x49, 0x4d, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x93, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x2f, 0x0a, 0x22, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x41,
	0x43, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x43, 0x48, 0x41, 0x54, 0x52,
	0x4f, 0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0xd0, 0xfc, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x29, 0x0a, 0x1c, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x52,
	0x41, 0x44, 0x41, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x49,
	0x4d, 0x50, 0x4c, 0x45, 0x10, 0xd1, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x25, 0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45,
	0x4d, 0x53, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0xd2, 0xfc, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x46, 0x41, 0x56, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0xf0, 0xfc, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xa0,
	0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x59, 0x55, 0x53, 0x45, 0x52, 0x10, 0xd2, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x44, 0x43,
	0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0xd3, 0xfd, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x14, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x52,
	0x45, 0x47, 0x5f, 0x42, 0x55, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0xac, 0xfe, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x55, 0x4e, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x43,
	0x43, 0x54, 0x10, 0xb2, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a,
	0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x51, 0x51, 0x5f, 0x4f, 0x4b, 0x5f, 0x4e, 0x45,
	0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0xb3, 0xfe, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x54, 0x10, 0xb4,
	0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1a, 0x0a, 0x0d, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x41, 0x54, 0x41, 0x10, 0xb5, 0xfe, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x55, 0x4e, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x45,
	0x45, 0x44, 0x5f, 0x51, 0x51, 0x50, 0x57, 0x44, 0x10, 0xb6, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x1a, 0x0a, 0x0d, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x51, 0x51,
	0x5f, 0x42, 0x41, 0x4e, 0x10, 0xb7, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x42, 0x41, 0x4e, 0x10, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x51, 0x41, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xe7, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xe8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xe9, 0xfe, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xea, 0xfe,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10,
	0x91, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x14, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x50,
	0x41, 0x4d, 0x10, 0x96, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a,
	0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x9a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x1c, 0x0a, 0x0f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x54,
	0x52, 0x59, 0x10, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a,
	0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x4e, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x9c, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0xa2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x28, 0x0a, 0x1b, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x5f,
	0x49, 0x4d, 0x47, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xa3, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x2b, 0x0a, 0x1e, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53,
	0x48, 0x41, 0x4b, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x5f, 0x49, 0x4d, 0x47, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0xa4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x2b, 0x0a, 0x1e, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x4b,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x5f, 0x49, 0x4d, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0xa5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x29,
	0x0a, 0x1c, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x5f, 0x49, 0x4d, 0x47, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0xa6,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x42, 0x49, 0x5a, 0x5f, 0x46, 0x41, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x45, 0x44, 0x10, 0xa9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x2c, 0x0a, 0x1f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x51, 0x4d, 0x41,
	0x49, 0x4c, 0x10, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a,
	0x16, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xab, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x1e, 0x0a, 0x11, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x48, 0x41, 0x53,
	0x5f, 0x42, 0x49, 0x4e, 0x44, 0x45, 0x44, 0x10, 0xac, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x48, 0x41, 0x53,
	0x5f, 0x55, 0x4e, 0x42, 0x49, 0x4e, 0x44, 0x45, 0x44, 0x10, 0xad, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4f,
	0x4e, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54,
	0x10, 0xae, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1d, 0x0a, 0x10, 0x4d,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x42, 0x49, 0x4e, 0x44, 0x51, 0x51, 0x10,
	0xaf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x57, 0x45, 0x49, 0x42, 0x4f, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x10, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x1c, 0x0a, 0x0f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x10, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25,
	0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x56, 0x52, 0x5f, 0x4d, 0x4f, 0x42,
	0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0xb2, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45,
	0x59, 0x10, 0xb3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x49, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0xb4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a,
	0x16, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x46, 0x4f,
	0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0xb5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x4f, 0x42,
	0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x10, 0xb6,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1c, 0x0a, 0x0f, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x54, 0x52, 0x59, 0x51, 0x51, 0x50, 0x57, 0x44, 0x10, 0xb7, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x4e, 0x49, 0x43, 0x45, 0x51, 0x51, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x10, 0xb8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x4f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x45, 0x44, 0x10, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x28, 0x0a, 0x1b, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x4d, 0x46, 0x52,
	0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0xba,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x42, 0x49, 0x47, 0x42, 0x49, 0x5a, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10,
	0xbb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x4d, 0x4d,
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x55, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xbc, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x19, 0x4d, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x43,
	0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0xbd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0xbe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x26, 0x0a, 0x19, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x4e, 0x42,
	0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x42, 0x59, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10,
	0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1e, 0x0a, 0x11, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10,
	0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1e, 0x0a, 0x11, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x47, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4d, 0x41, 0x50, 0x10,
	0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x47, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x57, 0x45, 0x42, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x10, 0xc2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26,
	0x0a, 0x19, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x47, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4f,
	0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x10, 0xc3, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1d, 0x0a, 0x10, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x47, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x50, 0x57, 0x44, 0x10, 0xc4, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x10, 0xc5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x42, 0x4f, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x4e, 0x4f, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0xc6, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0xc8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20,
	0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x48, 0x44, 0x48, 0x45,
	0x41, 0x44, 0x49, 0x4d, 0x47, 0x10, 0xc9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x33, 0x0a, 0x26, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x48, 0x44, 0x48, 0x45, 0x41, 0x44, 0x49, 0x4d, 0x47, 0x5f, 0x52, 0x45, 0x51,
	0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0xca, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x49, 0x4d, 0x47, 0x10, 0xcb,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2d, 0x0a, 0x20, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0xcc, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a, 0x4d, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xcd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x44,
	0x55, 0x49, 0x4e, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x45, 0x44, 0x10, 0xce, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1e, 0x0a, 0x11, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x4e, 0x45, 0x45, 0x44, 0x5f, 0x51, 0x51, 0x50, 0x57, 0x44, 0x10, 0xcf, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0xd0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0xd1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20,
	0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x51, 0x51, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0xd2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x2f, 0x0a, 0x22, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48,
	0x47, 0x45, 0x54, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x24, 0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x45, 0x45, 0x44,
	0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xd4, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x42, 0x49,
	0x4c, 0x45, 0x10, 0xd5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a,
	0x1a, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x42,
	0x49, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0xd6, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x14, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0xd7,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x4f, 0x42, 0x49,
	0x4c, 0x45, 0x10, 0xd8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a,
	0x12, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x10, 0xd9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x31,
	0x0a, 0x24, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x4d, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f,
	0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xda, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x27, 0x0a, 0x1a, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x10,
	0xdb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x42, 0x49,
	0x4e, 0x44, 0x45, 0x44, 0x10, 0xdc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x21, 0x0a, 0x14, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45,
	0x5f, 0x42, 0x49, 0x4e, 0x44, 0x45, 0x44, 0x10, 0xdd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x52, 0x45,
	0x51, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0xde, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x19, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x59, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x19,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x14, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e,
	0x45, 0x45, 0x44, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x50, 0x57, 0x44, 0x10, 0xe1, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1b, 0x0a, 0x0e, 0x4d, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x52, 0x45, 0x47, 0x10, 0xe2, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4f,
	0x49, 0x44, 0x42, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0xe3, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1c, 0x0a, 0x0f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x42, 0x41, 0x44, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x14, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x4f,
	0x4d, 0x41, 0x49, 0x4e, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xe5, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x4d, 0x41, 0x58, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45,
	0x44, 0x10, 0xe6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x18, 0x0a, 0x0b, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x50, 0x41, 0x4d, 0x10,
	0xe8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x4d,
	0x55, 0x43, 0x48, 0x10, 0xe9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1d,
	0x0a, 0x10, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0xea, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a,
	0x19, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x43, 0x48, 0x41, 0x54, 0x52,
	0x4f, 0x4f, 0x4d, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0xeb, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x42, 0x4c, 0x4f, 0x47, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x43, 0x54, 0x10, 0xec, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25,
	0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x4f, 0x50, 0x45, 0x4e,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x4d, 0x53, 0x47, 0x10, 0xed, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x4e, 0x4f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xee, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22,
	0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x49, 0x43,
	0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xf1, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x4d, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0xf2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x1c, 0x0a, 0x0f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x49, 0x4e, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x10, 0xf4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20,
	0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x49, 0x43, 0x4b, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0xf5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52,
	0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x4e, 0x4f, 0x54, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x10, 0xf7, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1e, 0x0a, 0x11, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xf8, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1d, 0x0a, 0x10, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xf9, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x4e, 0x45, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x10, 0xfa, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x14, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0xfb,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1a, 0x0a, 0x0d, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xfc, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1c, 0x0a, 0x0f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x0a, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x52,
	0x47, 0x10, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x0a,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4d, 0x5f, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4d, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0f, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4d, 0x5f, 0x42,
	0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x58, 0x49, 0x54, 0x10, 0x11, 0x12,
	0x19, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x55, 0x49, 0x4e,
	0x4e, 0x4f, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4d,
	0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x4d,
	0x53, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x4d, 0x10, 0xc9, 0x01, 0x12,
	0x12, 0x0a, 0x0d, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x4e,
	0x10, 0xca, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x54,
	0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x10, 0xcb, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x4d,
	0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0xcc, 0x01, 0x12, 0x20, 0x0a,
	0x1b, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0xcd, 0x01, 0x12,
	0x1d, 0x0a, 0x18, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xce, 0x01, 0x12, 0x14,
	0x0a, 0x0f, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x41, 0x4c,
	0x4c, 0x10, 0xcf, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x52, 0x45,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43,
	0x59, 0x10, 0xd0, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53,
	0x48, 0x4f, 0x52, 0x54, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x10, 0xc0, 0x84, 0x3d, 0x2a, 0xb4, 0x01, 0x0a, 0x0b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4d,
	0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x41, 0x4d,
	0x52, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x58, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x4d, 0x50, 0x33, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4d, 0x5f, 0x56, 0x4f,
	0x49, 0x43, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x57, 0x41, 0x56, 0x45, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4d, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x53, 0x49, 0x4c, 0x4b, 0x10, 0x04, 0x2a, 0xeb, 0x1b, 0x0a, 0x10,
	0x45, 0x6e, 0x4d, 0x4d, 0x54, 0x65, 0x6e, 0x50, 0x61, 0x79, 0x43, 0x67, 0x69, 0x43, 0x6d, 0x64,
	0x12, 0x34, 0x0a, 0x30, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x49, 0x5a,
	0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x10, 0x1b, 0x12, 0x2f, 0x0a, 0x2b, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50,
	0x41, 0x59, 0x5f, 0x42, 0x49, 0x5a, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x42, 0x5a, 0x4a,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x22, 0x12, 0x33, 0x0a, 0x2f, 0x4d, 0x4d, 0x54, 0x45, 0x4e,
	0x50, 0x41, 0x59, 0x5f, 0x42, 0x49, 0x5a, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x17, 0x12, 0x33, 0x0a, 0x2f,
	0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x49, 0x5a, 0x5f, 0x43, 0x47, 0x49,
	0x43, 0x4d, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10,
	0x19, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x49,
	0x5a, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x42,
	0x49, 0x5a, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10,
	0x38, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x49,
	0x5a, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4e,
	0x45, 0x57, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x37, 0x12,
	0x2f, 0x0a, 0x2b, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x49, 0x5a, 0x5f,
	0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x1a,
	0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x49, 0x5a,
	0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x16,
	0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x49, 0x5a,
	0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x18,
	0x12, 0x28, 0x0a, 0x24, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x49, 0x5a,
	0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x5f, 0x51, 0x52, 0x59, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x46, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4d,
	0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50,
	0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50,
	0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x43, 0x41,
	0x52, 0x44, 0x42, 0x49, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x0f, 0x12, 0x1f, 0x0a,
	0x1b, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44,
	0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x10, 0x0c, 0x12, 0x22,
	0x0a, 0x1e, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d,
	0x44, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4e, 0x45, 0x57,
	0x10, 0x48, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43,
	0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x59, 0x10, 0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f,
	0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x10, 0x11, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4d, 0x54, 0x45,
	0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x50, 0x57, 0x44, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4d, 0x54, 0x45,
	0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x50, 0x57, 0x44, 0x10, 0x12, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4d, 0x54, 0x45, 0x4e,
	0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x48, 0x4b, 0x50, 0x41,
	0x59, 0x41, 0x43, 0x43, 0x10, 0x4f, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50,
	0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x49, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x4d,
	0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x47, 0x45,
	0x4e, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x10, 0x4b, 0x12, 0x20, 0x0a,
	0x1c, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44,
	0x5f, 0x47, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x10, 0x4a, 0x12,
	0x24, 0x0a, 0x20, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43,
	0x4d, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x10, 0x53, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41,
	0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x46, 0x49, 0x58,
	0x45, 0x44, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x51, 0x52, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x5e, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43,
	0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x49, 0x4e,
	0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x25, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4d, 0x54,
	0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x4d, 0x43, 0x48,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4d, 0x54, 0x45,
	0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x50,
	0x41, 0x59, 0x10, 0x5c, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59,
	0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x43, 0x48, 0x47, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x32, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x4d, 0x54,
	0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x4f, 0x46, 0x46,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x2f, 0x12, 0x22, 0x0a, 0x1e,
	0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f,
	0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x2e,
	0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49,
	0x43, 0x4d, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x46, 0x50, 0x41, 0x59,
	0x10, 0x30, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43,
	0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x34, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x4d, 0x54,
	0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x4f, 0x46, 0x46,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x31, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47,
	0x49, 0x43, 0x4d, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x46,
	0x52, 0x45, 0x45, 0x5a, 0x45, 0x10, 0x33, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4d, 0x54, 0x45, 0x4e,
	0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x52, 0x45,
	0x4c, 0x41, 0x59, 0x10, 0x57, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41,
	0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x55, 0x4e, 0x52, 0x45,
	0x47, 0x10, 0x47, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f,
	0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x41, 0x50,
	0x49, 0x10, 0x15, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f,
	0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x51, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50,
	0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x51, 0x52, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x41, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x4e, 0x12, 0x1e, 0x0a,
	0x1a, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44,
	0x5f, 0x51, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x06, 0x12, 0x20, 0x0a,
	0x1c, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x50, 0x12,
	0x29, 0x0a, 0x25, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43,
	0x4d, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x54, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x4d,
	0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x1e, 0x12,
	0x1d, 0x0a, 0x19, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43,
	0x4d, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x57, 0x44, 0x10, 0x14, 0x12, 0x24,
	0x0a, 0x20, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x57, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x45, 0x4e, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59,
	0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x45, 0x45, 0x44,
	0x10, 0x13, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43,
	0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x41, 0x52, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4d, 0x53, 0x47, 0x10,
	0x61, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47,
	0x49, 0x43, 0x4d, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x55, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x4d, 0x54, 0x45, 0x4e,
	0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x5f, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43,
	0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x54, 0x52, 0x59, 0x53, 0x45, 0x4e, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x56, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47,
	0x49, 0x43, 0x4d, 0x44, 0x5f, 0x55, 0x4e, 0x42, 0x49, 0x4e, 0x44, 0x10, 0x0e, 0x12, 0x1d, 0x0a,
	0x19, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28,
	0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x10, 0x4d, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4d,
	0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x59, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50,
	0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59,
	0x5f, 0x42, 0x49, 0x4e, 0x44, 0x10, 0x4c, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4d, 0x54, 0x45, 0x4e,
	0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x59, 0x5f, 0x52, 0x45, 0x47, 0x10, 0x10, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x4d, 0x54, 0x45, 0x4e,
	0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x5f, 0x46, 0x55,
	0x4e, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x10, 0x2b, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43,
	0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x42, 0x49,
	0x4e, 0x44, 0x53, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x2a, 0x12, 0x1f, 0x0a, 0x1b,
	0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f,
	0x57, 0x58, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x27, 0x12, 0x22, 0x0a,
	0x1e, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44,
	0x5f, 0x57, 0x58, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x29, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47,
	0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x2c, 0x12, 0x21, 0x0a, 0x1d, 0x4d,
	0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57,
	0x58, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x4d, 0x10, 0x28, 0x12, 0x28,
	0x0a, 0x24, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d,
	0x44, 0x5f, 0x57, 0x58, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x2d, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x4d, 0x54, 0x45,
	0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x4d, 0x45, 0x52, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x10, 0x58, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43,
	0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x45, 0x52,
	0x53, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x5a, 0x12, 0x29, 0x0a,
	0x25, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44,
	0x5f, 0x57, 0x58, 0x5f, 0x48, 0x42, 0x5f, 0x52, 0x45, 0x44, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x35, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x4d, 0x54, 0x45,
	0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x5f, 0x48,
	0x42, 0x41, 0x41, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x51, 0x12, 0x25,
	0x0a, 0x21, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d,
	0x44, 0x5f, 0x57, 0x58, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x10, 0x23, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41,
	0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x5f, 0x50, 0x41, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x52, 0x12, 0x31, 0x0a, 0x2d, 0x4d, 0x4d, 0x54,
	0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x5d, 0x12, 0x22, 0x0a, 0x1e,
	0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f,
	0x57, 0x58, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x60,
	0x12, 0x24, 0x0a, 0x20, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49,
	0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x50, 0x5f,
	0x42, 0x41, 0x4e, 0x4b, 0x10, 0x5b, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50,
	0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x5f, 0x53, 0x50, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x36, 0x12, 0x25, 0x0a,
	0x21, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44,
	0x5f, 0x57, 0x58, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x4d, 0x45, 0x52, 0x53, 0x49,
	0x47, 0x4e, 0x10, 0x59, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59,
	0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x10, 0x40, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x4d, 0x54,
	0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x43,
	0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3c, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4d, 0x54, 0x45, 0x4e,
	0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x43, 0x52, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x39, 0x12, 0x2e, 0x0a, 0x2a, 0x4d,
	0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57,
	0x58, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x42, 0x49,
	0x4c, 0x4c, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x43, 0x12, 0x2e, 0x0a, 0x2a, 0x4d,
	0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57,
	0x58, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x3a, 0x12, 0x2c, 0x0a, 0x28, 0x4d,
	0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57,
	0x58, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x52,
	0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x10, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x4d, 0x54,
	0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x43,
	0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3b, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50,
	0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x43, 0x52, 0x45, 0x44,
	0x49, 0x54, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x59, 0x10, 0x45, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f,
	0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f,
	0x52, 0x45, 0x50, 0x41, 0x59, 0x10, 0x3d, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4d, 0x54, 0x45, 0x4e,
	0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x43, 0x52, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x59, 0x10, 0x42, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f,
	0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f,
	0x55, 0x4e, 0x42, 0x49, 0x4e, 0x44, 0x10, 0x3e, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x4d, 0x54, 0x45,
	0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x58, 0x43, 0x52,
	0x45, 0x44, 0x49, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x10, 0x41, 0x12, 0x2a, 0x0a,
	0x26, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44,
	0x5f, 0x57, 0x58, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x44, 0x10, 0x3f, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x4d, 0x54,
	0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x47, 0x57, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0x1d, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59,
	0x5f, 0x47, 0x57, 0x5f, 0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x21,
	0x12, 0x27, 0x0a, 0x23, 0x4d, 0x4d, 0x54, 0x45, 0x4e, 0x50, 0x41, 0x59, 0x5f, 0x47, 0x57, 0x5f,
	0x43, 0x47, 0x49, 0x43, 0x4d, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x1f, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x3b, 0x6d,
	0x6d,
}

var (
	file_mm_proto_rawDescOnce sync.Once
	file_mm_proto_rawDescData = file_mm_proto_rawDesc
)

func file_mm_proto_rawDescGZIP() []byte {
	file_mm_proto_rawDescOnce.Do(func() {
		file_mm_proto_rawDescData = protoimpl.X.CompressGZIP(file_mm_proto_rawDescData)
	})
	return file_mm_proto_rawDescData
}

var file_mm_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_mm_proto_msgTypes = make([]protoimpl.MessageInfo, 369)
var file_mm_proto_goTypes = []interface{}{
	(SnsMediaType)(0),                          // 0: mm.SnsMediaType
	(SnsObjectOpType)(0),                       // 1: mm.SnsObjectOpType
	(SyncCmdID)(0),                             // 2: mm.SyncCmdID
	(RetConst)(0),                              // 3: mm.RetConst
	(VoiceFormat)(0),                           // 4: mm.VoiceFormat
	(EnMMTenPayCgiCmd)(0),                      // 5: mm.EnMMTenPayCgiCmd
	(*BaseResponse)(nil),                       // 6: mm.BaseResponse
	(*SKBuiltinStringT)(nil),                   // 7: mm.SKBuiltinString_t
	(*SnsBufferUrl)(nil),                       // 8: mm.SnsBufferUrl
	(*RealHostInfo)(nil),                       // 9: mm.RealHostInfo
	(*HostList)(nil),                           // 10: mm.HostList
	(*NetworkControl)(nil),                     // 11: mm.NetworkControl
	(*IPInfo)(nil),                             // 12: mm.IPInfo
	(*BuiltinIPList)(nil),                      // 13: mm.BuiltinIPList
	(*NetworkSectResp)(nil),                    // 14: mm.NetworkSectResp
	(*AxAuthSecRespList)(nil),                  // 15: mm.AxAuthSecRespList
	(*UnifyAuthResponse)(nil),                  // 16: mm.UnifyAuthResponse
	(*SKBuiltinBufferT)(nil),                   // 17: mm.SKBuiltinBuffer_t
	(*SKBuiltinString_S)(nil),                  // 18: mm.SKBuiltinString_S
	(*SKBuiltinBuffer_K)(nil),                  // 19: mm.SKBuiltinBuffer_K
	(*ECDHKey)(nil),                            // 20: mm.ECDHKey
	(*WTLoginImgRespInfo)(nil),                 // 21: mm.WTLoginImgRespInfo
	(*WxVerifyCodeRespInfo)(nil),               // 22: mm.WxVerifyCodeRespInfo
	(*ShowStyleKey)(nil),                       // 23: mm.ShowStyleKey
	(*AuthSectResp)(nil),                       // 24: mm.AuthSectResp
	(*AcctSectResp)(nil),                       // 25: mm.AcctSectResp
	(*BaseRequest)(nil),                        // 26: mm.BaseRequest
	(*ReceiveWxaHBRequest)(nil),                // 27: mm.ReceiveWxaHBRequest
	(*ReceiveWxaHBResponse)(nil),               // 28: mm.ReceiveWxaHBResponse
	(*GetLoginQRCodeRequest)(nil),              // 29: mm.GetLoginQRCodeRequest
	(*GetLoginQRCodeResponse)(nil),             // 30: mm.GetLoginQRCodeResponse
	(*HybridEcdhRequest)(nil),                  // 31: mm.HybridEcdhRequest
	(*HybridEcdhResponse)(nil),                 // 32: mm.HybridEcdhResponse
	(*SecKey)(nil),                             // 33: mm.SecKey
	(*HybridEcdhReq)(nil),                      // 34: mm.HybridEcdhReq
	(*HybridEcdhResp)(nil),                     // 35: mm.HybridEcdhResp
	(*ManualAuthRsaReqData)(nil),               // 36: mm.ManualAuthRsaReqData
	(*WTLoginImgReqInfo)(nil),                  // 37: mm.WTLoginImgReqInfo
	(*WxVerifyCodeReqInfo)(nil),                // 38: mm.WxVerifyCodeReqInfo
	(*BaseAuthReqInfo)(nil),                    // 39: mm.BaseAuthReqInfo
	(*ManualAuthAesReqData)(nil),               // 40: mm.ManualAuthAesReqData
	(*SecManualLoginRequest)(nil),              // 41: mm.SecManualLoginRequest
	(*SecAutoLoginRequest)(nil),                // 42: mm.SecAutoLoginRequest
	(*CheckLoginQRCodeRequest)(nil),            // 43: mm.CheckLoginQRCodeRequest
	(*CheckLoginQRCodeResponse)(nil),           // 44: mm.CheckLoginQRCodeResponse
	(*LoginQRCodeNotifyPkg)(nil),               // 45: mm.LoginQRCodeNotifyPkg
	(*LoginQRCodeNotify)(nil),                  // 46: mm.LoginQRCodeNotify
	(*DeviceToken)(nil),                        // 47: mm.DeviceToken
	(*AndroidSpamDataBody)(nil),                // 48: mm.AndroidSpamDataBody
	(*AndroidCcdDataBody)(nil),                 // 49: mm.AndroidCcdDataBody
	(*SpamDataBody)(nil),                       // 50: mm.SpamDataBody
	(*FileInfo)(nil),                           // 51: mm.FileInfo
	(*CryptoData)(nil),                         // 52: mm.CryptoData
	(*WCExtInfo)(nil),                          // 53: mm.WCExtInfo
	(*Wcaes)(nil),                              // 54: mm.wcaes
	(*NewClientCheckData)(nil),                 // 55: mm.NewClientCheckData
	(*CmdList)(nil),                            // 56: mm.CmdList
	(*CmdItem)(nil),                            // 57: mm.CmdItem
	(*NewSyncRequest)(nil),                     // 58: mm.NewSyncRequest
	(*NewSyncResponse)(nil),                    // 59: mm.NewSyncResponse
	(*NewInitRequest)(nil),                     // 60: mm.NewInitRequest
	(*NewInitResponse)(nil),                    // 61: mm.NewInitResponse
	(*AutoAuthRsaReqData)(nil),                 // 62: mm.AutoAuthRsaReqData
	(*AutoAuthRequest)(nil),                    // 63: mm.AutoAuthRequest
	(*AutoAuthAesReqData)(nil),                 // 64: mm.AutoAuthAesReqData
	(*PushLoginURLRequest)(nil),                // 65: mm.PushLoginURLRequest
	(*PushLoginURLResponse)(nil),               // 66: mm.PushLoginURLResponse
	(*NewSendMsgRequest)(nil),                  // 67: mm.NewSendMsgRequest
	(*NewSendMsgRespone)(nil),                  // 68: mm.NewSendMsgRespone
	(*NewMsgResponeNew)(nil),                   // 69: mm.NewMsgResponeNew
	(*RevokeMsgRequest)(nil),                   // 70: mm.RevokeMsgRequest
	(*RevokeMsgResponse)(nil),                  // 71: mm.RevokeMsgResponse
	(*ChatInfo)(nil),                           // 72: mm.ChatInfo
	(*AutoAuthKey)(nil),                        // 73: mm.AutoAuthKey
	(*SnsUserInfo)(nil),                        // 74: mm.SnsUserInfo
	(*SnsServerConfig)(nil),                    // 75: mm.SnsServerConfig
	(*SnsObject)(nil),                          // 76: mm.SnsObject
	(*SnsCommentInfo)(nil),                     // 77: mm.SnsCommentInfo
	(*SnsGroup)(nil),                           // 78: mm.SnsGroup
	(*SnsRedEnvelops)(nil),                     // 79: mm.SnsRedEnvelops
	(*PreDownloadInfo)(nil),                    // 80: mm.PreDownloadInfo
	(*SnsWeAppInfo)(nil),                       // 81: mm.SnsWeAppInfo
	(*GetA8KeyReq)(nil),                        // 82: mm.GetA8KeyReq
	(*GetA8KeyResp)(nil),                       // 83: mm.GetA8KeyResp
	(*HttpHeader)(nil),                         // 84: mm.HttpHeader
	(*JSAPIPermissionBitSet)(nil),              // 85: mm.JSAPIPermissionBitSet
	(*GeneralControlBitSet)(nil),               // 86: mm.GeneralControlBitSet
	(*BizScopeInfo)(nil),                       // 87: mm.BizScopeInfo
	(*BizApiInfo)(nil),                         // 88: mm.BizApiInfo
	(*DeepLinkBitSet)(nil),                     // 89: mm.DeepLinkBitSet
	(*TwitterInfo)(nil),                        // 90: mm.TwitterInfo
	(*SnsPostCtocUploadInfo)(nil),              // 91: mm.SnsPostCtocUploadInfo
	(*SnsPostOperationFields)(nil),             // 92: mm.SnsPostOperationFields
	(*CanvasInfo)(nil),                         // 93: mm.CanvasInfo
	(*MediaInfo)(nil),                          // 94: mm.MediaInfo
	(*SnsPostRequest)(nil),                     // 95: mm.SnsPostRequest
	(*SnsPostResponse)(nil),                    // 96: mm.SnsPostResponse
	(*SnsObjectOpRequest)(nil),                 // 97: mm.SnsObjectOpRequest
	(*SnsObjectOp)(nil),                        // 98: mm.SnsObjectOp
	(*SnsObjectOpResponse)(nil),                // 99: mm.SnsObjectOpResponse
	(*SnsCommentRequest)(nil),                  // 100: mm.SnsCommentRequest
	(*SnsActionGroup)(nil),                     // 101: mm.SnsActionGroup
	(*SnsAction)(nil),                          // 102: mm.SnsAction
	(*SnsEmojiInfo)(nil),                       // 103: mm.SnsEmojiInfo
	(*RemindFriendsInfo)(nil),                  // 104: mm.RemindFriendsInfo
	(*SnsCommentResponse)(nil),                 // 105: mm.SnsCommentResponse
	(*SnsUploadRequest)(nil),                   // 106: mm.SnsUploadRequest
	(*SnsUploadResponse)(nil),                  // 107: mm.SnsUploadResponse
	(*SnsTimeLineRequest)(nil),                 // 108: mm.SnsTimeLineRequest
	(*SnsTimeLineResponse)(nil),                // 109: mm.SnsTimeLineResponse
	(*SnsAdExpInfo)(nil),                       // 110: mm.SnsAdExpInfo
	(*SnsUserPageRequest)(nil),                 // 111: mm.SnsUserPageRequest
	(*SnsUserPageResponse)(nil),                // 112: mm.SnsUserPageResponse
	(*InitContactRequest)(nil),                 // 113: mm.InitContactRequest
	(*InitContactResponse)(nil),                // 114: mm.InitContactResponse
	(*ModContact)(nil),                         // 115: mm.ModContact
	(*RoomInfo)(nil),                           // 116: mm.RoomInfo
	(*CustomizedInfo)(nil),                     // 117: mm.CustomizedInfo
	(*AdditionalContactList)(nil),              // 118: mm.AdditionalContactList
	(*LinkedinContactItem)(nil),                // 119: mm.LinkedinContactItem
	(*ChatRoomMemberData)(nil),                 // 120: mm.ChatRoomMemberData
	(*ChatRoomMemberInfo)(nil),                 // 121: mm.ChatRoomMemberInfo
	(*PhoneNumListInfo)(nil),                   // 122: mm.PhoneNumListInfo
	(*UploadMsgImgRequest)(nil),                // 123: mm.UploadMsgImgRequest
	(*UploadMsgImgResponse)(nil),               // 124: mm.UploadMsgImgResponse
	(*DisturbTimeSpan)(nil),                    // 125: mm.DisturbTimeSpan
	(*DisturbSetting)(nil),                     // 126: mm.DisturbSetting
	(*GmailInfo)(nil),                          // 127: mm.GmailInfo
	(*GmailList)(nil),                          // 128: mm.GmailList
	(*ModUserInfo)(nil),                        // 129: mm.ModUserInfo
	(*ModContacts)(nil),                        // 130: mm.ModContacts
	(*DelContact)(nil),                         // 131: mm.DelContact
	(*AddMsg)(nil),                             // 132: mm.AddMsg
	(*ModMsgStatus)(nil),                       // 133: mm.ModMsgStatus
	(*DelChatContact)(nil),                     // 134: mm.DelChatContact
	(*DelContactMsg)(nil),                      // 135: mm.DelContactMsg
	(*NewDelMsg)(nil),                          // 136: mm.NewDelMsg
	(*ModUserImg)(nil),                         // 137: mm.ModUserImg
	(*SafeDevice)(nil),                         // 138: mm.SafeDevice
	(*SafeDeviceList)(nil),                     // 139: mm.SafeDeviceList
	(*PatternLockInfo)(nil),                    // 140: mm.PatternLockInfo
	(*UserInfoExt)(nil),                        // 141: mm.UserInfoExt
	(*FunctionSwitch)(nil),                     // 142: mm.FunctionSwitch
	(*HeartBeatRequest)(nil),                   // 143: mm.HeartBeatRequest
	(*HeartBeatResponse)(nil),                  // 144: mm.HeartBeatResponse
	(*LogOutRequest)(nil),                      // 145: mm.LogOutRequest
	(*LogOutResponse)(nil),                     // 146: mm.LogOutResponse
	(*FavSyncRequest)(nil),                     // 147: mm.FavSyncRequest
	(*FavSyncResponse)(nil),                    // 148: mm.FavSyncResponse
	(*AddFavItem)(nil),                         // 149: mm.AddFavItem
	(*BatchGetFavItemRequest)(nil),             // 150: mm.BatchGetFavItemRequest
	(*BatchGetFavItemResponse)(nil),            // 151: mm.BatchGetFavItemResponse
	(*FavObject)(nil),                          // 152: mm.FavObject
	(*BatchDelFavItemRequest)(nil),             // 153: mm.BatchDelFavItemRequest
	(*BatchDelFavItemResponse)(nil),            // 154: mm.BatchDelFavItemResponse
	(*DelFavItemRsp)(nil),                      // 155: mm.DelFavItemRsp
	(*SearchContactRequest)(nil),               // 156: mm.SearchContactRequest
	(*SearchContactResponse)(nil),              // 157: mm.SearchContactResponse
	(*SearchContactItem)(nil),                  // 158: mm.SearchContactItem
	(*OpenIMContact)(nil),                      // 159: mm.OpenIMContact
	(*OpenIMContactCustomInfo)(nil),            // 160: mm.OpenIMContactCustomInfo
	(*UploadMContactRequest)(nil),              // 161: mm.UploadMContactRequest
	(*UploadMContactResponse)(nil),             // 162: mm.UploadMContactResponse
	(*VerifyUserRequest)(nil),                  // 163: mm.VerifyUserRequest
	(*VerifyUser)(nil),                         // 164: mm.VerifyUser
	(*VerifyUserResponse)(nil),                 // 165: mm.VerifyUserResponse
	(*GetContactLabelListRequest)(nil),         // 166: mm.GetContactLabelListRequest
	(*GetContactLabelListResponse)(nil),        // 167: mm.GetContactLabelListResponse
	(*LabelPair)(nil),                          // 168: mm.LabelPair
	(*AddContactLabelRequest)(nil),             // 169: mm.AddContactLabelRequest
	(*AddContactLabelResponse)(nil),            // 170: mm.AddContactLabelResponse
	(*ModifyContactLabelListRequest)(nil),      // 171: mm.ModifyContactLabelListRequest
	(*ModifyContactLabelListResponse)(nil),     // 172: mm.ModifyContactLabelListResponse
	(*UserLabelInfo)(nil),                      // 173: mm.UserLabelInfo
	(*DelContactLabelRequest)(nil),             // 174: mm.DelContactLabelRequest
	(*DelContactLabelResponse)(nil),            // 175: mm.DelContactLabelResponse
	(*UpdateContactLabelRequest)(nil),          // 176: mm.UpdateContactLabelRequest
	(*UpdateContactLabelResponse)(nil),         // 177: mm.UpdateContactLabelResponse
	(*OpLogRequest)(nil),                       // 178: mm.OpLogRequest
	(*OplogResponse)(nil),                      // 179: mm.OplogResponse
	(*OplogRet)(nil),                           // 180: mm.OplogRet
	(*SnsObjectDetailRequest)(nil),             // 181: mm.SnsObjectDetailRequest
	(*SnsObjectDetailResponse)(nil),            // 182: mm.SnsObjectDetailResponse
	(*TrustDeviceInfo)(nil),                    // 183: mm.TrustDeviceInfo
	(*TrustData)(nil),                          // 184: mm.TrustData
	(*TrustReq)(nil),                           // 185: mm.TrustReq
	(*TrustSoftData)(nil),                      // 186: mm.TrustSoftData
	(*TrustResponseData)(nil),                  // 187: mm.TrustResponseData
	(*TrustResponse)(nil),                      // 188: mm.TrustResponse
	(*FPFresh)(nil),                            // 189: mm.FPFresh
	(*ZTData)(nil),                             // 190: mm.ZTData
	(*SaeInfo)(nil),                            // 191: mm.SaeInfo
	(*GetProfileRequest)(nil),                  // 192: mm.GetProfileRequest
	(*GetProfileResponse)(nil),                 // 193: mm.GetProfileResponse
	(*UploadVoiceRequest)(nil),                 // 194: mm.UploadVoiceRequest
	(*UploadVoiceResponse)(nil),                // 195: mm.UploadVoiceResponse
	(*QuitChatRoom)(nil),                       // 196: mm.QuitChatRoom
	(*UploadHDHeadImgRequest)(nil),             // 197: mm.UploadHDHeadImgRequest
	(*UploadHDHeadImgResponse)(nil),            // 198: mm.UploadHDHeadImgResponse
	(*VerifyPswdRequest)(nil),                  // 199: mm.VerifyPswdRequest
	(*VerifyPswdResponse)(nil),                 // 200: mm.VerifyPswdResponse
	(*SetPwdRequest)(nil),                      // 201: mm.SetPwdRequest
	(*SetPwdResponse)(nil),                     // 202: mm.SetPwdResponse
	(*CreateChatRoomRequest)(nil),              // 203: mm.CreateChatRoomRequest
	(*FacingCreateChatRoomRequest)(nil),        // 204: mm.FacingCreateChatRoomRequest
	(*FacingCreateChatRoomResponse)(nil),       // 205: mm.FacingCreateChatRoomResponse
	(*ChatRoomMemberInfoSimple)(nil),           // 206: mm.ChatRoomMemberInfoSimple
	(*MemberReq)(nil),                          // 207: mm.MemberReq
	(*CreateChatRoomResponse)(nil),             // 208: mm.CreateChatRoomResponse
	(*MemberResp)(nil),                         // 209: mm.MemberResp
	(*AddChatRoomMemberRequest)(nil),           // 210: mm.AddChatRoomMemberRequest
	(*AddChatRoomMemberResponse)(nil),          // 211: mm.AddChatRoomMemberResponse
	(*DelChatRoomMemberRequest)(nil),           // 212: mm.DelChatRoomMemberRequest
	(*DelChatRoomMemberResponse)(nil),          // 213: mm.DelChatRoomMemberResponse
	(*DelMemberResp)(nil),                      // 214: mm.DelMemberResp
	(*GetMFriendResponse)(nil),                 // 215: mm.GetMFriendResponse
	(*FriendList)(nil),                         // 216: mm.FriendList
	(*FBFriend)(nil),                           // 217: mm.FBFriend
	(*PrivacySettings)(nil),                    // 218: mm.PrivacySettings
	(*FriendCirclePrivacySettings)(nil),        // 219: mm.FriendCirclePrivacySettings
	(*GetFavInfoRequest)(nil),                  // 220: mm.GetFavInfoRequest
	(*GetFavInfoResponse)(nil),                 // 221: mm.GetFavInfoResponse
	(*SnsSyncRequest)(nil),                     // 222: mm.SnsSyncRequest
	(*SnsSyncResponse)(nil),                    // 223: mm.SnsSyncResponse
	(*FinderBaseRequest)(nil),                  // 224: mm.FinderBaseRequest
	(*FinderUserPrepareRequest)(nil),           // 225: mm.FinderUserPrepareRequest
	(*FinderUserPrepareResponse)(nil),          // 226: mm.FinderUserPrepareResponse
	(*FinderNicknameVerifyInfo)(nil),           // 227: mm.FinderNicknameVerifyInfo
	(*FinderContact)(nil),                      // 228: mm.FinderContact
	(*FinderContactExtInfo)(nil),               // 229: mm.FinderContactExtInfo
	(*FinderAuthInfo)(nil),                     // 230: mm.FinderAuthInfo
	(*FinderUserPageRequest)(nil),              // 231: mm.FinderUserPageRequest
	(*FinderUserPageResponse)(nil),             // 232: mm.FinderUserPageResponse
	(*FinderUserInfo)(nil),                     // 233: mm.FinderUserInfo
	(*FinderObject)(nil),                       // 234: mm.FinderObject
	(*FinderObjectDesc)(nil),                   // 235: mm.FinderObjectDesc
	(*FinderMedia)(nil),                        // 236: mm.FinderMedia
	(*FinderMediaSpec)(nil),                    // 237: mm.FinderMediaSpec
	(*FinderMediaExtra)(nil),                   // 238: mm.FinderMediaExtra
	(*FinderLocation)(nil),                     // 239: mm.FinderLocation
	(*FinderExtendedReading)(nil),              // 240: mm.FinderExtendedReading
	(*FinderTopic)(nil),                        // 241: mm.FinderTopic
	(*FinderCommentInfo)(nil),                  // 242: mm.FinderCommentInfo
	(*FinderRecommendInfo)(nil),                // 243: mm.FinderRecommendInfo
	(*GetContactRequest)(nil),                  // 244: mm.GetContactRequest
	(*GetContactResponse)(nil),                 // 245: mm.GetContactResponse
	(*VerifyUserValidTicket)(nil),              // 246: mm.VerifyUserValidTicket
	(*GetChatroomMemberDetailRequest)(nil),     // 247: mm.GetChatroomMemberDetailRequest
	(*GetChatroomMemberDetailResponse)(nil),    // 248: mm.GetChatroomMemberDetailResponse
	(*GetChatRoomInfoDetailRequest)(nil),       // 249: mm.GetChatRoomInfoDetailRequest
	(*GetChatRoomInfoDetailResponse)(nil),      // 250: mm.GetChatRoomInfoDetailResponse
	(*RoomTools)(nil),                          // 251: mm.RoomTools
	(*RoomToolsTodo)(nil),                      // 252: mm.RoomToolsTodo
	(*SetChatRoomAnnouncementRequest)(nil),     // 253: mm.SetChatRoomAnnouncementRequest
	(*SetChatRoomAnnouncementResponse)(nil),    // 254: mm.SetChatRoomAnnouncementResponse
	(*ChatRoomAdminRequest)(nil),               // 255: mm.ChatRoomAdminRequest
	(*ChatRoomAdminResponse)(nil),              // 256: mm.ChatRoomAdminResponse
	(*GetVoiceTransResRequest)(nil),            // 257: mm.GetVoiceTransResRequest
	(*GetVoiceTransResResponse)(nil),           // 258: mm.GetVoiceTransResResponse
	(*VoiceTransRes)(nil),                      // 259: mm.VoiceTransRes
	(*QueryResCtx)(nil),                        // 260: mm.QueryResCtx
	(*UploadVoiceForTransRequest)(nil),         // 261: mm.UploadVoiceForTransRequest
	(*UploadVoiceForTransResponse)(nil),        // 262: mm.UploadVoiceForTransResponse
	(*VoiceAttr)(nil),                          // 263: mm.VoiceAttr
	(*UploadVoiceCtx)(nil),                     // 264: mm.UploadVoiceCtx
	(*DownloadVoiceRequest)(nil),               // 265: mm.DownloadVoiceRequest
	(*DownloadVoiceResponse)(nil),              // 266: mm.DownloadVoiceResponse
	(*SendAppMsgRequest)(nil),                  // 267: mm.SendAppMsgRequest
	(*SendAppMsgResponse)(nil),                 // 268: mm.SendAppMsgResponse
	(*AppMsg)(nil),                             // 269: mm.AppMsg
	(*HongBaoReq)(nil),                         // 270: mm.HongBaoReq
	(*HongBaoRes)(nil),                         // 271: mm.HongBaoRes
	(*Wcstf)(nil),                              // 272: mm.Wcstf
	(*Wcste)(nil),                              // 273: mm.Wcste
	(*JSLoginRequest)(nil),                     // 274: mm.JSLoginRequest
	(*JSLoginResponse)(nil),                    // 275: mm.JSLoginResponse
	(*JSAPIBaseResponse)(nil),                  // 276: mm.JSAPIBaseResponse
	(*ScopeInfo)(nil),                          // 277: mm.ScopeInfo
	(*WxaExternalInfo)(nil),                    // 278: mm.WxaExternalInfo
	(*BindEmailRequest)(nil),                   // 279: mm.BindEmailRequest
	(*BindEmailResponse)(nil),                  // 280: mm.BindEmailResponse
	(*SendVerifyEmailRequest)(nil),             // 281: mm.SendVerifyEmailRequest
	(*SendVerifyEmailResponse)(nil),            // 282: mm.SendVerifyEmailResponse
	(*GeneralSetRequest)(nil),                  // 283: mm.GeneralSetRequest
	(*GeneralSetResponse)(nil),                 // 284: mm.GeneralSetResponse
	(*BindOpMobileRequest)(nil),                // 285: mm.BindOpMobileRequest
	(*BindOpMobileResponse)(nil),               // 286: mm.BindOpMobileResponse
	(*SmsUpCheckExtInfo)(nil),                  // 287: mm.SmsUpCheckExtInfo
	(*HostLists)(nil),                          // 288: mm.HostLists
	(*Host)(nil),                               // 289: mm.Host
	(*GetQRCodeRequest)(nil),                   // 290: mm.GetQRCodeRequest
	(*GetQRCodeResponse)(nil),                  // 291: mm.GetQRCodeResponse
	(*ClickCommandRequest)(nil),                // 292: mm.ClickCommandRequest
	(*ClickCommandResponse)(nil),               // 293: mm.ClickCommandResponse
	(*WuRaoTips)(nil),                          // 294: mm.WuRaoTips
	(*SessionStat)(nil),                        // 295: mm.SessionStat
	(*SettingPageInfo)(nil),                    // 296: mm.SettingPageInfo
	(*BizProfileV2Req)(nil),                    // 297: mm.BizProfileV2Req
	(*BizProfileV2Resp)(nil),                   // 298: mm.BizProfileV2Resp
	(*BizProfileV2Resp_FuncFlagDesc)(nil),      // 299: mm.BizProfileV2Resp_FuncFlagDesc
	(*BizAccountInfo)(nil),                     // 300: mm.BizAccountInfo
	(*BizBaseInfo)(nil),                        // 301: mm.BizBaseInfo
	(*BizMessageList)(nil),                     // 302: mm.BizMessageList
	(*BizProfileV2PagingInfo)(nil),             // 303: mm.BizProfileV2PagingInfo
	(*BizBrandInfo)(nil),                       // 304: mm.BizBrandInfo
	(*BizServiceInfo)(nil),                     // 305: mm.BizServiceInfo
	(*BizServiceMenu)(nil),                     // 306: mm.BizServiceMenu
	(*BizServiceMenuButton)(nil),               // 307: mm.BizServiceMenuButton
	(*BizProfileV2Resp_ProfileNotifyInfo)(nil), // 308: mm.BizProfileV2Resp_ProfileNotifyInfo
	(*ExtDeviceLoginConfirmGetRequest)(nil),    // 309: mm.ExtDeviceLoginConfirmGetRequest
	(*ExtDeviceLoginConfirmGetResponse)(nil),   // 310: mm.ExtDeviceLoginConfirmGetResponse
	(*ExtDeviceLoginConfirmOKRet)(nil),         // 311: mm.ExtDeviceLoginConfirmOKRet
	(*ExtDeviceLoginConfirmErrorRet)(nil),      // 312: mm.ExtDeviceLoginConfirmErrorRet
	(*ExtDeviceLoginConfirmExpiredRet)(nil),    // 313: mm.ExtDeviceLoginConfirmExpiredRet
	(*ExtDeviceLoginConfirmOKRequest)(nil),     // 314: mm.ExtDeviceLoginConfirmOKRequest
	(*ExtDeviceLoginConfirmOKResponse)(nil),    // 315: mm.ExtDeviceLoginConfirmOKResponse
	(*UploadVideoReques)(nil),                  // 316: mm.UploadVideoReques
	(*UploadVideoResponse)(nil),                // 317: mm.UploadVideoResponse
	(*UploadDeviceStepReq)(nil),                // 318: mm.UploadDeviceStepReq
	(*UploadDeviceStepResp)(nil),               // 319: mm.UploadDeviceStepResp
	(*SportDeviceInfo)(nil),                    // 320: mm.SportDeviceInfo
	(*GetBoundHardDevicesRequest)(nil),         // 321: mm.GetBoundHardDevicesRequest
	(*GetBoundHardDevicesResponse)(nil),        // 322: mm.GetBoundHardDevicesResponse
	(*ModHardDevice)(nil),                      // 323: mm.ModHardDevice
	(*HardDevice)(nil),                         // 324: mm.HardDevice
	(*HardDeviceAttr)(nil),                     // 325: mm.HardDeviceAttr
	(*GetCertRequest)(nil),                     // 326: mm.GetCertRequest
	(*GetCertResponse)(nil),                    // 327: mm.GetCertResponse
	(*RSACert)(nil),                            // 328: mm.RSACert
	(*DownloadVideoRequest)(nil),               // 329: mm.DownloadVideoRequest
	(*DownloadVideoResponse)(nil),              // 330: mm.DownloadVideoResponse
	(*GetMsgImgRequest)(nil),                   // 331: mm.GetMsgImgRequest
	(*GetMsgImgResponse)(nil),                  // 332: mm.GetMsgImgResponse
	(*DownloadAppAttachRequest)(nil),           // 333: mm.DownloadAppAttachRequest
	(*DownloadAppAttachResponse)(nil),          // 334: mm.DownloadAppAttachResponse
	(*UploadEmojiRequest)(nil),                 // 335: mm.UploadEmojiRequest
	(*UploadEmojiResponse)(nil),                // 336: mm.UploadEmojiResponse
	(*EmojiUploadInfoReq)(nil),                 // 337: mm.EmojiUploadInfoReq
	(*EmojiUploadInfoResp)(nil),                // 338: mm.EmojiUploadInfoResp
	(*GetSafetyInfoRequest)(nil),               // 339: mm.GetSafetyInfoRequest
	(*GetSafetyInfoRespsonse)(nil),             // 340: mm.GetSafetyInfoRespsonse
	(*SafetyInfo)(nil),                         // 341: mm.SafetyInfo
	(*LoginDevice)(nil),                        // 342: mm.LoginDevice
	(*DelSafeDeviceRequest)(nil),               // 343: mm.DelSafeDeviceRequest
	(*DelSafeDeviceResponse)(nil),              // 344: mm.DelSafeDeviceResponse
	(*StatusNotifyRequest)(nil),                // 345: mm.StatusNotifyRequest
	(*StatusNotifyResponse)(nil),               // 346: mm.StatusNotifyResponse
	(*StatusNotifyUnreadChat)(nil),             // 347: mm.StatusNotifyUnreadChat
	(*StatusNotifyFunction)(nil),               // 348: mm.StatusNotifyFunction
	(*ChatContact)(nil),                        // 349: mm.ChatContact
	(*RealTimeKVReportReq)(nil),                // 350: mm.RealTimeKVReportReq
	(*RealTimeKVReportResp)(nil),               // 351: mm.RealTimeKVReportResp
	(*FPRequest)(nil),                          // 352: mm.FPRequest
	(*FPResponse)(nil),                         // 353: mm.FPResponse
	(*Test24)(nil),                             // 354: mm.Test24
	(*OauthAuthorizeReq)(nil),                  // 355: mm.OauthAuthorizeReq
	(*OauthAuthorizeResp)(nil),                 // 356: mm.OauthAuthorizeResp
	(*JSAPIPreVerifyRequest)(nil),              // 357: mm.JSAPIPreVerifyRequest
	(*JSAPIPreVerifyResponse)(nil),             // 358: mm.JSAPIPreVerifyResponse
	(*F2FQrcodeRequest)(nil),                   // 359: mm.F2FQrcodeRequest
	(*F2FQrcodeResponse)(nil),                  // 360: mm.F2FQrcodeResponse
	(*MenuItem)(nil),                           // 361: mm.MenuItem
	(*MiniProgramInfo)(nil),                    // 362: mm.MiniProgramInfo
	(*SdkOauthAuthorizeRequest)(nil),           // 363: mm.SdkOauthAuthorizeRequest
	(*TenPayRequest)(nil),                      // 364: mm.TenPayRequest
	(*TenPayResponse)(nil),                     // 365: mm.TenPayResponse
	(*JSOperateWxDataRequest)(nil),             // 366: mm.JSOperateWxDataRequest
	(*JSOperateWxDataResponse)(nil),            // 367: mm.JSOperateWxDataResponse
	(*GetCDNDnsRequest)(nil),                   // 368: mm.GetCDNDnsRequest
	(*CDNDnsPortInfo)(nil),                     // 369: mm.CDNDnsPortInfo
	(*CDNDnsInfo)(nil),                         // 370: mm.CDNDnsInfo
	(*CDNClientConfig)(nil),                    // 371: mm.CDNClientConfig
	(*GetCDNDnsResponse)(nil),                  // 372: mm.GetCDNDnsResponse
	(*BindQQRequest)(nil),                      // 373: mm.BindQQRequest
	(*BindQQResponse)(nil),                     // 374: mm.BindQQResponse
}
var file_mm_proto_depIdxs = []int32{
	7,   // 0: mm.BaseResponse.errMsg:type_name -> mm.SKBuiltinString_t
	9,   // 1: mm.HostList.list:type_name -> mm.RealHostInfo
	12,  // 2: mm.BuiltinIPList.longConnectIplist:type_name -> mm.IPInfo
	12,  // 3: mm.BuiltinIPList.shortConnectIplist:type_name -> mm.IPInfo
	10,  // 4: mm.NetworkSectResp.newHostList:type_name -> mm.HostList
	11,  // 5: mm.NetworkSectResp.networkControl:type_name -> mm.NetworkControl
	13,  // 6: mm.NetworkSectResp.builtinIplist:type_name -> mm.BuiltinIPList
	6,   // 7: mm.UnifyAuthResponse.baseResponse:type_name -> mm.BaseResponse
	24,  // 8: mm.UnifyAuthResponse.authSectResp:type_name -> mm.AuthSectResp
	25,  // 9: mm.UnifyAuthResponse.acctSectResp:type_name -> mm.AcctSectResp
	14,  // 10: mm.UnifyAuthResponse.networkSectResp:type_name -> mm.NetworkSectResp
	15,  // 11: mm.UnifyAuthResponse.axAuthSecRespList:type_name -> mm.AxAuthSecRespList
	17,  // 12: mm.ECDHKey.key:type_name -> mm.SKBuiltinBuffer_t
	17,  // 13: mm.WTLoginImgRespInfo.ksid:type_name -> mm.SKBuiltinBuffer_t
	17,  // 14: mm.WTLoginImgRespInfo.imgBuf:type_name -> mm.SKBuiltinBuffer_t
	17,  // 15: mm.WxVerifyCodeRespInfo.verifyBuff:type_name -> mm.SKBuiltinBuffer_t
	20,  // 16: mm.AuthSectResp.svrPubEcdhkey:type_name -> mm.ECDHKey
	17,  // 17: mm.AuthSectResp.sessionKey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 18: mm.AuthSectResp.autoAuthKey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 19: mm.AuthSectResp.wtloginRspBuff:type_name -> mm.SKBuiltinBuffer_t
	21,  // 20: mm.AuthSectResp.wtloginImgRespInfo:type_name -> mm.WTLoginImgRespInfo
	22,  // 21: mm.AuthSectResp.wxVerifyCodeRespInfo:type_name -> mm.WxVerifyCodeRespInfo
	17,  // 22: mm.AuthSectResp.cliDbencryptKey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 23: mm.AuthSectResp.cliDbencryptInfo:type_name -> mm.SKBuiltinBuffer_t
	17,  // 24: mm.AuthSectResp.a2Key:type_name -> mm.SKBuiltinBuffer_t
	23,  // 25: mm.AuthSectResp.showStyle:type_name -> mm.ShowStyleKey
	17,  // 26: mm.AuthSectResp.clientSessionKey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 27: mm.AuthSectResp.serverSessionKey:type_name -> mm.SKBuiltinBuffer_t
	26,  // 28: mm.ReceiveWxaHBRequest.baseRequest:type_name -> mm.BaseRequest
	6,   // 29: mm.ReceiveWxaHBResponse.baseResponse:type_name -> mm.BaseResponse
	26,  // 30: mm.GetLoginQRCodeRequest.baseRequest:type_name -> mm.BaseRequest
	17,  // 31: mm.GetLoginQRCodeRequest.randomEncryKey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 32: mm.GetLoginQRCodeRequest.msgContextPubKey:type_name -> mm.SKBuiltinBuffer_t
	6,   // 33: mm.GetLoginQRCodeResponse.baseResponse:type_name -> mm.BaseResponse
	17,  // 34: mm.GetLoginQRCodeResponse.qrcode:type_name -> mm.SKBuiltinBuffer_t
	17,  // 35: mm.GetLoginQRCodeResponse.notifyKey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 36: mm.GetLoginQRCodeResponse.blueToothBroadCastContent:type_name -> mm.SKBuiltinBuffer_t
	17,  // 37: mm.HybridEcdhRequest.SecECDHKey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 38: mm.HybridEcdhResponse.SecECDHKey:type_name -> mm.SKBuiltinBuffer_t
	33,  // 39: mm.HybridEcdhReq.SecKey:type_name -> mm.SecKey
	33,  // 40: mm.HybridEcdhResp.SecKey:type_name -> mm.SecKey
	17,  // 41: mm.ManualAuthRsaReqData.randomEncryKey:type_name -> mm.SKBuiltinBuffer_t
	20,  // 42: mm.ManualAuthRsaReqData.cliPubEcdhkey:type_name -> mm.ECDHKey
	17,  // 43: mm.WTLoginImgReqInfo.ksid:type_name -> mm.SKBuiltinBuffer_t
	17,  // 44: mm.BaseAuthReqInfo.wtloginReqBuff:type_name -> mm.SKBuiltinBuffer_t
	37,  // 45: mm.BaseAuthReqInfo.wtloginImgReqInfo:type_name -> mm.WTLoginImgReqInfo
	38,  // 46: mm.BaseAuthReqInfo.wxVerifyCodeReqInfo:type_name -> mm.WxVerifyCodeReqInfo
	17,  // 47: mm.BaseAuthReqInfo.cliDbencryptKey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 48: mm.BaseAuthReqInfo.cliDbencryptInfo:type_name -> mm.SKBuiltinBuffer_t
	26,  // 49: mm.ManualAuthAesReqData.baseRequest:type_name -> mm.BaseRequest
	39,  // 50: mm.ManualAuthAesReqData.baseReqInfo:type_name -> mm.BaseAuthReqInfo
	17,  // 51: mm.ManualAuthAesReqData.clientCheckData:type_name -> mm.SKBuiltinBuffer_t
	17,  // 52: mm.ManualAuthAesReqData.extSpamInfo:type_name -> mm.SKBuiltinBuffer_t
	36,  // 53: mm.SecManualLoginRequest.rsaReqData:type_name -> mm.ManualAuthRsaReqData
	40,  // 54: mm.SecManualLoginRequest.aesReqData:type_name -> mm.ManualAuthAesReqData
	36,  // 55: mm.SecAutoLoginRequest.rsaReqData:type_name -> mm.ManualAuthRsaReqData
	40,  // 56: mm.SecAutoLoginRequest.aesReqData:type_name -> mm.ManualAuthAesReqData
	26,  // 57: mm.CheckLoginQRCodeRequest.baseRequest:type_name -> mm.BaseRequest
	17,  // 58: mm.CheckLoginQRCodeRequest.randomEncryKey:type_name -> mm.SKBuiltinBuffer_t
	6,   // 59: mm.CheckLoginQRCodeResponse.baseResponse:type_name -> mm.BaseResponse
	45,  // 60: mm.CheckLoginQRCodeResponse.notifyPkg:type_name -> mm.LoginQRCodeNotifyPkg
	17,  // 61: mm.LoginQRCodeNotifyPkg.notifyData:type_name -> mm.SKBuiltinBuffer_t
	7,   // 62: mm.DeviceToken.Data:type_name -> mm.SKBuiltinString_t
	48,  // 63: mm.AndroidCcdDataBody.Body:type_name -> mm.AndroidSpamDataBody
	51,  // 64: mm.SpamDataBody.appFileInfo:type_name -> mm.FileInfo
	17,  // 65: mm.WCExtInfo.wcstf:type_name -> mm.SKBuiltinBuffer_t
	17,  // 66: mm.WCExtInfo.wcste:type_name -> mm.SKBuiltinBuffer_t
	17,  // 67: mm.WCExtInfo.ccData:type_name -> mm.SKBuiltinBuffer_t
	17,  // 68: mm.WCExtInfo.userAttrInfo:type_name -> mm.SKBuiltinBuffer_t
	17,  // 69: mm.WCExtInfo.acgiDeviceInfo:type_name -> mm.SKBuiltinBuffer_t
	17,  // 70: mm.WCExtInfo.acgiTuring:type_name -> mm.SKBuiltinBuffer_t
	17,  // 71: mm.WCExtInfo.deviceToken:type_name -> mm.SKBuiltinBuffer_t
	17,  // 72: mm.WCExtInfo.iosturingHuman:type_name -> mm.SKBuiltinBuffer_t
	17,  // 73: mm.WCExtInfo.iosturingOwner:type_name -> mm.SKBuiltinBuffer_t
	57,  // 74: mm.CmdList.List:type_name -> mm.CmdItem
	17,  // 75: mm.CmdItem.CmdBuf:type_name -> mm.SKBuiltinBuffer_t
	56,  // 76: mm.NewSyncRequest.oplog:type_name -> mm.CmdList
	17,  // 77: mm.NewSyncRequest.keyBuf:type_name -> mm.SKBuiltinBuffer_t
	56,  // 78: mm.NewSyncResponse.CmdList:type_name -> mm.CmdList
	17,  // 79: mm.NewSyncResponse.KeyBuf:type_name -> mm.SKBuiltinBuffer_t
	26,  // 80: mm.NewInitRequest.BaseRequest:type_name -> mm.BaseRequest
	17,  // 81: mm.NewInitRequest.CurrentSynckey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 82: mm.NewInitRequest.MaxSynckey:type_name -> mm.SKBuiltinBuffer_t
	6,   // 83: mm.NewInitResponse.BaseResponse:type_name -> mm.BaseResponse
	17,  // 84: mm.NewInitResponse.CurrentSynckey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 85: mm.NewInitResponse.MaxSynckey:type_name -> mm.SKBuiltinBuffer_t
	57,  // 86: mm.NewInitResponse.CmdList:type_name -> mm.CmdItem
	17,  // 87: mm.AutoAuthRsaReqData.aesEncryptKey:type_name -> mm.SKBuiltinBuffer_t
	20,  // 88: mm.AutoAuthRsaReqData.cliPubEcdhkey:type_name -> mm.ECDHKey
	62,  // 89: mm.AutoAuthRequest.rsaReqData:type_name -> mm.AutoAuthRsaReqData
	64,  // 90: mm.AutoAuthRequest.aesReqData:type_name -> mm.AutoAuthAesReqData
	26,  // 91: mm.AutoAuthAesReqData.baseRequest:type_name -> mm.BaseRequest
	39,  // 92: mm.AutoAuthAesReqData.baseReqInfo:type_name -> mm.BaseAuthReqInfo
	17,  // 93: mm.AutoAuthAesReqData.autoAuthKey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 94: mm.AutoAuthAesReqData.clientCheckData:type_name -> mm.SKBuiltinBuffer_t
	17,  // 95: mm.AutoAuthAesReqData.extSpamInfo:type_name -> mm.SKBuiltinBuffer_t
	26,  // 96: mm.PushLoginURLRequest.baseRequest:type_name -> mm.BaseRequest
	17,  // 97: mm.PushLoginURLRequest.randomEncryKey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 98: mm.PushLoginURLRequest.Autoauthkey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 99: mm.PushLoginURLRequest.MsgContextPubKey:type_name -> mm.SKBuiltinBuffer_t
	6,   // 100: mm.PushLoginURLResponse.BaseResponse:type_name -> mm.BaseResponse
	17,  // 101: mm.PushLoginURLResponse.NotifyKey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 102: mm.PushLoginURLResponse.BlueToothBroadCastContent:type_name -> mm.SKBuiltinBuffer_t
	72,  // 103: mm.NewSendMsgRequest.info:type_name -> mm.ChatInfo
	6,   // 104: mm.NewSendMsgRespone.BaseResponse:type_name -> mm.BaseResponse
	69,  // 105: mm.NewSendMsgRespone.List:type_name -> mm.NewMsgResponeNew
	7,   // 106: mm.NewMsgResponeNew.ToUsetName:type_name -> mm.SKBuiltinString_t
	26,  // 107: mm.RevokeMsgRequest.baseRequest:type_name -> mm.BaseRequest
	6,   // 108: mm.RevokeMsgResponse.BaseResponse:type_name -> mm.BaseResponse
	7,   // 109: mm.ChatInfo.toid:type_name -> mm.SKBuiltinString_t
	17,  // 110: mm.AutoAuthKey.EncryptKey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 111: mm.AutoAuthKey.Key:type_name -> mm.SKBuiltinBuffer_t
	18,  // 112: mm.SnsObject.ObjectDesc:type_name -> mm.SKBuiltinString_S
	77,  // 113: mm.SnsObject.LikeUserList:type_name -> mm.SnsCommentInfo
	77,  // 114: mm.SnsObject.CommentUserList:type_name -> mm.SnsCommentInfo
	77,  // 115: mm.SnsObject.WithUserList:type_name -> mm.SnsCommentInfo
	78,  // 116: mm.SnsObject.GroupList:type_name -> mm.SnsGroup
	17,  // 117: mm.SnsObject.BlackList:type_name -> mm.SKBuiltinBuffer_t
	17,  // 118: mm.SnsObject.GroupUser:type_name -> mm.SKBuiltinBuffer_t
	17,  // 119: mm.SnsObject.ObjectOperations:type_name -> mm.SKBuiltinBuffer_t
	79,  // 120: mm.SnsObject.SnsRedEnvelops:type_name -> mm.SnsRedEnvelops
	80,  // 121: mm.SnsObject.PreDownloadInfo:type_name -> mm.PreDownloadInfo
	81,  // 122: mm.SnsObject.WeAppInfo:type_name -> mm.SnsWeAppInfo
	26,  // 123: mm.GetA8KeyReq.baseRequest:type_name -> mm.BaseRequest
	17,  // 124: mm.GetA8KeyReq.A2key:type_name -> mm.SKBuiltinBuffer_t
	7,   // 125: mm.GetA8KeyReq.AppID:type_name -> mm.SKBuiltinString_t
	7,   // 126: mm.GetA8KeyReq.Scope:type_name -> mm.SKBuiltinString_t
	7,   // 127: mm.GetA8KeyReq.State:type_name -> mm.SKBuiltinString_t
	7,   // 128: mm.GetA8KeyReq.ReqUrl:type_name -> mm.SKBuiltinString_t
	17,  // 129: mm.GetA8KeyReq.Cookie:type_name -> mm.SKBuiltinBuffer_t
	6,   // 130: mm.GetA8KeyResp.BaseResponse:type_name -> mm.BaseResponse
	85,  // 131: mm.GetA8KeyResp.JSAPIPermission:type_name -> mm.JSAPIPermissionBitSet
	86,  // 132: mm.GetA8KeyResp.GeneralControlBitSet:type_name -> mm.GeneralControlBitSet
	87,  // 133: mm.GetA8KeyResp.ScopeList:type_name -> mm.BizScopeInfo
	89,  // 134: mm.GetA8KeyResp.DeepLinkBitSet:type_name -> mm.DeepLinkBitSet
	17,  // 135: mm.GetA8KeyResp.JSAPIControlBytes:type_name -> mm.SKBuiltinBuffer_t
	84,  // 136: mm.GetA8KeyResp.HttpHeader:type_name -> mm.HttpHeader
	17,  // 137: mm.GetA8KeyResp.Cookie:type_name -> mm.SKBuiltinBuffer_t
	88,  // 138: mm.BizScopeInfo.apiList:type_name -> mm.BizApiInfo
	0,   // 139: mm.MediaInfo.MediaType:type_name -> mm.SnsMediaType
	26,  // 140: mm.SnsPostRequest.baseRequest:type_name -> mm.BaseRequest
	18,  // 141: mm.SnsPostRequest.ObjectDesc:type_name -> mm.SKBuiltinString_S
	7,   // 142: mm.SnsPostRequest.WithUserList:type_name -> mm.SKBuiltinString_t
	78,  // 143: mm.SnsPostRequest.GroupIds:type_name -> mm.SnsGroup
	7,   // 144: mm.SnsPostRequest.BlackList:type_name -> mm.SKBuiltinString_t
	90,  // 145: mm.SnsPostRequest.TwitterInfo:type_name -> mm.TwitterInfo
	7,   // 146: mm.SnsPostRequest.GroupUser:type_name -> mm.SKBuiltinString_t
	91,  // 147: mm.SnsPostRequest.CtocUploadInfo:type_name -> mm.SnsPostCtocUploadInfo
	92,  // 148: mm.SnsPostRequest.SnsPostOperationFields:type_name -> mm.SnsPostOperationFields
	79,  // 149: mm.SnsPostRequest.SnsRedEnvelops:type_name -> mm.SnsRedEnvelops
	17,  // 150: mm.SnsPostRequest.PoiInfo:type_name -> mm.SKBuiltinBuffer_t
	93,  // 151: mm.SnsPostRequest.CanvasInfo:type_name -> mm.CanvasInfo
	94,  // 152: mm.SnsPostRequest.MediaInfo:type_name -> mm.MediaInfo
	81,  // 153: mm.SnsPostRequest.WeAppInfo:type_name -> mm.SnsWeAppInfo
	17,  // 154: mm.SnsPostRequest.ClientCheckData:type_name -> mm.SKBuiltinBuffer_t
	17,  // 155: mm.SnsPostRequest.ExtSpamInfo:type_name -> mm.SKBuiltinBuffer_t
	6,   // 156: mm.SnsPostResponse.BaseResponse:type_name -> mm.BaseResponse
	76,  // 157: mm.SnsPostResponse.SnsObject:type_name -> mm.SnsObject
	26,  // 158: mm.SnsObjectOpRequest.baseRequest:type_name -> mm.BaseRequest
	98,  // 159: mm.SnsObjectOpRequest.opList:type_name -> mm.SnsObjectOp
	17,  // 160: mm.SnsObjectOp.ext:type_name -> mm.SKBuiltinBuffer_t
	6,   // 161: mm.SnsObjectOpResponse.BaseResponse:type_name -> mm.BaseResponse
	26,  // 162: mm.SnsCommentRequest.baseRequest:type_name -> mm.BaseRequest
	101, // 163: mm.SnsCommentRequest.action:type_name -> mm.SnsActionGroup
	102, // 164: mm.SnsActionGroup.currentAction:type_name -> mm.SnsAction
	102, // 165: mm.SnsActionGroup.referAction:type_name -> mm.SnsAction
	17,  // 166: mm.SnsAction.hbbuffer:type_name -> mm.SKBuiltinBuffer_t
	104, // 167: mm.SnsAction.remindFriendsInfo:type_name -> mm.RemindFriendsInfo
	103, // 168: mm.SnsAction.snsEmojiInfo:type_name -> mm.SnsEmojiInfo
	17,  // 169: mm.SnsEmojiInfo.emojiInfoBuf:type_name -> mm.SKBuiltinBuffer_t
	17,  // 170: mm.RemindFriendsInfo.sourceInfo:type_name -> mm.SKBuiltinBuffer_t
	17,  // 171: mm.RemindFriendsInfo.selfInfo:type_name -> mm.SKBuiltinBuffer_t
	17,  // 172: mm.RemindFriendsInfo.paidInfo:type_name -> mm.SKBuiltinBuffer_t
	17,  // 173: mm.RemindFriendsInfo.extraInfo:type_name -> mm.SKBuiltinBuffer_t
	6,   // 174: mm.SnsCommentResponse.BaseResponse:type_name -> mm.BaseResponse
	76,  // 175: mm.SnsCommentResponse.snsObject:type_name -> mm.SnsObject
	26,  // 176: mm.SnsUploadRequest.BaseRequest:type_name -> mm.BaseRequest
	17,  // 177: mm.SnsUploadRequest.Buffer:type_name -> mm.SKBuiltinBuffer_t
	90,  // 178: mm.SnsUploadRequest.TwitterInfo:type_name -> mm.TwitterInfo
	6,   // 179: mm.SnsUploadResponse.BaseResponse:type_name -> mm.BaseResponse
	8,   // 180: mm.SnsUploadResponse.BufferUrl:type_name -> mm.SnsBufferUrl
	8,   // 181: mm.SnsUploadResponse.ThumbUrls:type_name -> mm.SnsBufferUrl
	26,  // 182: mm.SnsTimeLineRequest.BaseRequest:type_name -> mm.BaseRequest
	17,  // 183: mm.SnsTimeLineRequest.Session:type_name -> mm.SKBuiltinBuffer_t
	110, // 184: mm.SnsTimeLineRequest.adexpinfo:type_name -> mm.SnsAdExpInfo
	6,   // 185: mm.SnsTimeLineResponse.BaseResponse:type_name -> mm.BaseResponse
	76,  // 186: mm.SnsTimeLineResponse.ObjectList:type_name -> mm.SnsObject
	75,  // 187: mm.SnsTimeLineResponse.ServerConfig:type_name -> mm.SnsServerConfig
	17,  // 188: mm.SnsTimeLineResponse.Session:type_name -> mm.SKBuiltinBuffer_t
	26,  // 189: mm.SnsUserPageRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 190: mm.SnsUserPageResponse.BaseResponse:type_name -> mm.BaseResponse
	76,  // 191: mm.SnsUserPageResponse.ObjectList:type_name -> mm.SnsObject
	74,  // 192: mm.SnsUserPageResponse.SnsUserInfo:type_name -> mm.SnsUserInfo
	75,  // 193: mm.SnsUserPageResponse.ServerConfig:type_name -> mm.SnsServerConfig
	6,   // 194: mm.InitContactResponse.BaseResponse:type_name -> mm.BaseResponse
	7,   // 195: mm.ModContact.UserName:type_name -> mm.SKBuiltinString_t
	7,   // 196: mm.ModContact.NickName:type_name -> mm.SKBuiltinString_t
	7,   // 197: mm.ModContact.PyInitial:type_name -> mm.SKBuiltinString_t
	7,   // 198: mm.ModContact.QuanPin:type_name -> mm.SKBuiltinString_t
	17,  // 199: mm.ModContact.ImgBuf:type_name -> mm.SKBuiltinBuffer_t
	7,   // 200: mm.ModContact.Remark:type_name -> mm.SKBuiltinString_t
	7,   // 201: mm.ModContact.RemarkPyinitial:type_name -> mm.SKBuiltinString_t
	7,   // 202: mm.ModContact.RemarkQuanPin:type_name -> mm.SKBuiltinString_t
	116, // 203: mm.ModContact.RoomInfoList:type_name -> mm.RoomInfo
	7,   // 204: mm.ModContact.DomainList:type_name -> mm.SKBuiltinString_t
	74,  // 205: mm.ModContact.SnsUserInfo:type_name -> mm.SnsUserInfo
	117, // 206: mm.ModContact.CustomizedInfo:type_name -> mm.CustomizedInfo
	118, // 207: mm.ModContact.AdditionalContactList:type_name -> mm.AdditionalContactList
	120, // 208: mm.ModContact.NewChatroomData:type_name -> mm.ChatRoomMemberData
	122, // 209: mm.ModContact.PhoneNumListInfo:type_name -> mm.PhoneNumListInfo
	7,   // 210: mm.RoomInfo.UserName:type_name -> mm.SKBuiltinString_t
	7,   // 211: mm.RoomInfo.NickName:type_name -> mm.SKBuiltinString_t
	119, // 212: mm.AdditionalContactList.LinkedinContactItem:type_name -> mm.LinkedinContactItem
	121, // 213: mm.ChatRoomMemberData.ChatRoomMember:type_name -> mm.ChatRoomMemberInfo
	26,  // 214: mm.UploadMsgImgRequest.baseRequest:type_name -> mm.BaseRequest
	7,   // 215: mm.UploadMsgImgRequest.ClientImgId:type_name -> mm.SKBuiltinString_t
	7,   // 216: mm.UploadMsgImgRequest.FromUserNam:type_name -> mm.SKBuiltinString_t
	7,   // 217: mm.UploadMsgImgRequest.ToUserNam:type_name -> mm.SKBuiltinString_t
	17,  // 218: mm.UploadMsgImgRequest.Data:type_name -> mm.SKBuiltinBuffer_t
	6,   // 219: mm.UploadMsgImgResponse.BaseResponse:type_name -> mm.BaseResponse
	7,   // 220: mm.UploadMsgImgResponse.ClientImgId:type_name -> mm.SKBuiltinString_t
	7,   // 221: mm.UploadMsgImgResponse.FromUserName:type_name -> mm.SKBuiltinString_t
	7,   // 222: mm.UploadMsgImgResponse.ToUserName:type_name -> mm.SKBuiltinString_t
	125, // 223: mm.DisturbSetting.NightTime:type_name -> mm.DisturbTimeSpan
	125, // 224: mm.DisturbSetting.AllDayTim:type_name -> mm.DisturbTimeSpan
	127, // 225: mm.GmailList.List:type_name -> mm.GmailInfo
	7,   // 226: mm.ModUserInfo.UserName:type_name -> mm.SKBuiltinString_t
	7,   // 227: mm.ModUserInfo.NickName:type_name -> mm.SKBuiltinString_t
	7,   // 228: mm.ModUserInfo.BindEmail:type_name -> mm.SKBuiltinString_t
	7,   // 229: mm.ModUserInfo.BindMobile:type_name -> mm.SKBuiltinString_t
	126, // 230: mm.ModUserInfo.DisturbSetting:type_name -> mm.DisturbSetting
	128, // 231: mm.ModUserInfo.GmailList:type_name -> mm.GmailList
	7,   // 232: mm.ModContacts.UserName:type_name -> mm.SKBuiltinString_t
	7,   // 233: mm.ModContacts.NickName:type_name -> mm.SKBuiltinString_t
	7,   // 234: mm.ModContacts.Pyinitial:type_name -> mm.SKBuiltinString_t
	7,   // 235: mm.ModContacts.QuanPin:type_name -> mm.SKBuiltinString_t
	17,  // 236: mm.ModContacts.ImgBuf:type_name -> mm.SKBuiltinBuffer_t
	7,   // 237: mm.ModContacts.Remark:type_name -> mm.SKBuiltinString_t
	7,   // 238: mm.ModContacts.RemarkPyinitial:type_name -> mm.SKBuiltinString_t
	7,   // 239: mm.ModContacts.RemarkQuanPin:type_name -> mm.SKBuiltinString_t
	116, // 240: mm.ModContacts.RoomInfoList:type_name -> mm.RoomInfo
	7,   // 241: mm.ModContacts.DomainList:type_name -> mm.SKBuiltinString_t
	74,  // 242: mm.ModContacts.SnsUserInfo:type_name -> mm.SnsUserInfo
	117, // 243: mm.ModContacts.CustomizedInfo:type_name -> mm.CustomizedInfo
	118, // 244: mm.ModContacts.AdditionalContactList:type_name -> mm.AdditionalContactList
	120, // 245: mm.ModContacts.NewChatroomData:type_name -> mm.ChatRoomMemberData
	122, // 246: mm.ModContacts.PhoneNumListInfo:type_name -> mm.PhoneNumListInfo
	7,   // 247: mm.DelContact.UserName:type_name -> mm.SKBuiltinString_t
	7,   // 248: mm.AddMsg.FromUserName:type_name -> mm.SKBuiltinString_t
	7,   // 249: mm.AddMsg.ToUserName:type_name -> mm.SKBuiltinString_t
	7,   // 250: mm.AddMsg.Content:type_name -> mm.SKBuiltinString_t
	17,  // 251: mm.AddMsg.ImgBuf:type_name -> mm.SKBuiltinBuffer_t
	7,   // 252: mm.ModMsgStatus.FromUserName:type_name -> mm.SKBuiltinString_t
	7,   // 253: mm.ModMsgStatus.ToUserName:type_name -> mm.SKBuiltinString_t
	7,   // 254: mm.DelChatContact.UserName:type_name -> mm.SKBuiltinString_t
	7,   // 255: mm.DelContactMsg.UserName:type_name -> mm.SKBuiltinString_t
	7,   // 256: mm.NewDelMsg.FromUserName:type_name -> mm.SKBuiltinString_t
	7,   // 257: mm.NewDelMsg.ToUserName:type_name -> mm.SKBuiltinString_t
	138, // 258: mm.SafeDeviceList.List:type_name -> mm.SafeDevice
	17,  // 259: mm.PatternLockInfo.Sign:type_name -> mm.SKBuiltinBuffer_t
	74,  // 260: mm.UserInfoExt.SnsUserInfo:type_name -> mm.SnsUserInfo
	7,   // 261: mm.UserInfoExt.ExtXml:type_name -> mm.SKBuiltinString_t
	139, // 262: mm.UserInfoExt.SafeDeviceList:type_name -> mm.SafeDeviceList
	119, // 263: mm.UserInfoExt.LinkedinContactItem:type_name -> mm.LinkedinContactItem
	140, // 264: mm.UserInfoExt.PatternLockInfo:type_name -> mm.PatternLockInfo
	26,  // 265: mm.HeartBeatRequest.baseRequest:type_name -> mm.BaseRequest
	17,  // 266: mm.HeartBeatRequest.KeyBuf:type_name -> mm.SKBuiltinBuffer_t
	17,  // 267: mm.HeartBeatRequest.BlueToothBroadCastContent:type_name -> mm.SKBuiltinBuffer_t
	6,   // 268: mm.HeartBeatResponse.BaseResponse:type_name -> mm.BaseResponse
	17,  // 269: mm.HeartBeatResponse.BlueToothBroadCastContent:type_name -> mm.SKBuiltinBuffer_t
	26,  // 270: mm.LogOutRequest.baseRequest:type_name -> mm.BaseRequest
	6,   // 271: mm.LogOutResponse.BaseResponse:type_name -> mm.BaseResponse
	17,  // 272: mm.FavSyncRequest.KeyBuf:type_name -> mm.SKBuiltinBuffer_t
	56,  // 273: mm.FavSyncResponse.CmdList:type_name -> mm.CmdList
	17,  // 274: mm.FavSyncResponse.KeyBuf:type_name -> mm.SKBuiltinBuffer_t
	26,  // 275: mm.BatchGetFavItemRequest.baseRequest:type_name -> mm.BaseRequest
	6,   // 276: mm.BatchGetFavItemResponse.BaseResponse:type_name -> mm.BaseResponse
	152, // 277: mm.BatchGetFavItemResponse.ObjectList:type_name -> mm.FavObject
	26,  // 278: mm.BatchDelFavItemRequest.baseRequest:type_name -> mm.BaseRequest
	6,   // 279: mm.BatchDelFavItemResponse.BaseResponse:type_name -> mm.BaseResponse
	155, // 280: mm.BatchDelFavItemResponse.List:type_name -> mm.DelFavItemRsp
	26,  // 281: mm.SearchContactRequest.baseRequest:type_name -> mm.BaseRequest
	7,   // 282: mm.SearchContactRequest.UserName:type_name -> mm.SKBuiltinString_t
	17,  // 283: mm.SearchContactRequest.ReqBuf:type_name -> mm.SKBuiltinBuffer_t
	6,   // 284: mm.SearchContactResponse.BaseResponse:type_name -> mm.BaseResponse
	7,   // 285: mm.SearchContactResponse.UserName:type_name -> mm.SKBuiltinString_t
	7,   // 286: mm.SearchContactResponse.NickName:type_name -> mm.SKBuiltinString_t
	7,   // 287: mm.SearchContactResponse.Pyinitial:type_name -> mm.SKBuiltinString_t
	7,   // 288: mm.SearchContactResponse.QuanPin:type_name -> mm.SKBuiltinString_t
	17,  // 289: mm.SearchContactResponse.ImgBuf:type_name -> mm.SKBuiltinBuffer_t
	74,  // 290: mm.SearchContactResponse.SnsUserInfo:type_name -> mm.SnsUserInfo
	117, // 291: mm.SearchContactResponse.CustomizedInfo:type_name -> mm.CustomizedInfo
	158, // 292: mm.SearchContactResponse.Contactlist:type_name -> mm.SearchContactItem
	17,  // 293: mm.SearchContactResponse.ResBuf:type_name -> mm.SKBuiltinBuffer_t
	159, // 294: mm.SearchContactResponse.OpenImcontactList:type_name -> mm.OpenIMContact
	7,   // 295: mm.SearchContactItem.UserName:type_name -> mm.SKBuiltinString_t
	7,   // 296: mm.SearchContactItem.NickName:type_name -> mm.SKBuiltinString_t
	7,   // 297: mm.SearchContactItem.Pyinitial:type_name -> mm.SKBuiltinString_t
	7,   // 298: mm.SearchContactItem.QuanPin:type_name -> mm.SKBuiltinString_t
	17,  // 299: mm.SearchContactItem.imgBuf:type_name -> mm.SKBuiltinBuffer_t
	74,  // 300: mm.SearchContactItem.snsUserInfo:type_name -> mm.SnsUserInfo
	117, // 301: mm.SearchContactItem.customizedInfo:type_name -> mm.CustomizedInfo
	160, // 302: mm.OpenIMContact.customInfo:type_name -> mm.OpenIMContactCustomInfo
	26,  // 303: mm.UploadMContactRequest.baseRequest:type_name -> mm.BaseRequest
	7,   // 304: mm.UploadMContactRequest.mobileList:type_name -> mm.SKBuiltinString_t
	7,   // 305: mm.UploadMContactRequest.emailList:type_name -> mm.SKBuiltinString_t
	6,   // 306: mm.UploadMContactResponse.BaseResponse:type_name -> mm.BaseResponse
	26,  // 307: mm.VerifyUserRequest.baseRequest:type_name -> mm.BaseRequest
	164, // 308: mm.VerifyUserRequest.VerifyUserList:type_name -> mm.VerifyUser
	17,  // 309: mm.VerifyUserRequest.VerifyInfoList:type_name -> mm.SKBuiltinBuffer_t
	17,  // 310: mm.VerifyUserRequest.ClientCheckData:type_name -> mm.SKBuiltinBuffer_t
	17,  // 311: mm.VerifyUserRequest.extSpamInfo:type_name -> mm.SKBuiltinBuffer_t
	17,  // 312: mm.VerifyUser.ShareCardForwardInfo:type_name -> mm.SKBuiltinBuffer_t
	17,  // 313: mm.VerifyUser.bizReportInfo:type_name -> mm.SKBuiltinBuffer_t
	6,   // 314: mm.VerifyUserResponse.BaseResponse:type_name -> mm.BaseResponse
	26,  // 315: mm.GetContactLabelListRequest.baseRequest:type_name -> mm.BaseRequest
	6,   // 316: mm.GetContactLabelListResponse.BaseResponse:type_name -> mm.BaseResponse
	168, // 317: mm.GetContactLabelListResponse.labelPairList:type_name -> mm.LabelPair
	26,  // 318: mm.AddContactLabelRequest.baseRequest:type_name -> mm.BaseRequest
	168, // 319: mm.AddContactLabelRequest.LabelPairList:type_name -> mm.LabelPair
	6,   // 320: mm.AddContactLabelResponse.BaseResponse:type_name -> mm.BaseResponse
	168, // 321: mm.AddContactLabelResponse.LabelPairList:type_name -> mm.LabelPair
	26,  // 322: mm.ModifyContactLabelListRequest.baseRequest:type_name -> mm.BaseRequest
	173, // 323: mm.ModifyContactLabelListRequest.UserLabelInfoList:type_name -> mm.UserLabelInfo
	6,   // 324: mm.ModifyContactLabelListResponse.BaseResponse:type_name -> mm.BaseResponse
	26,  // 325: mm.DelContactLabelRequest.baseRequest:type_name -> mm.BaseRequest
	6,   // 326: mm.DelContactLabelResponse.BaseResponse:type_name -> mm.BaseResponse
	26,  // 327: mm.UpdateContactLabelRequest.baseRequest:type_name -> mm.BaseRequest
	168, // 328: mm.UpdateContactLabelRequest.LabelPairList:type_name -> mm.LabelPair
	6,   // 329: mm.UpdateContactLabelResponse.BaseResponse:type_name -> mm.BaseResponse
	56,  // 330: mm.OpLogRequest.cmd:type_name -> mm.CmdList
	180, // 331: mm.OplogResponse.oplogRet:type_name -> mm.OplogRet
	26,  // 332: mm.SnsObjectDetailRequest.baseRequest:type_name -> mm.BaseRequest
	6,   // 333: mm.SnsObjectDetailResponse.baseResponse:type_name -> mm.BaseResponse
	76,  // 334: mm.SnsObjectDetailResponse.object:type_name -> mm.SnsObject
	183, // 335: mm.TrustData.tdi:type_name -> mm.TrustDeviceInfo
	184, // 336: mm.TrustReq.td:type_name -> mm.TrustData
	186, // 337: mm.TrustResponseData.softData:type_name -> mm.TrustSoftData
	6,   // 338: mm.TrustResponse.BaseResponse:type_name -> mm.BaseResponse
	187, // 339: mm.TrustResponse.TrustResponseData:type_name -> mm.TrustResponseData
	26,  // 340: mm.FPFresh.baseRequest:type_name -> mm.BaseRequest
	190, // 341: mm.FPFresh.Ztdata:type_name -> mm.ZTData
	26,  // 342: mm.GetProfileRequest.baseRequest:type_name -> mm.BaseRequest
	6,   // 343: mm.GetProfileResponse.baseResponse:type_name -> mm.BaseResponse
	129, // 344: mm.GetProfileResponse.userInfo:type_name -> mm.ModUserInfo
	141, // 345: mm.GetProfileResponse.userInfoExt:type_name -> mm.UserInfoExt
	17,  // 346: mm.UploadVoiceRequest.Data:type_name -> mm.SKBuiltinBuffer_t
	26,  // 347: mm.UploadVoiceRequest.BaseRequest:type_name -> mm.BaseRequest
	17,  // 348: mm.UploadVoiceRequest.VoiceId:type_name -> mm.SKBuiltinBuffer_t
	6,   // 349: mm.UploadVoiceResponse.BaseResponse:type_name -> mm.BaseResponse
	7,   // 350: mm.QuitChatRoom.ChatRoomName:type_name -> mm.SKBuiltinString_t
	7,   // 351: mm.QuitChatRoom.UserName:type_name -> mm.SKBuiltinString_t
	26,  // 352: mm.UploadHDHeadImgRequest.baseRequest:type_name -> mm.BaseRequest
	17,  // 353: mm.UploadHDHeadImgRequest.Data:type_name -> mm.SKBuiltinBuffer_t
	6,   // 354: mm.UploadHDHeadImgResponse.baseResponse:type_name -> mm.BaseResponse
	26,  // 355: mm.VerifyPswdRequest.baseRequest:type_name -> mm.BaseRequest
	7,   // 356: mm.VerifyPswdRequest.imgSid:type_name -> mm.SKBuiltinString_t
	7,   // 357: mm.VerifyPswdRequest.imgCode:type_name -> mm.SKBuiltinString_t
	7,   // 358: mm.VerifyPswdRequest.imgEncryptKey:type_name -> mm.SKBuiltinString_t
	17,  // 359: mm.VerifyPswdRequest.ksid:type_name -> mm.SKBuiltinBuffer_t
	17,  // 360: mm.VerifyPswdRequest.wtloginRspBuff:type_name -> mm.SKBuiltinBuffer_t
	6,   // 361: mm.VerifyPswdResponse.baseResponse:type_name -> mm.BaseResponse
	7,   // 362: mm.VerifyPswdResponse.imgSid:type_name -> mm.SKBuiltinString_t
	17,  // 363: mm.VerifyPswdResponse.imgBuf:type_name -> mm.SKBuiltinBuffer_t
	7,   // 364: mm.VerifyPswdResponse.imgEncryptKey:type_name -> mm.SKBuiltinString_t
	17,  // 365: mm.VerifyPswdResponse.a2Key:type_name -> mm.SKBuiltinBuffer_t
	17,  // 366: mm.VerifyPswdResponse.ksid:type_name -> mm.SKBuiltinBuffer_t
	17,  // 367: mm.VerifyPswdResponse.wtloginRspBuff:type_name -> mm.SKBuiltinBuffer_t
	26,  // 368: mm.SetPwdRequest.baseRequest:type_name -> mm.BaseRequest
	17,  // 369: mm.SetPwdRequest.autoAuthKey:type_name -> mm.SKBuiltinBuffer_t
	6,   // 370: mm.SetPwdResponse.baseResponse:type_name -> mm.BaseResponse
	17,  // 371: mm.SetPwdResponse.autoAuthKey:type_name -> mm.SKBuiltinBuffer_t
	26,  // 372: mm.CreateChatRoomRequest.baseRequest:type_name -> mm.BaseRequest
	7,   // 373: mm.CreateChatRoomRequest.Topic:type_name -> mm.SKBuiltinString_t
	207, // 374: mm.CreateChatRoomRequest.MemberList:type_name -> mm.MemberReq
	17,  // 375: mm.CreateChatRoomRequest.ExtBuffer:type_name -> mm.SKBuiltinBuffer_t
	26,  // 376: mm.FacingCreateChatRoomRequest.baseRequest:type_name -> mm.BaseRequest
	6,   // 377: mm.FacingCreateChatRoomResponse.baseResponse:type_name -> mm.BaseResponse
	206, // 378: mm.FacingCreateChatRoomResponse.chatRoomMembers:type_name -> mm.ChatRoomMemberInfoSimple
	7,   // 379: mm.MemberReq.MemberName:type_name -> mm.SKBuiltinString_t
	6,   // 380: mm.CreateChatRoomResponse.baseResponse:type_name -> mm.BaseResponse
	7,   // 381: mm.CreateChatRoomResponse.Topic:type_name -> mm.SKBuiltinString_t
	7,   // 382: mm.CreateChatRoomResponse.Pyinitial:type_name -> mm.SKBuiltinString_t
	7,   // 383: mm.CreateChatRoomResponse.QuanPin:type_name -> mm.SKBuiltinString_t
	209, // 384: mm.CreateChatRoomResponse.MemberLis:type_name -> mm.MemberResp
	7,   // 385: mm.CreateChatRoomResponse.ChatRoomName:type_name -> mm.SKBuiltinString_t
	17,  // 386: mm.CreateChatRoomResponse.ImgBuf:type_name -> mm.SKBuiltinBuffer_t
	7,   // 387: mm.MemberResp.MemberName:type_name -> mm.SKBuiltinString_t
	7,   // 388: mm.MemberResp.NickName:type_name -> mm.SKBuiltinString_t
	7,   // 389: mm.MemberResp.PYInitial:type_name -> mm.SKBuiltinString_t
	7,   // 390: mm.MemberResp.QuanPin:type_name -> mm.SKBuiltinString_t
	7,   // 391: mm.MemberResp.Remark:type_name -> mm.SKBuiltinString_t
	7,   // 392: mm.MemberResp.RemarkPyinitial:type_name -> mm.SKBuiltinString_t
	7,   // 393: mm.MemberResp.RemarkQuanPin:type_name -> mm.SKBuiltinString_t
	26,  // 394: mm.AddChatRoomMemberRequest.baseRequest:type_name -> mm.BaseRequest
	207, // 395: mm.AddChatRoomMemberRequest.MemberList:type_name -> mm.MemberReq
	7,   // 396: mm.AddChatRoomMemberRequest.ChatRoomName:type_name -> mm.SKBuiltinString_t
	6,   // 397: mm.AddChatRoomMemberResponse.baseResponse:type_name -> mm.BaseResponse
	209, // 398: mm.AddChatRoomMemberResponse.MemberList:type_name -> mm.MemberResp
	26,  // 399: mm.DelChatRoomMemberRequest.baseRequest:type_name -> mm.BaseRequest
	207, // 400: mm.DelChatRoomMemberRequest.MemberList:type_name -> mm.MemberReq
	6,   // 401: mm.DelChatRoomMemberResponse.baseResponse:type_name -> mm.BaseResponse
	214, // 402: mm.DelChatRoomMemberResponse.MemberList:type_name -> mm.DelMemberResp
	7,   // 403: mm.DelMemberResp.MemberName:type_name -> mm.SKBuiltinString_t
	6,   // 404: mm.GetMFriendResponse.baseResponse:type_name -> mm.BaseResponse
	216, // 405: mm.GetMFriendResponse.FriendList:type_name -> mm.FriendList
	217, // 406: mm.FriendList.FBInfo:type_name -> mm.FBFriend
	74,  // 407: mm.FriendList.SnsUserInfo:type_name -> mm.SnsUserInfo
	117, // 408: mm.FriendList.CustomizedInfo:type_name -> mm.CustomizedInfo
	26,  // 409: mm.GetFavInfoRequest.baseRequest:type_name -> mm.BaseRequest
	6,   // 410: mm.GetFavInfoResponse.baseResponse:type_name -> mm.BaseResponse
	26,  // 411: mm.SnsSyncRequest.baseRequest:type_name -> mm.BaseRequest
	17,  // 412: mm.SnsSyncRequest.keyBuf:type_name -> mm.SKBuiltinBuffer_t
	6,   // 413: mm.SnsSyncResponse.baseResponse:type_name -> mm.BaseResponse
	56,  // 414: mm.SnsSyncResponse.cmdList:type_name -> mm.CmdList
	17,  // 415: mm.SnsSyncResponse.keyBuf:type_name -> mm.SKBuiltinBuffer_t
	26,  // 416: mm.FinderUserPrepareRequest.baseRequest:type_name -> mm.BaseRequest
	224, // 417: mm.FinderUserPrepareRequest.finderBasereq:type_name -> mm.FinderBaseRequest
	6,   // 418: mm.FinderUserPrepareResponse.baseResponse:type_name -> mm.BaseResponse
	227, // 419: mm.FinderUserPrepareResponse.verifyInfo:type_name -> mm.FinderNicknameVerifyInfo
	228, // 420: mm.FinderUserPrepareResponse.selfContact:type_name -> mm.FinderContact
	230, // 421: mm.FinderContact.authInfo:type_name -> mm.FinderAuthInfo
	229, // 422: mm.FinderContact.extInfo:type_name -> mm.FinderContactExtInfo
	228, // 423: mm.FinderAuthInfo.authGuarantor:type_name -> mm.FinderContact
	26,  // 424: mm.FinderUserPageRequest.baseRequest:type_name -> mm.BaseRequest
	224, // 425: mm.FinderUserPageRequest.finderBasereq:type_name -> mm.FinderBaseRequest
	6,   // 426: mm.FinderUserPageResponse.baseResponse:type_name -> mm.BaseResponse
	234, // 427: mm.FinderUserPageResponse.object:type_name -> mm.FinderObject
	233, // 428: mm.FinderUserPageResponse.finderUserInfo:type_name -> mm.FinderUserInfo
	228, // 429: mm.FinderUserPageResponse.contact:type_name -> mm.FinderContact
	227, // 430: mm.FinderUserPageResponse.verifyInfo:type_name -> mm.FinderNicknameVerifyInfo
	230, // 431: mm.FinderUserInfo.authInfo:type_name -> mm.FinderAuthInfo
	235, // 432: mm.FinderObject.objectDesc:type_name -> mm.FinderObjectDesc
	242, // 433: mm.FinderObject.commentList:type_name -> mm.FinderCommentInfo
	228, // 434: mm.FinderObject.contact:type_name -> mm.FinderContact
	243, // 435: mm.FinderObject.recommenderList:type_name -> mm.FinderRecommendInfo
	228, // 436: mm.FinderObject.refObjectContact:type_name -> mm.FinderContact
	236, // 437: mm.FinderObjectDesc.media:type_name -> mm.FinderMedia
	238, // 438: mm.FinderObjectDesc.extra:type_name -> mm.FinderMediaExtra
	239, // 439: mm.FinderObjectDesc.location:type_name -> mm.FinderLocation
	240, // 440: mm.FinderObjectDesc.extReading:type_name -> mm.FinderExtendedReading
	241, // 441: mm.FinderObjectDesc.topic:type_name -> mm.FinderTopic
	237, // 442: mm.FinderMedia.Spec:type_name -> mm.FinderMediaSpec
	26,  // 443: mm.GetContactRequest.BaseRequest:type_name -> mm.BaseRequest
	7,   // 444: mm.GetContactRequest.UserNameList:type_name -> mm.SKBuiltinString_t
	7,   // 445: mm.GetContactRequest.AntispamTicket:type_name -> mm.SKBuiltinString_t
	7,   // 446: mm.GetContactRequest.FromChatRoom:type_name -> mm.SKBuiltinString_t
	17,  // 447: mm.GetContactRequest.ChatRoomAccessVerifyTicket:type_name -> mm.SKBuiltinBuffer_t
	6,   // 448: mm.GetContactResponse.BaseResponse:type_name -> mm.BaseResponse
	130, // 449: mm.GetContactResponse.ContactList:type_name -> mm.ModContacts
	246, // 450: mm.GetContactResponse.Ticket:type_name -> mm.VerifyUserValidTicket
	26,  // 451: mm.GetChatroomMemberDetailRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 452: mm.GetChatroomMemberDetailResponse.BaseResponse:type_name -> mm.BaseResponse
	120, // 453: mm.GetChatroomMemberDetailResponse.NewChatroomData:type_name -> mm.ChatRoomMemberData
	26,  // 454: mm.GetChatRoomInfoDetailRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 455: mm.GetChatRoomInfoDetailResponse.BaseResponse:type_name -> mm.BaseResponse
	251, // 456: mm.GetChatRoomInfoDetailResponse.RoomTools:type_name -> mm.RoomTools
	252, // 457: mm.RoomTools.RoomToolsWxApps:type_name -> mm.RoomToolsTodo
	26,  // 458: mm.SetChatRoomAnnouncementRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 459: mm.SetChatRoomAnnouncementResponse.BaseResponse:type_name -> mm.BaseResponse
	26,  // 460: mm.ChatRoomAdminRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 461: mm.ChatRoomAdminResponse.BaseResponse:type_name -> mm.BaseResponse
	26,  // 462: mm.GetVoiceTransResRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 463: mm.GetVoiceTransResResponse.BaseResponse:type_name -> mm.BaseResponse
	259, // 464: mm.GetVoiceTransResResponse.transRes:type_name -> mm.VoiceTransRes
	260, // 465: mm.GetVoiceTransResResponse.queryCtx:type_name -> mm.QueryResCtx
	26,  // 466: mm.UploadVoiceForTransRequest.BaseRequest:type_name -> mm.BaseRequest
	263, // 467: mm.UploadVoiceForTransRequest.voiceAttr:type_name -> mm.VoiceAttr
	264, // 468: mm.UploadVoiceForTransRequest.uploadCtx:type_name -> mm.UploadVoiceCtx
	17,  // 469: mm.UploadVoiceForTransRequest.data:type_name -> mm.SKBuiltinBuffer_t
	6,   // 470: mm.UploadVoiceForTransResponse.BaseResponse:type_name -> mm.BaseResponse
	264, // 471: mm.UploadVoiceForTransResponse.uploadCtx:type_name -> mm.UploadVoiceCtx
	26,  // 472: mm.DownloadVoiceRequest.BaseRequest:type_name -> mm.BaseRequest
	17,  // 473: mm.DownloadVoiceResponse.data:type_name -> mm.SKBuiltinBuffer_t
	6,   // 474: mm.DownloadVoiceResponse.BaseResponse:type_name -> mm.BaseResponse
	26,  // 475: mm.SendAppMsgRequest.BaseRequest:type_name -> mm.BaseRequest
	269, // 476: mm.SendAppMsgRequest.msg:type_name -> mm.AppMsg
	6,   // 477: mm.SendAppMsgResponse.BaseResponse:type_name -> mm.BaseResponse
	17,  // 478: mm.AppMsg.thumb:type_name -> mm.SKBuiltinBuffer_t
	26,  // 479: mm.HongBaoReq.BaseRequest:type_name -> mm.BaseRequest
	17,  // 480: mm.HongBaoReq.reqText:type_name -> mm.SKBuiltinBuffer_t
	6,   // 481: mm.HongBaoRes.BaseResponse:type_name -> mm.BaseResponse
	17,  // 482: mm.HongBaoRes.retText:type_name -> mm.SKBuiltinBuffer_t
	26,  // 483: mm.JSLoginRequest.BaseRequest:type_name -> mm.BaseRequest
	278, // 484: mm.JSLoginRequest.extInfo:type_name -> mm.WxaExternalInfo
	6,   // 485: mm.JSLoginResponse.BaseResponse:type_name -> mm.BaseResponse
	276, // 486: mm.JSLoginResponse.jsapiBaseresponse:type_name -> mm.JSAPIBaseResponse
	277, // 487: mm.JSLoginResponse.scopeList:type_name -> mm.ScopeInfo
	26,  // 488: mm.BindEmailRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 489: mm.BindEmailResponse.BaseResponse:type_name -> mm.BaseResponse
	26,  // 490: mm.SendVerifyEmailRequest.BaseRequest:type_name -> mm.BaseRequest
	7,   // 491: mm.SendVerifyEmailRequest.userName:type_name -> mm.SKBuiltinString_t
	6,   // 492: mm.SendVerifyEmailResponse.BaseResponse:type_name -> mm.BaseResponse
	26,  // 493: mm.GeneralSetRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 494: mm.GeneralSetResponse.BaseResponse:type_name -> mm.BaseResponse
	26,  // 495: mm.BindOpMobileRequest.BaseRequest:type_name -> mm.BaseRequest
	17,  // 496: mm.BindOpMobileRequest.randomEncryKey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 497: mm.BindOpMobileRequest.spamBuffer:type_name -> mm.SKBuiltinBuffer_t
	17,  // 498: mm.BindOpMobileRequest.extSpamInfo:type_name -> mm.SKBuiltinBuffer_t
	287, // 499: mm.BindOpMobileRequest.smsUpCheckExtInfo:type_name -> mm.SmsUpCheckExtInfo
	6,   // 500: mm.BindOpMobileResponse.BaseResponse:type_name -> mm.BaseResponse
	288, // 501: mm.BindOpMobileResponse.newHostList:type_name -> mm.HostLists
	13,  // 502: mm.BindOpMobileResponse.builtinIplist:type_name -> mm.BuiltinIPList
	11,  // 503: mm.BindOpMobileResponse.networkControl:type_name -> mm.NetworkControl
	139, // 504: mm.BindOpMobileResponse.safeDeviceList:type_name -> mm.SafeDeviceList
	23,  // 505: mm.BindOpMobileResponse.showStyle:type_name -> mm.ShowStyleKey
	289, // 506: mm.HostLists.List:type_name -> mm.Host
	26,  // 507: mm.GetQRCodeRequest.BaseRequest:type_name -> mm.BaseRequest
	7,   // 508: mm.GetQRCodeRequest.userName:type_name -> mm.SKBuiltinString_t
	6,   // 509: mm.GetQRCodeResponse.BaseResponse:type_name -> mm.BaseResponse
	17,  // 510: mm.GetQRCodeResponse.qrcode:type_name -> mm.SKBuiltinBuffer_t
	26,  // 511: mm.ClickCommandRequest.BaseRequest:type_name -> mm.BaseRequest
	295, // 512: mm.ClickCommandRequest.sessionStat:type_name -> mm.SessionStat
	296, // 513: mm.ClickCommandRequest.settingPageInfo:type_name -> mm.SettingPageInfo
	6,   // 514: mm.ClickCommandResponse.BaseResponse:type_name -> mm.BaseResponse
	294, // 515: mm.ClickCommandResponse.wuRaoTips:type_name -> mm.WuRaoTips
	26,  // 516: mm.BizProfileV2Req.BaseRequest:type_name -> mm.BaseRequest
	6,   // 517: mm.BizProfileV2Resp.BaseResponse:type_name -> mm.BaseResponse
	300, // 518: mm.BizProfileV2Resp.accountInfo:type_name -> mm.BizAccountInfo
	301, // 519: mm.BizProfileV2Resp.baseInfo:type_name -> mm.BizBaseInfo
	302, // 520: mm.BizProfileV2Resp.msgList:type_name -> mm.BizMessageList
	304, // 521: mm.BizProfileV2Resp.brandInfo:type_name -> mm.BizBrandInfo
	302, // 522: mm.BizProfileV2Resp.videoList:type_name -> mm.BizMessageList
	305, // 523: mm.BizProfileV2Resp.serviceInfo:type_name -> mm.BizServiceInfo
	299, // 524: mm.BizProfileV2Resp.funcFlagWording:type_name -> mm.BizProfileV2Resp_FuncFlagDesc
	308, // 525: mm.BizProfileV2Resp.videochannelNotifyInfo:type_name -> mm.BizProfileV2Resp_ProfileNotifyInfo
	303, // 526: mm.BizMessageList.pagingInfo:type_name -> mm.BizProfileV2PagingInfo
	306, // 527: mm.BizServiceInfo.menuInfo:type_name -> mm.BizServiceMenu
	307, // 528: mm.BizServiceMenu.buttonList:type_name -> mm.BizServiceMenuButton
	6,   // 529: mm.ExtDeviceLoginConfirmGetResponse.BaseResponse:type_name -> mm.BaseResponse
	311, // 530: mm.ExtDeviceLoginConfirmGetResponse.okret:type_name -> mm.ExtDeviceLoginConfirmOKRet
	312, // 531: mm.ExtDeviceLoginConfirmGetResponse.errorRet:type_name -> mm.ExtDeviceLoginConfirmErrorRet
	313, // 532: mm.ExtDeviceLoginConfirmGetResponse.expiredRet:type_name -> mm.ExtDeviceLoginConfirmExpiredRet
	6,   // 533: mm.ExtDeviceLoginConfirmOKResponse.BaseResponse:type_name -> mm.BaseResponse
	26,  // 534: mm.UploadVideoReques.BaseRequest:type_name -> mm.BaseRequest
	17,  // 535: mm.UploadVideoReques.thumbData:type_name -> mm.SKBuiltinBuffer_t
	17,  // 536: mm.UploadVideoReques.videoData:type_name -> mm.SKBuiltinBuffer_t
	6,   // 537: mm.UploadVideoResponse.BaseResponse:type_name -> mm.BaseResponse
	26,  // 538: mm.UploadDeviceStepReq.BaseRequest:type_name -> mm.BaseRequest
	6,   // 539: mm.UploadDeviceStepResp.BaseResponse:type_name -> mm.BaseResponse
	320, // 540: mm.UploadDeviceStepResp.whiteListDevice:type_name -> mm.SportDeviceInfo
	26,  // 541: mm.GetBoundHardDevicesRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 542: mm.GetBoundHardDevicesResponse.BaseResponse:type_name -> mm.BaseResponse
	323, // 543: mm.GetBoundHardDevicesResponse.deviceList:type_name -> mm.ModHardDevice
	324, // 544: mm.ModHardDevice.hardDevice:type_name -> mm.HardDevice
	325, // 545: mm.ModHardDevice.hardDeviceAttr:type_name -> mm.HardDeviceAttr
	26,  // 546: mm.GetCertRequest.BaseRequest:type_name -> mm.BaseRequest
	17,  // 547: mm.GetCertRequest.randomEncryKey:type_name -> mm.SKBuiltinBuffer_t
	6,   // 548: mm.GetCertResponse.BaseResponse:type_name -> mm.BaseResponse
	328, // 549: mm.GetCertResponse.certValue:type_name -> mm.RSACert
	26,  // 550: mm.DownloadVideoRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 551: mm.DownloadVideoResponse.BaseResponse:type_name -> mm.BaseResponse
	17,  // 552: mm.DownloadVideoResponse.data:type_name -> mm.SKBuiltinBuffer_t
	26,  // 553: mm.GetMsgImgRequest.BaseRequest:type_name -> mm.BaseRequest
	7,   // 554: mm.GetMsgImgRequest.fromUserName:type_name -> mm.SKBuiltinString_t
	7,   // 555: mm.GetMsgImgRequest.toUserName:type_name -> mm.SKBuiltinString_t
	6,   // 556: mm.GetMsgImgResponse.BaseResponse:type_name -> mm.BaseResponse
	7,   // 557: mm.GetMsgImgResponse.fromUserName:type_name -> mm.SKBuiltinString_t
	7,   // 558: mm.GetMsgImgResponse.toUserName:type_name -> mm.SKBuiltinString_t
	17,  // 559: mm.GetMsgImgResponse.data:type_name -> mm.SKBuiltinBuffer_t
	26,  // 560: mm.DownloadAppAttachRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 561: mm.DownloadAppAttachResponse.BaseResponse:type_name -> mm.BaseResponse
	17,  // 562: mm.DownloadAppAttachResponse.data:type_name -> mm.SKBuiltinBuffer_t
	26,  // 563: mm.UploadEmojiRequest.BaseRequest:type_name -> mm.BaseRequest
	337, // 564: mm.UploadEmojiRequest.emojiItem:type_name -> mm.EmojiUploadInfoReq
	6,   // 565: mm.UploadEmojiResponse.BaseResponse:type_name -> mm.BaseResponse
	338, // 566: mm.UploadEmojiResponse.emojiItem:type_name -> mm.EmojiUploadInfoResp
	17,  // 567: mm.EmojiUploadInfoReq.emojiBuffer:type_name -> mm.SKBuiltinBuffer_t
	26,  // 568: mm.GetSafetyInfoRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 569: mm.GetSafetyInfoRespsonse.BaseResponse:type_name -> mm.BaseResponse
	341, // 570: mm.GetSafetyInfoRespsonse.info:type_name -> mm.SafetyInfo
	342, // 571: mm.SafetyInfo.devicelist:type_name -> mm.LoginDevice
	26,  // 572: mm.DelSafeDeviceRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 573: mm.DelSafeDeviceResponse.BaseResponse:type_name -> mm.BaseResponse
	26,  // 574: mm.StatusNotifyRequest.BaseRequest:type_name -> mm.BaseRequest
	347, // 575: mm.StatusNotifyRequest.unreadChatList:type_name -> mm.StatusNotifyUnreadChat
	348, // 576: mm.StatusNotifyRequest.function:type_name -> mm.StatusNotifyFunction
	348, // 577: mm.StatusNotifyRequest.unreadFunctionList:type_name -> mm.StatusNotifyFunction
	6,   // 578: mm.StatusNotifyResponse.BaseResponse:type_name -> mm.BaseResponse
	349, // 579: mm.StatusNotifyResponse.chatContactList:type_name -> mm.ChatContact
	26,  // 580: mm.RealTimeKVReportReq.BaseRequest:type_name -> mm.BaseRequest
	6,   // 581: mm.RealTimeKVReportResp.BaseResponse:type_name -> mm.BaseResponse
	26,  // 582: mm.FPRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 583: mm.FPResponse.BaseResponse:type_name -> mm.BaseResponse
	51,  // 584: mm.Test24.appFileInfo:type_name -> mm.FileInfo
	26,  // 585: mm.OauthAuthorizeReq.BaseRequest:type_name -> mm.BaseRequest
	6,   // 586: mm.OauthAuthorizeResp.BaseResponse:type_name -> mm.BaseResponse
	26,  // 587: mm.JSAPIPreVerifyRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 588: mm.JSAPIPreVerifyResponse.BaseResponse:type_name -> mm.BaseResponse
	276, // 589: mm.JSAPIPreVerifyResponse.jsapiBaseresponse:type_name -> mm.JSAPIBaseResponse
	26,  // 590: mm.F2FQrcodeRequest.BaseRequest:type_name -> mm.BaseRequest
	6,   // 591: mm.F2FQrcodeResponse.BaseResponse:type_name -> mm.BaseResponse
	361, // 592: mm.F2FQrcodeResponse.bottomItem:type_name -> mm.MenuItem
	362, // 593: mm.F2FQrcodeResponse.buyMaterialInfo:type_name -> mm.MiniProgramInfo
	26,  // 594: mm.SdkOauthAuthorizeRequest.BaseRequest:type_name -> mm.BaseRequest
	26,  // 595: mm.TenPayRequest.BaseRequest:type_name -> mm.BaseRequest
	18,  // 596: mm.TenPayRequest.reqText:type_name -> mm.SKBuiltinString_S
	18,  // 597: mm.TenPayRequest.reqTextWx:type_name -> mm.SKBuiltinString_S
	6,   // 598: mm.TenPayResponse.BaseResponse:type_name -> mm.BaseResponse
	18,  // 599: mm.TenPayResponse.reqText:type_name -> mm.SKBuiltinString_S
	26,  // 600: mm.JSOperateWxDataRequest.BaseRequest:type_name -> mm.BaseRequest
	278, // 601: mm.JSOperateWxDataRequest.extInfo:type_name -> mm.WxaExternalInfo
	6,   // 602: mm.JSOperateWxDataResponse.BaseResponse:type_name -> mm.BaseResponse
	276, // 603: mm.JSOperateWxDataResponse.jsapiBaseresponse:type_name -> mm.JSAPIBaseResponse
	277, // 604: mm.JSOperateWxDataResponse.scope:type_name -> mm.ScopeInfo
	26,  // 605: mm.GetCDNDnsRequest.BaseRequest:type_name -> mm.BaseRequest
	7,   // 606: mm.CDNDnsInfo.fontIPList:type_name -> mm.SKBuiltinString_t
	17,  // 607: mm.CDNDnsInfo.authKey:type_name -> mm.SKBuiltinBuffer_t
	7,   // 608: mm.CDNDnsInfo.zoneIPList:type_name -> mm.SKBuiltinString_t
	369, // 609: mm.CDNDnsInfo.frontIPPortList:type_name -> mm.CDNDnsPortInfo
	369, // 610: mm.CDNDnsInfo.zoneIPPortList:type_name -> mm.CDNDnsPortInfo
	17,  // 611: mm.CDNDnsInfo.newAuthkey:type_name -> mm.SKBuiltinBuffer_t
	6,   // 612: mm.GetCDNDnsResponse.BaseResponse:type_name -> mm.BaseResponse
	370, // 613: mm.GetCDNDnsResponse.dnsInfo:type_name -> mm.CDNDnsInfo
	370, // 614: mm.GetCDNDnsResponse.snsDnsInfo:type_name -> mm.CDNDnsInfo
	370, // 615: mm.GetCDNDnsResponse.appDnsInfo:type_name -> mm.CDNDnsInfo
	370, // 616: mm.GetCDNDnsResponse.fakeDnsInfo:type_name -> mm.CDNDnsInfo
	371, // 617: mm.GetCDNDnsResponse.defaultConfig:type_name -> mm.CDNClientConfig
	371, // 618: mm.GetCDNDnsResponse.disasterConfig:type_name -> mm.CDNClientConfig
	26,  // 619: mm.BindQQRequest.BaseRequest:type_name -> mm.BaseRequest
	7,   // 620: mm.BindQQRequest.imageEncKey:type_name -> mm.SKBuiltinString_t
	17,  // 621: mm.BindQQRequest.ksid:type_name -> mm.SKBuiltinBuffer_t
	17,  // 622: mm.BindQQRequest.wtLoginReqBuff:type_name -> mm.SKBuiltinBuffer_t
	6,   // 623: mm.BindQQResponse.BaseResponse:type_name -> mm.BaseResponse
	17,  // 624: mm.BindQQResponse.imageBuff:type_name -> mm.SKBuiltinBuffer_t
	17,  // 625: mm.BindQQResponse.imageEncKey:type_name -> mm.SKBuiltinBuffer_t
	17,  // 626: mm.BindQQResponse.a2Key:type_name -> mm.SKBuiltinBuffer_t
	17,  // 627: mm.BindQQResponse.ksid:type_name -> mm.SKBuiltinBuffer_t
	139, // 628: mm.BindQQResponse.safeDeviceList:type_name -> mm.SafeDeviceList
	17,  // 629: mm.BindQQResponse.wtLoginReqBuff:type_name -> mm.SKBuiltinBuffer_t
	630, // [630:630] is the sub-list for method output_type
	630, // [630:630] is the sub-list for method input_type
	630, // [630:630] is the sub-list for extension type_name
	630, // [630:630] is the sub-list for extension extendee
	0,   // [0:630] is the sub-list for field type_name
}

func init() { file_mm_proto_init() }
func file_mm_proto_init() {
	if File_mm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SKBuiltinStringT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsBufferUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealHostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuiltinIPList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkSectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AxAuthSecRespList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifyAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SKBuiltinBufferT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SKBuiltinString_S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SKBuiltinBuffer_K); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECDHKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WTLoginImgRespInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxVerifyCodeRespInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowStyleKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthSectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctSectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveWxaHBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveWxaHBResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoginQRCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoginQRCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridEcdhRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridEcdhResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridEcdhReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridEcdhResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualAuthRsaReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WTLoginImgReqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxVerifyCodeReqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseAuthReqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualAuthAesReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecManualLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecAutoLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLoginQRCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLoginQRCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginQRCodeNotifyPkg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginQRCodeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidSpamDataBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCcdDataBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpamDataBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WCExtInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wcaes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewClientCheckData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoAuthRsaReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoAuthAesReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushLoginURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}

		file_mm_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSendMsgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSendMsgRespone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMsgResponeNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeMsgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeMsgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoAuthKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsCommentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsRedEnvelops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreDownloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsWeAppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetA8KeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetA8KeyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSAPIPermissionBitSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralControlBitSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizScopeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizApiInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepLinkBitSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwitterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsPostCtocUploadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsPostOperationFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanvasInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsPostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsObjectOpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsObjectOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsObjectOpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsActionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsEmojiInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemindFriendsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsTimeLineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsTimeLineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsAdExpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsUserPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsUserPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomizedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalContactList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedinContactItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRoomMemberData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRoomMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneNumListInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadMsgImgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadMsgImgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisturbTimeSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisturbSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GmailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GmailList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModContacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModMsgStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChatContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelContactMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModUserImg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafeDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafeDeviceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternLockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogOutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogOutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFavItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetFavItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetFavItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDelFavItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDelFavItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelFavItemRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchContactItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenIMContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenIMContactCustomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadMContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadMContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactLabelListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactLabelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddContactLabelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddContactLabelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyContactLabelListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyContactLabelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLabelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelContactLabelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelContactLabelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContactLabelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContactLabelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OplogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OplogRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsObjectDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsObjectDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrustDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrustData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrustReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrustSoftData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrustResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrustResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FPFresh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZTData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadVoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadVoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitChatRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadHDHeadImgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadHDHeadImgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyPswdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyPswdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPwdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPwdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacingCreateChatRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacingCreateChatRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRoomMemberInfoSimple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddChatRoomMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddChatRoomMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChatRoomMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChatRoomMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMFriendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FBFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivacySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendCirclePrivacySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFavInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFavInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderBaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUserPrepareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUserPrepareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderNicknameVerifyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderContactExtInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderAuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUserPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUserPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMediaSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMediaExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderExtendedReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCommentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderRecommendInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyUserValidTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatroomMemberDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatroomMemberDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatRoomInfoDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatRoomInfoDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomTools); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomToolsTodo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatRoomAnnouncementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatRoomAnnouncementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRoomAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRoomAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVoiceTransResRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVoiceTransResResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceTransRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResCtx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadVoiceForTransRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadVoiceForTransResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadVoiceCtx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadVoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadVoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendAppMsgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendAppMsgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HongBaoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HongBaoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wcstf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wcste); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSAPIBaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaExternalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendVerifyEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendVerifyEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindOpMobileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindOpMobileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmsUpCheckExtInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostLists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQRCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQRCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WuRaoTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingPageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizProfileV2Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizProfileV2Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizProfileV2Resp_FuncFlagDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizAccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizMessageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizProfileV2PagingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizBrandInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizServiceMenu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizServiceMenuButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizProfileV2Resp_ProfileNotifyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtDeviceLoginConfirmGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtDeviceLoginConfirmGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtDeviceLoginConfirmOKRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtDeviceLoginConfirmErrorRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtDeviceLoginConfirmExpiredRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtDeviceLoginConfirmOKRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtDeviceLoginConfirmOKResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadVideoReques); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadDeviceStepReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadDeviceStepResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SportDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoundHardDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoundHardDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModHardDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardDeviceAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RSACert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMsgImgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMsgImgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadAppAttachRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadAppAttachResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadEmojiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadEmojiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmojiUploadInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmojiUploadInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSafetyInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSafetyInfoRespsonse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafetyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSafeDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSafeDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusNotifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusNotifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusNotifyUnreadChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusNotifyFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealTimeKVReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealTimeKVReportResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test24); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OauthAuthorizeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OauthAuthorizeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSAPIPreVerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSAPIPreVerifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FQrcodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FQrcodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniProgramInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOauthAuthorizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenPayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenPayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSOperateWxDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSOperateWxDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCDNDnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDNDnsPortInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDNDnsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDNClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCDNDnsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindQQRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mm_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindQQResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mm_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   369,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mm_proto_goTypes,
		DependencyIndexes: file_mm_proto_depIdxs,
		EnumInfos:         file_mm_proto_enumTypes,
		MessageInfos:      file_mm_proto_msgTypes,
	}.Build()
	File_mm_proto = out.File
	file_mm_proto_rawDesc = nil
	file_mm_proto_goTypes = nil
	file_mm_proto_depIdxs = nil
}
